"use strict";
(() => {
  // node_modules/@marijn/find-cluster-break/src/index.js
  var rangeFrom = [];
  var rangeTo = [];
  (() => {
    let numbers = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((s) => s ? parseInt(s, 36) : 1);
    for (let i = 0, n = 0; i < numbers.length; i++)
      (i % 2 ? rangeTo : rangeFrom).push(n = n + numbers[i]);
  })();
  function isExtendingChar(code) {
    if (code < 768) return false;
    for (let from = 0, to = rangeFrom.length; ; ) {
      let mid = from + to >> 1;
      if (code < rangeFrom[mid]) to = mid;
      else if (code >= rangeTo[mid]) from = mid + 1;
      else return true;
      if (from == to) return false;
    }
  }
  function isRegionalIndicator(code) {
    return code >= 127462 && code <= 127487;
  }
  var ZWJ = 8205;
  function findClusterBreak(str, pos, forward = true, includeExtending = true) {
    return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
  }
  function nextClusterBreak(str, pos, includeExtending) {
    if (pos == str.length) return pos;
    if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1))) pos--;
    let prev = codePointAt(str, pos);
    pos += codePointSize(prev);
    while (pos < str.length) {
      let next = codePointAt(str, pos);
      if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
        pos += codePointSize(next);
        prev = next;
      } else if (isRegionalIndicator(next)) {
        let countBefore = 0, i = pos - 2;
        while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
          countBefore++;
          i -= 2;
        }
        if (countBefore % 2 == 0) break;
        else pos += 2;
      } else {
        break;
      }
    }
    return pos;
  }
  function prevClusterBreak(str, pos, includeExtending) {
    while (pos > 0) {
      let found = nextClusterBreak(str, pos - 2, includeExtending);
      if (found < pos) return found;
      pos--;
    }
    return 0;
  }
  function codePointAt(str, pos) {
    let code0 = str.charCodeAt(pos);
    if (!surrogateHigh(code0) || pos + 1 == str.length) return code0;
    let code1 = str.charCodeAt(pos + 1);
    if (!surrogateLow(code1)) return code0;
    return (code0 - 55296 << 10) + (code1 - 56320) + 65536;
  }
  function surrogateLow(ch) {
    return ch >= 56320 && ch < 57344;
  }
  function surrogateHigh(ch) {
    return ch >= 55296 && ch < 56320;
  }
  function codePointSize(code) {
    return code < 65536 ? 1 : 2;
  }

  // node_modules/@codemirror/state/dist/index.js
  var Text = class _Text {
    /**
    Get the line description around the given position.
    */
    lineAt(pos) {
      if (pos < 0 || pos > this.length)
        throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
      return this.lineInner(pos, false, 1, 0);
    }
    /**
    Get the description for the given (1-based) line number.
    */
    line(n) {
      if (n < 1 || n > this.lines)
        throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
      return this.lineInner(n, true, 1, 0);
    }
    /**
    Replace a range of the text with the given content.
    */
    replace(from, to, text) {
      [from, to] = clip(this, from, to);
      let parts = [];
      this.decompose(
        0,
        from,
        parts,
        2
        /* Open.To */
      );
      if (text.length)
        text.decompose(
          0,
          text.length,
          parts,
          1 | 2
          /* Open.To */
        );
      this.decompose(
        to,
        this.length,
        parts,
        1
        /* Open.From */
      );
      return TextNode.from(parts, this.length - (to - from) + text.length);
    }
    /**
    Append another document to this one.
    */
    append(other) {
      return this.replace(this.length, this.length, other);
    }
    /**
    Retrieve the text between the given points.
    */
    slice(from, to = this.length) {
      [from, to] = clip(this, from, to);
      let parts = [];
      this.decompose(from, to, parts, 0);
      return TextNode.from(parts, to - from);
    }
    /**
    Test whether this text is equal to another instance.
    */
    eq(other) {
      if (other == this)
        return true;
      if (other.length != this.length || other.lines != this.lines)
        return false;
      let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
      let a = new RawTextCursor(this), b = new RawTextCursor(other);
      for (let skip = start, pos = start; ; ) {
        a.next(skip);
        b.next(skip);
        skip = 0;
        if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
          return false;
        pos += a.value.length;
        if (a.done || pos >= end)
          return true;
      }
    }
    /**
    Iterate over the text. When `dir` is `-1`, iteration happens
    from end to start. This will return lines and the breaks between
    them as separate strings.
    */
    iter(dir = 1) {
      return new RawTextCursor(this, dir);
    }
    /**
    Iterate over a range of the text. When `from` > `to`, the
    iterator will run in reverse.
    */
    iterRange(from, to = this.length) {
      return new PartialTextCursor(this, from, to);
    }
    /**
    Return a cursor that iterates over the given range of lines,
    _without_ returning the line breaks between, and yielding empty
    strings for empty lines.
    
    When `from` and `to` are given, they should be 1-based line numbers.
    */
    iterLines(from, to) {
      let inner;
      if (from == null) {
        inner = this.iter();
      } else {
        if (to == null)
          to = this.lines + 1;
        let start = this.line(from).from;
        inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
      }
      return new LineCursor(inner);
    }
    /**
    Return the document as a string, using newline characters to
    separate lines.
    */
    toString() {
      return this.sliceString(0);
    }
    /**
    Convert the document to an array of lines (which can be
    deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
    */
    toJSON() {
      let lines = [];
      this.flatten(lines);
      return lines;
    }
    /**
    @internal
    */
    constructor() {
    }
    /**
    Create a `Text` instance for the given array of lines.
    */
    static of(text) {
      if (text.length == 0)
        throw new RangeError("A document must have at least one line");
      if (text.length == 1 && !text[0])
        return _Text.empty;
      return text.length <= 32 ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
    }
  };
  var TextLeaf = class _TextLeaf extends Text {
    constructor(text, length2 = textLength(text)) {
      super();
      this.text = text;
      this.length = length2;
    }
    get lines() {
      return this.text.length;
    }
    get children() {
      return null;
    }
    lineInner(target, isLine, line, offset) {
      for (let i = 0; ; i++) {
        let string2 = this.text[i], end = offset + string2.length;
        if ((isLine ? line : end) >= target)
          return new Line(offset, end, line, string2);
        offset = end + 1;
        line++;
      }
    }
    decompose(from, to, target, open) {
      let text = from <= 0 && to >= this.length ? this : new _TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
      if (open & 1) {
        let prev = target.pop();
        let joined = appendText(text.text, prev.text.slice(), 0, text.length);
        if (joined.length <= 32) {
          target.push(new _TextLeaf(joined, prev.length + text.length));
        } else {
          let mid = joined.length >> 1;
          target.push(new _TextLeaf(joined.slice(0, mid)), new _TextLeaf(joined.slice(mid)));
        }
      } else {
        target.push(text);
      }
    }
    replace(from, to, text) {
      if (!(text instanceof _TextLeaf))
        return super.replace(from, to, text);
      [from, to] = clip(this, from, to);
      let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
      let newLen = this.length + text.length - (to - from);
      if (lines.length <= 32)
        return new _TextLeaf(lines, newLen);
      return TextNode.from(_TextLeaf.split(lines, []), newLen);
    }
    sliceString(from, to = this.length, lineSep = "\n") {
      [from, to] = clip(this, from, to);
      let result = "";
      for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
        let line = this.text[i], end = pos + line.length;
        if (pos > from && i)
          result += lineSep;
        if (from < end && to > pos)
          result += line.slice(Math.max(0, from - pos), to - pos);
        pos = end + 1;
      }
      return result;
    }
    flatten(target) {
      for (let line of this.text)
        target.push(line);
    }
    scanIdentical() {
      return 0;
    }
    static split(text, target) {
      let part = [], len = -1;
      for (let line of text) {
        part.push(line);
        len += line.length + 1;
        if (part.length == 32) {
          target.push(new _TextLeaf(part, len));
          part = [];
          len = -1;
        }
      }
      if (len > -1)
        target.push(new _TextLeaf(part, len));
      return target;
    }
  };
  var TextNode = class _TextNode extends Text {
    constructor(children, length2) {
      super();
      this.children = children;
      this.length = length2;
      this.lines = 0;
      for (let child of children)
        this.lines += child.lines;
    }
    lineInner(target, isLine, line, offset) {
      for (let i = 0; ; i++) {
        let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
        if ((isLine ? endLine : end) >= target)
          return child.lineInner(target, isLine, line, offset);
        offset = end + 1;
        line = endLine + 1;
      }
    }
    decompose(from, to, target, open) {
      for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
        let child = this.children[i], end = pos + child.length;
        if (from <= end && to >= pos) {
          let childOpen = open & ((pos <= from ? 1 : 0) | (end >= to ? 2 : 0));
          if (pos >= from && end <= to && !childOpen)
            target.push(child);
          else
            child.decompose(from - pos, to - pos, target, childOpen);
        }
        pos = end + 1;
      }
    }
    replace(from, to, text) {
      [from, to] = clip(this, from, to);
      if (text.lines < this.lines)
        for (let i = 0, pos = 0; i < this.children.length; i++) {
          let child = this.children[i], end = pos + child.length;
          if (from >= pos && to <= end) {
            let updated = child.replace(from - pos, to - pos, text);
            let totalLines = this.lines - child.lines + updated.lines;
            if (updated.lines < totalLines >> 5 - 1 && updated.lines > totalLines >> 5 + 1) {
              let copy = this.children.slice();
              copy[i] = updated;
              return new _TextNode(copy, this.length - (to - from) + text.length);
            }
            return super.replace(pos, end, updated);
          }
          pos = end + 1;
        }
      return super.replace(from, to, text);
    }
    sliceString(from, to = this.length, lineSep = "\n") {
      [from, to] = clip(this, from, to);
      let result = "";
      for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
        let child = this.children[i], end = pos + child.length;
        if (pos > from && i)
          result += lineSep;
        if (from < end && to > pos)
          result += child.sliceString(from - pos, to - pos, lineSep);
        pos = end + 1;
      }
      return result;
    }
    flatten(target) {
      for (let child of this.children)
        child.flatten(target);
    }
    scanIdentical(other, dir) {
      if (!(other instanceof _TextNode))
        return 0;
      let length2 = 0;
      let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1];
      for (; ; iA += dir, iB += dir) {
        if (iA == eA || iB == eB)
          return length2;
        let chA = this.children[iA], chB = other.children[iB];
        if (chA != chB)
          return length2 + chA.scanIdentical(chB, dir);
        length2 += chA.length + 1;
      }
    }
    static from(children, length2 = children.reduce((l, ch) => l + ch.length + 1, -1)) {
      let lines = 0;
      for (let ch of children)
        lines += ch.lines;
      if (lines < 32) {
        let flat = [];
        for (let ch of children)
          ch.flatten(flat);
        return new TextLeaf(flat, length2);
      }
      let chunk = Math.max(
        32,
        lines >> 5
        /* Tree.BranchShift */
      ), maxChunk = chunk << 1, minChunk = chunk >> 1;
      let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
      function add3(child) {
        let last;
        if (child.lines > maxChunk && child instanceof _TextNode) {
          for (let node of child.children)
            add3(node);
        } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
          flush();
          chunked.push(child);
        } else if (child instanceof TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last.lines <= 32) {
          currentLines += child.lines;
          currentLen += child.length + 1;
          currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
        } else {
          if (currentLines + child.lines > chunk)
            flush();
          currentLines += child.lines;
          currentLen += child.length + 1;
          currentChunk.push(child);
        }
      }
      function flush() {
        if (currentLines == 0)
          return;
        chunked.push(currentChunk.length == 1 ? currentChunk[0] : _TextNode.from(currentChunk, currentLen));
        currentLen = -1;
        currentLines = currentChunk.length = 0;
      }
      for (let child of children)
        add3(child);
      flush();
      return chunked.length == 1 ? chunked[0] : new _TextNode(chunked, length2);
    }
  };
  Text.empty = /* @__PURE__ */ new TextLeaf([""], 0);
  function textLength(text) {
    let length2 = -1;
    for (let line of text)
      length2 += line.length + 1;
    return length2;
  }
  function appendText(text, target, from = 0, to = 1e9) {
    for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
      let line = text[i], end = pos + line.length;
      if (end >= from) {
        if (end > to)
          line = line.slice(0, to - pos);
        if (pos < from)
          line = line.slice(from - pos);
        if (first) {
          target[target.length - 1] += line;
          first = false;
        } else
          target.push(line);
      }
      pos = end + 1;
    }
    return target;
  }
  function sliceText(text, from, to) {
    return appendText(text, [""], from, to);
  }
  var RawTextCursor = class {
    constructor(text, dir = 1) {
      this.dir = dir;
      this.done = false;
      this.lineBreak = false;
      this.value = "";
      this.nodes = [text];
      this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
    }
    nextInner(skip, dir) {
      this.done = this.lineBreak = false;
      for (; ; ) {
        let last = this.nodes.length - 1;
        let top2 = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
        let size = top2 instanceof TextLeaf ? top2.text.length : top2.children.length;
        if (offset == (dir > 0 ? size : 0)) {
          if (last == 0) {
            this.done = true;
            this.value = "";
            return this;
          }
          if (dir > 0)
            this.offsets[last - 1]++;
          this.nodes.pop();
          this.offsets.pop();
        } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
          this.offsets[last] += dir;
          if (skip == 0) {
            this.lineBreak = true;
            this.value = "\n";
            return this;
          }
          skip--;
        } else if (top2 instanceof TextLeaf) {
          let next = top2.text[offset + (dir < 0 ? -1 : 0)];
          this.offsets[last] += dir;
          if (next.length > Math.max(0, skip)) {
            this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
            return this;
          }
          skip -= next.length;
        } else {
          let next = top2.children[offset + (dir < 0 ? -1 : 0)];
          if (skip > next.length) {
            skip -= next.length;
            this.offsets[last] += dir;
          } else {
            if (dir < 0)
              this.offsets[last]--;
            this.nodes.push(next);
            this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
          }
        }
      }
    }
    next(skip = 0) {
      if (skip < 0) {
        this.nextInner(-skip, -this.dir);
        skip = this.value.length;
      }
      return this.nextInner(skip, this.dir);
    }
  };
  var PartialTextCursor = class {
    constructor(text, start, end) {
      this.value = "";
      this.done = false;
      this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
      this.pos = start > end ? text.length : 0;
      this.from = Math.min(start, end);
      this.to = Math.max(start, end);
    }
    nextInner(skip, dir) {
      if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
        this.value = "";
        this.done = true;
        return this;
      }
      skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
      let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
      if (skip > limit)
        skip = limit;
      limit -= skip;
      let { value } = this.cursor.next(skip);
      this.pos += (value.length + skip) * dir;
      this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
      this.done = !this.value;
      return this;
    }
    next(skip = 0) {
      if (skip < 0)
        skip = Math.max(skip, this.from - this.pos);
      else if (skip > 0)
        skip = Math.min(skip, this.to - this.pos);
      return this.nextInner(skip, this.cursor.dir);
    }
    get lineBreak() {
      return this.cursor.lineBreak && this.value != "";
    }
  };
  var LineCursor = class {
    constructor(inner) {
      this.inner = inner;
      this.afterBreak = true;
      this.value = "";
      this.done = false;
    }
    next(skip = 0) {
      let { done, lineBreak, value } = this.inner.next(skip);
      if (done && this.afterBreak) {
        this.value = "";
        this.afterBreak = false;
      } else if (done) {
        this.done = true;
        this.value = "";
      } else if (lineBreak) {
        if (this.afterBreak) {
          this.value = "";
        } else {
          this.afterBreak = true;
          this.next();
        }
      } else {
        this.value = value;
        this.afterBreak = false;
      }
      return this;
    }
    get lineBreak() {
      return false;
    }
  };
  if (typeof Symbol != "undefined") {
    Text.prototype[Symbol.iterator] = function() {
      return this.iter();
    };
    RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function() {
      return this;
    };
  }
  var Line = class {
    /**
    @internal
    */
    constructor(from, to, number2, text) {
      this.from = from;
      this.to = to;
      this.number = number2;
      this.text = text;
    }
    /**
    The length of the line (not including any line break after it).
    */
    get length() {
      return this.to - this.from;
    }
  };
  function clip(text, from, to) {
    from = Math.max(0, Math.min(text.length, from));
    return [from, Math.max(from, Math.min(text.length, to))];
  }
  function findClusterBreak2(str, pos, forward = true, includeExtending = true) {
    return findClusterBreak(str, pos, forward, includeExtending);
  }
  function surrogateLow2(ch) {
    return ch >= 56320 && ch < 57344;
  }
  function surrogateHigh2(ch) {
    return ch >= 55296 && ch < 56320;
  }
  function codePointAt2(str, pos) {
    let code0 = str.charCodeAt(pos);
    if (!surrogateHigh2(code0) || pos + 1 == str.length)
      return code0;
    let code1 = str.charCodeAt(pos + 1);
    if (!surrogateLow2(code1))
      return code0;
    return (code0 - 55296 << 10) + (code1 - 56320) + 65536;
  }
  function fromCodePoint(code) {
    if (code <= 65535)
      return String.fromCharCode(code);
    code -= 65536;
    return String.fromCharCode((code >> 10) + 55296, (code & 1023) + 56320);
  }
  function codePointSize2(code) {
    return code < 65536 ? 1 : 2;
  }
  var DefaultSplit = /\r\n?|\n/;
  var MapMode = /* @__PURE__ */ function(MapMode2) {
    MapMode2[MapMode2["Simple"] = 0] = "Simple";
    MapMode2[MapMode2["TrackDel"] = 1] = "TrackDel";
    MapMode2[MapMode2["TrackBefore"] = 2] = "TrackBefore";
    MapMode2[MapMode2["TrackAfter"] = 3] = "TrackAfter";
    return MapMode2;
  }(MapMode || (MapMode = {}));
  var ChangeDesc = class _ChangeDesc {
    // Sections are encoded as pairs of integers. The first is the
    // length in the current document, and the second is -1 for
    // unaffected sections, and the length of the replacement content
    // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
    // 0), and a replacement two positive numbers.
    /**
    @internal
    */
    constructor(sections) {
      this.sections = sections;
    }
    /**
    The length of the document before the change.
    */
    get length() {
      let result = 0;
      for (let i = 0; i < this.sections.length; i += 2)
        result += this.sections[i];
      return result;
    }
    /**
    The length of the document after the change.
    */
    get newLength() {
      let result = 0;
      for (let i = 0; i < this.sections.length; i += 2) {
        let ins = this.sections[i + 1];
        result += ins < 0 ? this.sections[i] : ins;
      }
      return result;
    }
    /**
    False when there are actual changes in this set.
    */
    get empty() {
      return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
    }
    /**
    Iterate over the unchanged parts left by these changes. `posA`
    provides the position of the range in the old document, `posB`
    the new position in the changed document.
    */
    iterGaps(f) {
      for (let i = 0, posA = 0, posB = 0; i < this.sections.length; ) {
        let len = this.sections[i++], ins = this.sections[i++];
        if (ins < 0) {
          f(posA, posB, len);
          posB += len;
        } else {
          posB += ins;
        }
        posA += len;
      }
    }
    /**
    Iterate over the ranges changed by these changes. (See
    [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
    variant that also provides you with the inserted text.)
    `fromA`/`toA` provides the extent of the change in the starting
    document, `fromB`/`toB` the extent of the replacement in the
    changed document.
    
    When `individual` is true, adjacent changes (which are kept
    separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
    reported separately.
    */
    iterChangedRanges(f, individual = false) {
      iterChanges(this, f, individual);
    }
    /**
    Get a description of the inverted form of these changes.
    */
    get invertedDesc() {
      let sections = [];
      for (let i = 0; i < this.sections.length; ) {
        let len = this.sections[i++], ins = this.sections[i++];
        if (ins < 0)
          sections.push(len, ins);
        else
          sections.push(ins, len);
      }
      return new _ChangeDesc(sections);
    }
    /**
    Compute the combined effect of applying another set of changes
    after this one. The length of the document after this set should
    match the length before `other`.
    */
    composeDesc(other) {
      return this.empty ? other : other.empty ? this : composeSets(this, other);
    }
    /**
    Map this description, which should start with the same document
    as `other`, over another set of changes, so that it can be
    applied after it. When `before` is true, map as if the changes
    in `this` happened before the ones in `other`.
    */
    mapDesc(other, before = false) {
      return other.empty ? this : mapSet(this, other, before);
    }
    mapPos(pos, assoc = -1, mode = MapMode.Simple) {
      let posA = 0, posB = 0;
      for (let i = 0; i < this.sections.length; ) {
        let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
        if (ins < 0) {
          if (endA > pos)
            return posB + (pos - posA);
          posB += len;
        } else {
          if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos))
            return null;
          if (endA > pos || endA == pos && assoc < 0 && !len)
            return pos == posA || assoc < 0 ? posB : posB + ins;
          posB += ins;
        }
        posA = endA;
      }
      if (pos > posA)
        throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
      return posB;
    }
    /**
    Check whether these changes touch a given range. When one of the
    changes entirely covers the range, the string `"cover"` is
    returned.
    */
    touchesRange(from, to = from) {
      for (let i = 0, pos = 0; i < this.sections.length && pos <= to; ) {
        let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
        if (ins >= 0 && pos <= to && end >= from)
          return pos < from && end > to ? "cover" : true;
        pos = end;
      }
      return false;
    }
    /**
    @internal
    */
    toString() {
      let result = "";
      for (let i = 0; i < this.sections.length; ) {
        let len = this.sections[i++], ins = this.sections[i++];
        result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
      }
      return result;
    }
    /**
    Serialize this change desc to a JSON-representable value.
    */
    toJSON() {
      return this.sections;
    }
    /**
    Create a change desc from its JSON representation (as produced
    by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
    */
    static fromJSON(json) {
      if (!Array.isArray(json) || json.length % 2 || json.some((a) => typeof a != "number"))
        throw new RangeError("Invalid JSON representation of ChangeDesc");
      return new _ChangeDesc(json);
    }
    /**
    @internal
    */
    static create(sections) {
      return new _ChangeDesc(sections);
    }
  };
  var ChangeSet = class _ChangeSet extends ChangeDesc {
    constructor(sections, inserted) {
      super(sections);
      this.inserted = inserted;
    }
    /**
    Apply the changes to a document, returning the modified
    document.
    */
    apply(doc2) {
      if (this.length != doc2.length)
        throw new RangeError("Applying change set to a document with the wrong length");
      iterChanges(this, (fromA, toA, fromB, _toB, text) => doc2 = doc2.replace(fromB, fromB + (toA - fromA), text), false);
      return doc2;
    }
    mapDesc(other, before = false) {
      return mapSet(this, other, before, true);
    }
    /**
    Given the document as it existed _before_ the changes, return a
    change set that represents the inverse of this set, which could
    be used to go from the document created by the changes back to
    the document as it existed before the changes.
    */
    invert(doc2) {
      let sections = this.sections.slice(), inserted = [];
      for (let i = 0, pos = 0; i < sections.length; i += 2) {
        let len = sections[i], ins = sections[i + 1];
        if (ins >= 0) {
          sections[i] = ins;
          sections[i + 1] = len;
          let index = i >> 1;
          while (inserted.length < index)
            inserted.push(Text.empty);
          inserted.push(len ? doc2.slice(pos, pos + len) : Text.empty);
        }
        pos += len;
      }
      return new _ChangeSet(sections, inserted);
    }
    /**
    Combine two subsequent change sets into a single set. `other`
    must start in the document produced by `this`. If `this` goes
    `docA` → `docB` and `other` represents `docB` → `docC`, the
    returned value will represent the change `docA` → `docC`.
    */
    compose(other) {
      return this.empty ? other : other.empty ? this : composeSets(this, other, true);
    }
    /**
    Given another change set starting in the same document, maps this
    change set over the other, producing a new change set that can be
    applied to the document produced by applying `other`. When
    `before` is `true`, order changes as if `this` comes before
    `other`, otherwise (the default) treat `other` as coming first.
    
    Given two changes `A` and `B`, `A.compose(B.map(A))` and
    `B.compose(A.map(B, true))` will produce the same document. This
    provides a basic form of [operational
    transformation](https://en.wikipedia.org/wiki/Operational_transformation),
    and can be used for collaborative editing.
    */
    map(other, before = false) {
      return other.empty ? this : mapSet(this, other, before, true);
    }
    /**
    Iterate over the changed ranges in the document, calling `f` for
    each, with the range in the original document (`fromA`-`toA`)
    and the range that replaces it in the new document
    (`fromB`-`toB`).
    
    When `individual` is true, adjacent changes are reported
    separately.
    */
    iterChanges(f, individual = false) {
      iterChanges(this, f, individual);
    }
    /**
    Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
    set.
    */
    get desc() {
      return ChangeDesc.create(this.sections);
    }
    /**
    @internal
    */
    filter(ranges) {
      let resultSections = [], resultInserted = [], filteredSections = [];
      let iter = new SectionIter(this);
      done: for (let i = 0, pos = 0; ; ) {
        let next = i == ranges.length ? 1e9 : ranges[i++];
        while (pos < next || pos == next && iter.len == 0) {
          if (iter.done)
            break done;
          let len = Math.min(iter.len, next - pos);
          addSection(filteredSections, len, -1);
          let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
          addSection(resultSections, len, ins);
          if (ins > 0)
            addInsert(resultInserted, resultSections, iter.text);
          iter.forward(len);
          pos += len;
        }
        let end = ranges[i++];
        while (pos < end) {
          if (iter.done)
            break done;
          let len = Math.min(iter.len, end - pos);
          addSection(resultSections, len, -1);
          addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
          iter.forward(len);
          pos += len;
        }
      }
      return {
        changes: new _ChangeSet(resultSections, resultInserted),
        filtered: ChangeDesc.create(filteredSections)
      };
    }
    /**
    Serialize this change set to a JSON-representable value.
    */
    toJSON() {
      let parts = [];
      for (let i = 0; i < this.sections.length; i += 2) {
        let len = this.sections[i], ins = this.sections[i + 1];
        if (ins < 0)
          parts.push(len);
        else if (ins == 0)
          parts.push([len]);
        else
          parts.push([len].concat(this.inserted[i >> 1].toJSON()));
      }
      return parts;
    }
    /**
    Create a change set for the given changes, for a document of the
    given length, using `lineSep` as line separator.
    */
    static of(changes, length2, lineSep) {
      let sections = [], inserted = [], pos = 0;
      let total = null;
      function flush(force = false) {
        if (!force && !sections.length)
          return;
        if (pos < length2)
          addSection(sections, length2 - pos, -1);
        let set = new _ChangeSet(sections, inserted);
        total = total ? total.compose(set.map(total)) : set;
        sections = [];
        inserted = [];
        pos = 0;
      }
      function process2(spec) {
        if (Array.isArray(spec)) {
          for (let sub2 of spec)
            process2(sub2);
        } else if (spec instanceof _ChangeSet) {
          if (spec.length != length2)
            throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length2})`);
          flush();
          total = total ? total.compose(spec.map(total)) : spec;
        } else {
          let { from, to = from, insert: insert2 } = spec;
          if (from > to || from < 0 || to > length2)
            throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length2})`);
          let insText = !insert2 ? Text.empty : typeof insert2 == "string" ? Text.of(insert2.split(lineSep || DefaultSplit)) : insert2;
          let insLen = insText.length;
          if (from == to && insLen == 0)
            return;
          if (from < pos)
            flush();
          if (from > pos)
            addSection(sections, from - pos, -1);
          addSection(sections, to - from, insLen);
          addInsert(inserted, sections, insText);
          pos = to;
        }
      }
      process2(changes);
      flush(!total);
      return total;
    }
    /**
    Create an empty changeset of the given length.
    */
    static empty(length2) {
      return new _ChangeSet(length2 ? [length2, -1] : [], []);
    }
    /**
    Create a changeset from its JSON representation (as produced by
    [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
    */
    static fromJSON(json) {
      if (!Array.isArray(json))
        throw new RangeError("Invalid JSON representation of ChangeSet");
      let sections = [], inserted = [];
      for (let i = 0; i < json.length; i++) {
        let part = json[i];
        if (typeof part == "number") {
          sections.push(part, -1);
        } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i2) => i2 && typeof e != "string")) {
          throw new RangeError("Invalid JSON representation of ChangeSet");
        } else if (part.length == 1) {
          sections.push(part[0], 0);
        } else {
          while (inserted.length < i)
            inserted.push(Text.empty);
          inserted[i] = Text.of(part.slice(1));
          sections.push(part[0], inserted[i].length);
        }
      }
      return new _ChangeSet(sections, inserted);
    }
    /**
    @internal
    */
    static createSet(sections, inserted) {
      return new _ChangeSet(sections, inserted);
    }
  };
  function addSection(sections, len, ins, forceJoin = false) {
    if (len == 0 && ins <= 0)
      return;
    let last = sections.length - 2;
    if (last >= 0 && ins <= 0 && ins == sections[last + 1])
      sections[last] += len;
    else if (last >= 0 && len == 0 && sections[last] == 0)
      sections[last + 1] += ins;
    else if (forceJoin) {
      sections[last] += len;
      sections[last + 1] += ins;
    } else
      sections.push(len, ins);
  }
  function addInsert(values, sections, value) {
    if (value.length == 0)
      return;
    let index = sections.length - 2 >> 1;
    if (index < values.length) {
      values[values.length - 1] = values[values.length - 1].append(value);
    } else {
      while (values.length < index)
        values.push(Text.empty);
      values.push(value);
    }
  }
  function iterChanges(desc, f, individual) {
    let inserted = desc.inserted;
    for (let posA = 0, posB = 0, i = 0; i < desc.sections.length; ) {
      let len = desc.sections[i++], ins = desc.sections[i++];
      if (ins < 0) {
        posA += len;
        posB += len;
      } else {
        let endA = posA, endB = posB, text = Text.empty;
        for (; ; ) {
          endA += len;
          endB += ins;
          if (ins && inserted)
            text = text.append(inserted[i - 2 >> 1]);
          if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
            break;
          len = desc.sections[i++];
          ins = desc.sections[i++];
        }
        f(posA, endA, posB, endB, text);
        posA = endA;
        posB = endB;
      }
    }
  }
  function mapSet(setA, setB, before, mkSet = false) {
    let sections = [], insert2 = mkSet ? [] : null;
    let a = new SectionIter(setA), b = new SectionIter(setB);
    for (let inserted = -1; ; ) {
      if (a.done && b.len || b.done && a.len) {
        throw new Error("Mismatched change set lengths");
      } else if (a.ins == -1 && b.ins == -1) {
        let len = Math.min(a.len, b.len);
        addSection(sections, len, -1);
        a.forward(len);
        b.forward(len);
      } else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
        let len = b.len;
        addSection(sections, b.ins, -1);
        while (len) {
          let piece = Math.min(a.len, len);
          if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
            addSection(sections, 0, a.ins);
            if (insert2)
              addInsert(insert2, sections, a.text);
            inserted = a.i;
          }
          a.forward(piece);
          len -= piece;
        }
        b.next();
      } else if (a.ins >= 0) {
        let len = 0, left = a.len;
        while (left) {
          if (b.ins == -1) {
            let piece = Math.min(left, b.len);
            len += piece;
            left -= piece;
            b.forward(piece);
          } else if (b.ins == 0 && b.len < left) {
            left -= b.len;
            b.next();
          } else {
            break;
          }
        }
        addSection(sections, len, inserted < a.i ? a.ins : 0);
        if (insert2 && inserted < a.i)
          addInsert(insert2, sections, a.text);
        inserted = a.i;
        a.forward(a.len - left);
      } else if (a.done && b.done) {
        return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
      } else {
        throw new Error("Mismatched change set lengths");
      }
    }
  }
  function composeSets(setA, setB, mkSet = false) {
    let sections = [];
    let insert2 = mkSet ? [] : null;
    let a = new SectionIter(setA), b = new SectionIter(setB);
    for (let open = false; ; ) {
      if (a.done && b.done) {
        return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
      } else if (a.ins == 0) {
        addSection(sections, a.len, 0, open);
        a.next();
      } else if (b.len == 0 && !b.done) {
        addSection(sections, 0, b.ins, open);
        if (insert2)
          addInsert(insert2, sections, b.text);
        b.next();
      } else if (a.done || b.done) {
        throw new Error("Mismatched change set lengths");
      } else {
        let len = Math.min(a.len2, b.len), sectionLen = sections.length;
        if (a.ins == -1) {
          let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
          addSection(sections, len, insB, open);
          if (insert2 && insB)
            addInsert(insert2, sections, b.text);
        } else if (b.ins == -1) {
          addSection(sections, a.off ? 0 : a.len, len, open);
          if (insert2)
            addInsert(insert2, sections, a.textBit(len));
        } else {
          addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
          if (insert2 && !b.off)
            addInsert(insert2, sections, b.text);
        }
        open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
        a.forward2(len);
        b.forward(len);
      }
    }
  }
  var SectionIter = class {
    constructor(set) {
      this.set = set;
      this.i = 0;
      this.next();
    }
    next() {
      let { sections } = this.set;
      if (this.i < sections.length) {
        this.len = sections[this.i++];
        this.ins = sections[this.i++];
      } else {
        this.len = 0;
        this.ins = -2;
      }
      this.off = 0;
    }
    get done() {
      return this.ins == -2;
    }
    get len2() {
      return this.ins < 0 ? this.len : this.ins;
    }
    get text() {
      let { inserted } = this.set, index = this.i - 2 >> 1;
      return index >= inserted.length ? Text.empty : inserted[index];
    }
    textBit(len) {
      let { inserted } = this.set, index = this.i - 2 >> 1;
      return index >= inserted.length && !len ? Text.empty : inserted[index].slice(this.off, len == null ? void 0 : this.off + len);
    }
    forward(len) {
      if (len == this.len)
        this.next();
      else {
        this.len -= len;
        this.off += len;
      }
    }
    forward2(len) {
      if (this.ins == -1)
        this.forward(len);
      else if (len == this.ins)
        this.next();
      else {
        this.ins -= len;
        this.off += len;
      }
    }
  };
  var SelectionRange = class _SelectionRange {
    constructor(from, to, flags) {
      this.from = from;
      this.to = to;
      this.flags = flags;
    }
    /**
    The anchor of the range—the side that doesn't move when you
    extend it.
    */
    get anchor() {
      return this.flags & 32 ? this.to : this.from;
    }
    /**
    The head of the range, which is moved when the range is
    [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
    */
    get head() {
      return this.flags & 32 ? this.from : this.to;
    }
    /**
    True when `anchor` and `head` are at the same position.
    */
    get empty() {
      return this.from == this.to;
    }
    /**
    If this is a cursor that is explicitly associated with the
    character on one of its sides, this returns the side. -1 means
    the character before its position, 1 the character after, and 0
    means no association.
    */
    get assoc() {
      return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;
    }
    /**
    The bidirectional text level associated with this cursor, if
    any.
    */
    get bidiLevel() {
      let level = this.flags & 7;
      return level == 7 ? null : level;
    }
    /**
    The goal column (stored vertical offset) associated with a
    cursor. This is used to preserve the vertical position when
    [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
    lines of different length.
    */
    get goalColumn() {
      let value = this.flags >> 6;
      return value == 16777215 ? void 0 : value;
    }
    /**
    Map this range through a change, producing a valid range in the
    updated document.
    */
    map(change, assoc = -1) {
      let from, to;
      if (this.empty) {
        from = to = change.mapPos(this.from, assoc);
      } else {
        from = change.mapPos(this.from, 1);
        to = change.mapPos(this.to, -1);
      }
      return from == this.from && to == this.to ? this : new _SelectionRange(from, to, this.flags);
    }
    /**
    Extend this range to cover at least `from` to `to`.
    */
    extend(from, to = from) {
      if (from <= this.anchor && to >= this.anchor)
        return EditorSelection.range(from, to);
      let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
      return EditorSelection.range(this.anchor, head);
    }
    /**
    Compare this range to another range.
    */
    eq(other, includeAssoc = false) {
      return this.anchor == other.anchor && this.head == other.head && (!includeAssoc || !this.empty || this.assoc == other.assoc);
    }
    /**
    Return a JSON-serializable object representing the range.
    */
    toJSON() {
      return { anchor: this.anchor, head: this.head };
    }
    /**
    Convert a JSON representation of a range to a `SelectionRange`
    instance.
    */
    static fromJSON(json) {
      if (!json || typeof json.anchor != "number" || typeof json.head != "number")
        throw new RangeError("Invalid JSON representation for SelectionRange");
      return EditorSelection.range(json.anchor, json.head);
    }
    /**
    @internal
    */
    static create(from, to, flags) {
      return new _SelectionRange(from, to, flags);
    }
  };
  var EditorSelection = class _EditorSelection {
    constructor(ranges, mainIndex) {
      this.ranges = ranges;
      this.mainIndex = mainIndex;
    }
    /**
    Map a selection through a change. Used to adjust the selection
    position for changes.
    */
    map(change, assoc = -1) {
      if (change.empty)
        return this;
      return _EditorSelection.create(this.ranges.map((r) => r.map(change, assoc)), this.mainIndex);
    }
    /**
    Compare this selection to another selection. By default, ranges
    are compared only by position. When `includeAssoc` is true,
    cursor ranges must also have the same
    [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
    */
    eq(other, includeAssoc = false) {
      if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex)
        return false;
      for (let i = 0; i < this.ranges.length; i++)
        if (!this.ranges[i].eq(other.ranges[i], includeAssoc))
          return false;
      return true;
    }
    /**
    Get the primary selection range. Usually, you should make sure
    your code applies to _all_ ranges, by using methods like
    [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
    */
    get main() {
      return this.ranges[this.mainIndex];
    }
    /**
    Make sure the selection only has one range. Returns a selection
    holding only the main range from this selection.
    */
    asSingle() {
      return this.ranges.length == 1 ? this : new _EditorSelection([this.main], 0);
    }
    /**
    Extend this selection with an extra range.
    */
    addRange(range, main = true) {
      return _EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
    }
    /**
    Replace a given range with another range, and then normalize the
    selection to merge and sort ranges if necessary.
    */
    replaceRange(range, which = this.mainIndex) {
      let ranges = this.ranges.slice();
      ranges[which] = range;
      return _EditorSelection.create(ranges, this.mainIndex);
    }
    /**
    Convert this selection to an object that can be serialized to
    JSON.
    */
    toJSON() {
      return { ranges: this.ranges.map((r) => r.toJSON()), main: this.mainIndex };
    }
    /**
    Create a selection from a JSON representation.
    */
    static fromJSON(json) {
      if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
        throw new RangeError("Invalid JSON representation for EditorSelection");
      return new _EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
    }
    /**
    Create a selection holding a single range.
    */
    static single(anchor, head = anchor) {
      return new _EditorSelection([_EditorSelection.range(anchor, head)], 0);
    }
    /**
    Sort and merge the given set of ranges, creating a valid
    selection.
    */
    static create(ranges, mainIndex = 0) {
      if (ranges.length == 0)
        throw new RangeError("A selection needs at least one range");
      for (let pos = 0, i = 0; i < ranges.length; i++) {
        let range = ranges[i];
        if (range.empty ? range.from <= pos : range.from < pos)
          return _EditorSelection.normalized(ranges.slice(), mainIndex);
        pos = range.to;
      }
      return new _EditorSelection(ranges, mainIndex);
    }
    /**
    Create a cursor selection range at the given position. You can
    safely ignore the optional arguments in most situations.
    */
    static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
      return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 : 16) | (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6);
    }
    /**
    Create a selection range.
    */
    static range(anchor, head, goalColumn, bidiLevel) {
      let flags = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6 | (bidiLevel == null ? 7 : Math.min(6, bidiLevel));
      return head < anchor ? SelectionRange.create(head, anchor, 32 | 16 | flags) : SelectionRange.create(anchor, head, (head > anchor ? 8 : 0) | flags);
    }
    /**
    @internal
    */
    static normalized(ranges, mainIndex = 0) {
      let main = ranges[mainIndex];
      ranges.sort((a, b) => a.from - b.from);
      mainIndex = ranges.indexOf(main);
      for (let i = 1; i < ranges.length; i++) {
        let range = ranges[i], prev = ranges[i - 1];
        if (range.empty ? range.from <= prev.to : range.from < prev.to) {
          let from = prev.from, to = Math.max(range.to, prev.to);
          if (i <= mainIndex)
            mainIndex--;
          ranges.splice(--i, 2, range.anchor > range.head ? _EditorSelection.range(to, from) : _EditorSelection.range(from, to));
        }
      }
      return new _EditorSelection(ranges, mainIndex);
    }
  };
  function checkSelection(selection, docLength) {
    for (let range of selection.ranges)
      if (range.to > docLength)
        throw new RangeError("Selection points outside of document");
  }
  var nextID = 0;
  var Facet = class _Facet {
    constructor(combine, compareInput, compare2, isStatic, enables) {
      this.combine = combine;
      this.compareInput = compareInput;
      this.compare = compare2;
      this.isStatic = isStatic;
      this.id = nextID++;
      this.default = combine([]);
      this.extensions = typeof enables == "function" ? enables(this) : enables;
    }
    /**
    Returns a facet reader for this facet, which can be used to
    [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
    */
    get reader() {
      return this;
    }
    /**
    Define a new facet.
    */
    static define(config2 = {}) {
      return new _Facet(config2.combine || ((a) => a), config2.compareInput || ((a, b) => a === b), config2.compare || (!config2.combine ? sameArray : (a, b) => a === b), !!config2.static, config2.enables);
    }
    /**
    Returns an extension that adds the given value to this facet.
    */
    of(value) {
      return new FacetProvider([], this, 0, value);
    }
    /**
    Create an extension that computes a value for the facet from a
    state. You must take care to declare the parts of the state that
    this value depends on, since your function is only called again
    for a new state when one of those parts changed.
    
    In cases where your value depends only on a single field, you'll
    want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
    */
    compute(deps, get) {
      if (this.isStatic)
        throw new Error("Can't compute a static facet");
      return new FacetProvider(deps, this, 1, get);
    }
    /**
    Create an extension that computes zero or more values for this
    facet from a state.
    */
    computeN(deps, get) {
      if (this.isStatic)
        throw new Error("Can't compute a static facet");
      return new FacetProvider(deps, this, 2, get);
    }
    from(field, get) {
      if (!get)
        get = (x) => x;
      return this.compute([field], (state) => get(state.field(field)));
    }
  };
  function sameArray(a, b) {
    return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
  }
  var FacetProvider = class {
    constructor(dependencies, facet, type, value) {
      this.dependencies = dependencies;
      this.facet = facet;
      this.type = type;
      this.value = value;
      this.id = nextID++;
    }
    dynamicSlot(addresses) {
      var _a2;
      let getter = this.value;
      let compare2 = this.facet.compareInput;
      let id2 = this.id, idx = addresses[id2] >> 1, multi = this.type == 2;
      let depDoc = false, depSel = false, depAddrs = [];
      for (let dep of this.dependencies) {
        if (dep == "doc")
          depDoc = true;
        else if (dep == "selection")
          depSel = true;
        else if ((((_a2 = addresses[dep.id]) !== null && _a2 !== void 0 ? _a2 : 1) & 1) == 0)
          depAddrs.push(addresses[dep.id]);
      }
      return {
        create(state) {
          state.values[idx] = getter(state);
          return 1;
        },
        update(state, tr) {
          if (depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || ensureAll(state, depAddrs)) {
            let newVal = getter(state);
            if (multi ? !compareArray(newVal, state.values[idx], compare2) : !compare2(newVal, state.values[idx])) {
              state.values[idx] = newVal;
              return 1;
            }
          }
          return 0;
        },
        reconfigure: (state, oldState) => {
          let newVal, oldAddr = oldState.config.address[id2];
          if (oldAddr != null) {
            let oldVal = getAddr(oldState, oldAddr);
            if (this.dependencies.every((dep) => {
              return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) : dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
            }) || (multi ? compareArray(newVal = getter(state), oldVal, compare2) : compare2(newVal = getter(state), oldVal))) {
              state.values[idx] = oldVal;
              return 0;
            }
          } else {
            newVal = getter(state);
          }
          state.values[idx] = newVal;
          return 1;
        }
      };
    }
  };
  function compareArray(a, b, compare2) {
    if (a.length != b.length)
      return false;
    for (let i = 0; i < a.length; i++)
      if (!compare2(a[i], b[i]))
        return false;
    return true;
  }
  function ensureAll(state, addrs) {
    let changed = false;
    for (let addr of addrs)
      if (ensureAddr(state, addr) & 1)
        changed = true;
    return changed;
  }
  function dynamicFacetSlot(addresses, facet, providers) {
    let providerAddrs = providers.map((p) => addresses[p.id]);
    let providerTypes = providers.map((p) => p.type);
    let dynamic = providerAddrs.filter((p) => !(p & 1));
    let idx = addresses[facet.id] >> 1;
    function get(state) {
      let values = [];
      for (let i = 0; i < providerAddrs.length; i++) {
        let value = getAddr(state, providerAddrs[i]);
        if (providerTypes[i] == 2)
          for (let val of value)
            values.push(val);
        else
          values.push(value);
      }
      return facet.combine(values);
    }
    return {
      create(state) {
        for (let addr of providerAddrs)
          ensureAddr(state, addr);
        state.values[idx] = get(state);
        return 1;
      },
      update(state, tr) {
        if (!ensureAll(state, dynamic))
          return 0;
        let value = get(state);
        if (facet.compare(value, state.values[idx]))
          return 0;
        state.values[idx] = value;
        return 1;
      },
      reconfigure(state, oldState) {
        let depChanged = ensureAll(state, providerAddrs);
        let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
        if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {
          state.values[idx] = oldValue;
          return 0;
        }
        let value = get(state);
        if (facet.compare(value, oldValue)) {
          state.values[idx] = oldValue;
          return 0;
        }
        state.values[idx] = value;
        return 1;
      }
    };
  }
  var initField = /* @__PURE__ */ Facet.define({ static: true });
  var StateField = class _StateField {
    constructor(id2, createF, updateF, compareF, spec) {
      this.id = id2;
      this.createF = createF;
      this.updateF = updateF;
      this.compareF = compareF;
      this.spec = spec;
      this.provides = void 0;
    }
    /**
    Define a state field.
    */
    static define(config2) {
      let field = new _StateField(nextID++, config2.create, config2.update, config2.compare || ((a, b) => a === b), config2);
      if (config2.provide)
        field.provides = config2.provide(field);
      return field;
    }
    create(state) {
      let init = state.facet(initField).find((i) => i.field == this);
      return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
    }
    /**
    @internal
    */
    slot(addresses) {
      let idx = addresses[this.id] >> 1;
      return {
        create: (state) => {
          state.values[idx] = this.create(state);
          return 1;
        },
        update: (state, tr) => {
          let oldVal = state.values[idx];
          let value = this.updateF(oldVal, tr);
          if (this.compareF(oldVal, value))
            return 0;
          state.values[idx] = value;
          return 1;
        },
        reconfigure: (state, oldState) => {
          let init = state.facet(initField), oldInit = oldState.facet(initField), reInit;
          if ((reInit = init.find((i) => i.field == this)) && reInit != oldInit.find((i) => i.field == this)) {
            state.values[idx] = reInit.create(state);
            return 1;
          }
          if (oldState.config.address[this.id] != null) {
            state.values[idx] = oldState.field(this);
            return 0;
          }
          state.values[idx] = this.create(state);
          return 1;
        }
      };
    }
    /**
    Returns an extension that enables this field and overrides the
    way it is initialized. Can be useful when you need to provide a
    non-default starting value for the field.
    */
    init(create) {
      return [this, initField.of({ field: this, create })];
    }
    /**
    State field instances can be used as
    [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
    given state.
    */
    get extension() {
      return this;
    }
  };
  var Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
  function prec(value) {
    return (ext) => new PrecExtension(ext, value);
  }
  var Prec = {
    /**
    The highest precedence level, for extensions that should end up
    near the start of the precedence ordering.
    */
    highest: /* @__PURE__ */ prec(Prec_.highest),
    /**
    A higher-than-default precedence, for extensions that should
    come before those with default precedence.
    */
    high: /* @__PURE__ */ prec(Prec_.high),
    /**
    The default precedence, which is also used for extensions
    without an explicit precedence.
    */
    default: /* @__PURE__ */ prec(Prec_.default),
    /**
    A lower-than-default precedence.
    */
    low: /* @__PURE__ */ prec(Prec_.low),
    /**
    The lowest precedence level. Meant for things that should end up
    near the end of the extension order.
    */
    lowest: /* @__PURE__ */ prec(Prec_.lowest)
  };
  var PrecExtension = class {
    constructor(inner, prec2) {
      this.inner = inner;
      this.prec = prec2;
    }
  };
  var Compartment = class _Compartment {
    /**
    Create an instance of this compartment to add to your [state
    configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
    */
    of(ext) {
      return new CompartmentInstance(this, ext);
    }
    /**
    Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
    reconfigures this compartment.
    */
    reconfigure(content2) {
      return _Compartment.reconfigure.of({ compartment: this, extension: content2 });
    }
    /**
    Get the current content of the compartment in the state, or
    `undefined` if it isn't present.
    */
    get(state) {
      return state.config.compartments.get(this);
    }
  };
  var CompartmentInstance = class {
    constructor(compartment, inner) {
      this.compartment = compartment;
      this.inner = inner;
    }
  };
  var Configuration = class _Configuration {
    constructor(base2, compartments, dynamicSlots, address, staticValues, facets) {
      this.base = base2;
      this.compartments = compartments;
      this.dynamicSlots = dynamicSlots;
      this.address = address;
      this.staticValues = staticValues;
      this.facets = facets;
      this.statusTemplate = [];
      while (this.statusTemplate.length < dynamicSlots.length)
        this.statusTemplate.push(
          0
          /* SlotStatus.Unresolved */
        );
    }
    staticFacet(facet) {
      let addr = this.address[facet.id];
      return addr == null ? facet.default : this.staticValues[addr >> 1];
    }
    static resolve(base2, compartments, oldState) {
      let fields = [];
      let facets = /* @__PURE__ */ Object.create(null);
      let newCompartments = /* @__PURE__ */ new Map();
      for (let ext of flatten(base2, compartments, newCompartments)) {
        if (ext instanceof StateField)
          fields.push(ext);
        else
          (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
      }
      let address = /* @__PURE__ */ Object.create(null);
      let staticValues = [];
      let dynamicSlots = [];
      for (let field of fields) {
        address[field.id] = dynamicSlots.length << 1;
        dynamicSlots.push((a) => field.slot(a));
      }
      let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
      for (let id2 in facets) {
        let providers = facets[id2], facet = providers[0].facet;
        let oldProviders = oldFacets && oldFacets[id2] || [];
        if (providers.every(
          (p) => p.type == 0
          /* Provider.Static */
        )) {
          address[facet.id] = staticValues.length << 1 | 1;
          if (sameArray(oldProviders, providers)) {
            staticValues.push(oldState.facet(facet));
          } else {
            let value = facet.combine(providers.map((p) => p.value));
            staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
          }
        } else {
          for (let p of providers) {
            if (p.type == 0) {
              address[p.id] = staticValues.length << 1 | 1;
              staticValues.push(p.value);
            } else {
              address[p.id] = dynamicSlots.length << 1;
              dynamicSlots.push((a) => p.dynamicSlot(a));
            }
          }
          address[facet.id] = dynamicSlots.length << 1;
          dynamicSlots.push((a) => dynamicFacetSlot(a, facet, providers));
        }
      }
      let dynamic = dynamicSlots.map((f) => f(address));
      return new _Configuration(base2, newCompartments, dynamic, address, staticValues, facets);
    }
  };
  function flatten(extension, compartments, newCompartments) {
    let result = [[], [], [], [], []];
    let seen = /* @__PURE__ */ new Map();
    function inner(ext, prec2) {
      let known = seen.get(ext);
      if (known != null) {
        if (known <= prec2)
          return;
        let found = result[known].indexOf(ext);
        if (found > -1)
          result[known].splice(found, 1);
        if (ext instanceof CompartmentInstance)
          newCompartments.delete(ext.compartment);
      }
      seen.set(ext, prec2);
      if (Array.isArray(ext)) {
        for (let e of ext)
          inner(e, prec2);
      } else if (ext instanceof CompartmentInstance) {
        if (newCompartments.has(ext.compartment))
          throw new RangeError(`Duplicate use of compartment in extensions`);
        let content2 = compartments.get(ext.compartment) || ext.inner;
        newCompartments.set(ext.compartment, content2);
        inner(content2, prec2);
      } else if (ext instanceof PrecExtension) {
        inner(ext.inner, ext.prec);
      } else if (ext instanceof StateField) {
        result[prec2].push(ext);
        if (ext.provides)
          inner(ext.provides, prec2);
      } else if (ext instanceof FacetProvider) {
        result[prec2].push(ext);
        if (ext.facet.extensions)
          inner(ext.facet.extensions, Prec_.default);
      } else {
        let content2 = ext.extension;
        if (!content2)
          throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
        inner(content2, prec2);
      }
    }
    inner(extension, Prec_.default);
    return result.reduce((a, b) => a.concat(b));
  }
  function ensureAddr(state, addr) {
    if (addr & 1)
      return 2;
    let idx = addr >> 1;
    let status = state.status[idx];
    if (status == 4)
      throw new Error("Cyclic dependency between fields and/or facets");
    if (status & 2)
      return status;
    state.status[idx] = 4;
    let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
    return state.status[idx] = 2 | changed;
  }
  function getAddr(state, addr) {
    return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
  }
  var languageData = /* @__PURE__ */ Facet.define();
  var allowMultipleSelections = /* @__PURE__ */ Facet.define({
    combine: (values) => values.some((v) => v),
    static: true
  });
  var lineSeparator = /* @__PURE__ */ Facet.define({
    combine: (values) => values.length ? values[0] : void 0,
    static: true
  });
  var changeFilter = /* @__PURE__ */ Facet.define();
  var transactionFilter = /* @__PURE__ */ Facet.define();
  var transactionExtender = /* @__PURE__ */ Facet.define();
  var readOnly = /* @__PURE__ */ Facet.define({
    combine: (values) => values.length ? values[0] : false
  });
  var Annotation = class {
    /**
    @internal
    */
    constructor(type, value) {
      this.type = type;
      this.value = value;
    }
    /**
    Define a new type of annotation.
    */
    static define() {
      return new AnnotationType();
    }
  };
  var AnnotationType = class {
    /**
    Create an instance of this annotation.
    */
    of(value) {
      return new Annotation(this, value);
    }
  };
  var StateEffectType = class {
    /**
    @internal
    */
    constructor(map) {
      this.map = map;
    }
    /**
    Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
    type.
    */
    of(value) {
      return new StateEffect(this, value);
    }
  };
  var StateEffect = class _StateEffect {
    /**
    @internal
    */
    constructor(type, value) {
      this.type = type;
      this.value = value;
    }
    /**
    Map this effect through a position mapping. Will return
    `undefined` when that ends up deleting the effect.
    */
    map(mapping) {
      let mapped = this.type.map(this.value, mapping);
      return mapped === void 0 ? void 0 : mapped == this.value ? this : new _StateEffect(this.type, mapped);
    }
    /**
    Tells you whether this effect object is of a given
    [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
    */
    is(type) {
      return this.type == type;
    }
    /**
    Define a new effect type. The type parameter indicates the type
    of values that his effect holds. It should be a type that
    doesn't include `undefined`, since that is used in
    [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
    removed.
    */
    static define(spec = {}) {
      return new StateEffectType(spec.map || ((v) => v));
    }
    /**
    Map an array of effects through a change set.
    */
    static mapEffects(effects, mapping) {
      if (!effects.length)
        return effects;
      let result = [];
      for (let effect of effects) {
        let mapped = effect.map(mapping);
        if (mapped)
          result.push(mapped);
      }
      return result;
    }
  };
  StateEffect.reconfigure = /* @__PURE__ */ StateEffect.define();
  StateEffect.appendConfig = /* @__PURE__ */ StateEffect.define();
  var Transaction = class _Transaction {
    constructor(startState, changes, selection, effects, annotations, scrollIntoView3) {
      this.startState = startState;
      this.changes = changes;
      this.selection = selection;
      this.effects = effects;
      this.annotations = annotations;
      this.scrollIntoView = scrollIntoView3;
      this._doc = null;
      this._state = null;
      if (selection)
        checkSelection(selection, changes.newLength);
      if (!annotations.some((a) => a.type == _Transaction.time))
        this.annotations = annotations.concat(_Transaction.time.of(Date.now()));
    }
    /**
    @internal
    */
    static create(startState, changes, selection, effects, annotations, scrollIntoView3) {
      return new _Transaction(startState, changes, selection, effects, annotations, scrollIntoView3);
    }
    /**
    The new document produced by the transaction. Contrary to
    [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
    force the entire new state to be computed right away, so it is
    recommended that [transaction
    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
    when they need to look at the new document.
    */
    get newDoc() {
      return this._doc || (this._doc = this.changes.apply(this.startState.doc));
    }
    /**
    The new selection produced by the transaction. If
    [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
    this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
    current selection through the changes made by the transaction.
    */
    get newSelection() {
      return this.selection || this.startState.selection.map(this.changes);
    }
    /**
    The new state created by the transaction. Computed on demand
    (but retained for subsequent access), so it is recommended not to
    access it in [transaction
    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
    */
    get state() {
      if (!this._state)
        this.startState.applyTransaction(this);
      return this._state;
    }
    /**
    Get the value of the given annotation type, if any.
    */
    annotation(type) {
      for (let ann of this.annotations)
        if (ann.type == type)
          return ann.value;
      return void 0;
    }
    /**
    Indicates whether the transaction changed the document.
    */
    get docChanged() {
      return !this.changes.empty;
    }
    /**
    Indicates whether this transaction reconfigures the state
    (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
    with a top-level configuration
    [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
    */
    get reconfigured() {
      return this.startState.config != this.state.config;
    }
    /**
    Returns true if the transaction has a [user
    event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
    or more specific than `event`. For example, if the transaction
    has `"select.pointer"` as user event, `"select"` and
    `"select.pointer"` will match it.
    */
    isUserEvent(event) {
      let e = this.annotation(_Transaction.userEvent);
      return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
    }
  };
  Transaction.time = /* @__PURE__ */ Annotation.define();
  Transaction.userEvent = /* @__PURE__ */ Annotation.define();
  Transaction.addToHistory = /* @__PURE__ */ Annotation.define();
  Transaction.remote = /* @__PURE__ */ Annotation.define();
  function joinRanges(a, b) {
    let result = [];
    for (let iA = 0, iB = 0; ; ) {
      let from, to;
      if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
        from = a[iA++];
        to = a[iA++];
      } else if (iB < b.length) {
        from = b[iB++];
        to = b[iB++];
      } else
        return result;
      if (!result.length || result[result.length - 1] < from)
        result.push(from, to);
      else if (result[result.length - 1] < to)
        result[result.length - 1] = to;
    }
  }
  function mergeTransaction(a, b, sequential) {
    var _a2;
    let mapForA, mapForB, changes;
    if (sequential) {
      mapForA = b.changes;
      mapForB = ChangeSet.empty(b.changes.length);
      changes = a.changes.compose(b.changes);
    } else {
      mapForA = b.changes.map(a.changes);
      mapForB = a.changes.mapDesc(b.changes, true);
      changes = a.changes.compose(mapForA);
    }
    return {
      changes,
      selection: b.selection ? b.selection.map(mapForB) : (_a2 = a.selection) === null || _a2 === void 0 ? void 0 : _a2.map(mapForA),
      effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
      annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
      scrollIntoView: a.scrollIntoView || b.scrollIntoView
    };
  }
  function resolveTransactionInner(state, spec, docSize) {
    let sel = spec.selection, annotations = asArray(spec.annotations);
    if (spec.userEvent)
      annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
    return {
      changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
      selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
      effects: asArray(spec.effects),
      annotations,
      scrollIntoView: !!spec.scrollIntoView
    };
  }
  function resolveTransaction(state, specs, filter) {
    let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
    if (specs.length && specs[0].filter === false)
      filter = false;
    for (let i = 1; i < specs.length; i++) {
      if (specs[i].filter === false)
        filter = false;
      let seq = !!specs[i].sequential;
      s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
    }
    let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
    return extendTransaction(filter ? filterTransaction(tr) : tr);
  }
  function filterTransaction(tr) {
    let state = tr.startState;
    let result = true;
    for (let filter of state.facet(changeFilter)) {
      let value = filter(tr);
      if (value === false) {
        result = false;
        break;
      }
      if (Array.isArray(value))
        result = result === true ? value : joinRanges(result, value);
    }
    if (result !== true) {
      let changes, back;
      if (result === false) {
        back = tr.changes.invertedDesc;
        changes = ChangeSet.empty(state.doc.length);
      } else {
        let filtered = tr.changes.filter(result);
        changes = filtered.changes;
        back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
      }
      tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
    }
    let filters = state.facet(transactionFilter);
    for (let i = filters.length - 1; i >= 0; i--) {
      let filtered = filters[i](tr);
      if (filtered instanceof Transaction)
        tr = filtered;
      else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
        tr = filtered[0];
      else
        tr = resolveTransaction(state, asArray(filtered), false);
    }
    return tr;
  }
  function extendTransaction(tr) {
    let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
    for (let i = extenders.length - 1; i >= 0; i--) {
      let extension = extenders[i](tr);
      if (extension && Object.keys(extension).length)
        spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
    }
    return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
  }
  var none = [];
  function asArray(value) {
    return value == null ? none : Array.isArray(value) ? value : [value];
  }
  var CharCategory = /* @__PURE__ */ function(CharCategory2) {
    CharCategory2[CharCategory2["Word"] = 0] = "Word";
    CharCategory2[CharCategory2["Space"] = 1] = "Space";
    CharCategory2[CharCategory2["Other"] = 2] = "Other";
    return CharCategory2;
  }(CharCategory || (CharCategory = {}));
  var nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
  var wordChar;
  try {
    wordChar = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
  } catch (_) {
  }
  function hasWordChar(str) {
    if (wordChar)
      return wordChar.test(str);
    for (let i = 0; i < str.length; i++) {
      let ch = str[i];
      if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
        return true;
    }
    return false;
  }
  function makeCategorizer(wordChars) {
    return (char) => {
      if (!/\S/.test(char))
        return CharCategory.Space;
      if (hasWordChar(char))
        return CharCategory.Word;
      for (let i = 0; i < wordChars.length; i++)
        if (char.indexOf(wordChars[i]) > -1)
          return CharCategory.Word;
      return CharCategory.Other;
    };
  }
  var EditorState = class _EditorState {
    constructor(config2, doc2, selection, values, computeSlot, tr) {
      this.config = config2;
      this.doc = doc2;
      this.selection = selection;
      this.values = values;
      this.status = config2.statusTemplate.slice();
      this.computeSlot = computeSlot;
      if (tr)
        tr._state = this;
      for (let i = 0; i < this.config.dynamicSlots.length; i++)
        ensureAddr(this, i << 1);
      this.computeSlot = null;
    }
    field(field, require2 = true) {
      let addr = this.config.address[field.id];
      if (addr == null) {
        if (require2)
          throw new RangeError("Field is not present in this state");
        return void 0;
      }
      ensureAddr(this, addr);
      return getAddr(this, addr);
    }
    /**
    Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
    state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
    can be passed. Unless
    [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
    [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
    are assumed to start in the _current_ document (not the document
    produced by previous specs), and its
    [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
    to the document created by its _own_ changes. The resulting
    transaction contains the combined effect of all the different
    specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
    specs take precedence over earlier ones.
    */
    update(...specs) {
      return resolveTransaction(this, specs, true);
    }
    /**
    @internal
    */
    applyTransaction(tr) {
      let conf = this.config, { base: base2, compartments } = conf;
      for (let effect of tr.effects) {
        if (effect.is(Compartment.reconfigure)) {
          if (conf) {
            compartments = /* @__PURE__ */ new Map();
            conf.compartments.forEach((val, key) => compartments.set(key, val));
            conf = null;
          }
          compartments.set(effect.value.compartment, effect.value.extension);
        } else if (effect.is(StateEffect.reconfigure)) {
          conf = null;
          base2 = effect.value;
        } else if (effect.is(StateEffect.appendConfig)) {
          conf = null;
          base2 = asArray(base2).concat(effect.value);
        }
      }
      let startValues;
      if (!conf) {
        conf = Configuration.resolve(base2, compartments, this);
        let intermediateState = new _EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
        startValues = intermediateState.values;
      } else {
        startValues = tr.startState.values.slice();
      }
      let selection = tr.startState.facet(allowMultipleSelections) ? tr.newSelection : tr.newSelection.asSingle();
      new _EditorState(conf, tr.newDoc, selection, startValues, (state, slot) => slot.update(state, tr), tr);
    }
    /**
    Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
    replaces every selection range with the given content.
    */
    replaceSelection(text) {
      if (typeof text == "string")
        text = this.toText(text);
      return this.changeByRange((range) => ({
        changes: { from: range.from, to: range.to, insert: text },
        range: EditorSelection.cursor(range.from + text.length)
      }));
    }
    /**
    Create a set of changes and a new selection by running the given
    function for each range in the active selection. The function
    can return an optional set of changes (in the coordinate space
    of the start document), plus an updated range (in the coordinate
    space of the document produced by the call's own changes). This
    method will merge all the changes and ranges into a single
    changeset and selection, and return it as a [transaction
    spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
    [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
    */
    changeByRange(f) {
      let sel = this.selection;
      let result1 = f(sel.ranges[0]);
      let changes = this.changes(result1.changes), ranges = [result1.range];
      let effects = asArray(result1.effects);
      for (let i = 1; i < sel.ranges.length; i++) {
        let result = f(sel.ranges[i]);
        let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
        for (let j = 0; j < i; j++)
          ranges[j] = ranges[j].map(newMapped);
        let mapBy = changes.mapDesc(newChanges, true);
        ranges.push(result.range.map(mapBy));
        changes = changes.compose(newMapped);
        effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
      }
      return {
        changes,
        selection: EditorSelection.create(ranges, sel.mainIndex),
        effects
      };
    }
    /**
    Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
    description, taking the state's document length and line
    separator into account.
    */
    changes(spec = []) {
      if (spec instanceof ChangeSet)
        return spec;
      return ChangeSet.of(spec, this.doc.length, this.facet(_EditorState.lineSeparator));
    }
    /**
    Using the state's [line
    separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
    [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
    */
    toText(string2) {
      return Text.of(string2.split(this.facet(_EditorState.lineSeparator) || DefaultSplit));
    }
    /**
    Return the given range of the document as a string.
    */
    sliceDoc(from = 0, to = this.doc.length) {
      return this.doc.sliceString(from, to, this.lineBreak);
    }
    /**
    Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
    */
    facet(facet) {
      let addr = this.config.address[facet.id];
      if (addr == null)
        return facet.default;
      ensureAddr(this, addr);
      return getAddr(this, addr);
    }
    /**
    Convert this state to a JSON-serializable object. When custom
    fields should be serialized, you can pass them in as an object
    mapping property names (in the resulting object, which should
    not use `doc` or `selection`) to fields.
    */
    toJSON(fields) {
      let result = {
        doc: this.sliceDoc(),
        selection: this.selection.toJSON()
      };
      if (fields)
        for (let prop in fields) {
          let value = fields[prop];
          if (value instanceof StateField && this.config.address[value.id] != null)
            result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
        }
      return result;
    }
    /**
    Deserialize a state from its JSON representation. When custom
    fields should be deserialized, pass the same object you passed
    to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
    third argument.
    */
    static fromJSON(json, config2 = {}, fields) {
      if (!json || typeof json.doc != "string")
        throw new RangeError("Invalid JSON representation for EditorState");
      let fieldInit = [];
      if (fields)
        for (let prop in fields) {
          if (Object.prototype.hasOwnProperty.call(json, prop)) {
            let field = fields[prop], value = json[prop];
            fieldInit.push(field.init((state) => field.spec.fromJSON(value, state)));
          }
        }
      return _EditorState.create({
        doc: json.doc,
        selection: EditorSelection.fromJSON(json.selection),
        extensions: config2.extensions ? fieldInit.concat([config2.extensions]) : fieldInit
      });
    }
    /**
    Create a new state. You'll usually only need this when
    initializing an editor—updated states are created by applying
    transactions.
    */
    static create(config2 = {}) {
      let configuration = Configuration.resolve(config2.extensions || [], /* @__PURE__ */ new Map());
      let doc2 = config2.doc instanceof Text ? config2.doc : Text.of((config2.doc || "").split(configuration.staticFacet(_EditorState.lineSeparator) || DefaultSplit));
      let selection = !config2.selection ? EditorSelection.single(0) : config2.selection instanceof EditorSelection ? config2.selection : EditorSelection.single(config2.selection.anchor, config2.selection.head);
      checkSelection(selection, doc2.length);
      if (!configuration.staticFacet(allowMultipleSelections))
        selection = selection.asSingle();
      return new _EditorState(configuration, doc2, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
    }
    /**
    The size (in columns) of a tab in the document, determined by
    the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
    */
    get tabSize() {
      return this.facet(_EditorState.tabSize);
    }
    /**
    Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
    string for this state.
    */
    get lineBreak() {
      return this.facet(_EditorState.lineSeparator) || "\n";
    }
    /**
    Returns true when the editor is
    [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
    */
    get readOnly() {
      return this.facet(readOnly);
    }
    /**
    Look up a translation for the given phrase (via the
    [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
    original string if no translation is found.
    
    If additional arguments are passed, they will be inserted in
    place of markers like `$1` (for the first value) and `$2`, etc.
    A single `$` is equivalent to `$1`, and `$$` will produce a
    literal dollar sign.
    */
    phrase(phrase2, ...insert2) {
      for (let map of this.facet(_EditorState.phrases))
        if (Object.prototype.hasOwnProperty.call(map, phrase2)) {
          phrase2 = map[phrase2];
          break;
        }
      if (insert2.length)
        phrase2 = phrase2.replace(/\$(\$|\d*)/g, (m, i) => {
          if (i == "$")
            return "$";
          let n = +(i || 1);
          return !n || n > insert2.length ? m : insert2[n - 1];
        });
      return phrase2;
    }
    /**
    Find the values for a given language data field, provided by the
    the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
    
    Examples of language data fields are...
    
    - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
      comment syntax.
    - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
      for providing language-specific completion sources.
    - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
      characters that should be considered part of words in this
      language.
    - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
      bracket closing behavior.
    */
    languageDataAt(name2, pos, side = -1) {
      let values = [];
      for (let provider of this.facet(languageData)) {
        for (let result of provider(this, pos, side)) {
          if (Object.prototype.hasOwnProperty.call(result, name2))
            values.push(result[name2]);
        }
      }
      return values;
    }
    /**
    Return a function that can categorize strings (expected to
    represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
    into one of:
    
     - Word (contains an alphanumeric character or a character
       explicitly listed in the local language's `"wordChars"`
       language data, which should be a string)
     - Space (contains only whitespace)
     - Other (anything else)
    */
    charCategorizer(at) {
      return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
    }
    /**
    Find the word at the given position, meaning the range
    containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
    around it. If no word characters are adjacent to the position,
    this returns null.
    */
    wordAt(pos) {
      let { text, from, length: length2 } = this.doc.lineAt(pos);
      let cat = this.charCategorizer(pos);
      let start = pos - from, end = pos - from;
      while (start > 0) {
        let prev = findClusterBreak2(text, start, false);
        if (cat(text.slice(prev, start)) != CharCategory.Word)
          break;
        start = prev;
      }
      while (end < length2) {
        let next = findClusterBreak2(text, end);
        if (cat(text.slice(end, next)) != CharCategory.Word)
          break;
        end = next;
      }
      return start == end ? null : EditorSelection.range(start + from, end + from);
    }
  };
  EditorState.allowMultipleSelections = allowMultipleSelections;
  EditorState.tabSize = /* @__PURE__ */ Facet.define({
    combine: (values) => values.length ? values[0] : 4
  });
  EditorState.lineSeparator = lineSeparator;
  EditorState.readOnly = readOnly;
  EditorState.phrases = /* @__PURE__ */ Facet.define({
    compare(a, b) {
      let kA = Object.keys(a), kB = Object.keys(b);
      return kA.length == kB.length && kA.every((k) => a[k] == b[k]);
    }
  });
  EditorState.languageData = languageData;
  EditorState.changeFilter = changeFilter;
  EditorState.transactionFilter = transactionFilter;
  EditorState.transactionExtender = transactionExtender;
  Compartment.reconfigure = /* @__PURE__ */ StateEffect.define();
  function combineConfig(configs, defaults3, combine = {}) {
    let result = {};
    for (let config2 of configs)
      for (let key of Object.keys(config2)) {
        let value = config2[key], current = result[key];
        if (current === void 0)
          result[key] = value;
        else if (current === value || value === void 0) ;
        else if (Object.hasOwnProperty.call(combine, key))
          result[key] = combine[key](current, value);
        else
          throw new Error("Config merge conflict for field " + key);
      }
    for (let key in defaults3)
      if (result[key] === void 0)
        result[key] = defaults3[key];
    return result;
  }
  var RangeValue = class {
    /**
    Compare this value with another value. Used when comparing
    rangesets. The default implementation compares by identity.
    Unless you are only creating a fixed number of unique instances
    of your value type, it is a good idea to implement this
    properly.
    */
    eq(other) {
      return this == other;
    }
    /**
    Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
    */
    range(from, to = from) {
      return Range.create(from, to, this);
    }
  };
  RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
  RangeValue.prototype.point = false;
  RangeValue.prototype.mapMode = MapMode.TrackDel;
  var Range = class _Range {
    constructor(from, to, value) {
      this.from = from;
      this.to = to;
      this.value = value;
    }
    /**
    @internal
    */
    static create(from, to, value) {
      return new _Range(from, to, value);
    }
  };
  function cmpRange(a, b) {
    return a.from - b.from || a.value.startSide - b.value.startSide;
  }
  var Chunk = class _Chunk {
    constructor(from, to, value, maxPoint) {
      this.from = from;
      this.to = to;
      this.value = value;
      this.maxPoint = maxPoint;
    }
    get length() {
      return this.to[this.to.length - 1];
    }
    // Find the index of the given position and side. Use the ranges'
    // `from` pos when `end == false`, `to` when `end == true`.
    findIndex(pos, side, end, startAt = 0) {
      let arr = end ? this.to : this.from;
      for (let lo = startAt, hi = arr.length; ; ) {
        if (lo == hi)
          return lo;
        let mid = lo + hi >> 1;
        let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
        if (mid == lo)
          return diff >= 0 ? lo : hi;
        if (diff >= 0)
          hi = mid;
        else
          lo = mid + 1;
      }
    }
    between(offset, from, to, f) {
      for (let i = this.findIndex(from, -1e9, true), e = this.findIndex(to, 1e9, false, i); i < e; i++)
        if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
          return false;
    }
    map(offset, changes) {
      let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
      for (let i = 0; i < this.value.length; i++) {
        let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
        if (curFrom == curTo) {
          let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
          if (mapped == null)
            continue;
          newFrom = newTo = mapped;
          if (val.startSide != val.endSide) {
            newTo = changes.mapPos(curFrom, val.endSide);
            if (newTo < newFrom)
              continue;
          }
        } else {
          newFrom = changes.mapPos(curFrom, val.startSide);
          newTo = changes.mapPos(curTo, val.endSide);
          if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
            continue;
        }
        if ((newTo - newFrom || val.endSide - val.startSide) < 0)
          continue;
        if (newPos < 0)
          newPos = newFrom;
        if (val.point)
          maxPoint = Math.max(maxPoint, newTo - newFrom);
        value.push(val);
        from.push(newFrom - newPos);
        to.push(newTo - newPos);
      }
      return { mapped: value.length ? new _Chunk(from, to, value, maxPoint) : null, pos: newPos };
    }
  };
  var RangeSet = class _RangeSet {
    constructor(chunkPos, chunk, nextLayer, maxPoint) {
      this.chunkPos = chunkPos;
      this.chunk = chunk;
      this.nextLayer = nextLayer;
      this.maxPoint = maxPoint;
    }
    /**
    @internal
    */
    static create(chunkPos, chunk, nextLayer, maxPoint) {
      return new _RangeSet(chunkPos, chunk, nextLayer, maxPoint);
    }
    /**
    @internal
    */
    get length() {
      let last = this.chunk.length - 1;
      return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
    }
    /**
    The number of ranges in the set.
    */
    get size() {
      if (this.isEmpty)
        return 0;
      let size = this.nextLayer.size;
      for (let chunk of this.chunk)
        size += chunk.value.length;
      return size;
    }
    /**
    @internal
    */
    chunkEnd(index) {
      return this.chunkPos[index] + this.chunk[index].length;
    }
    /**
    Update the range set, optionally adding new ranges or filtering
    out existing ones.
    
    (Note: The type parameter is just there as a kludge to work
    around TypeScript variance issues that prevented `RangeSet<X>`
    from being a subtype of `RangeSet<Y>` when `X` is a subtype of
    `Y`.)
    */
    update(updateSpec) {
      let { add: add3 = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
      let filter = updateSpec.filter;
      if (add3.length == 0 && !filter)
        return this;
      if (sort)
        add3 = add3.slice().sort(cmpRange);
      if (this.isEmpty)
        return add3.length ? _RangeSet.of(add3) : this;
      let cur2 = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
      let builder = new RangeSetBuilder();
      while (cur2.value || i < add3.length) {
        if (i < add3.length && (cur2.from - add3[i].from || cur2.startSide - add3[i].value.startSide) >= 0) {
          let range = add3[i++];
          if (!builder.addInner(range.from, range.to, range.value))
            spill.push(range);
        } else if (cur2.rangeIndex == 1 && cur2.chunkIndex < this.chunk.length && (i == add3.length || this.chunkEnd(cur2.chunkIndex) < add3[i].from) && (!filter || filterFrom > this.chunkEnd(cur2.chunkIndex) || filterTo < this.chunkPos[cur2.chunkIndex]) && builder.addChunk(this.chunkPos[cur2.chunkIndex], this.chunk[cur2.chunkIndex])) {
          cur2.nextChunk();
        } else {
          if (!filter || filterFrom > cur2.to || filterTo < cur2.from || filter(cur2.from, cur2.to, cur2.value)) {
            if (!builder.addInner(cur2.from, cur2.to, cur2.value))
              spill.push(Range.create(cur2.from, cur2.to, cur2.value));
          }
          cur2.next();
        }
      }
      return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? _RangeSet.empty : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
    }
    /**
    Map this range set through a set of changes, return the new set.
    */
    map(changes) {
      if (changes.empty || this.isEmpty)
        return this;
      let chunks = [], chunkPos = [], maxPoint = -1;
      for (let i = 0; i < this.chunk.length; i++) {
        let start = this.chunkPos[i], chunk = this.chunk[i];
        let touch = changes.touchesRange(start, start + chunk.length);
        if (touch === false) {
          maxPoint = Math.max(maxPoint, chunk.maxPoint);
          chunks.push(chunk);
          chunkPos.push(changes.mapPos(start));
        } else if (touch === true) {
          let { mapped, pos } = chunk.map(start, changes);
          if (mapped) {
            maxPoint = Math.max(maxPoint, mapped.maxPoint);
            chunks.push(mapped);
            chunkPos.push(pos);
          }
        }
      }
      let next = this.nextLayer.map(changes);
      return chunks.length == 0 ? next : new _RangeSet(chunkPos, chunks, next || _RangeSet.empty, maxPoint);
    }
    /**
    Iterate over the ranges that touch the region `from` to `to`,
    calling `f` for each. There is no guarantee that the ranges will
    be reported in any specific order. When the callback returns
    `false`, iteration stops.
    */
    between(from, to, f) {
      if (this.isEmpty)
        return;
      for (let i = 0; i < this.chunk.length; i++) {
        let start = this.chunkPos[i], chunk = this.chunk[i];
        if (to >= start && from <= start + chunk.length && chunk.between(start, from - start, to - start, f) === false)
          return;
      }
      this.nextLayer.between(from, to, f);
    }
    /**
    Iterate over the ranges in this set, in order, including all
    ranges that end at or after `from`.
    */
    iter(from = 0) {
      return HeapCursor.from([this]).goto(from);
    }
    /**
    @internal
    */
    get isEmpty() {
      return this.nextLayer == this;
    }
    /**
    Iterate over the ranges in a collection of sets, in order,
    starting from `from`.
    */
    static iter(sets, from = 0) {
      return HeapCursor.from(sets).goto(from);
    }
    /**
    Iterate over two groups of sets, calling methods on `comparator`
    to notify it of possible differences.
    */
    static compare(oldSets, newSets, textDiff, comparator, minPointSize = -1) {
      let a = oldSets.filter((set) => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
      let b = newSets.filter((set) => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
      let sharedChunks = findSharedChunks(a, b, textDiff);
      let sideA = new SpanCursor(a, sharedChunks, minPointSize);
      let sideB = new SpanCursor(b, sharedChunks, minPointSize);
      textDiff.iterGaps((fromA, fromB, length2) => compare(sideA, fromA, sideB, fromB, length2, comparator));
      if (textDiff.empty && textDiff.length == 0)
        compare(sideA, 0, sideB, 0, 0, comparator);
    }
    /**
    Compare the contents of two groups of range sets, returning true
    if they are equivalent in the given range.
    */
    static eq(oldSets, newSets, from = 0, to) {
      if (to == null)
        to = 1e9 - 1;
      let a = oldSets.filter((set) => !set.isEmpty && newSets.indexOf(set) < 0);
      let b = newSets.filter((set) => !set.isEmpty && oldSets.indexOf(set) < 0);
      if (a.length != b.length)
        return false;
      if (!a.length)
        return true;
      let sharedChunks = findSharedChunks(a, b);
      let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
      for (; ; ) {
        if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
          return false;
        if (sideA.to > to)
          return true;
        sideA.next();
        sideB.next();
      }
    }
    /**
    Iterate over a group of range sets at the same time, notifying
    the iterator about the ranges covering every given piece of
    content. Returns the open count (see
    [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
    of the iteration.
    */
    static spans(sets, from, to, iterator, minPointSize = -1) {
      let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
      let openRanges = cursor.openStart;
      for (; ; ) {
        let curTo = Math.min(cursor.to, to);
        if (cursor.point) {
          let active = cursor.activeForPoint(cursor.to);
          let openCount = cursor.pointFrom < from ? active.length + 1 : cursor.point.startSide < 0 ? active.length : Math.min(active.length, openRanges);
          iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
          openRanges = Math.min(cursor.openEnd(curTo), active.length);
        } else if (curTo > pos) {
          iterator.span(pos, curTo, cursor.active, openRanges);
          openRanges = cursor.openEnd(curTo);
        }
        if (cursor.to > to)
          return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
        pos = cursor.to;
        cursor.next();
      }
    }
    /**
    Create a range set for the given range or array of ranges. By
    default, this expects the ranges to be _sorted_ (by start
    position and, if two start at the same position,
    `value.startSide`). You can pass `true` as second argument to
    cause the method to sort them.
    */
    static of(ranges, sort = false) {
      let build = new RangeSetBuilder();
      for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)
        build.add(range.from, range.to, range.value);
      return build.finish();
    }
    /**
    Join an array of range sets into a single set.
    */
    static join(sets) {
      if (!sets.length)
        return _RangeSet.empty;
      let result = sets[sets.length - 1];
      for (let i = sets.length - 2; i >= 0; i--) {
        for (let layer2 = sets[i]; layer2 != _RangeSet.empty; layer2 = layer2.nextLayer)
          result = new _RangeSet(layer2.chunkPos, layer2.chunk, result, Math.max(layer2.maxPoint, result.maxPoint));
      }
      return result;
    }
  };
  RangeSet.empty = /* @__PURE__ */ new RangeSet([], [], null, -1);
  function lazySort(ranges) {
    if (ranges.length > 1)
      for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
        let cur2 = ranges[i];
        if (cmpRange(prev, cur2) > 0)
          return ranges.slice().sort(cmpRange);
        prev = cur2;
      }
    return ranges;
  }
  RangeSet.empty.nextLayer = RangeSet.empty;
  var RangeSetBuilder = class _RangeSetBuilder {
    finishChunk(newArrays) {
      this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
      this.chunkPos.push(this.chunkStart);
      this.chunkStart = -1;
      this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
      this.maxPoint = -1;
      if (newArrays) {
        this.from = [];
        this.to = [];
        this.value = [];
      }
    }
    /**
    Create an empty builder.
    */
    constructor() {
      this.chunks = [];
      this.chunkPos = [];
      this.chunkStart = -1;
      this.last = null;
      this.lastFrom = -1e9;
      this.lastTo = -1e9;
      this.from = [];
      this.to = [];
      this.value = [];
      this.maxPoint = -1;
      this.setMaxPoint = -1;
      this.nextLayer = null;
    }
    /**
    Add a range. Ranges should be added in sorted (by `from` and
    `value.startSide`) order.
    */
    add(from, to, value) {
      if (!this.addInner(from, to, value))
        (this.nextLayer || (this.nextLayer = new _RangeSetBuilder())).add(from, to, value);
    }
    /**
    @internal
    */
    addInner(from, to, value) {
      let diff = from - this.lastTo || value.startSide - this.last.endSide;
      if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
        throw new Error("Ranges must be added sorted by `from` position and `startSide`");
      if (diff < 0)
        return false;
      if (this.from.length == 250)
        this.finishChunk(true);
      if (this.chunkStart < 0)
        this.chunkStart = from;
      this.from.push(from - this.chunkStart);
      this.to.push(to - this.chunkStart);
      this.last = value;
      this.lastFrom = from;
      this.lastTo = to;
      this.value.push(value);
      if (value.point)
        this.maxPoint = Math.max(this.maxPoint, to - from);
      return true;
    }
    /**
    @internal
    */
    addChunk(from, chunk) {
      if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
        return false;
      if (this.from.length)
        this.finishChunk(true);
      this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
      this.chunks.push(chunk);
      this.chunkPos.push(from);
      let last = chunk.value.length - 1;
      this.last = chunk.value[last];
      this.lastFrom = chunk.from[last] + from;
      this.lastTo = chunk.to[last] + from;
      return true;
    }
    /**
    Finish the range set. Returns the new set. The builder can't be
    used anymore after this has been called.
    */
    finish() {
      return this.finishInner(RangeSet.empty);
    }
    /**
    @internal
    */
    finishInner(next) {
      if (this.from.length)
        this.finishChunk(false);
      if (this.chunks.length == 0)
        return next;
      let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
      this.from = null;
      return result;
    }
  };
  function findSharedChunks(a, b, textDiff) {
    let inA = /* @__PURE__ */ new Map();
    for (let set of a)
      for (let i = 0; i < set.chunk.length; i++)
        if (set.chunk[i].maxPoint <= 0)
          inA.set(set.chunk[i], set.chunkPos[i]);
    let shared = /* @__PURE__ */ new Set();
    for (let set of b)
      for (let i = 0; i < set.chunk.length; i++) {
        let known = inA.get(set.chunk[i]);
        if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] && !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))
          shared.add(set.chunk[i]);
      }
    return shared;
  }
  var LayerCursor = class {
    constructor(layer2, skip, minPoint, rank = 0) {
      this.layer = layer2;
      this.skip = skip;
      this.minPoint = minPoint;
      this.rank = rank;
    }
    get startSide() {
      return this.value ? this.value.startSide : 0;
    }
    get endSide() {
      return this.value ? this.value.endSide : 0;
    }
    goto(pos, side = -1e9) {
      this.chunkIndex = this.rangeIndex = 0;
      this.gotoInner(pos, side, false);
      return this;
    }
    gotoInner(pos, side, forward) {
      while (this.chunkIndex < this.layer.chunk.length) {
        let next = this.layer.chunk[this.chunkIndex];
        if (!(this.skip && this.skip.has(next) || this.layer.chunkEnd(this.chunkIndex) < pos || next.maxPoint < this.minPoint))
          break;
        this.chunkIndex++;
        forward = false;
      }
      if (this.chunkIndex < this.layer.chunk.length) {
        let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
        if (!forward || this.rangeIndex < rangeIndex)
          this.setRangeIndex(rangeIndex);
      }
      this.next();
    }
    forward(pos, side) {
      if ((this.to - pos || this.endSide - side) < 0)
        this.gotoInner(pos, side, true);
    }
    next() {
      for (; ; ) {
        if (this.chunkIndex == this.layer.chunk.length) {
          this.from = this.to = 1e9;
          this.value = null;
          break;
        } else {
          let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
          let from = chunkPos + chunk.from[this.rangeIndex];
          this.from = from;
          this.to = chunkPos + chunk.to[this.rangeIndex];
          this.value = chunk.value[this.rangeIndex];
          this.setRangeIndex(this.rangeIndex + 1);
          if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
            break;
        }
      }
    }
    setRangeIndex(index) {
      if (index == this.layer.chunk[this.chunkIndex].value.length) {
        this.chunkIndex++;
        if (this.skip) {
          while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
            this.chunkIndex++;
        }
        this.rangeIndex = 0;
      } else {
        this.rangeIndex = index;
      }
    }
    nextChunk() {
      this.chunkIndex++;
      this.rangeIndex = 0;
      this.next();
    }
    compare(other) {
      return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank || this.to - other.to || this.endSide - other.endSide;
    }
  };
  var HeapCursor = class _HeapCursor {
    constructor(heap) {
      this.heap = heap;
    }
    static from(sets, skip = null, minPoint = -1) {
      let heap = [];
      for (let i = 0; i < sets.length; i++) {
        for (let cur2 = sets[i]; !cur2.isEmpty; cur2 = cur2.nextLayer) {
          if (cur2.maxPoint >= minPoint)
            heap.push(new LayerCursor(cur2, skip, minPoint, i));
        }
      }
      return heap.length == 1 ? heap[0] : new _HeapCursor(heap);
    }
    get startSide() {
      return this.value ? this.value.startSide : 0;
    }
    goto(pos, side = -1e9) {
      for (let cur2 of this.heap)
        cur2.goto(pos, side);
      for (let i = this.heap.length >> 1; i >= 0; i--)
        heapBubble(this.heap, i);
      this.next();
      return this;
    }
    forward(pos, side) {
      for (let cur2 of this.heap)
        cur2.forward(pos, side);
      for (let i = this.heap.length >> 1; i >= 0; i--)
        heapBubble(this.heap, i);
      if ((this.to - pos || this.value.endSide - side) < 0)
        this.next();
    }
    next() {
      if (this.heap.length == 0) {
        this.from = this.to = 1e9;
        this.value = null;
        this.rank = -1;
      } else {
        let top2 = this.heap[0];
        this.from = top2.from;
        this.to = top2.to;
        this.value = top2.value;
        this.rank = top2.rank;
        if (top2.value)
          top2.next();
        heapBubble(this.heap, 0);
      }
    }
  };
  function heapBubble(heap, index) {
    for (let cur2 = heap[index]; ; ) {
      let childIndex = (index << 1) + 1;
      if (childIndex >= heap.length)
        break;
      let child = heap[childIndex];
      if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
        child = heap[childIndex + 1];
        childIndex++;
      }
      if (cur2.compare(child) < 0)
        break;
      heap[childIndex] = cur2;
      heap[index] = child;
      index = childIndex;
    }
  }
  var SpanCursor = class {
    constructor(sets, skip, minPoint) {
      this.minPoint = minPoint;
      this.active = [];
      this.activeTo = [];
      this.activeRank = [];
      this.minActive = -1;
      this.point = null;
      this.pointFrom = 0;
      this.pointRank = 0;
      this.to = -1e9;
      this.endSide = 0;
      this.openStart = -1;
      this.cursor = HeapCursor.from(sets, skip, minPoint);
    }
    goto(pos, side = -1e9) {
      this.cursor.goto(pos, side);
      this.active.length = this.activeTo.length = this.activeRank.length = 0;
      this.minActive = -1;
      this.to = pos;
      this.endSide = side;
      this.openStart = -1;
      this.next();
      return this;
    }
    forward(pos, side) {
      while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
        this.removeActive(this.minActive);
      this.cursor.forward(pos, side);
    }
    removeActive(index) {
      remove(this.active, index);
      remove(this.activeTo, index);
      remove(this.activeRank, index);
      this.minActive = findMinIndex(this.active, this.activeTo);
    }
    addActive(trackOpen) {
      let i = 0, { value, to, rank } = this.cursor;
      while (i < this.activeRank.length && (rank - this.activeRank[i] || to - this.activeTo[i]) > 0)
        i++;
      insert(this.active, i, value);
      insert(this.activeTo, i, to);
      insert(this.activeRank, i, rank);
      if (trackOpen)
        insert(trackOpen, i, this.cursor.from);
      this.minActive = findMinIndex(this.active, this.activeTo);
    }
    // After calling this, if `this.point` != null, the next range is a
    // point. Otherwise, it's a regular range, covered by `this.active`.
    next() {
      let from = this.to, wasPoint = this.point;
      this.point = null;
      let trackOpen = this.openStart < 0 ? [] : null;
      for (; ; ) {
        let a = this.minActive;
        if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
          if (this.activeTo[a] > from) {
            this.to = this.activeTo[a];
            this.endSide = this.active[a].endSide;
            break;
          }
          this.removeActive(a);
          if (trackOpen)
            remove(trackOpen, a);
        } else if (!this.cursor.value) {
          this.to = this.endSide = 1e9;
          break;
        } else if (this.cursor.from > from) {
          this.to = this.cursor.from;
          this.endSide = this.cursor.startSide;
          break;
        } else {
          let nextVal = this.cursor.value;
          if (!nextVal.point) {
            this.addActive(trackOpen);
            this.cursor.next();
          } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
            this.cursor.next();
          } else {
            this.point = nextVal;
            this.pointFrom = this.cursor.from;
            this.pointRank = this.cursor.rank;
            this.to = this.cursor.to;
            this.endSide = nextVal.endSide;
            this.cursor.next();
            this.forward(this.to, this.endSide);
            break;
          }
        }
      }
      if (trackOpen) {
        this.openStart = 0;
        for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)
          this.openStart++;
      }
    }
    activeForPoint(to) {
      if (!this.active.length)
        return this.active;
      let active = [];
      for (let i = this.active.length - 1; i >= 0; i--) {
        if (this.activeRank[i] < this.pointRank)
          break;
        if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
          active.push(this.active[i]);
      }
      return active.reverse();
    }
    openEnd(to) {
      let open = 0;
      for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
        open++;
      return open;
    }
  };
  function compare(a, startA, b, startB, length2, comparator) {
    a.goto(startA);
    b.goto(startB);
    let endB = startB + length2;
    let pos = startB, dPos = startB - startA;
    for (; ; ) {
      let dEnd = a.to + dPos - b.to, diff = dEnd || a.endSide - b.endSide;
      let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
      if (a.point || b.point) {
        if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) && sameValues(a.activeForPoint(a.to), b.activeForPoint(b.to))))
          comparator.comparePoint(pos, clipEnd, a.point, b.point);
      } else {
        if (clipEnd > pos && !sameValues(a.active, b.active))
          comparator.compareRange(pos, clipEnd, a.active, b.active);
      }
      if (end > endB)
        break;
      if ((dEnd || a.openEnd != b.openEnd) && comparator.boundChange)
        comparator.boundChange(end);
      pos = end;
      if (diff <= 0)
        a.next();
      if (diff >= 0)
        b.next();
    }
  }
  function sameValues(a, b) {
    if (a.length != b.length)
      return false;
    for (let i = 0; i < a.length; i++)
      if (a[i] != b[i] && !a[i].eq(b[i]))
        return false;
    return true;
  }
  function remove(array2, index) {
    for (let i = index, e = array2.length - 1; i < e; i++)
      array2[i] = array2[i + 1];
    array2.pop();
  }
  function insert(array2, index, value) {
    for (let i = array2.length - 1; i >= index; i--)
      array2[i + 1] = array2[i];
    array2[index] = value;
  }
  function findMinIndex(value, array2) {
    let found = -1, foundPos = 1e9;
    for (let i = 0; i < array2.length; i++)
      if ((array2[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
        found = i;
        foundPos = array2[i];
      }
    return found;
  }
  function countColumn(string2, tabSize, to = string2.length) {
    let n = 0;
    for (let i = 0; i < to && i < string2.length; ) {
      if (string2.charCodeAt(i) == 9) {
        n += tabSize - n % tabSize;
        i++;
      } else {
        n++;
        i = findClusterBreak2(string2, i);
      }
    }
    return n;
  }
  function findColumn(string2, col, tabSize, strict) {
    for (let i = 0, n = 0; ; ) {
      if (n >= col)
        return i;
      if (i == string2.length)
        break;
      n += string2.charCodeAt(i) == 9 ? tabSize - n % tabSize : 1;
      i = findClusterBreak2(string2, i);
    }
    return strict === true ? -1 : string2.length;
  }

  // node_modules/style-mod/src/style-mod.js
  var C = "\u037C";
  var COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
  var SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
  var top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};
  var StyleModule = class {
    // :: (Object<Style>, ?{finish: ?(string) → string})
    // Create a style module from the given spec.
    //
    // When `finish` is given, it is called on regular (non-`@`)
    // selectors (after `&` expansion) to compute the final selector.
    constructor(spec, options) {
      this.rules = [];
      let { finish } = options || {};
      function splitSelector(selector) {
        return /^@/.test(selector) ? [selector] : selector.split(/,\s*/);
      }
      function render(selectors, spec2, target, isKeyframes) {
        let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
        if (isAt && spec2 == null) return target.push(selectors[0] + ";");
        for (let prop in spec2) {
          let value = spec2[prop];
          if (/&/.test(prop)) {
            render(
              prop.split(/,\s*/).map((part) => selectors.map((sel) => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
              value,
              target
            );
          } else if (value && typeof value == "object") {
            if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.");
            render(splitSelector(prop), value, local, keyframes);
          } else if (value != null) {
            local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, (l) => "-" + l.toLowerCase()) + ": " + value + ";");
          }
        }
        if (local.length || keyframes) {
          target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") + " {" + local.join(" ") + "}");
        }
      }
      for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
    }
    // :: () → string
    // Returns a string containing the module's CSS rules.
    getRules() {
      return this.rules.join("\n");
    }
    // :: () → string
    // Generate a new unique CSS class name.
    static newName() {
      let id2 = top[COUNT] || 1;
      top[COUNT] = id2 + 1;
      return C + id2.toString(36);
    }
    // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
    //
    // Mount the given set of modules in the given DOM root, which ensures
    // that the CSS rules defined by the module are available in that
    // context.
    //
    // Rules are only added to the document once per root.
    //
    // Rule order will follow the order of the modules, so that rules from
    // modules later in the array take precedence of those from earlier
    // modules. If you call this function multiple times for the same root
    // in a way that changes the order of already mounted modules, the old
    // order will be changed.
    //
    // If a Content Security Policy nonce is provided, it is added to
    // the `<style>` tag generated by the library.
    static mount(root, modules, options) {
      let set = root[SET], nonce = options && options.nonce;
      if (!set) set = new StyleSet(root, nonce);
      else if (nonce) set.setNonce(nonce);
      set.mount(Array.isArray(modules) ? modules : [modules], root);
    }
  };
  var adoptedSet = /* @__PURE__ */ new Map();
  var StyleSet = class {
    constructor(root, nonce) {
      let doc2 = root.ownerDocument || root, win = doc2.defaultView;
      if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
        let adopted = adoptedSet.get(doc2);
        if (adopted) return root[SET] = adopted;
        this.sheet = new win.CSSStyleSheet();
        adoptedSet.set(doc2, this);
      } else {
        this.styleTag = doc2.createElement("style");
        if (nonce) this.styleTag.setAttribute("nonce", nonce);
      }
      this.modules = [];
      root[SET] = this;
    }
    mount(modules, root) {
      let sheet = this.sheet;
      let pos = 0, j = 0;
      for (let i = 0; i < modules.length; i++) {
        let mod2 = modules[i], index = this.modules.indexOf(mod2);
        if (index < j && index > -1) {
          this.modules.splice(index, 1);
          j--;
          index = -1;
        }
        if (index == -1) {
          this.modules.splice(j++, 0, mod2);
          if (sheet) for (let k = 0; k < mod2.rules.length; k++)
            sheet.insertRule(mod2.rules[k], pos++);
        } else {
          while (j < index) pos += this.modules[j++].rules.length;
          pos += mod2.rules.length;
          j++;
        }
      }
      if (sheet) {
        if (root.adoptedStyleSheets.indexOf(this.sheet) < 0)
          root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets];
      } else {
        let text = "";
        for (let i = 0; i < this.modules.length; i++)
          text += this.modules[i].getRules() + "\n";
        this.styleTag.textContent = text;
        let target = root.head || root;
        if (this.styleTag.parentNode != target)
          target.insertBefore(this.styleTag, target.firstChild);
      }
    }
    setNonce(nonce) {
      if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce)
        this.styleTag.setAttribute("nonce", nonce);
    }
  };

  // node_modules/w3c-keyname/index.js
  var base = {
    8: "Backspace",
    9: "Tab",
    10: "Enter",
    12: "NumLock",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    44: "PrintScreen",
    45: "Insert",
    46: "Delete",
    59: ";",
    61: "=",
    91: "Meta",
    92: "Meta",
    106: "*",
    107: "+",
    108: ",",
    109: "-",
    110: ".",
    111: "/",
    144: "NumLock",
    145: "ScrollLock",
    160: "Shift",
    161: "Shift",
    162: "Control",
    163: "Control",
    164: "Alt",
    165: "Alt",
    173: "-",
    186: ";",
    187: "=",
    188: ",",
    189: "-",
    190: ".",
    191: "/",
    192: "`",
    219: "[",
    220: "\\",
    221: "]",
    222: "'"
  };
  var shift = {
    48: ")",
    49: "!",
    50: "@",
    51: "#",
    52: "$",
    53: "%",
    54: "^",
    55: "&",
    56: "*",
    57: "(",
    59: ":",
    61: "+",
    173: "_",
    186: ":",
    187: "+",
    188: "<",
    189: "_",
    190: ">",
    191: "?",
    192: "~",
    219: "{",
    220: "|",
    221: "}",
    222: '"'
  };
  var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
  var ie = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
  for (i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);
  var i;
  for (i = 1; i <= 24; i++) base[i + 111] = "F" + i;
  var i;
  for (i = 65; i <= 90; i++) {
    base[i] = String.fromCharCode(i + 32);
    shift[i] = String.fromCharCode(i);
  }
  var i;
  for (code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];
  var code;
  function keyName(event) {
    var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey || ie && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
    var name2 = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified";
    if (name2 == "Esc") name2 = "Escape";
    if (name2 == "Del") name2 = "Delete";
    if (name2 == "Left") name2 = "ArrowLeft";
    if (name2 == "Up") name2 = "ArrowUp";
    if (name2 == "Right") name2 = "ArrowRight";
    if (name2 == "Down") name2 = "ArrowDown";
    return name2;
  }

  // node_modules/crelt/index.js
  function crelt() {
    var elt = arguments[0];
    if (typeof elt == "string") elt = document.createElement(elt);
    var i = 1, next = arguments[1];
    if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
      for (var name2 in next) if (Object.prototype.hasOwnProperty.call(next, name2)) {
        var value = next[name2];
        if (typeof value == "string") elt.setAttribute(name2, value);
        else if (value != null) elt[name2] = value;
      }
      i++;
    }
    for (; i < arguments.length; i++) add(elt, arguments[i]);
    return elt;
  }
  function add(elt, child) {
    if (typeof child == "string") {
      elt.appendChild(document.createTextNode(child));
    } else if (child == null) {
    } else if (child.nodeType != null) {
      elt.appendChild(child);
    } else if (Array.isArray(child)) {
      for (var i = 0; i < child.length; i++) add(elt, child[i]);
    } else {
      throw new RangeError("Unsupported child node: " + child);
    }
  }

  // node_modules/@codemirror/view/dist/index.js
  function getSelection(root) {
    let target;
    if (root.nodeType == 11) {
      target = root.getSelection ? root : root.ownerDocument;
    } else {
      target = root;
    }
    return target.getSelection();
  }
  function contains(dom, node) {
    return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
  }
  function hasSelection(dom, selection) {
    if (!selection.anchorNode)
      return false;
    try {
      return contains(dom, selection.anchorNode);
    } catch (_) {
      return false;
    }
  }
  function clientRectsFor(dom) {
    if (dom.nodeType == 3)
      return textRange(dom, 0, dom.nodeValue.length).getClientRects();
    else if (dom.nodeType == 1)
      return dom.getClientRects();
    else
      return [];
  }
  function isEquivalentPosition(node, off, targetNode, targetOff) {
    return targetNode ? scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1) : false;
  }
  function domIndex(node) {
    for (var index = 0; ; index++) {
      node = node.previousSibling;
      if (!node)
        return index;
    }
  }
  function isBlockElement(node) {
    return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
  }
  function scanFor(node, off, targetNode, targetOff, dir) {
    for (; ; ) {
      if (node == targetNode && off == targetOff)
        return true;
      if (off == (dir < 0 ? 0 : maxOffset(node))) {
        if (node.nodeName == "DIV")
          return false;
        let parent = node.parentNode;
        if (!parent || parent.nodeType != 1)
          return false;
        off = domIndex(node) + (dir < 0 ? 0 : 1);
        node = parent;
      } else if (node.nodeType == 1) {
        node = node.childNodes[off + (dir < 0 ? -1 : 0)];
        if (node.nodeType == 1 && node.contentEditable == "false")
          return false;
        off = dir < 0 ? maxOffset(node) : 0;
      } else {
        return false;
      }
    }
  }
  function maxOffset(node) {
    return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
  }
  function flattenRect(rect, left) {
    let x = left ? rect.left : rect.right;
    return { left: x, right: x, top: rect.top, bottom: rect.bottom };
  }
  function windowRect(win) {
    let vp = win.visualViewport;
    if (vp)
      return {
        left: 0,
        right: vp.width,
        top: 0,
        bottom: vp.height
      };
    return {
      left: 0,
      right: win.innerWidth,
      top: 0,
      bottom: win.innerHeight
    };
  }
  function getScale(elt, rect) {
    let scaleX = rect.width / elt.offsetWidth;
    let scaleY = rect.height / elt.offsetHeight;
    if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect.width - elt.offsetWidth) < 1)
      scaleX = 1;
    if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect.height - elt.offsetHeight) < 1)
      scaleY = 1;
    return { scaleX, scaleY };
  }
  function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
    let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
    for (let cur2 = dom, stop = false; cur2 && !stop; ) {
      if (cur2.nodeType == 1) {
        let bounding, top2 = cur2 == doc2.body;
        let scaleX = 1, scaleY = 1;
        if (top2) {
          bounding = windowRect(win);
        } else {
          if (/^(fixed|sticky)$/.test(getComputedStyle(cur2).position))
            stop = true;
          if (cur2.scrollHeight <= cur2.clientHeight && cur2.scrollWidth <= cur2.clientWidth) {
            cur2 = cur2.assignedSlot || cur2.parentNode;
            continue;
          }
          let rect2 = cur2.getBoundingClientRect();
          ({ scaleX, scaleY } = getScale(cur2, rect2));
          bounding = {
            left: rect2.left,
            right: rect2.left + cur2.clientWidth * scaleX,
            top: rect2.top,
            bottom: rect2.top + cur2.clientHeight * scaleY
          };
        }
        let moveX = 0, moveY = 0;
        if (y == "nearest") {
          if (rect.top < bounding.top) {
            moveY = rect.top - (bounding.top + yMargin);
            if (side > 0 && rect.bottom > bounding.bottom + moveY)
              moveY = rect.bottom - bounding.bottom + yMargin;
          } else if (rect.bottom > bounding.bottom) {
            moveY = rect.bottom - bounding.bottom + yMargin;
            if (side < 0 && rect.top - moveY < bounding.top)
              moveY = rect.top - (bounding.top + yMargin);
          }
        } else {
          let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
          let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 : y == "start" || y == "center" && side < 0 ? rect.top - yMargin : rect.bottom - boundingHeight + yMargin;
          moveY = targetTop - bounding.top;
        }
        if (x == "nearest") {
          if (rect.left < bounding.left) {
            moveX = rect.left - (bounding.left + xMargin);
            if (side > 0 && rect.right > bounding.right + moveX)
              moveX = rect.right - bounding.right + xMargin;
          } else if (rect.right > bounding.right) {
            moveX = rect.right - bounding.right + xMargin;
            if (side < 0 && rect.left < bounding.left + moveX)
              moveX = rect.left - (bounding.left + xMargin);
          }
        } else {
          let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 : x == "start" == ltr ? rect.left - xMargin : rect.right - (bounding.right - bounding.left) + xMargin;
          moveX = targetLeft - bounding.left;
        }
        if (moveX || moveY) {
          if (top2) {
            win.scrollBy(moveX, moveY);
          } else {
            let movedX = 0, movedY = 0;
            if (moveY) {
              let start = cur2.scrollTop;
              cur2.scrollTop += moveY / scaleY;
              movedY = (cur2.scrollTop - start) * scaleY;
            }
            if (moveX) {
              let start = cur2.scrollLeft;
              cur2.scrollLeft += moveX / scaleX;
              movedX = (cur2.scrollLeft - start) * scaleX;
            }
            rect = {
              left: rect.left - movedX,
              top: rect.top - movedY,
              right: rect.right - movedX,
              bottom: rect.bottom - movedY
            };
            if (movedX && Math.abs(movedX - moveX) < 1)
              x = "nearest";
            if (movedY && Math.abs(movedY - moveY) < 1)
              y = "nearest";
          }
        }
        if (top2)
          break;
        if (rect.top < bounding.top || rect.bottom > bounding.bottom || rect.left < bounding.left || rect.right > bounding.right)
          rect = {
            left: Math.max(rect.left, bounding.left),
            right: Math.min(rect.right, bounding.right),
            top: Math.max(rect.top, bounding.top),
            bottom: Math.min(rect.bottom, bounding.bottom)
          };
        cur2 = cur2.assignedSlot || cur2.parentNode;
      } else if (cur2.nodeType == 11) {
        cur2 = cur2.host;
      } else {
        break;
      }
    }
  }
  function scrollableParents(dom) {
    let doc2 = dom.ownerDocument, x, y;
    for (let cur2 = dom.parentNode; cur2; ) {
      if (cur2 == doc2.body || x && y) {
        break;
      } else if (cur2.nodeType == 1) {
        if (!y && cur2.scrollHeight > cur2.clientHeight)
          y = cur2;
        if (!x && cur2.scrollWidth > cur2.clientWidth)
          x = cur2;
        cur2 = cur2.assignedSlot || cur2.parentNode;
      } else if (cur2.nodeType == 11) {
        cur2 = cur2.host;
      } else {
        break;
      }
    }
    return { x, y };
  }
  var DOMSelectionState = class {
    constructor() {
      this.anchorNode = null;
      this.anchorOffset = 0;
      this.focusNode = null;
      this.focusOffset = 0;
    }
    eq(domSel) {
      return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
    }
    setRange(range) {
      let { anchorNode, focusNode } = range;
      this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
    }
    set(anchorNode, anchorOffset, focusNode, focusOffset) {
      this.anchorNode = anchorNode;
      this.anchorOffset = anchorOffset;
      this.focusNode = focusNode;
      this.focusOffset = focusOffset;
    }
  };
  var preventScrollSupported = null;
  function focusPreventScroll(dom) {
    if (dom.setActive)
      return dom.setActive();
    if (preventScrollSupported)
      return dom.focus(preventScrollSupported);
    let stack2 = [];
    for (let cur2 = dom; cur2; cur2 = cur2.parentNode) {
      stack2.push(cur2, cur2.scrollTop, cur2.scrollLeft);
      if (cur2 == cur2.ownerDocument)
        break;
    }
    dom.focus(preventScrollSupported == null ? {
      get preventScroll() {
        preventScrollSupported = { preventScroll: true };
        return true;
      }
    } : void 0);
    if (!preventScrollSupported) {
      preventScrollSupported = false;
      for (let i = 0; i < stack2.length; ) {
        let elt = stack2[i++], top2 = stack2[i++], left = stack2[i++];
        if (elt.scrollTop != top2)
          elt.scrollTop = top2;
        if (elt.scrollLeft != left)
          elt.scrollLeft = left;
      }
    }
  }
  var scratchRange;
  function textRange(node, from, to = from) {
    let range = scratchRange || (scratchRange = document.createRange());
    range.setEnd(node, to);
    range.setStart(node, from);
    return range;
  }
  function dispatchKey(elt, name2, code, mods) {
    let options = { key: name2, code: name2, keyCode: code, which: code, cancelable: true };
    if (mods)
      ({ altKey: options.altKey, ctrlKey: options.ctrlKey, shiftKey: options.shiftKey, metaKey: options.metaKey } = mods);
    let down = new KeyboardEvent("keydown", options);
    down.synthetic = true;
    elt.dispatchEvent(down);
    let up = new KeyboardEvent("keyup", options);
    up.synthetic = true;
    elt.dispatchEvent(up);
    return down.defaultPrevented || up.defaultPrevented;
  }
  function getRoot(node) {
    while (node) {
      if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
        return node;
      node = node.assignedSlot || node.parentNode;
    }
    return null;
  }
  function clearAttributes(node) {
    while (node.attributes.length)
      node.removeAttributeNode(node.attributes[0]);
  }
  function atElementStart(doc2, selection) {
    let node = selection.focusNode, offset = selection.focusOffset;
    if (!node || selection.anchorNode != node || selection.anchorOffset != offset)
      return false;
    offset = Math.min(offset, maxOffset(node));
    for (; ; ) {
      if (offset) {
        if (node.nodeType != 1)
          return false;
        let prev = node.childNodes[offset - 1];
        if (prev.contentEditable == "false")
          offset--;
        else {
          node = prev;
          offset = maxOffset(node);
        }
      } else if (node == doc2) {
        return true;
      } else {
        offset = domIndex(node);
        node = node.parentNode;
      }
    }
  }
  function isScrolledToBottom(elt) {
    return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);
  }
  function textNodeBefore(startNode, startOffset) {
    for (let node = startNode, offset = startOffset; ; ) {
      if (node.nodeType == 3 && offset > 0) {
        return { node, offset };
      } else if (node.nodeType == 1 && offset > 0) {
        if (node.contentEditable == "false")
          return null;
        node = node.childNodes[offset - 1];
        offset = maxOffset(node);
      } else if (node.parentNode && !isBlockElement(node)) {
        offset = domIndex(node);
        node = node.parentNode;
      } else {
        return null;
      }
    }
  }
  function textNodeAfter(startNode, startOffset) {
    for (let node = startNode, offset = startOffset; ; ) {
      if (node.nodeType == 3 && offset < node.nodeValue.length) {
        return { node, offset };
      } else if (node.nodeType == 1 && offset < node.childNodes.length) {
        if (node.contentEditable == "false")
          return null;
        node = node.childNodes[offset];
        offset = 0;
      } else if (node.parentNode && !isBlockElement(node)) {
        offset = domIndex(node) + 1;
        node = node.parentNode;
      } else {
        return null;
      }
    }
  }
  var DOMPos = class _DOMPos {
    constructor(node, offset, precise = true) {
      this.node = node;
      this.offset = offset;
      this.precise = precise;
    }
    static before(dom, precise) {
      return new _DOMPos(dom.parentNode, domIndex(dom), precise);
    }
    static after(dom, precise) {
      return new _DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
    }
  };
  var noChildren = [];
  var ContentView = class _ContentView {
    constructor() {
      this.parent = null;
      this.dom = null;
      this.flags = 2;
    }
    get overrideDOMText() {
      return null;
    }
    get posAtStart() {
      return this.parent ? this.parent.posBefore(this) : 0;
    }
    get posAtEnd() {
      return this.posAtStart + this.length;
    }
    posBefore(view) {
      let pos = this.posAtStart;
      for (let child of this.children) {
        if (child == view)
          return pos;
        pos += child.length + child.breakAfter;
      }
      throw new RangeError("Invalid child in posBefore");
    }
    posAfter(view) {
      return this.posBefore(view) + view.length;
    }
    sync(view, track) {
      if (this.flags & 2) {
        let parent = this.dom;
        let prev = null, next;
        for (let child of this.children) {
          if (child.flags & 7) {
            if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
              let contentView = _ContentView.get(next);
              if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
                child.reuseDOM(next);
            }
            child.sync(view, track);
            child.flags &= ~7;
          }
          next = prev ? prev.nextSibling : parent.firstChild;
          if (track && !track.written && track.node == parent && next != child.dom)
            track.written = true;
          if (child.dom.parentNode == parent) {
            while (next && next != child.dom)
              next = rm$1(next);
          } else {
            parent.insertBefore(child.dom, next);
          }
          prev = child.dom;
        }
        next = prev ? prev.nextSibling : parent.firstChild;
        if (next && track && track.node == parent)
          track.written = true;
        while (next)
          next = rm$1(next);
      } else if (this.flags & 1) {
        for (let child of this.children)
          if (child.flags & 7) {
            child.sync(view, track);
            child.flags &= ~7;
          }
      }
    }
    reuseDOM(_dom) {
    }
    localPosFromDOM(node, offset) {
      let after;
      if (node == this.dom) {
        after = this.dom.childNodes[offset];
      } else {
        let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
        for (; ; ) {
          let parent = node.parentNode;
          if (parent == this.dom)
            break;
          if (bias == 0 && parent.firstChild != parent.lastChild) {
            if (node == parent.firstChild)
              bias = -1;
            else
              bias = 1;
          }
          node = parent;
        }
        if (bias < 0)
          after = node;
        else
          after = node.nextSibling;
      }
      if (after == this.dom.firstChild)
        return 0;
      while (after && !_ContentView.get(after))
        after = after.nextSibling;
      if (!after)
        return this.length;
      for (let i = 0, pos = 0; ; i++) {
        let child = this.children[i];
        if (child.dom == after)
          return pos;
        pos += child.length + child.breakAfter;
      }
    }
    domBoundsAround(from, to, offset = 0) {
      let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
      for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
        let child = this.children[i], end = pos + child.length;
        if (pos < from && end > to)
          return child.domBoundsAround(from, to, pos);
        if (end >= from && fromI == -1) {
          fromI = i;
          fromStart = pos;
        }
        if (pos > to && child.dom.parentNode == this.dom) {
          toI = i;
          toEnd = prevEnd;
          break;
        }
        prevEnd = end;
        pos = end + child.breakAfter;
      }
      return {
        from: fromStart,
        to: toEnd < 0 ? offset + this.length : toEnd,
        startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
        endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
      };
    }
    markDirty(andParent = false) {
      this.flags |= 2;
      this.markParentsDirty(andParent);
    }
    markParentsDirty(childList) {
      for (let parent = this.parent; parent; parent = parent.parent) {
        if (childList)
          parent.flags |= 2;
        if (parent.flags & 1)
          return;
        parent.flags |= 1;
        childList = false;
      }
    }
    setParent(parent) {
      if (this.parent != parent) {
        this.parent = parent;
        if (this.flags & 7)
          this.markParentsDirty(true);
      }
    }
    setDOM(dom) {
      if (this.dom == dom)
        return;
      if (this.dom)
        this.dom.cmView = null;
      this.dom = dom;
      dom.cmView = this;
    }
    get rootView() {
      for (let v = this; ; ) {
        let parent = v.parent;
        if (!parent)
          return v;
        v = parent;
      }
    }
    replaceChildren(from, to, children = noChildren) {
      this.markDirty();
      for (let i = from; i < to; i++) {
        let child = this.children[i];
        if (child.parent == this && children.indexOf(child) < 0)
          child.destroy();
      }
      if (children.length < 250)
        this.children.splice(from, to - from, ...children);
      else
        this.children = [].concat(this.children.slice(0, from), children, this.children.slice(to));
      for (let i = 0; i < children.length; i++)
        children[i].setParent(this);
    }
    ignoreMutation(_rec) {
      return false;
    }
    ignoreEvent(_event) {
      return false;
    }
    childCursor(pos = this.length) {
      return new ChildCursor(this.children, pos, this.children.length);
    }
    childPos(pos, bias = 1) {
      return this.childCursor().findPos(pos, bias);
    }
    toString() {
      let name2 = this.constructor.name.replace("View", "");
      return name2 + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name2 == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
    }
    static get(node) {
      return node.cmView;
    }
    get isEditable() {
      return true;
    }
    get isWidget() {
      return false;
    }
    get isHidden() {
      return false;
    }
    merge(from, to, source, hasStart, openStart, openEnd) {
      return false;
    }
    become(other) {
      return false;
    }
    canReuseDOM(other) {
      return other.constructor == this.constructor && !((this.flags | other.flags) & 8);
    }
    // When this is a zero-length view with a side, this should return a
    // number <= 0 to indicate it is before its position, or a
    // number > 0 when after its position.
    getSide() {
      return 0;
    }
    destroy() {
      for (let child of this.children)
        if (child.parent == this)
          child.destroy();
      this.parent = null;
    }
  };
  ContentView.prototype.breakAfter = 0;
  function rm$1(dom) {
    let next = dom.nextSibling;
    dom.parentNode.removeChild(dom);
    return next;
  }
  var ChildCursor = class {
    constructor(children, pos, i) {
      this.children = children;
      this.pos = pos;
      this.i = i;
      this.off = 0;
    }
    findPos(pos, bias = 1) {
      for (; ; ) {
        if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
          this.off = pos - this.pos;
          return this;
        }
        let next = this.children[--this.i];
        this.pos -= next.length + next.breakAfter;
      }
    }
  };
  function replaceRange(parent, fromI, fromOff, toI, toOff, insert2, breakAtStart, openStart, openEnd) {
    let { children } = parent;
    let before = children.length ? children[fromI] : null;
    let last = insert2.length ? insert2[insert2.length - 1] : null;
    let breakAtEnd = last ? last.breakAfter : breakAtStart;
    if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert2.length < 2 && before.merge(fromOff, toOff, insert2.length ? last : null, fromOff == 0, openStart, openEnd))
      return;
    if (toI < children.length) {
      let after = children[toI];
      if (after && (toOff < after.length || after.breakAfter && (last === null || last === void 0 ? void 0 : last.breakAfter))) {
        if (fromI == toI) {
          after = after.split(toOff);
          toOff = 0;
        }
        if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
          insert2[insert2.length - 1] = after;
        } else {
          if (toOff || after.children.length && !after.children[0].length)
            after.merge(0, toOff, null, false, 0, openEnd);
          insert2.push(after);
        }
      } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
        if (last)
          last.breakAfter = 1;
        else
          breakAtStart = 1;
      }
      toI++;
    }
    if (before) {
      before.breakAfter = breakAtStart;
      if (fromOff > 0) {
        if (!breakAtStart && insert2.length && before.merge(fromOff, before.length, insert2[0], false, openStart, 0)) {
          before.breakAfter = insert2.shift().breakAfter;
        } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
          before.merge(fromOff, before.length, null, false, openStart, 0);
        }
        fromI++;
      }
    }
    while (fromI < toI && insert2.length) {
      if (children[toI - 1].become(insert2[insert2.length - 1])) {
        toI--;
        insert2.pop();
        openEnd = insert2.length ? 0 : openStart;
      } else if (children[fromI].become(insert2[0])) {
        fromI++;
        insert2.shift();
        openStart = insert2.length ? 0 : openEnd;
      } else {
        break;
      }
    }
    if (!insert2.length && fromI && toI < children.length && !children[fromI - 1].breakAfter && children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
      fromI--;
    if (fromI < toI || insert2.length)
      parent.replaceChildren(fromI, toI, insert2);
  }
  function mergeChildrenInto(parent, from, to, insert2, openStart, openEnd) {
    let cur2 = parent.childCursor();
    let { i: toI, off: toOff } = cur2.findPos(to, 1);
    let { i: fromI, off: fromOff } = cur2.findPos(from, -1);
    let dLen = from - to;
    for (let view of insert2)
      dLen += view.length;
    parent.length += dLen;
    replaceRange(parent, fromI, fromOff, toI, toOff, insert2, 0, openStart, openEnd);
  }
  var nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
  var doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
  var ie_edge = /* @__PURE__ */ /Edge\/(\d+)/.exec(nav.userAgent);
  var ie_upto10 = /* @__PURE__ */ /MSIE \d/.test(nav.userAgent);
  var ie_11up = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
  var ie2 = !!(ie_upto10 || ie_11up || ie_edge);
  var gecko = !ie2 && /* @__PURE__ */ /gecko\/(\d+)/i.test(nav.userAgent);
  var chrome = !ie2 && /* @__PURE__ */ /Chrome\/(\d+)/.exec(nav.userAgent);
  var webkit = "webkitFontSmoothing" in doc.documentElement.style;
  var safari = !ie2 && /* @__PURE__ */ /Apple Computer/.test(nav.vendor);
  var ios = safari && (/* @__PURE__ */ /Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
  var browser = {
    mac: ios || /* @__PURE__ */ /Mac/.test(nav.platform),
    windows: /* @__PURE__ */ /Win/.test(nav.platform),
    linux: /* @__PURE__ */ /Linux|X11/.test(nav.platform),
    ie: ie2,
    ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
    gecko,
    gecko_version: gecko ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
    chrome: !!chrome,
    chrome_version: chrome ? +chrome[1] : 0,
    ios,
    android: /* @__PURE__ */ /Android\b/.test(nav.userAgent),
    webkit,
    safari,
    webkit_version: webkit ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
    tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
  };
  var MaxJoinLen = 256;
  var TextView = class _TextView extends ContentView {
    constructor(text) {
      super();
      this.text = text;
    }
    get length() {
      return this.text.length;
    }
    createDOM(textDOM) {
      this.setDOM(textDOM || document.createTextNode(this.text));
    }
    sync(view, track) {
      if (!this.dom)
        this.createDOM();
      if (this.dom.nodeValue != this.text) {
        if (track && track.node == this.dom)
          track.written = true;
        this.dom.nodeValue = this.text;
      }
    }
    reuseDOM(dom) {
      if (dom.nodeType == 3)
        this.createDOM(dom);
    }
    merge(from, to, source) {
      if (this.flags & 8 || source && (!(source instanceof _TextView) || this.length - (to - from) + source.length > MaxJoinLen || source.flags & 8))
        return false;
      this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
      this.markDirty();
      return true;
    }
    split(from) {
      let result = new _TextView(this.text.slice(from));
      this.text = this.text.slice(0, from);
      this.markDirty();
      result.flags |= this.flags & 8;
      return result;
    }
    localPosFromDOM(node, offset) {
      return node == this.dom ? offset : offset ? this.text.length : 0;
    }
    domAtPos(pos) {
      return new DOMPos(this.dom, pos);
    }
    domBoundsAround(_from, _to, offset) {
      return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
    }
    coordsAt(pos, side) {
      return textCoords(this.dom, pos, side);
    }
  };
  var MarkView = class _MarkView extends ContentView {
    constructor(mark, children = [], length2 = 0) {
      super();
      this.mark = mark;
      this.children = children;
      this.length = length2;
      for (let ch of children)
        ch.setParent(this);
    }
    setAttrs(dom) {
      clearAttributes(dom);
      if (this.mark.class)
        dom.className = this.mark.class;
      if (this.mark.attrs)
        for (let name2 in this.mark.attrs)
          dom.setAttribute(name2, this.mark.attrs[name2]);
      return dom;
    }
    canReuseDOM(other) {
      return super.canReuseDOM(other) && !((this.flags | other.flags) & 8);
    }
    reuseDOM(node) {
      if (node.nodeName == this.mark.tagName.toUpperCase()) {
        this.setDOM(node);
        this.flags |= 4 | 2;
      }
    }
    sync(view, track) {
      if (!this.dom)
        this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
      else if (this.flags & 4)
        this.setAttrs(this.dom);
      super.sync(view, track);
    }
    merge(from, to, source, _hasStart, openStart, openEnd) {
      if (source && (!(source instanceof _MarkView && source.mark.eq(this.mark)) || from && openStart <= 0 || to < this.length && openEnd <= 0))
        return false;
      mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart - 1, openEnd - 1);
      this.markDirty();
      return true;
    }
    split(from) {
      let result = [], off = 0, detachFrom = -1, i = 0;
      for (let elt of this.children) {
        let end = off + elt.length;
        if (end > from)
          result.push(off < from ? elt.split(from - off) : elt);
        if (detachFrom < 0 && off >= from)
          detachFrom = i;
        off = end;
        i++;
      }
      let length2 = this.length - from;
      this.length = from;
      if (detachFrom > -1) {
        this.children.length = detachFrom;
        this.markDirty();
      }
      return new _MarkView(this.mark, result, length2);
    }
    domAtPos(pos) {
      return inlineDOMAtPos(this, pos);
    }
    coordsAt(pos, side) {
      return coordsInChildren(this, pos, side);
    }
  };
  function textCoords(text, pos, side) {
    let length2 = text.nodeValue.length;
    if (pos > length2)
      pos = length2;
    let from = pos, to = pos, flatten2 = 0;
    if (pos == 0 && side < 0 || pos == length2 && side >= 0) {
      if (!(browser.chrome || browser.gecko)) {
        if (pos) {
          from--;
          flatten2 = 1;
        } else if (to < length2) {
          to++;
          flatten2 = -1;
        }
      }
    } else {
      if (side < 0)
        from--;
      else if (to < length2)
        to++;
    }
    let rects = textRange(text, from, to).getClientRects();
    if (!rects.length)
      return null;
    let rect = rects[(flatten2 ? flatten2 < 0 : side >= 0) ? 0 : rects.length - 1];
    if (browser.safari && !flatten2 && rect.width == 0)
      rect = Array.prototype.find.call(rects, (r) => r.width) || rect;
    return flatten2 ? flattenRect(rect, flatten2 < 0) : rect || null;
  }
  var WidgetView = class _WidgetView extends ContentView {
    static create(widget, length2, side) {
      return new _WidgetView(widget, length2, side);
    }
    constructor(widget, length2, side) {
      super();
      this.widget = widget;
      this.length = length2;
      this.side = side;
      this.prevWidget = null;
    }
    split(from) {
      let result = _WidgetView.create(this.widget, this.length - from, this.side);
      this.length -= from;
      return result;
    }
    sync(view) {
      if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
        if (this.dom && this.prevWidget)
          this.prevWidget.destroy(this.dom);
        this.prevWidget = null;
        this.setDOM(this.widget.toDOM(view));
        if (!this.widget.editable)
          this.dom.contentEditable = "false";
      }
    }
    getSide() {
      return this.side;
    }
    merge(from, to, source, hasStart, openStart, openEnd) {
      if (source && (!(source instanceof _WidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
        return false;
      this.length = from + (source ? source.length : 0) + (this.length - to);
      return true;
    }
    become(other) {
      if (other instanceof _WidgetView && other.side == this.side && this.widget.constructor == other.widget.constructor) {
        if (!this.widget.compare(other.widget))
          this.markDirty(true);
        if (this.dom && !this.prevWidget)
          this.prevWidget = this.widget;
        this.widget = other.widget;
        this.length = other.length;
        return true;
      }
      return false;
    }
    ignoreMutation() {
      return true;
    }
    ignoreEvent(event) {
      return this.widget.ignoreEvent(event);
    }
    get overrideDOMText() {
      if (this.length == 0)
        return Text.empty;
      let top2 = this;
      while (top2.parent)
        top2 = top2.parent;
      let { view } = top2, text = view && view.state.doc, start = this.posAtStart;
      return text ? text.slice(start, start + this.length) : Text.empty;
    }
    domAtPos(pos) {
      return (this.length ? pos == 0 : this.side > 0) ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
    }
    domBoundsAround() {
      return null;
    }
    coordsAt(pos, side) {
      let custom = this.widget.coordsAt(this.dom, pos, side);
      if (custom)
        return custom;
      let rects = this.dom.getClientRects(), rect = null;
      if (!rects.length)
        return null;
      let fromBack = this.side ? this.side < 0 : pos > 0;
      for (let i = fromBack ? rects.length - 1 : 0; ; i += fromBack ? -1 : 1) {
        rect = rects[i];
        if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
          break;
      }
      return flattenRect(rect, !fromBack);
    }
    get isEditable() {
      return false;
    }
    get isWidget() {
      return true;
    }
    get isHidden() {
      return this.widget.isHidden;
    }
    destroy() {
      super.destroy();
      if (this.dom)
        this.widget.destroy(this.dom);
    }
  };
  var WidgetBufferView = class _WidgetBufferView extends ContentView {
    constructor(side) {
      super();
      this.side = side;
    }
    get length() {
      return 0;
    }
    merge() {
      return false;
    }
    become(other) {
      return other instanceof _WidgetBufferView && other.side == this.side;
    }
    split() {
      return new _WidgetBufferView(this.side);
    }
    sync() {
      if (!this.dom) {
        let dom = document.createElement("img");
        dom.className = "cm-widgetBuffer";
        dom.setAttribute("aria-hidden", "true");
        this.setDOM(dom);
      }
    }
    getSide() {
      return this.side;
    }
    domAtPos(pos) {
      return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom);
    }
    localPosFromDOM() {
      return 0;
    }
    domBoundsAround() {
      return null;
    }
    coordsAt(pos) {
      return this.dom.getBoundingClientRect();
    }
    get overrideDOMText() {
      return Text.empty;
    }
    get isHidden() {
      return true;
    }
  };
  TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
  function inlineDOMAtPos(parent, pos) {
    let dom = parent.dom, { children } = parent, i = 0;
    for (let off = 0; i < children.length; i++) {
      let child = children[i], end = off + child.length;
      if (end == off && child.getSide() <= 0)
        continue;
      if (pos > off && pos < end && child.dom.parentNode == dom)
        return child.domAtPos(pos - off);
      if (pos <= off)
        break;
      off = end;
    }
    for (let j = i; j > 0; j--) {
      let prev = children[j - 1];
      if (prev.dom.parentNode == dom)
        return prev.domAtPos(prev.length);
    }
    for (let j = i; j < children.length; j++) {
      let next = children[j];
      if (next.dom.parentNode == dom)
        return next.domAtPos(0);
    }
    return new DOMPos(dom, 0);
  }
  function joinInlineInto(parent, view, open) {
    let last, { children } = parent;
    if (open > 0 && view instanceof MarkView && children.length && (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
      joinInlineInto(last, view.children[0], open - 1);
    } else {
      children.push(view);
      view.setParent(parent);
    }
    parent.length += view.length;
  }
  function coordsInChildren(view, pos, side) {
    let before = null, beforePos = -1, after = null, afterPos = -1;
    function scan(view2, pos2) {
      for (let i = 0, off = 0; i < view2.children.length && off <= pos2; i++) {
        let child = view2.children[i], end = off + child.length;
        if (end >= pos2) {
          if (child.children.length) {
            scan(child, pos2 - off);
          } else if ((!after || after.isHidden && (side > 0 || onSameLine(after, child))) && (end > pos2 || off == end && child.getSide() > 0)) {
            after = child;
            afterPos = pos2 - off;
          } else if (off < pos2 || off == end && child.getSide() < 0 && !child.isHidden) {
            before = child;
            beforePos = pos2 - off;
          }
        }
        off = end;
      }
    }
    scan(view, pos);
    let target = (side < 0 ? before : after) || before || after;
    if (target)
      return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
    return fallbackRect(view);
  }
  function fallbackRect(view) {
    let last = view.dom.lastChild;
    if (!last)
      return view.dom.getBoundingClientRect();
    let rects = clientRectsFor(last);
    return rects[rects.length - 1] || null;
  }
  function onSameLine(a, b) {
    let posA = a.coordsAt(0, 1), posB = b.coordsAt(0, 1);
    return posA && posB && posB.top < posA.bottom;
  }
  function combineAttrs(source, target) {
    for (let name2 in source) {
      if (name2 == "class" && target.class)
        target.class += " " + source.class;
      else if (name2 == "style" && target.style)
        target.style += ";" + source.style;
      else
        target[name2] = source[name2];
    }
    return target;
  }
  var noAttrs = /* @__PURE__ */ Object.create(null);
  function attrsEq(a, b, ignore) {
    if (a == b)
      return true;
    if (!a)
      a = noAttrs;
    if (!b)
      b = noAttrs;
    let keysA = Object.keys(a), keysB = Object.keys(b);
    if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) != keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))
      return false;
    for (let key of keysA) {
      if (key != ignore && (keysB.indexOf(key) == -1 || a[key] !== b[key]))
        return false;
    }
    return true;
  }
  function updateAttrs(dom, prev, attrs) {
    let changed = false;
    if (prev) {
      for (let name2 in prev)
        if (!(attrs && name2 in attrs)) {
          changed = true;
          if (name2 == "style")
            dom.style.cssText = "";
          else
            dom.removeAttribute(name2);
        }
    }
    if (attrs) {
      for (let name2 in attrs)
        if (!(prev && prev[name2] == attrs[name2])) {
          changed = true;
          if (name2 == "style")
            dom.style.cssText = attrs[name2];
          else
            dom.setAttribute(name2, attrs[name2]);
        }
    }
    return changed;
  }
  function getAttrs(dom) {
    let attrs = /* @__PURE__ */ Object.create(null);
    for (let i = 0; i < dom.attributes.length; i++) {
      let attr = dom.attributes[i];
      attrs[attr.name] = attr.value;
    }
    return attrs;
  }
  var WidgetType = class {
    /**
    Compare this instance to another instance of the same type.
    (TypeScript can't express this, but only instances of the same
    specific class will be passed to this method.) This is used to
    avoid redrawing widgets when they are replaced by a new
    decoration of the same type. The default implementation just
    returns `false`, which will cause new instances of the widget to
    always be redrawn.
    */
    eq(widget) {
      return false;
    }
    /**
    Update a DOM element created by a widget of the same type (but
    different, non-`eq` content) to reflect this widget. May return
    true to indicate that it could update, false to indicate it
    couldn't (in which case the widget will be redrawn). The default
    implementation just returns false.
    */
    updateDOM(dom, view) {
      return false;
    }
    /**
    @internal
    */
    compare(other) {
      return this == other || this.constructor == other.constructor && this.eq(other);
    }
    /**
    The estimated height this widget will have, to be used when
    estimating the height of content that hasn't been drawn. May
    return -1 to indicate you don't know. The default implementation
    returns -1.
    */
    get estimatedHeight() {
      return -1;
    }
    /**
    For inline widgets that are displayed inline (as opposed to
    `inline-block`) and introduce line breaks (through `<br>` tags
    or textual newlines), this must indicate the amount of line
    breaks they introduce. Defaults to 0.
    */
    get lineBreaks() {
      return 0;
    }
    /**
    Can be used to configure which kinds of events inside the widget
    should be ignored by the editor. The default is to ignore all
    events.
    */
    ignoreEvent(event) {
      return true;
    }
    /**
    Override the way screen coordinates for positions at/in the
    widget are found. `pos` will be the offset into the widget, and
    `side` the side of the position that is being queried—less than
    zero for before, greater than zero for after, and zero for
    directly at that position.
    */
    coordsAt(dom, pos, side) {
      return null;
    }
    /**
    @internal
    */
    get isHidden() {
      return false;
    }
    /**
    @internal
    */
    get editable() {
      return false;
    }
    /**
    This is called when the an instance of the widget is removed
    from the editor view.
    */
    destroy(dom) {
    }
  };
  var BlockType = /* @__PURE__ */ function(BlockType2) {
    BlockType2[BlockType2["Text"] = 0] = "Text";
    BlockType2[BlockType2["WidgetBefore"] = 1] = "WidgetBefore";
    BlockType2[BlockType2["WidgetAfter"] = 2] = "WidgetAfter";
    BlockType2[BlockType2["WidgetRange"] = 3] = "WidgetRange";
    return BlockType2;
  }(BlockType || (BlockType = {}));
  var Decoration = class extends RangeValue {
    constructor(startSide, endSide, widget, spec) {
      super();
      this.startSide = startSide;
      this.endSide = endSide;
      this.widget = widget;
      this.spec = spec;
    }
    /**
    @internal
    */
    get heightRelevant() {
      return false;
    }
    /**
    Create a mark decoration, which influences the styling of the
    content in its range. Nested mark decorations will cause nested
    DOM elements to be created. Nesting order is determined by
    precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
    the higher-precedence decorations creating the inner DOM nodes.
    Such elements are split on line boundaries and on the boundaries
    of lower-precedence decorations.
    */
    static mark(spec) {
      return new MarkDecoration(spec);
    }
    /**
    Create a widget decoration, which displays a DOM element at the
    given position.
    */
    static widget(spec) {
      let side = Math.max(-1e4, Math.min(1e4, spec.side || 0)), block = !!spec.block;
      side += block && !spec.inlineOrder ? side > 0 ? 3e8 : -4e8 : side > 0 ? 1e8 : -1e8;
      return new PointDecoration(spec, side, side, block, spec.widget || null, false);
    }
    /**
    Create a replace decoration which replaces the given range with
    a widget, or simply hides it.
    */
    static replace(spec) {
      let block = !!spec.block, startSide, endSide;
      if (spec.isBlockGap) {
        startSide = -5e8;
        endSide = 4e8;
      } else {
        let { start, end } = getInclusive(spec, block);
        startSide = (start ? block ? -3e8 : -1 : 5e8) - 1;
        endSide = (end ? block ? 2e8 : 1 : -6e8) + 1;
      }
      return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
    }
    /**
    Create a line decoration, which can add DOM attributes to the
    line starting at the given position.
    */
    static line(spec) {
      return new LineDecoration(spec);
    }
    /**
    Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
    decorated range or ranges. If the ranges aren't already sorted,
    pass `true` for `sort` to make the library sort them for you.
    */
    static set(of, sort = false) {
      return RangeSet.of(of, sort);
    }
    /**
    @internal
    */
    hasHeight() {
      return this.widget ? this.widget.estimatedHeight > -1 : false;
    }
  };
  Decoration.none = RangeSet.empty;
  var MarkDecoration = class _MarkDecoration extends Decoration {
    constructor(spec) {
      let { start, end } = getInclusive(spec);
      super(start ? -1 : 5e8, end ? 1 : -6e8, null, spec);
      this.tagName = spec.tagName || "span";
      this.class = spec.class || "";
      this.attrs = spec.attributes || null;
    }
    eq(other) {
      var _a2, _b;
      return this == other || other instanceof _MarkDecoration && this.tagName == other.tagName && (this.class || ((_a2 = this.attrs) === null || _a2 === void 0 ? void 0 : _a2.class)) == (other.class || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b.class)) && attrsEq(this.attrs, other.attrs, "class");
    }
    range(from, to = from) {
      if (from >= to)
        throw new RangeError("Mark decorations may not be empty");
      return super.range(from, to);
    }
  };
  MarkDecoration.prototype.point = false;
  var LineDecoration = class _LineDecoration extends Decoration {
    constructor(spec) {
      super(-2e8, -2e8, null, spec);
    }
    eq(other) {
      return other instanceof _LineDecoration && this.spec.class == other.spec.class && attrsEq(this.spec.attributes, other.spec.attributes);
    }
    range(from, to = from) {
      if (to != from)
        throw new RangeError("Line decoration ranges must be zero-length");
      return super.range(from, to);
    }
  };
  LineDecoration.prototype.mapMode = MapMode.TrackBefore;
  LineDecoration.prototype.point = true;
  var PointDecoration = class _PointDecoration extends Decoration {
    constructor(spec, startSide, endSide, block, widget, isReplace) {
      super(startSide, endSide, widget, spec);
      this.block = block;
      this.isReplace = isReplace;
      this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
    }
    // Only relevant when this.block == true
    get type() {
      return this.startSide != this.endSide ? BlockType.WidgetRange : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
    }
    get heightRelevant() {
      return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
    }
    eq(other) {
      return other instanceof _PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
    }
    range(from, to = from) {
      if (this.isReplace && (from > to || from == to && this.startSide > 0 && this.endSide <= 0))
        throw new RangeError("Invalid range for replacement decoration");
      if (!this.isReplace && to != from)
        throw new RangeError("Widget decorations can only have zero-length ranges");
      return super.range(from, to);
    }
  };
  PointDecoration.prototype.point = true;
  function getInclusive(spec, block = false) {
    let { inclusiveStart: start, inclusiveEnd: end } = spec;
    if (start == null)
      start = spec.inclusive;
    if (end == null)
      end = spec.inclusive;
    return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
  }
  function widgetsEq(a, b) {
    return a == b || !!(a && b && a.compare(b));
  }
  function addRange(from, to, ranges, margin = 0) {
    let last = ranges.length - 1;
    if (last >= 0 && ranges[last] + margin >= from)
      ranges[last] = Math.max(ranges[last], to);
    else
      ranges.push(from, to);
  }
  var LineView = class _LineView extends ContentView {
    constructor() {
      super(...arguments);
      this.children = [];
      this.length = 0;
      this.prevAttrs = void 0;
      this.attrs = null;
      this.breakAfter = 0;
    }
    // Consumes source
    merge(from, to, source, hasStart, openStart, openEnd) {
      if (source) {
        if (!(source instanceof _LineView))
          return false;
        if (!this.dom)
          source.transferDOM(this);
      }
      if (hasStart)
        this.setDeco(source ? source.attrs : null);
      mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart, openEnd);
      return true;
    }
    split(at) {
      let end = new _LineView();
      end.breakAfter = this.breakAfter;
      if (this.length == 0)
        return end;
      let { i, off } = this.childPos(at);
      if (off) {
        end.append(this.children[i].split(off), 0);
        this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
        i++;
      }
      for (let j = i; j < this.children.length; j++)
        end.append(this.children[j], 0);
      while (i > 0 && this.children[i - 1].length == 0)
        this.children[--i].destroy();
      this.children.length = i;
      this.markDirty();
      this.length = at;
      return end;
    }
    transferDOM(other) {
      if (!this.dom)
        return;
      this.markDirty();
      other.setDOM(this.dom);
      other.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs;
      this.prevAttrs = void 0;
      this.dom = null;
    }
    setDeco(attrs) {
      if (!attrsEq(this.attrs, attrs)) {
        if (this.dom) {
          this.prevAttrs = this.attrs;
          this.markDirty();
        }
        this.attrs = attrs;
      }
    }
    append(child, openStart) {
      joinInlineInto(this, child, openStart);
    }
    // Only called when building a line view in ContentBuilder
    addLineDeco(deco) {
      let attrs = deco.spec.attributes, cls = deco.spec.class;
      if (attrs)
        this.attrs = combineAttrs(attrs, this.attrs || {});
      if (cls)
        this.attrs = combineAttrs({ class: cls }, this.attrs || {});
    }
    domAtPos(pos) {
      return inlineDOMAtPos(this, pos);
    }
    reuseDOM(node) {
      if (node.nodeName == "DIV") {
        this.setDOM(node);
        this.flags |= 4 | 2;
      }
    }
    sync(view, track) {
      var _a2;
      if (!this.dom) {
        this.setDOM(document.createElement("div"));
        this.dom.className = "cm-line";
        this.prevAttrs = this.attrs ? null : void 0;
      } else if (this.flags & 4) {
        clearAttributes(this.dom);
        this.dom.className = "cm-line";
        this.prevAttrs = this.attrs ? null : void 0;
      }
      if (this.prevAttrs !== void 0) {
        updateAttrs(this.dom, this.prevAttrs, this.attrs);
        this.dom.classList.add("cm-line");
        this.prevAttrs = void 0;
      }
      super.sync(view, track);
      let last = this.dom.lastChild;
      while (last && ContentView.get(last) instanceof MarkView)
        last = last.lastChild;
      if (!last || !this.length || last.nodeName != "BR" && ((_a2 = ContentView.get(last)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) == false && (!browser.ios || !this.children.some((ch) => ch instanceof TextView))) {
        let hack = document.createElement("BR");
        hack.cmIgnore = true;
        this.dom.appendChild(hack);
      }
    }
    measureTextSize() {
      if (this.children.length == 0 || this.length > 20)
        return null;
      let totalWidth = 0, textHeight;
      for (let child of this.children) {
        if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
          return null;
        let rects = clientRectsFor(child.dom);
        if (rects.length != 1)
          return null;
        totalWidth += rects[0].width;
        textHeight = rects[0].height;
      }
      return !totalWidth ? null : {
        lineHeight: this.dom.getBoundingClientRect().height,
        charWidth: totalWidth / this.length,
        textHeight
      };
    }
    coordsAt(pos, side) {
      let rect = coordsInChildren(this, pos, side);
      if (!this.children.length && rect && this.parent) {
        let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
        if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
          let dist2 = (height - heightOracle.textHeight) / 2;
          return { top: rect.top + dist2, bottom: rect.bottom - dist2, left: rect.left, right: rect.left };
        }
      }
      return rect;
    }
    become(other) {
      return other instanceof _LineView && this.children.length == 0 && other.children.length == 0 && attrsEq(this.attrs, other.attrs) && this.breakAfter == other.breakAfter;
    }
    covers() {
      return true;
    }
    static find(docView, pos) {
      for (let i = 0, off = 0; i < docView.children.length; i++) {
        let block = docView.children[i], end = off + block.length;
        if (end >= pos) {
          if (block instanceof _LineView)
            return block;
          if (end > pos)
            break;
        }
        off = end + block.breakAfter;
      }
      return null;
    }
  };
  var BlockWidgetView = class _BlockWidgetView extends ContentView {
    constructor(widget, length2, deco) {
      super();
      this.widget = widget;
      this.length = length2;
      this.deco = deco;
      this.breakAfter = 0;
      this.prevWidget = null;
    }
    merge(from, to, source, _takeDeco, openStart, openEnd) {
      if (source && (!(source instanceof _BlockWidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
        return false;
      this.length = from + (source ? source.length : 0) + (this.length - to);
      return true;
    }
    domAtPos(pos) {
      return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
    }
    split(at) {
      let len = this.length - at;
      this.length = at;
      let end = new _BlockWidgetView(this.widget, len, this.deco);
      end.breakAfter = this.breakAfter;
      return end;
    }
    get children() {
      return noChildren;
    }
    sync(view) {
      if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
        if (this.dom && this.prevWidget)
          this.prevWidget.destroy(this.dom);
        this.prevWidget = null;
        this.setDOM(this.widget.toDOM(view));
        if (!this.widget.editable)
          this.dom.contentEditable = "false";
      }
    }
    get overrideDOMText() {
      return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
    }
    domBoundsAround() {
      return null;
    }
    become(other) {
      if (other instanceof _BlockWidgetView && other.widget.constructor == this.widget.constructor) {
        if (!other.widget.compare(this.widget))
          this.markDirty(true);
        if (this.dom && !this.prevWidget)
          this.prevWidget = this.widget;
        this.widget = other.widget;
        this.length = other.length;
        this.deco = other.deco;
        this.breakAfter = other.breakAfter;
        return true;
      }
      return false;
    }
    ignoreMutation() {
      return true;
    }
    ignoreEvent(event) {
      return this.widget.ignoreEvent(event);
    }
    get isEditable() {
      return false;
    }
    get isWidget() {
      return true;
    }
    coordsAt(pos, side) {
      let custom = this.widget.coordsAt(this.dom, pos, side);
      if (custom)
        return custom;
      if (this.widget instanceof BlockGapWidget)
        return null;
      return flattenRect(this.dom.getBoundingClientRect(), this.length ? pos == 0 : side <= 0);
    }
    destroy() {
      super.destroy();
      if (this.dom)
        this.widget.destroy(this.dom);
    }
    covers(side) {
      let { startSide, endSide } = this.deco;
      return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;
    }
  };
  var BlockGapWidget = class extends WidgetType {
    constructor(height) {
      super();
      this.height = height;
    }
    toDOM() {
      let elt = document.createElement("div");
      elt.className = "cm-gap";
      this.updateDOM(elt);
      return elt;
    }
    eq(other) {
      return other.height == this.height;
    }
    updateDOM(elt) {
      elt.style.height = this.height + "px";
      return true;
    }
    get editable() {
      return true;
    }
    get estimatedHeight() {
      return this.height;
    }
    ignoreEvent() {
      return false;
    }
  };
  var ContentBuilder = class _ContentBuilder {
    constructor(doc2, pos, end, disallowBlockEffectsFor) {
      this.doc = doc2;
      this.pos = pos;
      this.end = end;
      this.disallowBlockEffectsFor = disallowBlockEffectsFor;
      this.content = [];
      this.curLine = null;
      this.breakAtStart = 0;
      this.pendingBuffer = 0;
      this.bufferMarks = [];
      this.atCursorPos = true;
      this.openStart = -1;
      this.openEnd = -1;
      this.text = "";
      this.textOff = 0;
      this.cursor = doc2.iter();
      this.skip = pos;
    }
    posCovered() {
      if (this.content.length == 0)
        return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
      let last = this.content[this.content.length - 1];
      return !(last.breakAfter || last instanceof BlockWidgetView && last.deco.endSide < 0);
    }
    getLine() {
      if (!this.curLine) {
        this.content.push(this.curLine = new LineView());
        this.atCursorPos = true;
      }
      return this.curLine;
    }
    flushBuffer(active = this.bufferMarks) {
      if (this.pendingBuffer) {
        this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
        this.pendingBuffer = 0;
      }
    }
    addBlockWidget(view) {
      this.flushBuffer();
      this.curLine = null;
      this.content.push(view);
    }
    finish(openEnd) {
      if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
        this.flushBuffer();
      else
        this.pendingBuffer = 0;
      if (!this.posCovered() && !(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView))
        this.getLine();
    }
    buildText(length2, active, openStart) {
      while (length2 > 0) {
        if (this.textOff == this.text.length) {
          let { value, lineBreak, done } = this.cursor.next(this.skip);
          this.skip = 0;
          if (done)
            throw new Error("Ran out of text content when drawing inline views");
          if (lineBreak) {
            if (!this.posCovered())
              this.getLine();
            if (this.content.length)
              this.content[this.content.length - 1].breakAfter = 1;
            else
              this.breakAtStart = 1;
            this.flushBuffer();
            this.curLine = null;
            this.atCursorPos = true;
            length2--;
            continue;
          } else {
            this.text = value;
            this.textOff = 0;
          }
        }
        let take = Math.min(
          this.text.length - this.textOff,
          length2,
          512
          /* T.Chunk */
        );
        this.flushBuffer(active.slice(active.length - openStart));
        this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
        this.atCursorPos = true;
        this.textOff += take;
        length2 -= take;
        openStart = 0;
      }
    }
    span(from, to, active, openStart) {
      this.buildText(to - from, active, openStart);
      this.pos = to;
      if (this.openStart < 0)
        this.openStart = openStart;
    }
    point(from, to, deco, active, openStart, index) {
      if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
        if (deco.block)
          throw new RangeError("Block decorations may not be specified via plugins");
        if (to > this.doc.lineAt(this.pos).to)
          throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
      }
      let len = to - from;
      if (deco instanceof PointDecoration) {
        if (deco.block) {
          if (deco.startSide > 0 && !this.posCovered())
            this.getLine();
          this.addBlockWidget(new BlockWidgetView(deco.widget || NullWidget.block, len, deco));
        } else {
          let view = WidgetView.create(deco.widget || NullWidget.inline, len, len ? 0 : deco.startSide);
          let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);
          let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
          let line = this.getLine();
          if (this.pendingBuffer == 2 && !cursorBefore && !view.isEditable)
            this.pendingBuffer = 0;
          this.flushBuffer(active);
          if (cursorBefore) {
            line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
            openStart = active.length + Math.max(0, openStart - active.length);
          }
          line.append(wrapMarks(view, active), openStart);
          this.atCursorPos = cursorAfter;
          this.pendingBuffer = !cursorAfter ? 0 : from < to || openStart > active.length ? 1 : 2;
          if (this.pendingBuffer)
            this.bufferMarks = active.slice();
        }
      } else if (this.doc.lineAt(this.pos).from == this.pos) {
        this.getLine().addLineDeco(deco);
      }
      if (len) {
        if (this.textOff + len <= this.text.length) {
          this.textOff += len;
        } else {
          this.skip += len - (this.text.length - this.textOff);
          this.text = "";
          this.textOff = 0;
        }
        this.pos = to;
      }
      if (this.openStart < 0)
        this.openStart = openStart;
    }
    static build(text, from, to, decorations2, dynamicDecorationMap) {
      let builder = new _ContentBuilder(text, from, to, dynamicDecorationMap);
      builder.openEnd = RangeSet.spans(decorations2, from, to, builder);
      if (builder.openStart < 0)
        builder.openStart = builder.openEnd;
      builder.finish(builder.openEnd);
      return builder;
    }
  };
  function wrapMarks(view, active) {
    for (let mark of active)
      view = new MarkView(mark, [view], view.length);
    return view;
  }
  var NullWidget = class extends WidgetType {
    constructor(tag) {
      super();
      this.tag = tag;
    }
    eq(other) {
      return other.tag == this.tag;
    }
    toDOM() {
      return document.createElement(this.tag);
    }
    updateDOM(elt) {
      return elt.nodeName.toLowerCase() == this.tag;
    }
    get isHidden() {
      return true;
    }
  };
  NullWidget.inline = /* @__PURE__ */ new NullWidget("span");
  NullWidget.block = /* @__PURE__ */ new NullWidget("div");
  var Direction = /* @__PURE__ */ function(Direction2) {
    Direction2[Direction2["LTR"] = 0] = "LTR";
    Direction2[Direction2["RTL"] = 1] = "RTL";
    return Direction2;
  }(Direction || (Direction = {}));
  var LTR = Direction.LTR;
  var RTL = Direction.RTL;
  function dec(str) {
    let result = [];
    for (let i = 0; i < str.length; i++)
      result.push(1 << +str[i]);
    return result;
  }
  var LowTypes = /* @__PURE__ */ dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
  var ArabicTypes = /* @__PURE__ */ dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
  var Brackets = /* @__PURE__ */ Object.create(null);
  var BracketStack = [];
  for (let p of ["()", "[]", "{}"]) {
    let l = /* @__PURE__ */ p.charCodeAt(0), r = /* @__PURE__ */ p.charCodeAt(1);
    Brackets[l] = r;
    Brackets[r] = -l;
  }
  function charType(ch) {
    return ch <= 247 ? LowTypes[ch] : 1424 <= ch && ch <= 1524 ? 2 : 1536 <= ch && ch <= 1785 ? ArabicTypes[ch - 1536] : 1774 <= ch && ch <= 2220 ? 4 : 8192 <= ch && ch <= 8204 ? 256 : 64336 <= ch && ch <= 65023 ? 4 : 1;
  }
  var BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
  var BidiSpan = class {
    /**
    The direction of this span.
    */
    get dir() {
      return this.level % 2 ? RTL : LTR;
    }
    /**
    @internal
    */
    constructor(from, to, level) {
      this.from = from;
      this.to = to;
      this.level = level;
    }
    /**
    @internal
    */
    side(end, dir) {
      return this.dir == dir == end ? this.to : this.from;
    }
    /**
    @internal
    */
    forward(forward, dir) {
      return forward == (this.dir == dir);
    }
    /**
    @internal
    */
    static find(order, index, level, assoc) {
      let maybe = -1;
      for (let i = 0; i < order.length; i++) {
        let span = order[i];
        if (span.from <= index && span.to >= index) {
          if (span.level == level)
            return i;
          if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order[maybe].level > span.level))
            maybe = i;
        }
      }
      if (maybe < 0)
        throw new RangeError("Index out of range");
      return maybe;
    }
  };
  function isolatesEq(a, b) {
    if (a.length != b.length)
      return false;
    for (let i = 0; i < a.length; i++) {
      let iA = a[i], iB = b[i];
      if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner))
        return false;
    }
    return true;
  }
  var types = [];
  function computeCharTypes(line, rFrom, rTo, isolates, outerType) {
    for (let iI = 0; iI <= isolates.length; iI++) {
      let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
      let prevType = iI ? 256 : outerType;
      for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
        let type = charType(line.charCodeAt(i));
        if (type == 512)
          type = prev;
        else if (type == 8 && prevStrong == 4)
          type = 16;
        types[i] = type == 4 ? 2 : type;
        if (type & 7)
          prevStrong = type;
        prev = type;
      }
      for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
        let type = types[i];
        if (type == 128) {
          if (i < to - 1 && prev == types[i + 1] && prev & 24)
            type = types[i] = prev;
          else
            types[i] = 256;
        } else if (type == 64) {
          let end = i + 1;
          while (end < to && types[end] == 64)
            end++;
          let replace2 = i && prev == 8 || end < rTo && types[end] == 8 ? prevStrong == 1 ? 1 : 8 : 256;
          for (let j = i; j < end; j++)
            types[j] = replace2;
          i = end - 1;
        } else if (type == 8 && prevStrong == 1) {
          types[i] = 1;
        }
        prev = type;
        if (type & 7)
          prevStrong = type;
      }
    }
  }
  function processBracketPairs(line, rFrom, rTo, isolates, outerType) {
    let oppositeType = outerType == 1 ? 2 : 1;
    for (let iI = 0, sI = 0, context2 = 0; iI <= isolates.length; iI++) {
      let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
      for (let i = from, ch, br, type; i < to; i++) {
        if (br = Brackets[ch = line.charCodeAt(i)]) {
          if (br < 0) {
            for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
              if (BracketStack[sJ + 1] == -br) {
                let flags = BracketStack[sJ + 2];
                let type2 = flags & 2 ? outerType : !(flags & 4) ? 0 : flags & 1 ? oppositeType : outerType;
                if (type2)
                  types[i] = types[BracketStack[sJ]] = type2;
                sI = sJ;
                break;
              }
            }
          } else if (BracketStack.length == 189) {
            break;
          } else {
            BracketStack[sI++] = i;
            BracketStack[sI++] = ch;
            BracketStack[sI++] = context2;
          }
        } else if ((type = types[i]) == 2 || type == 1) {
          let embed = type == outerType;
          context2 = embed ? 0 : 1;
          for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
            let cur2 = BracketStack[sJ + 2];
            if (cur2 & 2)
              break;
            if (embed) {
              BracketStack[sJ + 2] |= 2;
            } else {
              if (cur2 & 4)
                break;
              BracketStack[sJ + 2] |= 4;
            }
          }
        }
      }
    }
  }
  function processNeutrals(rFrom, rTo, isolates, outerType) {
    for (let iI = 0, prev = outerType; iI <= isolates.length; iI++) {
      let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
      for (let i = from; i < to; ) {
        let type = types[i];
        if (type == 256) {
          let end = i + 1;
          for (; ; ) {
            if (end == to) {
              if (iI == isolates.length)
                break;
              end = isolates[iI++].to;
              to = iI < isolates.length ? isolates[iI].from : rTo;
            } else if (types[end] == 256) {
              end++;
            } else {
              break;
            }
          }
          let beforeL = prev == 1;
          let afterL = (end < rTo ? types[end] : outerType) == 1;
          let replace2 = beforeL == afterL ? beforeL ? 1 : 2 : outerType;
          for (let j = end, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j > i; ) {
            if (j == fromJ) {
              j = isolates[--jI].from;
              fromJ = jI ? isolates[jI - 1].to : rFrom;
            }
            types[--j] = replace2;
          }
          i = end;
        } else {
          prev = type;
          i++;
        }
      }
    }
  }
  function emitSpans(line, from, to, level, baseLevel, isolates, order) {
    let ourType = level % 2 ? 2 : 1;
    if (level % 2 == baseLevel % 2) {
      for (let iCh = from, iI = 0; iCh < to; ) {
        let sameDir = true, isNum = false;
        if (iI == isolates.length || iCh < isolates[iI].from) {
          let next = types[iCh];
          if (next != ourType) {
            sameDir = false;
            isNum = next == 16;
          }
        }
        let recurse = !sameDir && ourType == 1 ? [] : null;
        let localLevel = sameDir ? level : level + 1;
        let iScan = iCh;
        run: for (; ; ) {
          if (iI < isolates.length && iScan == isolates[iI].from) {
            if (isNum)
              break run;
            let iso = isolates[iI];
            if (!sameDir)
              for (let upto = iso.to, jI = iI + 1; ; ) {
                if (upto == to)
                  break run;
                if (jI < isolates.length && isolates[jI].from == upto)
                  upto = isolates[jI++].to;
                else if (types[upto] == ourType)
                  break run;
                else
                  break;
              }
            iI++;
            if (recurse) {
              recurse.push(iso);
            } else {
              if (iso.from > iCh)
                order.push(new BidiSpan(iCh, iso.from, localLevel));
              let dirSwap = iso.direction == LTR != !(localLevel % 2);
              computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
              iCh = iso.to;
            }
            iScan = iso.to;
          } else if (iScan == to || (sameDir ? types[iScan] != ourType : types[iScan] == ourType)) {
            break;
          } else {
            iScan++;
          }
        }
        if (recurse)
          emitSpans(line, iCh, iScan, level + 1, baseLevel, recurse, order);
        else if (iCh < iScan)
          order.push(new BidiSpan(iCh, iScan, localLevel));
        iCh = iScan;
      }
    } else {
      for (let iCh = to, iI = isolates.length; iCh > from; ) {
        let sameDir = true, isNum = false;
        if (!iI || iCh > isolates[iI - 1].to) {
          let next = types[iCh - 1];
          if (next != ourType) {
            sameDir = false;
            isNum = next == 16;
          }
        }
        let recurse = !sameDir && ourType == 1 ? [] : null;
        let localLevel = sameDir ? level : level + 1;
        let iScan = iCh;
        run: for (; ; ) {
          if (iI && iScan == isolates[iI - 1].to) {
            if (isNum)
              break run;
            let iso = isolates[--iI];
            if (!sameDir)
              for (let upto = iso.from, jI = iI; ; ) {
                if (upto == from)
                  break run;
                if (jI && isolates[jI - 1].to == upto)
                  upto = isolates[--jI].from;
                else if (types[upto - 1] == ourType)
                  break run;
                else
                  break;
              }
            if (recurse) {
              recurse.push(iso);
            } else {
              if (iso.to < iCh)
                order.push(new BidiSpan(iso.to, iCh, localLevel));
              let dirSwap = iso.direction == LTR != !(localLevel % 2);
              computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
              iCh = iso.from;
            }
            iScan = iso.from;
          } else if (iScan == from || (sameDir ? types[iScan - 1] != ourType : types[iScan - 1] == ourType)) {
            break;
          } else {
            iScan--;
          }
        }
        if (recurse)
          emitSpans(line, iScan, iCh, level + 1, baseLevel, recurse, order);
        else if (iScan < iCh)
          order.push(new BidiSpan(iScan, iCh, localLevel));
        iCh = iScan;
      }
    }
  }
  function computeSectionOrder(line, level, baseLevel, isolates, from, to, order) {
    let outerType = level % 2 ? 2 : 1;
    computeCharTypes(line, from, to, isolates, outerType);
    processBracketPairs(line, from, to, isolates, outerType);
    processNeutrals(from, to, isolates, outerType);
    emitSpans(line, from, to, level, baseLevel, isolates, order);
  }
  function computeOrder(line, direction, isolates) {
    if (!line)
      return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
    if (direction == LTR && !isolates.length && !BidiRE.test(line))
      return trivialOrder(line.length);
    if (isolates.length)
      while (line.length > types.length)
        types[types.length] = 256;
    let order = [], level = direction == LTR ? 0 : 1;
    computeSectionOrder(line, level, level, isolates, 0, line.length, order);
    return order;
  }
  function trivialOrder(length2) {
    return [new BidiSpan(0, length2, 0)];
  }
  var movedOver = "";
  function moveVisually(line, order, dir, start, forward) {
    var _a2;
    let startIndex = start.head - line.from;
    let spanI = BidiSpan.find(order, startIndex, (_a2 = start.bidiLevel) !== null && _a2 !== void 0 ? _a2 : -1, start.assoc);
    let span = order[spanI], spanEnd = span.side(forward, dir);
    if (startIndex == spanEnd) {
      let nextI = spanI += forward ? 1 : -1;
      if (nextI < 0 || nextI >= order.length)
        return null;
      span = order[spanI = nextI];
      startIndex = span.side(!forward, dir);
      spanEnd = span.side(forward, dir);
    }
    let nextIndex = findClusterBreak2(line.text, startIndex, span.forward(forward, dir));
    if (nextIndex < span.from || nextIndex > span.to)
      nextIndex = spanEnd;
    movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
    let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
    if (nextSpan && nextIndex == spanEnd && nextSpan.level + (forward ? 0 : 1) < span.level)
      return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, nextSpan.forward(forward, dir) ? 1 : -1, nextSpan.level);
    return EditorSelection.cursor(nextIndex + line.from, span.forward(forward, dir) ? -1 : 1, span.level);
  }
  function autoDirection(text, from, to) {
    for (let i = from; i < to; i++) {
      let type = charType(text.charCodeAt(i));
      if (type == 1)
        return LTR;
      if (type == 2 || type == 4)
        return RTL;
    }
    return LTR;
  }
  var clickAddsSelectionRange = /* @__PURE__ */ Facet.define();
  var dragMovesSelection$1 = /* @__PURE__ */ Facet.define();
  var mouseSelectionStyle = /* @__PURE__ */ Facet.define();
  var exceptionSink = /* @__PURE__ */ Facet.define();
  var updateListener = /* @__PURE__ */ Facet.define();
  var inputHandler = /* @__PURE__ */ Facet.define();
  var focusChangeEffect = /* @__PURE__ */ Facet.define();
  var clipboardInputFilter = /* @__PURE__ */ Facet.define();
  var clipboardOutputFilter = /* @__PURE__ */ Facet.define();
  var perLineTextDirection = /* @__PURE__ */ Facet.define({
    combine: (values) => values.some((x) => x)
  });
  var nativeSelectionHidden = /* @__PURE__ */ Facet.define({
    combine: (values) => values.some((x) => x)
  });
  var scrollHandler = /* @__PURE__ */ Facet.define();
  var ScrollTarget = class _ScrollTarget {
    constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5, isSnapshot = false) {
      this.range = range;
      this.y = y;
      this.x = x;
      this.yMargin = yMargin;
      this.xMargin = xMargin;
      this.isSnapshot = isSnapshot;
    }
    map(changes) {
      return changes.empty ? this : new _ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
    }
    clip(state) {
      return this.range.to <= state.doc.length ? this : new _ScrollTarget(EditorSelection.cursor(state.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
    }
  };
  var scrollIntoView = /* @__PURE__ */ StateEffect.define({ map: (t2, ch) => t2.map(ch) });
  var setEditContextFormatting = /* @__PURE__ */ StateEffect.define();
  function logException(state, exception, context2) {
    let handler = state.facet(exceptionSink);
    if (handler.length)
      handler[0](exception);
    else if (window.onerror && window.onerror(String(exception), context2, void 0, void 0, exception)) ;
    else if (context2)
      console.error(context2 + ":", exception);
    else
      console.error(exception);
  }
  var editable = /* @__PURE__ */ Facet.define({ combine: (values) => values.length ? values[0] : true });
  var nextPluginID = 0;
  var viewPlugin = /* @__PURE__ */ Facet.define({
    combine(plugins) {
      return plugins.filter((p, i) => {
        for (let j = 0; j < i; j++)
          if (plugins[j].plugin == p.plugin)
            return false;
        return true;
      });
    }
  });
  var ViewPlugin = class _ViewPlugin {
    constructor(id2, create, domEventHandlers, domEventObservers, buildExtensions) {
      this.id = id2;
      this.create = create;
      this.domEventHandlers = domEventHandlers;
      this.domEventObservers = domEventObservers;
      this.baseExtensions = buildExtensions(this);
      this.extension = this.baseExtensions.concat(viewPlugin.of({ plugin: this, arg: void 0 }));
    }
    /**
    Create an extension for this plugin with the given argument.
    */
    of(arg) {
      return this.baseExtensions.concat(viewPlugin.of({ plugin: this, arg }));
    }
    /**
    Define a plugin from a constructor function that creates the
    plugin's value, given an editor view.
    */
    static define(create, spec) {
      const { eventHandlers, eventObservers, provide, decorations: deco } = spec || {};
      return new _ViewPlugin(nextPluginID++, create, eventHandlers, eventObservers, (plugin) => {
        let ext = [];
        if (deco)
          ext.push(decorations.of((view) => {
            let pluginInst = view.plugin(plugin);
            return pluginInst ? deco(pluginInst) : Decoration.none;
          }));
        if (provide)
          ext.push(provide(plugin));
        return ext;
      });
    }
    /**
    Create a plugin for a class whose constructor takes a single
    editor view as argument.
    */
    static fromClass(cls, spec) {
      return _ViewPlugin.define((view, arg) => new cls(view, arg), spec);
    }
  };
  var PluginInstance = class {
    constructor(spec) {
      this.spec = spec;
      this.mustUpdate = null;
      this.value = null;
    }
    get plugin() {
      return this.spec && this.spec.plugin;
    }
    update(view) {
      if (!this.value) {
        if (this.spec) {
          try {
            this.value = this.spec.plugin.create(view, this.spec.arg);
          } catch (e) {
            logException(view.state, e, "CodeMirror plugin crashed");
            this.deactivate();
          }
        }
      } else if (this.mustUpdate) {
        let update = this.mustUpdate;
        this.mustUpdate = null;
        if (this.value.update) {
          try {
            this.value.update(update);
          } catch (e) {
            logException(update.state, e, "CodeMirror plugin crashed");
            if (this.value.destroy)
              try {
                this.value.destroy();
              } catch (_) {
              }
            this.deactivate();
          }
        }
      }
      return this;
    }
    destroy(view) {
      var _a2;
      if ((_a2 = this.value) === null || _a2 === void 0 ? void 0 : _a2.destroy) {
        try {
          this.value.destroy();
        } catch (e) {
          logException(view.state, e, "CodeMirror plugin crashed");
        }
      }
    }
    deactivate() {
      this.spec = this.value = null;
    }
  };
  var editorAttributes = /* @__PURE__ */ Facet.define();
  var contentAttributes = /* @__PURE__ */ Facet.define();
  var decorations = /* @__PURE__ */ Facet.define();
  var outerDecorations = /* @__PURE__ */ Facet.define();
  var atomicRanges = /* @__PURE__ */ Facet.define();
  var bidiIsolatedRanges = /* @__PURE__ */ Facet.define();
  function getIsolatedRanges(view, line) {
    let isolates = view.state.facet(bidiIsolatedRanges);
    if (!isolates.length)
      return isolates;
    let sets = isolates.map((i) => i instanceof Function ? i(view) : i);
    let result = [];
    RangeSet.spans(sets, line.from, line.to, {
      point() {
      },
      span(fromDoc, toDoc, active, open) {
        let from = fromDoc - line.from, to = toDoc - line.from;
        let level = result;
        for (let i = active.length - 1; i >= 0; i--, open--) {
          let direction = active[i].spec.bidiIsolate, update;
          if (direction == null)
            direction = autoDirection(line.text, from, to);
          if (open > 0 && level.length && (update = level[level.length - 1]).to == from && update.direction == direction) {
            update.to = to;
            level = update.inner;
          } else {
            let add3 = { from, to, direction, inner: [] };
            level.push(add3);
            level = add3.inner;
          }
        }
      }
    });
    return result;
  }
  var scrollMargins = /* @__PURE__ */ Facet.define();
  function getScrollMargins(view) {
    let left = 0, right = 0, top2 = 0, bottom = 0;
    for (let source of view.state.facet(scrollMargins)) {
      let m = source(view);
      if (m) {
        if (m.left != null)
          left = Math.max(left, m.left);
        if (m.right != null)
          right = Math.max(right, m.right);
        if (m.top != null)
          top2 = Math.max(top2, m.top);
        if (m.bottom != null)
          bottom = Math.max(bottom, m.bottom);
      }
    }
    return { left, right, top: top2, bottom };
  }
  var styleModule = /* @__PURE__ */ Facet.define();
  var ChangedRange = class _ChangedRange {
    constructor(fromA, toA, fromB, toB) {
      this.fromA = fromA;
      this.toA = toA;
      this.fromB = fromB;
      this.toB = toB;
    }
    join(other) {
      return new _ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
    }
    addToSet(set) {
      let i = set.length, me = this;
      for (; i > 0; i--) {
        let range = set[i - 1];
        if (range.fromA > me.toA)
          continue;
        if (range.toA < me.fromA)
          break;
        me = me.join(range);
        set.splice(i - 1, 1);
      }
      set.splice(i, 0, me);
      return set;
    }
    static extendWithRanges(diff, ranges) {
      if (ranges.length == 0)
        return diff;
      let result = [];
      for (let dI = 0, rI = 0, posA = 0, posB = 0; ; dI++) {
        let next = dI == diff.length ? null : diff[dI], off = posA - posB;
        let end = next ? next.fromB : 1e9;
        while (rI < ranges.length && ranges[rI] < end) {
          let from = ranges[rI], to = ranges[rI + 1];
          let fromB = Math.max(posB, from), toB = Math.min(end, to);
          if (fromB <= toB)
            new _ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
          if (to > end)
            break;
          else
            rI += 2;
        }
        if (!next)
          return result;
        new _ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
        posA = next.toA;
        posB = next.toB;
      }
    }
  };
  var ViewUpdate = class _ViewUpdate {
    constructor(view, state, transactions) {
      this.view = view;
      this.state = state;
      this.transactions = transactions;
      this.flags = 0;
      this.startState = view.state;
      this.changes = ChangeSet.empty(this.startState.doc.length);
      for (let tr of transactions)
        this.changes = this.changes.compose(tr.changes);
      let changedRanges = [];
      this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
      this.changedRanges = changedRanges;
    }
    /**
    @internal
    */
    static create(view, state, transactions) {
      return new _ViewUpdate(view, state, transactions);
    }
    /**
    Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
    [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
    update.
    */
    get viewportChanged() {
      return (this.flags & 4) > 0;
    }
    /**
    Returns true when
    [`viewportChanged`](https://codemirror.net/6/docs/ref/#view.ViewUpdate.viewportChanged) is true
    and the viewport change is not just the result of mapping it in
    response to document changes.
    */
    get viewportMoved() {
      return (this.flags & 8) > 0;
    }
    /**
    Indicates whether the height of a block element in the editor
    changed in this update.
    */
    get heightChanged() {
      return (this.flags & 2) > 0;
    }
    /**
    Returns true when the document was modified or the size of the
    editor, or elements within the editor, changed.
    */
    get geometryChanged() {
      return this.docChanged || (this.flags & (16 | 2)) > 0;
    }
    /**
    True when this update indicates a focus change.
    */
    get focusChanged() {
      return (this.flags & 1) > 0;
    }
    /**
    Whether the document changed in this update.
    */
    get docChanged() {
      return !this.changes.empty;
    }
    /**
    Whether the selection was explicitly set in this update.
    */
    get selectionSet() {
      return this.transactions.some((tr) => tr.selection);
    }
    /**
    @internal
    */
    get empty() {
      return this.flags == 0 && this.transactions.length == 0;
    }
  };
  var DocView = class extends ContentView {
    get length() {
      return this.view.state.doc.length;
    }
    constructor(view) {
      super();
      this.view = view;
      this.decorations = [];
      this.dynamicDecorationMap = [false];
      this.domChanged = null;
      this.hasComposition = null;
      this.markedForComposition = /* @__PURE__ */ new Set();
      this.editContextFormatting = Decoration.none;
      this.lastCompositionAfterCursor = false;
      this.minWidth = 0;
      this.minWidthFrom = 0;
      this.minWidthTo = 0;
      this.impreciseAnchor = null;
      this.impreciseHead = null;
      this.forceSelection = false;
      this.lastUpdate = Date.now();
      this.setDOM(view.contentDOM);
      this.children = [new LineView()];
      this.children[0].setParent(this);
      this.updateDeco();
      this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);
    }
    // Update the document view to a given state.
    update(update) {
      var _a2;
      let changedRanges = update.changedRanges;
      if (this.minWidth > 0 && changedRanges.length) {
        if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
          this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
        } else {
          this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
          this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
        }
      }
      this.updateEditContextFormatting(update);
      let readCompositionAt = -1;
      if (this.view.inputState.composing >= 0 && !this.view.observer.editContext) {
        if ((_a2 = this.domChanged) === null || _a2 === void 0 ? void 0 : _a2.newSel)
          readCompositionAt = this.domChanged.newSel.head;
        else if (!touchesComposition(update.changes, this.hasComposition) && !update.selectionSet)
          readCompositionAt = update.state.selection.main.head;
      }
      let composition = readCompositionAt > -1 ? findCompositionRange(this.view, update.changes, readCompositionAt) : null;
      this.domChanged = null;
      if (this.hasComposition) {
        this.markedForComposition.clear();
        let { from, to } = this.hasComposition;
        changedRanges = new ChangedRange(from, to, update.changes.mapPos(from, -1), update.changes.mapPos(to, 1)).addToSet(changedRanges.slice());
      }
      this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;
      if ((browser.ie || browser.chrome) && !composition && update && update.state.doc.lines != update.startState.doc.lines)
        this.forceSelection = true;
      let prevDeco = this.decorations, deco = this.updateDeco();
      let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
      changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
      if (!(this.flags & 7) && changedRanges.length == 0) {
        return false;
      } else {
        this.updateInner(changedRanges, update.startState.doc.length, composition);
        if (update.transactions.length)
          this.lastUpdate = Date.now();
        return true;
      }
    }
    // Used by update and the constructor do perform the actual DOM
    // update
    updateInner(changes, oldLength, composition) {
      this.view.viewState.mustMeasureContent = true;
      this.updateChildren(changes, oldLength, composition);
      let { observer } = this.view;
      observer.ignore(() => {
        this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px";
        this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
        let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : void 0;
        this.sync(this.view, track);
        this.flags &= ~7;
        if (track && (track.written || observer.selectionRange.focusNode != track.node))
          this.forceSelection = true;
        this.dom.style.height = "";
      });
      this.markedForComposition.forEach(
        (cView) => cView.flags &= ~8
        /* ViewFlag.Composition */
      );
      let gaps = [];
      if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) {
        for (let child of this.children)
          if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
            gaps.push(child.dom);
      }
      observer.updateGaps(gaps);
    }
    updateChildren(changes, oldLength, composition) {
      let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
      let cursor = this.childCursor(oldLength);
      for (let i = ranges.length - 1; ; i--) {
        let next = i >= 0 ? ranges[i] : null;
        if (!next)
          break;
        let { fromA, toA, fromB, toB } = next, content2, breakAtStart, openStart, openEnd;
        if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
          let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
          let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
          breakAtStart = before.breakAtStart;
          openStart = before.openStart;
          openEnd = after.openEnd;
          let compLine = this.compositionView(composition);
          if (after.breakAtStart) {
            compLine.breakAfter = 1;
          } else if (after.content.length && compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
            compLine.breakAfter = after.content[0].breakAfter;
            after.content.shift();
          }
          if (before.content.length && compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
            before.content.pop();
          }
          content2 = before.content.concat(compLine).concat(after.content);
        } else {
          ({ content: content2, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));
        }
        let { i: toI, off: toOff } = cursor.findPos(toA, 1);
        let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
        replaceRange(this, fromI, fromOff, toI, toOff, content2, breakAtStart, openStart, openEnd);
      }
      if (composition)
        this.fixCompositionDOM(composition);
    }
    updateEditContextFormatting(update) {
      this.editContextFormatting = this.editContextFormatting.map(update.changes);
      for (let tr of update.transactions)
        for (let effect of tr.effects)
          if (effect.is(setEditContextFormatting)) {
            this.editContextFormatting = effect.value;
          }
    }
    compositionView(composition) {
      let cur2 = new TextView(composition.text.nodeValue);
      cur2.flags |= 8;
      for (let { deco } of composition.marks)
        cur2 = new MarkView(deco, [cur2], cur2.length);
      let line = new LineView();
      line.append(cur2, 0);
      return line;
    }
    fixCompositionDOM(composition) {
      let fix = (dom, cView2) => {
        cView2.flags |= 8 | (cView2.children.some(
          (c) => c.flags & 7
          /* ViewFlag.Dirty */
        ) ? 1 : 0);
        this.markedForComposition.add(cView2);
        let prev = ContentView.get(dom);
        if (prev && prev != cView2)
          prev.dom = null;
        cView2.setDOM(dom);
      };
      let pos = this.childPos(composition.range.fromB, 1);
      let cView = this.children[pos.i];
      fix(composition.line, cView);
      for (let i = composition.marks.length - 1; i >= -1; i--) {
        pos = cView.childPos(pos.off, 1);
        cView = cView.children[pos.i];
        fix(i >= 0 ? composition.marks[i].node : composition.text, cView);
      }
    }
    // Sync the DOM selection to this.state.selection
    updateSelection(mustRead = false, fromPointer = false) {
      if (mustRead || !this.view.observer.selectionRange.focusNode)
        this.view.observer.readSelectionRange();
      let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
      let selectionNotFocus = !focused && !(this.view.state.facet(editable) || this.dom.tabIndex > -1) && hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
      if (!(focused || fromPointer || selectionNotFocus))
        return;
      let force = this.forceSelection;
      this.forceSelection = false;
      let main = this.view.state.selection.main;
      let anchor = this.moveToLine(this.domAtPos(main.anchor));
      let head = main.empty ? anchor : this.moveToLine(this.domAtPos(main.head));
      if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {
        let dummy = document.createTextNode("");
        this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
        anchor = head = new DOMPos(dummy, 0);
        force = true;
      }
      let domSel = this.view.observer.selectionRange;
      if (force || !domSel.focusNode || (!isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) && !this.suppressWidgetCursorChange(domSel, main)) {
        this.view.observer.ignore(() => {
          if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) && inUneditable(domSel.focusNode, this.dom)) {
            this.dom.blur();
            this.dom.focus({ preventScroll: true });
          }
          let rawSel = getSelection(this.view.root);
          if (!rawSel) ;
          else if (main.empty) {
            if (browser.gecko) {
              let nextTo = nextToUneditable(anchor.node, anchor.offset);
              if (nextTo && nextTo != (1 | 2)) {
                let text = (nextTo == 1 ? textNodeBefore : textNodeAfter)(anchor.node, anchor.offset);
                if (text)
                  anchor = new DOMPos(text.node, text.offset);
              }
            }
            rawSel.collapse(anchor.node, anchor.offset);
            if (main.bidiLevel != null && rawSel.caretBidiLevel !== void 0)
              rawSel.caretBidiLevel = main.bidiLevel;
          } else if (rawSel.extend) {
            rawSel.collapse(anchor.node, anchor.offset);
            try {
              rawSel.extend(head.node, head.offset);
            } catch (_) {
            }
          } else {
            let range = document.createRange();
            if (main.anchor > main.head)
              [anchor, head] = [head, anchor];
            range.setEnd(head.node, head.offset);
            range.setStart(anchor.node, anchor.offset);
            rawSel.removeAllRanges();
            rawSel.addRange(range);
          }
          if (selectionNotFocus && this.view.root.activeElement == this.dom) {
            this.dom.blur();
            if (activeElt)
              activeElt.focus();
          }
        });
        this.view.observer.setSelectionRange(anchor, head);
      }
      this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
      this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
    }
    // If a zero-length widget is inserted next to the cursor during
    // composition, avoid moving it across it and disrupting the
    // composition.
    suppressWidgetCursorChange(sel, cursor) {
      return this.hasComposition && cursor.empty && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset) && this.posFromDOM(sel.focusNode, sel.focusOffset) == cursor.head;
    }
    enforceCursorAssoc() {
      if (this.hasComposition)
        return;
      let { view } = this, cursor = view.state.selection.main;
      let sel = getSelection(view.root);
      let { anchorNode, anchorOffset } = view.observer.selectionRange;
      if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
        return;
      let line = LineView.find(this, cursor.head);
      if (!line)
        return;
      let lineStart = line.posAtStart;
      if (cursor.head == lineStart || cursor.head == lineStart + line.length)
        return;
      let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
      if (!before || !after || before.bottom > after.top)
        return;
      let dom = this.domAtPos(cursor.head + cursor.assoc);
      sel.collapse(dom.node, dom.offset);
      sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
      view.observer.readSelectionRange();
      let newRange = view.observer.selectionRange;
      if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
        sel.collapse(anchorNode, anchorOffset);
    }
    // If a position is in/near a block widget, move it to a nearby text
    // line, since we don't want the cursor inside a block widget.
    moveToLine(pos) {
      let dom = this.dom, newPos;
      if (pos.node != dom)
        return pos;
      for (let i = pos.offset; !newPos && i < dom.childNodes.length; i++) {
        let view = ContentView.get(dom.childNodes[i]);
        if (view instanceof LineView)
          newPos = view.domAtPos(0);
      }
      for (let i = pos.offset - 1; !newPos && i >= 0; i--) {
        let view = ContentView.get(dom.childNodes[i]);
        if (view instanceof LineView)
          newPos = view.domAtPos(view.length);
      }
      return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos;
    }
    nearest(dom) {
      for (let cur2 = dom; cur2; ) {
        let domView = ContentView.get(cur2);
        if (domView && domView.rootView == this)
          return domView;
        cur2 = cur2.parentNode;
      }
      return null;
    }
    posFromDOM(node, offset) {
      let view = this.nearest(node);
      if (!view)
        throw new RangeError("Trying to find position for a DOM position outside of the document");
      return view.localPosFromDOM(node, offset) + view.posAtStart;
    }
    domAtPos(pos) {
      let { i, off } = this.childCursor().findPos(pos, -1);
      for (; i < this.children.length - 1; ) {
        let child = this.children[i];
        if (off < child.length || child instanceof LineView)
          break;
        i++;
        off = 0;
      }
      return this.children[i].domAtPos(off);
    }
    coordsAt(pos, side) {
      let best = null, bestPos = 0;
      for (let off = this.length, i = this.children.length - 1; i >= 0; i--) {
        let child = this.children[i], end = off - child.breakAfter, start = end - child.length;
        if (end < pos)
          break;
        if (start <= pos && (start < pos || child.covers(-1)) && (end > pos || child.covers(1)) && (!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {
          best = child;
          bestPos = start;
        } else if (best && start == pos && end == pos && child instanceof BlockWidgetView && Math.abs(side) < 2) {
          if (child.deco.startSide < 0)
            break;
          else if (i)
            best = null;
        }
        off = start;
      }
      return best ? best.coordsAt(pos - bestPos, side) : null;
    }
    coordsForChar(pos) {
      let { i, off } = this.childPos(pos, 1), child = this.children[i];
      if (!(child instanceof LineView))
        return null;
      while (child.children.length) {
        let { i: i2, off: childOff } = child.childPos(off, 1);
        for (; ; i2++) {
          if (i2 == child.children.length)
            return null;
          if ((child = child.children[i2]).length)
            break;
        }
        off = childOff;
      }
      if (!(child instanceof TextView))
        return null;
      let end = findClusterBreak2(child.text, off);
      if (end == off)
        return null;
      let rects = textRange(child.dom, off, end).getClientRects();
      for (let i2 = 0; i2 < rects.length; i2++) {
        let rect = rects[i2];
        if (i2 == rects.length - 1 || rect.top < rect.bottom && rect.left < rect.right)
          return rect;
      }
      return null;
    }
    measureVisibleLineHeights(viewport2) {
      let result = [], { from, to } = viewport2;
      let contentWidth = this.view.contentDOM.clientWidth;
      let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
      let widest = -1, ltr = this.view.textDirection == Direction.LTR;
      for (let pos = 0, i = 0; i < this.children.length; i++) {
        let child = this.children[i], end = pos + child.length;
        if (end > to)
          break;
        if (pos >= from) {
          let childRect = child.dom.getBoundingClientRect();
          result.push(childRect.height);
          if (isWider) {
            let last = child.dom.lastChild;
            let rects = last ? clientRectsFor(last) : [];
            if (rects.length) {
              let rect = rects[rects.length - 1];
              let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
              if (width > widest) {
                widest = width;
                this.minWidth = contentWidth;
                this.minWidthFrom = pos;
                this.minWidthTo = end;
              }
            }
          }
        }
        pos = end + child.breakAfter;
      }
      return result;
    }
    textDirectionAt(pos) {
      let { i } = this.childPos(pos, 1);
      return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
    }
    measureTextSize() {
      for (let child of this.children) {
        if (child instanceof LineView) {
          let measure = child.measureTextSize();
          if (measure)
            return measure;
        }
      }
      let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
      dummy.className = "cm-line";
      dummy.style.width = "99999px";
      dummy.style.position = "absolute";
      dummy.textContent = "abc def ghi jkl mno pqr stu";
      this.view.observer.ignore(() => {
        this.dom.appendChild(dummy);
        let rect = clientRectsFor(dummy.firstChild)[0];
        lineHeight = dummy.getBoundingClientRect().height;
        charWidth = rect ? rect.width / 27 : 7;
        textHeight = rect ? rect.height : lineHeight;
        dummy.remove();
      });
      return { lineHeight, charWidth, textHeight };
    }
    childCursor(pos = this.length) {
      let i = this.children.length;
      if (i)
        pos -= this.children[--i].length;
      return new ChildCursor(this.children, pos, i);
    }
    computeBlockGapDeco() {
      let deco = [], vs = this.view.viewState;
      for (let pos = 0, i = 0; ; i++) {
        let next = i == vs.viewports.length ? null : vs.viewports[i];
        let end = next ? next.from - 1 : this.length;
        if (end > pos) {
          let height = (vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top) / this.view.scaleY;
          deco.push(Decoration.replace({
            widget: new BlockGapWidget(height),
            block: true,
            inclusive: true,
            isBlockGap: true
          }).range(pos, end));
        }
        if (!next)
          break;
        pos = next.to + 1;
      }
      return Decoration.set(deco);
    }
    updateDeco() {
      let i = 1;
      let allDeco = this.view.state.facet(decorations).map((d) => {
        let dynamic = this.dynamicDecorationMap[i++] = typeof d == "function";
        return dynamic ? d(this.view) : d;
      });
      let dynamicOuter = false, outerDeco = this.view.state.facet(outerDecorations).map((d, i2) => {
        let dynamic = typeof d == "function";
        if (dynamic)
          dynamicOuter = true;
        return dynamic ? d(this.view) : d;
      });
      if (outerDeco.length) {
        this.dynamicDecorationMap[i++] = dynamicOuter;
        allDeco.push(RangeSet.join(outerDeco));
      }
      this.decorations = [
        this.editContextFormatting,
        ...allDeco,
        this.computeBlockGapDeco(),
        this.view.viewState.lineGapDeco
      ];
      while (i < this.decorations.length)
        this.dynamicDecorationMap[i++] = false;
      return this.decorations;
    }
    scrollIntoView(target) {
      if (target.isSnapshot) {
        let ref = this.view.viewState.lineBlockAt(target.range.head);
        this.view.scrollDOM.scrollTop = ref.top - target.yMargin;
        this.view.scrollDOM.scrollLeft = target.xMargin;
        return;
      }
      for (let handler of this.view.state.facet(scrollHandler)) {
        try {
          if (handler(this.view, target.range, target))
            return true;
        } catch (e) {
          logException(this.view.state, e, "scroll handler");
        }
      }
      let { range } = target;
      let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
      if (!rect)
        return;
      if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
        rect = {
          left: Math.min(rect.left, other.left),
          top: Math.min(rect.top, other.top),
          right: Math.max(rect.right, other.right),
          bottom: Math.max(rect.bottom, other.bottom)
        };
      let margins = getScrollMargins(this.view);
      let targetRect = {
        left: rect.left - margins.left,
        top: rect.top - margins.top,
        right: rect.right + margins.right,
        bottom: rect.bottom + margins.bottom
      };
      let { offsetWidth, offsetHeight } = this.view.scrollDOM;
      scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == Direction.LTR);
    }
  };
  function betweenUneditable(pos) {
    return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
  }
  function findCompositionNode(view, headPos) {
    let sel = view.observer.selectionRange;
    if (!sel.focusNode)
      return null;
    let textBefore = textNodeBefore(sel.focusNode, sel.focusOffset);
    let textAfter = textNodeAfter(sel.focusNode, sel.focusOffset);
    let textNode = textBefore || textAfter;
    if (textAfter && textBefore && textAfter.node != textBefore.node) {
      let descAfter = ContentView.get(textAfter.node);
      if (!descAfter || descAfter instanceof TextView && descAfter.text != textAfter.node.nodeValue) {
        textNode = textAfter;
      } else if (view.docView.lastCompositionAfterCursor) {
        let descBefore = ContentView.get(textBefore.node);
        if (!(!descBefore || descBefore instanceof TextView && descBefore.text != textBefore.node.nodeValue))
          textNode = textAfter;
      }
    }
    view.docView.lastCompositionAfterCursor = textNode != textBefore;
    if (!textNode)
      return null;
    let from = headPos - textNode.offset;
    return { from, to: from + textNode.node.nodeValue.length, node: textNode.node };
  }
  function findCompositionRange(view, changes, headPos) {
    let found = findCompositionNode(view, headPos);
    if (!found)
      return null;
    let { node: textNode, from, to } = found, text = textNode.nodeValue;
    if (/[\n\r]/.test(text))
      return null;
    if (view.state.doc.sliceString(found.from, found.to) != text)
      return null;
    let inv = changes.invertedDesc;
    let range = new ChangedRange(inv.mapPos(from), inv.mapPos(to), from, to);
    let marks2 = [];
    for (let parent = textNode.parentNode; ; parent = parent.parentNode) {
      let parentView = ContentView.get(parent);
      if (parentView instanceof MarkView)
        marks2.push({ node: parent, deco: parentView.mark });
      else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view.contentDOM)
        return { range, text: textNode, marks: marks2, line: parent };
      else if (parent != view.contentDOM)
        marks2.push({ node: parent, deco: new MarkDecoration({
          inclusive: true,
          attributes: getAttrs(parent),
          tagName: parent.tagName.toLowerCase()
        }) });
      else
        return null;
    }
  }
  function nextToUneditable(node, offset) {
    if (node.nodeType != 1)
      return 0;
    return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 : 0) | (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 : 0);
  }
  var DecorationComparator$1 = class DecorationComparator {
    constructor() {
      this.changes = [];
    }
    compareRange(from, to) {
      addRange(from, to, this.changes);
    }
    comparePoint(from, to) {
      addRange(from, to, this.changes);
    }
    boundChange(pos) {
      addRange(pos, pos, this.changes);
    }
  };
  function findChangedDeco(a, b, diff) {
    let comp = new DecorationComparator$1();
    RangeSet.compare(a, b, diff, comp);
    return comp.changes;
  }
  function inUneditable(node, inside2) {
    for (let cur2 = node; cur2 && cur2 != inside2; cur2 = cur2.assignedSlot || cur2.parentNode) {
      if (cur2.nodeType == 1 && cur2.contentEditable == "false") {
        return true;
      }
    }
    return false;
  }
  function touchesComposition(changes, composition) {
    let touched = false;
    if (composition)
      changes.iterChangedRanges((from, to) => {
        if (from < composition.to && to > composition.from)
          touched = true;
      });
    return touched;
  }
  function groupAt(state, pos, bias = 1) {
    let categorize = state.charCategorizer(pos);
    let line = state.doc.lineAt(pos), linePos = pos - line.from;
    if (line.length == 0)
      return EditorSelection.cursor(pos);
    if (linePos == 0)
      bias = 1;
    else if (linePos == line.length)
      bias = -1;
    let from = linePos, to = linePos;
    if (bias < 0)
      from = findClusterBreak2(line.text, linePos, false);
    else
      to = findClusterBreak2(line.text, linePos);
    let cat = categorize(line.text.slice(from, to));
    while (from > 0) {
      let prev = findClusterBreak2(line.text, from, false);
      if (categorize(line.text.slice(prev, from)) != cat)
        break;
      from = prev;
    }
    while (to < line.length) {
      let next = findClusterBreak2(line.text, to);
      if (categorize(line.text.slice(to, next)) != cat)
        break;
      to = next;
    }
    return EditorSelection.range(from + line.from, to + line.from);
  }
  function getdx(x, rect) {
    return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
  }
  function getdy(y, rect) {
    return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
  }
  function yOverlap(a, b) {
    return a.top < b.bottom - 1 && a.bottom > b.top + 1;
  }
  function upTop(rect, top2) {
    return top2 < rect.top ? { top: top2, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
  }
  function upBot(rect, bottom) {
    return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
  }
  function domPosAtCoords(parent, x, y) {
    let closest, closestRect, closestX, closestY, closestOverlap = false;
    let above, below, aboveRect, belowRect;
    for (let child = parent.firstChild; child; child = child.nextSibling) {
      let rects = clientRectsFor(child);
      for (let i = 0; i < rects.length; i++) {
        let rect = rects[i];
        if (closestRect && yOverlap(closestRect, rect))
          rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
        let dx = getdx(x, rect), dy = getdy(y, rect);
        if (dx == 0 && dy == 0)
          return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
        if (!closest || closestY > dy || closestY == dy && closestX > dx) {
          closest = child;
          closestRect = rect;
          closestX = dx;
          closestY = dy;
          let side = dy ? y < rect.top ? -1 : 1 : dx ? x < rect.left ? -1 : 1 : 0;
          closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);
        }
        if (dx == 0) {
          if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
            above = child;
            aboveRect = rect;
          } else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
            below = child;
            belowRect = rect;
          }
        } else if (aboveRect && yOverlap(aboveRect, rect)) {
          aboveRect = upBot(aboveRect, rect.bottom);
        } else if (belowRect && yOverlap(belowRect, rect)) {
          belowRect = upTop(belowRect, rect.top);
        }
      }
    }
    if (aboveRect && aboveRect.bottom >= y) {
      closest = above;
      closestRect = aboveRect;
    } else if (belowRect && belowRect.top <= y) {
      closest = below;
      closestRect = belowRect;
    }
    if (!closest)
      return { node: parent, offset: 0 };
    let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
    if (closest.nodeType == 3)
      return domPosInText(closest, clipX, y);
    if (closestOverlap && closest.contentEditable != "false")
      return domPosAtCoords(closest, clipX, y);
    let offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
    return { node: parent, offset };
  }
  function domPosInText(node, x, y) {
    let len = node.nodeValue.length;
    let closestOffset = -1, closestDY = 1e9, generalSide = 0;
    for (let i = 0; i < len; i++) {
      let rects = textRange(node, i, i + 1).getClientRects();
      for (let j = 0; j < rects.length; j++) {
        let rect = rects[j];
        if (rect.top == rect.bottom)
          continue;
        if (!generalSide)
          generalSide = x - rect.left;
        let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
        if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
          let right = x >= (rect.left + rect.right) / 2, after = right;
          if (browser.chrome || browser.gecko) {
            let rectBefore = textRange(node, i).getBoundingClientRect();
            if (rectBefore.left == rect.right)
              after = !right;
          }
          if (dy <= 0)
            return { node, offset: i + (after ? 1 : 0) };
          closestOffset = i + (after ? 1 : 0);
          closestDY = dy;
        }
      }
    }
    return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
  }
  function posAtCoords(view, coords, precise, bias = -1) {
    var _a2, _b;
    let content2 = view.contentDOM.getBoundingClientRect(), docTop = content2.top + view.viewState.paddingTop;
    let block, { docHeight } = view.viewState;
    let { x, y } = coords, yOffset = y - docTop;
    if (yOffset < 0)
      return 0;
    if (yOffset > docHeight)
      return view.state.doc.length;
    for (let halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false; ; ) {
      block = view.elementAtHeight(yOffset);
      if (block.type == BlockType.Text)
        break;
      for (; ; ) {
        yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
        if (yOffset >= 0 && yOffset <= docHeight)
          break;
        if (bounced)
          return precise ? null : 0;
        bounced = true;
        bias = -bias;
      }
    }
    y = docTop + yOffset;
    let lineStart = block.from;
    if (lineStart < view.viewport.from)
      return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content2, block, x, y);
    if (lineStart > view.viewport.to)
      return view.viewport.to == view.state.doc.length ? view.state.doc.length : precise ? null : posAtCoordsImprecise(view, content2, block, x, y);
    let doc2 = view.dom.ownerDocument;
    let root = view.root.elementFromPoint ? view.root : doc2;
    let element2 = root.elementFromPoint(x, y);
    if (element2 && !view.contentDOM.contains(element2))
      element2 = null;
    if (!element2) {
      x = Math.max(content2.left + 1, Math.min(content2.right - 1, x));
      element2 = root.elementFromPoint(x, y);
      if (element2 && !view.contentDOM.contains(element2))
        element2 = null;
    }
    let node, offset = -1;
    if (element2 && ((_a2 = view.docView.nearest(element2)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) != false) {
      if (doc2.caretPositionFromPoint) {
        let pos = doc2.caretPositionFromPoint(x, y);
        if (pos)
          ({ offsetNode: node, offset } = pos);
      } else if (doc2.caretRangeFromPoint) {
        let range = doc2.caretRangeFromPoint(x, y);
        if (range) {
          ({ startContainer: node, startOffset: offset } = range);
          if (!view.contentDOM.contains(node) || browser.safari && isSuspiciousSafariCaretResult(node, offset, x) || browser.chrome && isSuspiciousChromeCaretResult(node, offset, x))
            node = void 0;
        }
      }
      if (node)
        offset = Math.min(maxOffset(node), offset);
    }
    if (!node || !view.docView.dom.contains(node)) {
      let line = LineView.find(view.docView, lineStart);
      if (!line)
        return yOffset > block.top + block.height / 2 ? block.to : block.from;
      ({ node, offset } = domPosAtCoords(line.dom, x, y));
    }
    let nearest = view.docView.nearest(node);
    if (!nearest)
      return null;
    if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
      let rect = nearest.dom.getBoundingClientRect();
      return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2 ? nearest.posAtStart : nearest.posAtEnd;
    } else {
      return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
    }
  }
  function posAtCoordsImprecise(view, contentRect, block, x, y) {
    let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
    if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
      let textHeight = view.viewState.heightOracle.textHeight;
      let line = Math.floor((y - block.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);
      into += line * view.viewState.heightOracle.lineLength;
    }
    let content2 = view.state.sliceDoc(block.from, block.to);
    return block.from + findColumn(content2, into, view.state.tabSize);
  }
  function isSuspiciousSafariCaretResult(node, offset, x) {
    let len;
    if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
      return false;
    for (let next = node.nextSibling; next; next = next.nextSibling)
      if (next.nodeType != 1 || next.nodeName != "BR")
        return false;
    return textRange(node, len - 1, len).getBoundingClientRect().left > x;
  }
  function isSuspiciousChromeCaretResult(node, offset, x) {
    if (offset != 0)
      return false;
    for (let cur2 = node; ; ) {
      let parent = cur2.parentNode;
      if (!parent || parent.nodeType != 1 || parent.firstChild != cur2)
        return false;
      if (parent.classList.contains("cm-line"))
        break;
      cur2 = parent;
    }
    let rect = node.nodeType == 1 ? node.getBoundingClientRect() : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
    return x - rect.left > 5;
  }
  function blockAt(view, pos, side) {
    let line = view.lineBlockAt(pos);
    if (Array.isArray(line.type)) {
      let best;
      for (let l of line.type) {
        if (l.from > pos)
          break;
        if (l.to < pos)
          continue;
        if (l.from < pos && l.to > pos)
          return l;
        if (!best || l.type == BlockType.Text && (best.type != l.type || (side < 0 ? l.from < pos : l.to > pos)))
          best = l;
      }
      return best || line;
    }
    return line;
  }
  function moveToLineBoundary(view, start, forward, includeWrap) {
    let line = blockAt(view, start.head, start.assoc || -1);
    let coords = !includeWrap || line.type != BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
    if (coords) {
      let editorRect = view.dom.getBoundingClientRect();
      let direction = view.textDirectionAt(line.from);
      let pos = view.posAtCoords({
        x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
        y: (coords.top + coords.bottom) / 2
      });
      if (pos != null)
        return EditorSelection.cursor(pos, forward ? -1 : 1);
    }
    return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);
  }
  function moveByChar(view, start, forward, by) {
    let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
    let direction = view.textDirectionAt(line.from);
    for (let cur2 = start, check = null; ; ) {
      let next = moveVisually(line, spans, direction, cur2, forward), char = movedOver;
      if (!next) {
        if (line.number == (forward ? view.state.doc.lines : 1))
          return cur2;
        char = "\n";
        line = view.state.doc.line(line.number + (forward ? 1 : -1));
        spans = view.bidiSpans(line);
        next = view.visualLineSide(line, !forward);
      }
      if (!check) {
        if (!by)
          return next;
        check = by(char);
      } else if (!check(char)) {
        return cur2;
      }
      cur2 = next;
    }
  }
  function byGroup(view, pos, start) {
    let categorize = view.state.charCategorizer(pos);
    let cat = categorize(start);
    return (next) => {
      let nextCat = categorize(next);
      if (cat == CharCategory.Space)
        cat = nextCat;
      return cat == nextCat;
    };
  }
  function moveVertically(view, start, forward, distance2) {
    let startPos = start.head, dir = forward ? 1 : -1;
    if (startPos == (forward ? view.state.doc.length : 0))
      return EditorSelection.cursor(startPos, start.assoc);
    let goal = start.goalColumn, startY;
    let rect = view.contentDOM.getBoundingClientRect();
    let startCoords = view.coordsAtPos(startPos, start.assoc || -1), docTop = view.documentTop;
    if (startCoords) {
      if (goal == null)
        goal = startCoords.left - rect.left;
      startY = dir < 0 ? startCoords.top : startCoords.bottom;
    } else {
      let line = view.viewState.lineBlockAt(startPos);
      if (goal == null)
        goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
      startY = (dir < 0 ? line.top : line.bottom) + docTop;
    }
    let resolvedGoal = rect.left + goal;
    let dist2 = distance2 !== null && distance2 !== void 0 ? distance2 : view.viewState.heightOracle.textHeight >> 1;
    for (let extra = 0; ; extra += 10) {
      let curY = startY + (dist2 + extra) * dir;
      let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
      if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) {
        let charRect = view.docView.coordsForChar(pos);
        let assoc = !charRect || curY < charRect.top ? -1 : 1;
        return EditorSelection.cursor(pos, assoc, void 0, goal);
      }
    }
  }
  function skipAtomicRanges(atoms, pos, bias) {
    for (; ; ) {
      let moved = 0;
      for (let set of atoms) {
        set.between(pos - 1, pos + 1, (from, to, value) => {
          if (pos > from && pos < to) {
            let side = moved || bias || (pos - from < to - pos ? -1 : 1);
            pos = side < 0 ? from : to;
            moved = side;
          }
        });
      }
      if (!moved)
        return pos;
    }
  }
  function skipAtoms(view, oldPos, pos) {
    let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map((f) => f(view)), pos.from, oldPos.head > pos.from ? -1 : 1);
    return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
  }
  var LineBreakPlaceholder = "\uFFFF";
  var DOMReader = class {
    constructor(points, state) {
      this.points = points;
      this.text = "";
      this.lineSeparator = state.facet(EditorState.lineSeparator);
    }
    append(text) {
      this.text += text;
    }
    lineBreak() {
      this.text += LineBreakPlaceholder;
    }
    readRange(start, end) {
      if (!start)
        return this;
      let parent = start.parentNode;
      for (let cur2 = start; ; ) {
        this.findPointBefore(parent, cur2);
        let oldLen = this.text.length;
        this.readNode(cur2);
        let next = cur2.nextSibling;
        if (next == end)
          break;
        let view = ContentView.get(cur2), nextView = ContentView.get(next);
        if (view && nextView ? view.breakAfter : (view ? view.breakAfter : isBlockElement(cur2)) || isBlockElement(next) && (cur2.nodeName != "BR" || cur2.cmIgnore) && this.text.length > oldLen)
          this.lineBreak();
        cur2 = next;
      }
      this.findPointBefore(parent, end);
      return this;
    }
    readTextNode(node) {
      let text = node.nodeValue;
      for (let point of this.points)
        if (point.node == node)
          point.pos = this.text.length + Math.min(point.offset, text.length);
      for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
        let nextBreak = -1, breakSize = 1, m;
        if (this.lineSeparator) {
          nextBreak = text.indexOf(this.lineSeparator, off);
          breakSize = this.lineSeparator.length;
        } else if (m = re.exec(text)) {
          nextBreak = m.index;
          breakSize = m[0].length;
        }
        this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
        if (nextBreak < 0)
          break;
        this.lineBreak();
        if (breakSize > 1) {
          for (let point of this.points)
            if (point.node == node && point.pos > this.text.length)
              point.pos -= breakSize - 1;
        }
        off = nextBreak + breakSize;
      }
    }
    readNode(node) {
      if (node.cmIgnore)
        return;
      let view = ContentView.get(node);
      let fromView = view && view.overrideDOMText;
      if (fromView != null) {
        this.findPointInside(node, fromView.length);
        for (let i = fromView.iter(); !i.next().done; ) {
          if (i.lineBreak)
            this.lineBreak();
          else
            this.append(i.value);
        }
      } else if (node.nodeType == 3) {
        this.readTextNode(node);
      } else if (node.nodeName == "BR") {
        if (node.nextSibling)
          this.lineBreak();
      } else if (node.nodeType == 1) {
        this.readRange(node.firstChild, null);
      }
    }
    findPointBefore(node, next) {
      for (let point of this.points)
        if (point.node == node && node.childNodes[point.offset] == next)
          point.pos = this.text.length;
    }
    findPointInside(node, length2) {
      for (let point of this.points)
        if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
          point.pos = this.text.length + (isAtEnd(node, point.node, point.offset) ? length2 : 0);
    }
  };
  function isAtEnd(parent, node, offset) {
    for (; ; ) {
      if (!node || offset < maxOffset(node))
        return false;
      if (node == parent)
        return true;
      offset = domIndex(node) + 1;
      node = node.parentNode;
    }
  }
  var DOMPoint = class {
    constructor(node, offset) {
      this.node = node;
      this.offset = offset;
      this.pos = -1;
    }
  };
  var DOMChange = class {
    constructor(view, start, end, typeOver) {
      this.typeOver = typeOver;
      this.bounds = null;
      this.text = "";
      this.domChanged = start > -1;
      let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
      if (view.state.readOnly && start > -1) {
        this.newSel = null;
      } else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
        let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
        let reader = new DOMReader(selPoints, view.state);
        reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
        this.text = reader.text;
        this.newSel = selectionFromPoints(selPoints, this.bounds.from);
      } else {
        let domSel = view.observer.selectionRange;
        let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
        let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
        let vp = view.viewport;
        if ((browser.ios || browser.chrome) && view.state.selection.main.empty && head != anchor && (vp.from > 0 || vp.to < view.state.doc.length)) {
          let from = Math.min(head, anchor), to = Math.max(head, anchor);
          let offFrom = vp.from - from, offTo = vp.to - to;
          if ((offFrom == 0 || offFrom == 1 || from == 0) && (offTo == 0 || offTo == -1 || to == view.state.doc.length)) {
            head = 0;
            anchor = view.state.doc.length;
          }
        }
        this.newSel = EditorSelection.single(anchor, head);
      }
    }
  };
  function applyDOMChange(view, domChange) {
    let change;
    let { newSel } = domChange, sel = view.state.selection.main;
    let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
    if (domChange.bounds) {
      let { from, to } = domChange.bounds;
      let preferredPos = sel.from, preferredSide = null;
      if (lastKey === 8 || browser.android && domChange.text.length < to - from) {
        preferredPos = sel.to;
        preferredSide = "end";
      }
      let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
      if (diff) {
        if (browser.chrome && lastKey == 13 && diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
          diff.toB--;
        change = {
          from: from + diff.from,
          to: from + diff.toA,
          insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder))
        };
      }
    } else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
      newSel = null;
    }
    if (!change && !newSel)
      return false;
    if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
      change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
    } else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 && /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
      if (newSel && change.insert.length == 2)
        newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
      change = { from: change.from, to: change.to, insert: Text.of([change.insert.toString().replace(".", " ")]) };
    } else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) {
      change = {
        from: sel.from,
        to: sel.to,
        insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
      };
    } else if (browser.chrome && change && change.from == change.to && change.from == sel.head && change.insert.toString() == "\n " && view.lineWrapping) {
      if (newSel)
        newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
      change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
    }
    if (change) {
      return applyDOMChangeInner(view, change, newSel, lastKey);
    } else if (newSel && !newSel.main.eq(sel)) {
      let scrollIntoView3 = false, userEvent = "select";
      if (view.inputState.lastSelectionTime > Date.now() - 50) {
        if (view.inputState.lastSelectionOrigin == "select")
          scrollIntoView3 = true;
        userEvent = view.inputState.lastSelectionOrigin;
      }
      view.dispatch({ selection: newSel, scrollIntoView: scrollIntoView3, userEvent });
      return true;
    } else {
      return false;
    }
  }
  function applyDOMChangeInner(view, change, newSel, lastKey = -1) {
    if (browser.ios && view.inputState.flushIOSKey(change))
      return true;
    let sel = view.state.selection.main;
    if (browser.android && (change.to == sel.to && // GBoard will sometimes remove a space it just inserted
    // after a completion when you press enter
    (change.from == sel.from || change.from == sel.from - 1 && view.state.sliceDoc(change.from, sel.from) == " ") && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view.contentDOM, "Enter", 13) || (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 || lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) && dispatchKey(view.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view.contentDOM, "Delete", 46)))
      return true;
    let text = change.insert.toString();
    if (view.inputState.composing >= 0)
      view.inputState.composing++;
    let defaultTr;
    let defaultInsert = () => defaultTr || (defaultTr = applyDefaultInsert(view, change, newSel));
    if (!view.state.facet(inputHandler).some((h) => h(view, change.from, change.to, text, defaultInsert)))
      view.dispatch(defaultInsert());
    return true;
  }
  function applyDefaultInsert(view, change, newSel) {
    let tr, startState = view.state, sel = startState.selection.main;
    if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) && view.inputState.composing < 0) {
      let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
      let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
      tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, void 0, view.state.lineBreak) + after));
    } else {
      let changes = startState.changes(change);
      let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : void 0;
      if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 && change.to <= sel.to && change.to >= sel.to - 10) {
        let replaced = view.state.sliceDoc(change.from, change.to);
        let compositionRange, composition = newSel && findCompositionNode(view, newSel.main.head);
        if (composition) {
          let dLen = change.insert.length - (change.to - change.from);
          compositionRange = { from: composition.from, to: composition.to - dLen };
        } else {
          compositionRange = view.state.doc.lineAt(sel.head);
        }
        let offset = sel.to - change.to, size = sel.to - sel.from;
        tr = startState.changeByRange((range) => {
          if (range.from == sel.from && range.to == sel.to)
            return { changes, range: mainSel || range.map(changes) };
          let to = range.to - offset, from = to - replaced.length;
          if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced || // Unfortunately, there's no way to make multiple
          // changes in the same node work without aborting
          // composition, so cursors in the composition range are
          // ignored.
          range.to >= compositionRange.from && range.from <= compositionRange.to)
            return { range };
          let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;
          return {
            changes: rangeChanges,
            range: !mainSel ? range.map(rangeChanges) : EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
          };
        });
      } else {
        tr = {
          changes,
          selection: mainSel && startState.selection.replaceRange(mainSel)
        };
      }
    }
    let userEvent = "input.type";
    if (view.composing || view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
      view.inputState.compositionPendingChange = false;
      userEvent += ".compose";
      if (view.inputState.compositionFirstChange) {
        userEvent += ".start";
        view.inputState.compositionFirstChange = false;
      }
    }
    return startState.update(tr, { userEvent, scrollIntoView: true });
  }
  function findDiff(a, b, preferredPos, preferredSide) {
    let minLen = Math.min(a.length, b.length);
    let from = 0;
    while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
      from++;
    if (from == minLen && a.length == b.length)
      return null;
    let toA = a.length, toB = b.length;
    while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
      toA--;
      toB--;
    }
    if (preferredSide == "end") {
      let adjust = Math.max(0, from - Math.min(toA, toB));
      preferredPos -= toA + adjust - from;
    }
    if (toA < from && a.length < b.length) {
      let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
      from -= move;
      toB = from + (toB - toA);
      toA = from;
    } else if (toB < from) {
      let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
      from -= move;
      toA = from + (toA - toB);
      toB = from;
    }
    return { from, toA, toB };
  }
  function selectionPoints(view) {
    let result = [];
    if (view.root.activeElement != view.contentDOM)
      return result;
    let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
    if (anchorNode) {
      result.push(new DOMPoint(anchorNode, anchorOffset));
      if (focusNode != anchorNode || focusOffset != anchorOffset)
        result.push(new DOMPoint(focusNode, focusOffset));
    }
    return result;
  }
  function selectionFromPoints(points, base2) {
    if (points.length == 0)
      return null;
    let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
    return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base2, head + base2) : null;
  }
  var InputState = class {
    setSelectionOrigin(origin) {
      this.lastSelectionOrigin = origin;
      this.lastSelectionTime = Date.now();
    }
    constructor(view) {
      this.view = view;
      this.lastKeyCode = 0;
      this.lastKeyTime = 0;
      this.lastTouchTime = 0;
      this.lastFocusTime = 0;
      this.lastScrollTop = 0;
      this.lastScrollLeft = 0;
      this.pendingIOSKey = void 0;
      this.tabFocusMode = -1;
      this.lastSelectionOrigin = null;
      this.lastSelectionTime = 0;
      this.lastContextMenu = 0;
      this.scrollHandlers = [];
      this.handlers = /* @__PURE__ */ Object.create(null);
      this.composing = -1;
      this.compositionFirstChange = null;
      this.compositionEndedAt = 0;
      this.compositionPendingKey = false;
      this.compositionPendingChange = false;
      this.mouseSelection = null;
      this.draggedContent = null;
      this.handleEvent = this.handleEvent.bind(this);
      this.notifiedFocused = view.hasFocus;
      if (browser.safari)
        view.contentDOM.addEventListener("input", () => null);
      if (browser.gecko)
        firefoxCopyCutHack(view.contentDOM.ownerDocument);
    }
    handleEvent(event) {
      if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event))
        return;
      if (event.type == "keydown" && this.keydown(event))
        return;
      if (this.view.updateState != 0)
        Promise.resolve().then(() => this.runHandlers(event.type, event));
      else
        this.runHandlers(event.type, event);
    }
    runHandlers(type, event) {
      let handlers2 = this.handlers[type];
      if (handlers2) {
        for (let observer of handlers2.observers)
          observer(this.view, event);
        for (let handler of handlers2.handlers) {
          if (event.defaultPrevented)
            break;
          if (handler(this.view, event)) {
            event.preventDefault();
            break;
          }
        }
      }
    }
    ensureHandlers(plugins) {
      let handlers2 = computeHandlers(plugins), prev = this.handlers, dom = this.view.contentDOM;
      for (let type in handlers2)
        if (type != "scroll") {
          let passive = !handlers2[type].handlers.length;
          let exists = prev[type];
          if (exists && passive != !exists.handlers.length) {
            dom.removeEventListener(type, this.handleEvent);
            exists = null;
          }
          if (!exists)
            dom.addEventListener(type, this.handleEvent, { passive });
        }
      for (let type in prev)
        if (type != "scroll" && !handlers2[type])
          dom.removeEventListener(type, this.handleEvent);
      this.handlers = handlers2;
    }
    keydown(event) {
      this.lastKeyCode = event.keyCode;
      this.lastKeyTime = Date.now();
      if (event.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode))
        return true;
      if (this.tabFocusMode > 0 && event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
        this.tabFocusMode = -1;
      if (browser.android && browser.chrome && !event.synthetic && (event.keyCode == 13 || event.keyCode == 8)) {
        this.view.observer.delayAndroidKey(event.key, event.keyCode);
        return true;
      }
      let pending;
      if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey && ((pending = PendingKeys.find((key) => key.keyCode == event.keyCode)) && !event.ctrlKey || EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
        this.pendingIOSKey = pending || event;
        setTimeout(() => this.flushIOSKey(), 250);
        return true;
      }
      if (event.keyCode != 229)
        this.view.observer.forceFlush();
      return false;
    }
    flushIOSKey(change) {
      let key = this.pendingIOSKey;
      if (!key)
        return false;
      if (key.key == "Enter" && change && change.from < change.to && /^\S+$/.test(change.insert.toString()))
        return false;
      this.pendingIOSKey = void 0;
      return dispatchKey(this.view.contentDOM, key.key, key.keyCode, key instanceof KeyboardEvent ? key : void 0);
    }
    ignoreDuringComposition(event) {
      if (!/^key/.test(event.type))
        return false;
      if (this.composing > 0)
        return true;
      if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
        this.compositionPendingKey = false;
        return true;
      }
      return false;
    }
    startMouseSelection(mouseSelection) {
      if (this.mouseSelection)
        this.mouseSelection.destroy();
      this.mouseSelection = mouseSelection;
    }
    update(update) {
      this.view.observer.update(update);
      if (this.mouseSelection)
        this.mouseSelection.update(update);
      if (this.draggedContent && update.docChanged)
        this.draggedContent = this.draggedContent.map(update.changes);
      if (update.transactions.length)
        this.lastKeyCode = this.lastSelectionTime = 0;
    }
    destroy() {
      if (this.mouseSelection)
        this.mouseSelection.destroy();
    }
  };
  function bindHandler(plugin, handler) {
    return (view, event) => {
      try {
        return handler.call(plugin, event, view);
      } catch (e) {
        logException(view.state, e);
      }
    };
  }
  function computeHandlers(plugins) {
    let result = /* @__PURE__ */ Object.create(null);
    function record(type) {
      return result[type] || (result[type] = { observers: [], handlers: [] });
    }
    for (let plugin of plugins) {
      let spec = plugin.spec, handlers2 = spec && spec.plugin.domEventHandlers, observers2 = spec && spec.plugin.domEventObservers;
      if (handlers2)
        for (let type in handlers2) {
          let f = handlers2[type];
          if (f)
            record(type).handlers.push(bindHandler(plugin.value, f));
        }
      if (observers2)
        for (let type in observers2) {
          let f = observers2[type];
          if (f)
            record(type).observers.push(bindHandler(plugin.value, f));
        }
    }
    for (let type in handlers)
      record(type).handlers.push(handlers[type]);
    for (let type in observers)
      record(type).observers.push(observers[type]);
    return result;
  }
  var PendingKeys = [
    { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
    { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
    { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
    { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
  ];
  var EmacsyPendingKeys = "dthko";
  var modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
  var dragScrollMargin = 6;
  function dragScrollSpeed(dist2) {
    return Math.max(0, dist2) * 0.7 + 8;
  }
  function dist(a, b) {
    return Math.max(Math.abs(a.clientX - b.clientX), Math.abs(a.clientY - b.clientY));
  }
  var MouseSelection = class {
    constructor(view, startEvent, style, mustSelect) {
      this.view = view;
      this.startEvent = startEvent;
      this.style = style;
      this.mustSelect = mustSelect;
      this.scrollSpeed = { x: 0, y: 0 };
      this.scrolling = -1;
      this.lastEvent = startEvent;
      this.scrollParents = scrollableParents(view.contentDOM);
      this.atoms = view.state.facet(atomicRanges).map((f) => f(view));
      let doc2 = view.contentDOM.ownerDocument;
      doc2.addEventListener("mousemove", this.move = this.move.bind(this));
      doc2.addEventListener("mouseup", this.up = this.up.bind(this));
      this.extend = startEvent.shiftKey;
      this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
      this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
    }
    start(event) {
      if (this.dragging === false)
        this.select(event);
    }
    move(event) {
      if (event.buttons == 0)
        return this.destroy();
      if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10)
        return;
      this.select(this.lastEvent = event);
      let sx = 0, sy = 0;
      let left = 0, top2 = 0, right = this.view.win.innerWidth, bottom = this.view.win.innerHeight;
      if (this.scrollParents.x)
        ({ left, right } = this.scrollParents.x.getBoundingClientRect());
      if (this.scrollParents.y)
        ({ top: top2, bottom } = this.scrollParents.y.getBoundingClientRect());
      let margins = getScrollMargins(this.view);
      if (event.clientX - margins.left <= left + dragScrollMargin)
        sx = -dragScrollSpeed(left - event.clientX);
      else if (event.clientX + margins.right >= right - dragScrollMargin)
        sx = dragScrollSpeed(event.clientX - right);
      if (event.clientY - margins.top <= top2 + dragScrollMargin)
        sy = -dragScrollSpeed(top2 - event.clientY);
      else if (event.clientY + margins.bottom >= bottom - dragScrollMargin)
        sy = dragScrollSpeed(event.clientY - bottom);
      this.setScrollSpeed(sx, sy);
    }
    up(event) {
      if (this.dragging == null)
        this.select(this.lastEvent);
      if (!this.dragging)
        event.preventDefault();
      this.destroy();
    }
    destroy() {
      this.setScrollSpeed(0, 0);
      let doc2 = this.view.contentDOM.ownerDocument;
      doc2.removeEventListener("mousemove", this.move);
      doc2.removeEventListener("mouseup", this.up);
      this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
    }
    setScrollSpeed(sx, sy) {
      this.scrollSpeed = { x: sx, y: sy };
      if (sx || sy) {
        if (this.scrolling < 0)
          this.scrolling = setInterval(() => this.scroll(), 50);
      } else if (this.scrolling > -1) {
        clearInterval(this.scrolling);
        this.scrolling = -1;
      }
    }
    scroll() {
      let { x, y } = this.scrollSpeed;
      if (x && this.scrollParents.x) {
        this.scrollParents.x.scrollLeft += x;
        x = 0;
      }
      if (y && this.scrollParents.y) {
        this.scrollParents.y.scrollTop += y;
        y = 0;
      }
      if (x || y)
        this.view.win.scrollBy(x, y);
      if (this.dragging === false)
        this.select(this.lastEvent);
    }
    skipAtoms(sel) {
      let ranges = null;
      for (let i = 0; i < sel.ranges.length; i++) {
        let range = sel.ranges[i], updated = null;
        if (range.empty) {
          let pos = skipAtomicRanges(this.atoms, range.from, 0);
          if (pos != range.from)
            updated = EditorSelection.cursor(pos, -1);
        } else {
          let from = skipAtomicRanges(this.atoms, range.from, -1);
          let to = skipAtomicRanges(this.atoms, range.to, 1);
          if (from != range.from || to != range.to)
            updated = EditorSelection.range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);
        }
        if (updated) {
          if (!ranges)
            ranges = sel.ranges.slice();
          ranges[i] = updated;
        }
      }
      return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
    }
    select(event) {
      let { view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
      if (this.mustSelect || !selection.eq(view.state.selection, this.dragging === false))
        this.view.dispatch({
          selection,
          userEvent: "select.pointer"
        });
      this.mustSelect = false;
    }
    update(update) {
      if (update.transactions.some((tr) => tr.isUserEvent("input.type")))
        this.destroy();
      else if (this.style.update(update))
        setTimeout(() => this.select(this.lastEvent), 20);
    }
  };
  function addsSelectionRange(view, event) {
    let facet = view.state.facet(clickAddsSelectionRange);
    return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
  }
  function dragMovesSelection(view, event) {
    let facet = view.state.facet(dragMovesSelection$1);
    return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
  }
  function isInPrimarySelection(view, event) {
    let { main } = view.state.selection;
    if (main.empty)
      return false;
    let sel = getSelection(view.root);
    if (!sel || sel.rangeCount == 0)
      return true;
    let rects = sel.getRangeAt(0).getClientRects();
    for (let i = 0; i < rects.length; i++) {
      let rect = rects[i];
      if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY)
        return true;
    }
    return false;
  }
  function eventBelongsToEditor(view, event) {
    if (!event.bubbles)
      return true;
    if (event.defaultPrevented)
      return false;
    for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
      if (!node || node.nodeType == 11 || (cView = ContentView.get(node)) && cView.ignoreEvent(event))
        return false;
    return true;
  }
  var handlers = /* @__PURE__ */ Object.create(null);
  var observers = /* @__PURE__ */ Object.create(null);
  var brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;
  function capturePaste(view) {
    let parent = view.dom.parentNode;
    if (!parent)
      return;
    let target = parent.appendChild(document.createElement("textarea"));
    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
    target.focus();
    setTimeout(() => {
      view.focus();
      target.remove();
      doPaste(view, target.value);
    }, 50);
  }
  function textFilter(state, facet, text) {
    for (let filter of state.facet(facet))
      text = filter(text, state);
    return text;
  }
  function doPaste(view, input) {
    input = textFilter(view.state, clipboardInputFilter, input);
    let { state } = view, changes, i = 1, text = state.toText(input);
    let byLine = text.lines == state.selection.ranges.length;
    let linewise = lastLinewiseCopy != null && state.selection.ranges.every((r) => r.empty) && lastLinewiseCopy == text.toString();
    if (linewise) {
      let lastLine = -1;
      changes = state.changeByRange((range) => {
        let line = state.doc.lineAt(range.from);
        if (line.from == lastLine)
          return { range };
        lastLine = line.from;
        let insert2 = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
        return {
          changes: { from: line.from, insert: insert2 },
          range: EditorSelection.cursor(range.from + insert2.length)
        };
      });
    } else if (byLine) {
      changes = state.changeByRange((range) => {
        let line = text.line(i++);
        return {
          changes: { from: range.from, to: range.to, insert: line.text },
          range: EditorSelection.cursor(range.from + line.length)
        };
      });
    } else {
      changes = state.replaceSelection(text);
    }
    view.dispatch(changes, {
      userEvent: "input.paste",
      scrollIntoView: true
    });
  }
  observers.scroll = (view) => {
    view.inputState.lastScrollTop = view.scrollDOM.scrollTop;
    view.inputState.lastScrollLeft = view.scrollDOM.scrollLeft;
  };
  handlers.keydown = (view, event) => {
    view.inputState.setSelectionOrigin("select");
    if (event.keyCode == 27 && view.inputState.tabFocusMode != 0)
      view.inputState.tabFocusMode = Date.now() + 2e3;
    return false;
  };
  observers.touchstart = (view, e) => {
    view.inputState.lastTouchTime = Date.now();
    view.inputState.setSelectionOrigin("select.pointer");
  };
  observers.touchmove = (view) => {
    view.inputState.setSelectionOrigin("select.pointer");
  };
  handlers.mousedown = (view, event) => {
    view.observer.flush();
    if (view.inputState.lastTouchTime > Date.now() - 2e3)
      return false;
    let style = null;
    for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
      style = makeStyle(view, event);
      if (style)
        break;
    }
    if (!style && event.button == 0)
      style = basicMouseSelection(view, event);
    if (style) {
      let mustFocus = !view.hasFocus;
      view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
      if (mustFocus)
        view.observer.ignore(() => {
          focusPreventScroll(view.contentDOM);
          let active = view.root.activeElement;
          if (active && !active.contains(view.contentDOM))
            active.blur();
        });
      let mouseSel = view.inputState.mouseSelection;
      if (mouseSel) {
        mouseSel.start(event);
        return mouseSel.dragging === false;
      }
    }
    return false;
  };
  function rangeForClick(view, pos, bias, type) {
    if (type == 1) {
      return EditorSelection.cursor(pos, bias);
    } else if (type == 2) {
      return groupAt(view.state, pos, bias);
    } else {
      let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
      let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
      if (to < view.state.doc.length && to == line.to)
        to++;
      return EditorSelection.range(from, to);
    }
  }
  var inside = (x, y, rect) => y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right;
  function findPositionSide(view, pos, x, y) {
    let line = LineView.find(view.docView, pos);
    if (!line)
      return 1;
    let off = pos - line.posAtStart;
    if (off == 0)
      return 1;
    if (off == line.length)
      return -1;
    let before = line.coordsAt(off, -1);
    if (before && inside(x, y, before))
      return -1;
    let after = line.coordsAt(off, 1);
    if (after && inside(x, y, after))
      return 1;
    return before && before.bottom >= y ? -1 : 1;
  }
  function queryPos(view, event) {
    let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
    return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
  }
  var BadMouseDetail = browser.ie && browser.ie_version <= 11;
  var lastMouseDown = null;
  var lastMouseDownCount = 0;
  var lastMouseDownTime = 0;
  function getClickType(event) {
    if (!BadMouseDetail)
      return event.detail;
    let last = lastMouseDown, lastTime = lastMouseDownTime;
    lastMouseDown = event;
    lastMouseDownTime = Date.now();
    return lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
  }
  function basicMouseSelection(view, event) {
    let start = queryPos(view, event), type = getClickType(event);
    let startSel = view.state.selection;
    return {
      update(update) {
        if (update.docChanged) {
          start.pos = update.changes.mapPos(start.pos);
          startSel = startSel.map(update.changes);
        }
      },
      get(event2, extend, multiple) {
        let cur2 = queryPos(view, event2), removed;
        let range = rangeForClick(view, cur2.pos, cur2.bias, type);
        if (start.pos != cur2.pos && !extend) {
          let startRange = rangeForClick(view, start.pos, start.bias, type);
          let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
          range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
        }
        if (extend)
          return startSel.replaceRange(startSel.main.extend(range.from, range.to));
        else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur2.pos)))
          return removed;
        else if (multiple)
          return startSel.addRange(range);
        else
          return EditorSelection.create([range]);
      }
    };
  }
  function removeRangeAround(sel, pos) {
    for (let i = 0; i < sel.ranges.length; i++) {
      let { from, to } = sel.ranges[i];
      if (from <= pos && to >= pos)
        return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
    }
    return null;
  }
  handlers.dragstart = (view, event) => {
    let { selection: { main: range } } = view.state;
    if (event.target.draggable) {
      let cView = view.docView.nearest(event.target);
      if (cView && cView.isWidget) {
        let from = cView.posAtStart, to = from + cView.length;
        if (from >= range.to || to <= range.from)
          range = EditorSelection.range(from, to);
      }
    }
    let { inputState } = view;
    if (inputState.mouseSelection)
      inputState.mouseSelection.dragging = true;
    inputState.draggedContent = range;
    if (event.dataTransfer) {
      event.dataTransfer.setData("Text", textFilter(view.state, clipboardOutputFilter, view.state.sliceDoc(range.from, range.to)));
      event.dataTransfer.effectAllowed = "copyMove";
    }
    return false;
  };
  handlers.dragend = (view) => {
    view.inputState.draggedContent = null;
    return false;
  };
  function dropText(view, event, text, direct) {
    text = textFilter(view.state, clipboardInputFilter, text);
    if (!text)
      return;
    let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
    let { draggedContent } = view.inputState;
    let del = direct && draggedContent && dragMovesSelection(view, event) ? { from: draggedContent.from, to: draggedContent.to } : null;
    let ins = { from: dropPos, insert: text };
    let changes = view.state.changes(del ? [del, ins] : ins);
    view.focus();
    view.dispatch({
      changes,
      selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
      userEvent: del ? "move.drop" : "input.drop"
    });
    view.inputState.draggedContent = null;
  }
  handlers.drop = (view, event) => {
    if (!event.dataTransfer)
      return false;
    if (view.state.readOnly)
      return true;
    let files = event.dataTransfer.files;
    if (files && files.length) {
      let text = Array(files.length), read = 0;
      let finishFile = () => {
        if (++read == files.length)
          dropText(view, event, text.filter((s) => s != null).join(view.state.lineBreak), false);
      };
      for (let i = 0; i < files.length; i++) {
        let reader = new FileReader();
        reader.onerror = finishFile;
        reader.onload = () => {
          if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
            text[i] = reader.result;
          finishFile();
        };
        reader.readAsText(files[i]);
      }
      return true;
    } else {
      let text = event.dataTransfer.getData("Text");
      if (text) {
        dropText(view, event, text, true);
        return true;
      }
    }
    return false;
  };
  handlers.paste = (view, event) => {
    if (view.state.readOnly)
      return true;
    view.observer.flush();
    let data = brokenClipboardAPI ? null : event.clipboardData;
    if (data) {
      doPaste(view, data.getData("text/plain") || data.getData("text/uri-list"));
      return true;
    } else {
      capturePaste(view);
      return false;
    }
  };
  function captureCopy(view, text) {
    let parent = view.dom.parentNode;
    if (!parent)
      return;
    let target = parent.appendChild(document.createElement("textarea"));
    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
    target.value = text;
    target.focus();
    target.selectionEnd = text.length;
    target.selectionStart = 0;
    setTimeout(() => {
      target.remove();
      view.focus();
    }, 50);
  }
  function copiedRange(state) {
    let content2 = [], ranges = [], linewise = false;
    for (let range of state.selection.ranges)
      if (!range.empty) {
        content2.push(state.sliceDoc(range.from, range.to));
        ranges.push(range);
      }
    if (!content2.length) {
      let upto = -1;
      for (let { from } of state.selection.ranges) {
        let line = state.doc.lineAt(from);
        if (line.number > upto) {
          content2.push(line.text);
          ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
        }
        upto = line.number;
      }
      linewise = true;
    }
    return { text: textFilter(state, clipboardOutputFilter, content2.join(state.lineBreak)), ranges, linewise };
  }
  var lastLinewiseCopy = null;
  handlers.copy = handlers.cut = (view, event) => {
    let { text, ranges, linewise } = copiedRange(view.state);
    if (!text && !linewise)
      return false;
    lastLinewiseCopy = linewise ? text : null;
    if (event.type == "cut" && !view.state.readOnly)
      view.dispatch({
        changes: ranges,
        scrollIntoView: true,
        userEvent: "delete.cut"
      });
    let data = brokenClipboardAPI ? null : event.clipboardData;
    if (data) {
      data.clearData();
      data.setData("text/plain", text);
      return true;
    } else {
      captureCopy(view, text);
      return false;
    }
  };
  var isFocusChange = /* @__PURE__ */ Annotation.define();
  function focusChangeTransaction(state, focus) {
    let effects = [];
    for (let getEffect of state.facet(focusChangeEffect)) {
      let effect = getEffect(state, focus);
      if (effect)
        effects.push(effect);
    }
    return effects.length ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
  }
  function updateForFocusChange(view) {
    setTimeout(() => {
      let focus = view.hasFocus;
      if (focus != view.inputState.notifiedFocused) {
        let tr = focusChangeTransaction(view.state, focus);
        if (tr)
          view.dispatch(tr);
        else
          view.update([]);
      }
    }, 10);
  }
  observers.focus = (view) => {
    view.inputState.lastFocusTime = Date.now();
    if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
      view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
      view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
    }
    updateForFocusChange(view);
  };
  observers.blur = (view) => {
    view.observer.clearSelectionRange();
    updateForFocusChange(view);
  };
  observers.compositionstart = observers.compositionupdate = (view) => {
    if (view.observer.editContext)
      return;
    if (view.inputState.compositionFirstChange == null)
      view.inputState.compositionFirstChange = true;
    if (view.inputState.composing < 0) {
      view.inputState.composing = 0;
    }
  };
  observers.compositionend = (view) => {
    if (view.observer.editContext)
      return;
    view.inputState.composing = -1;
    view.inputState.compositionEndedAt = Date.now();
    view.inputState.compositionPendingKey = true;
    view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
    view.inputState.compositionFirstChange = null;
    if (browser.chrome && browser.android) {
      view.observer.flushSoon();
    } else if (view.inputState.compositionPendingChange) {
      Promise.resolve().then(() => view.observer.flush());
    } else {
      setTimeout(() => {
        if (view.inputState.composing < 0 && view.docView.hasComposition)
          view.update([]);
      }, 50);
    }
  };
  observers.contextmenu = (view) => {
    view.inputState.lastContextMenu = Date.now();
  };
  handlers.beforeinput = (view, event) => {
    var _a2, _b;
    if (event.inputType == "insertReplacementText" && view.observer.editContext) {
      let text = (_a2 = event.dataTransfer) === null || _a2 === void 0 ? void 0 : _a2.getData("text/plain"), ranges = event.getTargetRanges();
      if (text && ranges.length) {
        let r = ranges[0];
        let from = view.posAtDOM(r.startContainer, r.startOffset), to = view.posAtDOM(r.endContainer, r.endOffset);
        applyDOMChangeInner(view, { from, to, insert: view.state.toText(text) }, null);
        return true;
      }
    }
    let pending;
    if (browser.chrome && browser.android && (pending = PendingKeys.find((key) => key.inputType == event.inputType))) {
      view.observer.delayAndroidKey(pending.key, pending.keyCode);
      if (pending.key == "Backspace" || pending.key == "Delete") {
        let startViewHeight = ((_b = window.visualViewport) === null || _b === void 0 ? void 0 : _b.height) || 0;
        setTimeout(() => {
          var _a3;
          if ((((_a3 = window.visualViewport) === null || _a3 === void 0 ? void 0 : _a3.height) || 0) > startViewHeight + 10 && view.hasFocus) {
            view.contentDOM.blur();
            view.focus();
          }
        }, 100);
      }
    }
    if (browser.ios && event.inputType == "deleteContentForward") {
      view.observer.flushSoon();
    }
    if (browser.safari && event.inputType == "insertText" && view.inputState.composing >= 0) {
      setTimeout(() => observers.compositionend(view, event), 20);
    }
    return false;
  };
  var appliedFirefoxHack = /* @__PURE__ */ new Set();
  function firefoxCopyCutHack(doc2) {
    if (!appliedFirefoxHack.has(doc2)) {
      appliedFirefoxHack.add(doc2);
      doc2.addEventListener("copy", () => {
      });
      doc2.addEventListener("cut", () => {
      });
    }
  }
  var wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
  var heightChangeFlag = false;
  function clearHeightChangeFlag() {
    heightChangeFlag = false;
  }
  var HeightOracle = class {
    constructor(lineWrapping) {
      this.lineWrapping = lineWrapping;
      this.doc = Text.empty;
      this.heightSamples = {};
      this.lineHeight = 14;
      this.charWidth = 7;
      this.textHeight = 14;
      this.lineLength = 30;
    }
    heightForGap(from, to) {
      let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
      if (this.lineWrapping)
        lines += Math.max(0, Math.ceil((to - from - lines * this.lineLength * 0.5) / this.lineLength));
      return this.lineHeight * lines;
    }
    heightForLine(length2) {
      if (!this.lineWrapping)
        return this.lineHeight;
      let lines = 1 + Math.max(0, Math.ceil((length2 - this.lineLength) / (this.lineLength - 5)));
      return lines * this.lineHeight;
    }
    setDoc(doc2) {
      this.doc = doc2;
      return this;
    }
    mustRefreshForWrapping(whiteSpace) {
      return wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping;
    }
    mustRefreshForHeights(lineHeights) {
      let newHeight = false;
      for (let i = 0; i < lineHeights.length; i++) {
        let h = lineHeights[i];
        if (h < 0) {
          i++;
        } else if (!this.heightSamples[Math.floor(h * 10)]) {
          newHeight = true;
          this.heightSamples[Math.floor(h * 10)] = true;
        }
      }
      return newHeight;
    }
    refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
      let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
      let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
      this.lineWrapping = lineWrapping;
      this.lineHeight = lineHeight;
      this.charWidth = charWidth;
      this.textHeight = textHeight;
      this.lineLength = lineLength;
      if (changed) {
        this.heightSamples = {};
        for (let i = 0; i < knownHeights.length; i++) {
          let h = knownHeights[i];
          if (h < 0)
            i++;
          else
            this.heightSamples[Math.floor(h * 10)] = true;
        }
      }
      return changed;
    }
  };
  var MeasuredHeights = class {
    constructor(from, heights) {
      this.from = from;
      this.heights = heights;
      this.index = 0;
    }
    get more() {
      return this.index < this.heights.length;
    }
  };
  var BlockInfo = class _BlockInfo {
    /**
    @internal
    */
    constructor(from, length2, top2, height, _content) {
      this.from = from;
      this.length = length2;
      this.top = top2;
      this.height = height;
      this._content = _content;
    }
    /**
    The type of element this is. When querying lines, this may be
    an array of all the blocks that make up the line.
    */
    get type() {
      return typeof this._content == "number" ? BlockType.Text : Array.isArray(this._content) ? this._content : this._content.type;
    }
    /**
    The end of the element as a document position.
    */
    get to() {
      return this.from + this.length;
    }
    /**
    The bottom position of the element.
    */
    get bottom() {
      return this.top + this.height;
    }
    /**
    If this is a widget block, this will return the widget
    associated with it.
    */
    get widget() {
      return this._content instanceof PointDecoration ? this._content.widget : null;
    }
    /**
    If this is a textblock, this holds the number of line breaks
    that appear in widgets inside the block.
    */
    get widgetLineBreaks() {
      return typeof this._content == "number" ? this._content : 0;
    }
    /**
    @internal
    */
    join(other) {
      let content2 = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(other._content) ? other._content : [other]);
      return new _BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content2);
    }
  };
  var QueryType = /* @__PURE__ */ function(QueryType3) {
    QueryType3[QueryType3["ByPos"] = 0] = "ByPos";
    QueryType3[QueryType3["ByHeight"] = 1] = "ByHeight";
    QueryType3[QueryType3["ByPosNoHeight"] = 2] = "ByPosNoHeight";
    return QueryType3;
  }(QueryType || (QueryType = {}));
  var Epsilon = 1e-3;
  var HeightMap = class _HeightMap {
    constructor(length2, height, flags = 2) {
      this.length = length2;
      this.height = height;
      this.flags = flags;
    }
    get outdated() {
      return (this.flags & 2) > 0;
    }
    set outdated(value) {
      this.flags = (value ? 2 : 0) | this.flags & ~2;
    }
    setHeight(height) {
      if (this.height != height) {
        if (Math.abs(this.height - height) > Epsilon)
          heightChangeFlag = true;
        this.height = height;
      }
    }
    // Base case is to replace a leaf node, which simply builds a tree
    // from the new nodes and returns that (HeightMapBranch and
    // HeightMapGap override this to actually use from/to)
    replace(_from, _to, nodes) {
      return _HeightMap.of(nodes);
    }
    // Again, these are base cases, and are overridden for branch and gap nodes.
    decomposeLeft(_to, result) {
      result.push(this);
    }
    decomposeRight(_from, result) {
      result.push(this);
    }
    applyChanges(decorations2, oldDoc, oracle, changes) {
      let me = this, doc2 = oracle.doc;
      for (let i = changes.length - 1; i >= 0; i--) {
        let { fromA, toA, fromB, toB } = changes[i];
        let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
        let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
        toB += end.to - toA;
        toA = end.to;
        while (i > 0 && start.from <= changes[i - 1].toA) {
          fromA = changes[i - 1].fromA;
          fromB = changes[i - 1].fromB;
          i--;
          if (fromA < start.from)
            start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
        }
        fromB += start.from - fromA;
        fromA = start.from;
        let nodes = NodeBuilder.build(oracle.setDoc(doc2), decorations2, fromB, toB);
        me = replace(me, me.replace(fromA, toA, nodes));
      }
      return me.updateHeight(oracle, 0);
    }
    static empty() {
      return new HeightMapText(0, 0);
    }
    // nodes uses null values to indicate the position of line breaks.
    // There are never line breaks at the start or end of the array, or
    // two line breaks next to each other, and the array isn't allowed
    // to be empty (same restrictions as return value from the builder).
    static of(nodes) {
      if (nodes.length == 1)
        return nodes[0];
      let i = 0, j = nodes.length, before = 0, after = 0;
      for (; ; ) {
        if (i == j) {
          if (before > after * 2) {
            let split = nodes[i - 1];
            if (split.break)
              nodes.splice(--i, 1, split.left, null, split.right);
            else
              nodes.splice(--i, 1, split.left, split.right);
            j += 1 + split.break;
            before -= split.size;
          } else if (after > before * 2) {
            let split = nodes[j];
            if (split.break)
              nodes.splice(j, 1, split.left, null, split.right);
            else
              nodes.splice(j, 1, split.left, split.right);
            j += 2 + split.break;
            after -= split.size;
          } else {
            break;
          }
        } else if (before < after) {
          let next = nodes[i++];
          if (next)
            before += next.size;
        } else {
          let next = nodes[--j];
          if (next)
            after += next.size;
        }
      }
      let brk = 0;
      if (nodes[i - 1] == null) {
        brk = 1;
        i--;
      } else if (nodes[i] == null) {
        brk = 1;
        j++;
      }
      return new HeightMapBranch(_HeightMap.of(nodes.slice(0, i)), brk, _HeightMap.of(nodes.slice(j)));
    }
  };
  function replace(old, val) {
    if (old == val)
      return old;
    if (old.constructor != val.constructor)
      heightChangeFlag = true;
    return val;
  }
  HeightMap.prototype.size = 1;
  var HeightMapBlock = class extends HeightMap {
    constructor(length2, height, deco) {
      super(length2, height);
      this.deco = deco;
    }
    blockAt(_height, _oracle, top2, offset) {
      return new BlockInfo(offset, this.length, top2, this.height, this.deco || 0);
    }
    lineAt(_value, _type, oracle, top2, offset) {
      return this.blockAt(0, oracle, top2, offset);
    }
    forEachLine(from, to, oracle, top2, offset, f) {
      if (from <= offset + this.length && to >= offset)
        f(this.blockAt(0, oracle, top2, offset));
    }
    updateHeight(oracle, offset = 0, _force = false, measured) {
      if (measured && measured.from <= offset && measured.more)
        this.setHeight(measured.heights[measured.index++]);
      this.outdated = false;
      return this;
    }
    toString() {
      return `block(${this.length})`;
    }
  };
  var HeightMapText = class _HeightMapText extends HeightMapBlock {
    constructor(length2, height) {
      super(length2, height, null);
      this.collapsed = 0;
      this.widgetHeight = 0;
      this.breaks = 0;
    }
    blockAt(_height, _oracle, top2, offset) {
      return new BlockInfo(offset, this.length, top2, this.height, this.breaks);
    }
    replace(_from, _to, nodes) {
      let node = nodes[0];
      if (nodes.length == 1 && (node instanceof _HeightMapText || node instanceof HeightMapGap && node.flags & 4) && Math.abs(this.length - node.length) < 10) {
        if (node instanceof HeightMapGap)
          node = new _HeightMapText(node.length, this.height);
        else
          node.height = this.height;
        if (!this.outdated)
          node.outdated = false;
        return node;
      } else {
        return HeightMap.of(nodes);
      }
    }
    updateHeight(oracle, offset = 0, force = false, measured) {
      if (measured && measured.from <= offset && measured.more)
        this.setHeight(measured.heights[measured.index++]);
      else if (force || this.outdated)
        this.setHeight(Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) + this.breaks * oracle.lineHeight);
      this.outdated = false;
      return this;
    }
    toString() {
      return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
    }
  };
  var HeightMapGap = class _HeightMapGap extends HeightMap {
    constructor(length2) {
      super(length2, 0);
    }
    heightMetrics(oracle, offset) {
      let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
      let lines = lastLine - firstLine + 1;
      let perLine, perChar = 0;
      if (oracle.lineWrapping) {
        let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
        perLine = totalPerLine / lines;
        if (this.length > lines + 1)
          perChar = (this.height - totalPerLine) / (this.length - lines - 1);
      } else {
        perLine = this.height / lines;
      }
      return { firstLine, lastLine, perLine, perChar };
    }
    blockAt(height, oracle, top2, offset) {
      let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
      if (oracle.lineWrapping) {
        let guess = offset + (height < oracle.lineHeight ? 0 : Math.round(Math.max(0, Math.min(1, (height - top2) / this.height)) * this.length));
        let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;
        let lineTop = Math.max(top2, height - lineHeight / 2);
        return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);
      } else {
        let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top2) / perLine)));
        let { from, length: length2 } = oracle.doc.line(firstLine + line);
        return new BlockInfo(from, length2, top2 + perLine * line, perLine, 0);
      }
    }
    lineAt(value, type, oracle, top2, offset) {
      if (type == QueryType.ByHeight)
        return this.blockAt(value, oracle, top2, offset);
      if (type == QueryType.ByPosNoHeight) {
        let { from, to } = oracle.doc.lineAt(value);
        return new BlockInfo(from, to - from, 0, 0, 0);
      }
      let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
      let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;
      let linesAbove = line.number - firstLine;
      let lineTop = top2 + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
      return new BlockInfo(line.from, line.length, Math.max(top2, Math.min(lineTop, top2 + this.height - lineHeight)), lineHeight, 0);
    }
    forEachLine(from, to, oracle, top2, offset, f) {
      from = Math.max(from, offset);
      to = Math.min(to, offset + this.length);
      let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
      for (let pos = from, lineTop = top2; pos <= to; ) {
        let line = oracle.doc.lineAt(pos);
        if (pos == from) {
          let linesAbove = line.number - firstLine;
          lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
        }
        let lineHeight = perLine + perChar * line.length;
        f(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));
        lineTop += lineHeight;
        pos = line.to + 1;
      }
    }
    replace(from, to, nodes) {
      let after = this.length - to;
      if (after > 0) {
        let last = nodes[nodes.length - 1];
        if (last instanceof _HeightMapGap)
          nodes[nodes.length - 1] = new _HeightMapGap(last.length + after);
        else
          nodes.push(null, new _HeightMapGap(after - 1));
      }
      if (from > 0) {
        let first = nodes[0];
        if (first instanceof _HeightMapGap)
          nodes[0] = new _HeightMapGap(from + first.length);
        else
          nodes.unshift(new _HeightMapGap(from - 1), null);
      }
      return HeightMap.of(nodes);
    }
    decomposeLeft(to, result) {
      result.push(new _HeightMapGap(to - 1), null);
    }
    decomposeRight(from, result) {
      result.push(null, new _HeightMapGap(this.length - from - 1));
    }
    updateHeight(oracle, offset = 0, force = false, measured) {
      let end = offset + this.length;
      if (measured && measured.from <= offset + this.length && measured.more) {
        let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
        if (measured.from > offset)
          nodes.push(new _HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
        while (pos <= end && measured.more) {
          let len = oracle.doc.lineAt(pos).length;
          if (nodes.length)
            nodes.push(null);
          let height = measured.heights[measured.index++];
          if (singleHeight == -1)
            singleHeight = height;
          else if (Math.abs(height - singleHeight) >= Epsilon)
            singleHeight = -2;
          let line = new HeightMapText(len, height);
          line.outdated = false;
          nodes.push(line);
          pos += len + 1;
        }
        if (pos <= end)
          nodes.push(null, new _HeightMapGap(end - pos).updateHeight(oracle, pos));
        let result = HeightMap.of(nodes);
        if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon || Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)
          heightChangeFlag = true;
        return replace(this, result);
      } else if (force || this.outdated) {
        this.setHeight(oracle.heightForGap(offset, offset + this.length));
        this.outdated = false;
      }
      return this;
    }
    toString() {
      return `gap(${this.length})`;
    }
  };
  var HeightMapBranch = class extends HeightMap {
    constructor(left, brk, right) {
      super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 : 0));
      this.left = left;
      this.right = right;
      this.size = left.size + right.size;
    }
    get break() {
      return this.flags & 1;
    }
    blockAt(height, oracle, top2, offset) {
      let mid = top2 + this.left.height;
      return height < mid ? this.left.blockAt(height, oracle, top2, offset) : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
    }
    lineAt(value, type, oracle, top2, offset) {
      let rightTop = top2 + this.left.height, rightOffset = offset + this.left.length + this.break;
      let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
      let base2 = left ? this.left.lineAt(value, type, oracle, top2, offset) : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
      if (this.break || (left ? base2.to < rightOffset : base2.from > rightOffset))
        return base2;
      let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
      if (left)
        return base2.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
      else
        return this.left.lineAt(rightOffset, subQuery, oracle, top2, offset).join(base2);
    }
    forEachLine(from, to, oracle, top2, offset, f) {
      let rightTop = top2 + this.left.height, rightOffset = offset + this.left.length + this.break;
      if (this.break) {
        if (from < rightOffset)
          this.left.forEachLine(from, to, oracle, top2, offset, f);
        if (to >= rightOffset)
          this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);
      } else {
        let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top2, offset);
        if (from < mid.from)
          this.left.forEachLine(from, mid.from - 1, oracle, top2, offset, f);
        if (mid.to >= from && mid.from <= to)
          f(mid);
        if (to > mid.to)
          this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
      }
    }
    replace(from, to, nodes) {
      let rightStart = this.left.length + this.break;
      if (to < rightStart)
        return this.balanced(this.left.replace(from, to, nodes), this.right);
      if (from > this.left.length)
        return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
      let result = [];
      if (from > 0)
        this.decomposeLeft(from, result);
      let left = result.length;
      for (let node of nodes)
        result.push(node);
      if (from > 0)
        mergeGaps(result, left - 1);
      if (to < this.length) {
        let right = result.length;
        this.decomposeRight(to, result);
        mergeGaps(result, right);
      }
      return HeightMap.of(result);
    }
    decomposeLeft(to, result) {
      let left = this.left.length;
      if (to <= left)
        return this.left.decomposeLeft(to, result);
      result.push(this.left);
      if (this.break) {
        left++;
        if (to >= left)
          result.push(null);
      }
      if (to > left)
        this.right.decomposeLeft(to - left, result);
    }
    decomposeRight(from, result) {
      let left = this.left.length, right = left + this.break;
      if (from >= right)
        return this.right.decomposeRight(from - right, result);
      if (from < left)
        this.left.decomposeRight(from, result);
      if (this.break && from < right)
        result.push(null);
      result.push(this.right);
    }
    balanced(left, right) {
      if (left.size > 2 * right.size || right.size > 2 * left.size)
        return HeightMap.of(this.break ? [left, null, right] : [left, right]);
      this.left = replace(this.left, left);
      this.right = replace(this.right, right);
      this.setHeight(left.height + right.height);
      this.outdated = left.outdated || right.outdated;
      this.size = left.size + right.size;
      this.length = left.length + this.break + right.length;
      return this;
    }
    updateHeight(oracle, offset = 0, force = false, measured) {
      let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
      if (measured && measured.from <= offset + left.length && measured.more)
        rebalance = left = left.updateHeight(oracle, offset, force, measured);
      else
        left.updateHeight(oracle, offset, force);
      if (measured && measured.from <= rightStart + right.length && measured.more)
        rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
      else
        right.updateHeight(oracle, rightStart, force);
      if (rebalance)
        return this.balanced(left, right);
      this.height = this.left.height + this.right.height;
      this.outdated = false;
      return this;
    }
    toString() {
      return this.left + (this.break ? " " : "-") + this.right;
    }
  };
  function mergeGaps(nodes, around) {
    let before, after;
    if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap)
      nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
  }
  var relevantWidgetHeight = 5;
  var NodeBuilder = class _NodeBuilder {
    constructor(pos, oracle) {
      this.pos = pos;
      this.oracle = oracle;
      this.nodes = [];
      this.lineStart = -1;
      this.lineEnd = -1;
      this.covering = null;
      this.writtenTo = pos;
    }
    get isCovered() {
      return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
    }
    span(_from, to) {
      if (this.lineStart > -1) {
        let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
        if (last instanceof HeightMapText)
          last.length += end - this.pos;
        else if (end > this.pos || !this.isCovered)
          this.nodes.push(new HeightMapText(end - this.pos, -1));
        this.writtenTo = end;
        if (to > end) {
          this.nodes.push(null);
          this.writtenTo++;
          this.lineStart = -1;
        }
      }
      this.pos = to;
    }
    point(from, to, deco) {
      if (from < to || deco.heightRelevant) {
        let height = deco.widget ? deco.widget.estimatedHeight : 0;
        let breaks = deco.widget ? deco.widget.lineBreaks : 0;
        if (height < 0)
          height = this.oracle.lineHeight;
        let len = to - from;
        if (deco.block) {
          this.addBlock(new HeightMapBlock(len, height, deco));
        } else if (len || breaks || height >= relevantWidgetHeight) {
          this.addLineDeco(height, breaks, len);
        }
      } else if (to > from) {
        this.span(from, to);
      }
      if (this.lineEnd > -1 && this.lineEnd < this.pos)
        this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
    }
    enterLine() {
      if (this.lineStart > -1)
        return;
      let { from, to } = this.oracle.doc.lineAt(this.pos);
      this.lineStart = from;
      this.lineEnd = to;
      if (this.writtenTo < from) {
        if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
          this.nodes.push(this.blankContent(this.writtenTo, from - 1));
        this.nodes.push(null);
      }
      if (this.pos > from)
        this.nodes.push(new HeightMapText(this.pos - from, -1));
      this.writtenTo = this.pos;
    }
    blankContent(from, to) {
      let gap = new HeightMapGap(to - from);
      if (this.oracle.doc.lineAt(from).to == to)
        gap.flags |= 4;
      return gap;
    }
    ensureLine() {
      this.enterLine();
      let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
      if (last instanceof HeightMapText)
        return last;
      let line = new HeightMapText(0, -1);
      this.nodes.push(line);
      return line;
    }
    addBlock(block) {
      this.enterLine();
      let deco = block.deco;
      if (deco && deco.startSide > 0 && !this.isCovered)
        this.ensureLine();
      this.nodes.push(block);
      this.writtenTo = this.pos = this.pos + block.length;
      if (deco && deco.endSide > 0)
        this.covering = block;
    }
    addLineDeco(height, breaks, length2) {
      let line = this.ensureLine();
      line.length += length2;
      line.collapsed += length2;
      line.widgetHeight = Math.max(line.widgetHeight, height);
      line.breaks += breaks;
      this.writtenTo = this.pos = this.pos + length2;
    }
    finish(from) {
      let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
      if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
        this.nodes.push(new HeightMapText(0, -1));
      else if (this.writtenTo < this.pos || last == null)
        this.nodes.push(this.blankContent(this.writtenTo, this.pos));
      let pos = from;
      for (let node of this.nodes) {
        if (node instanceof HeightMapText)
          node.updateHeight(this.oracle, pos);
        pos += node ? node.length : 1;
      }
      return this.nodes;
    }
    // Always called with a region that on both sides either stretches
    // to a line break or the end of the document.
    // The returned array uses null to indicate line breaks, but never
    // starts or ends in a line break, or has multiple line breaks next
    // to each other.
    static build(oracle, decorations2, from, to) {
      let builder = new _NodeBuilder(from, oracle);
      RangeSet.spans(decorations2, from, to, builder, 0);
      return builder.finish(from);
    }
  };
  function heightRelevantDecoChanges(a, b, diff) {
    let comp = new DecorationComparator2();
    RangeSet.compare(a, b, diff, comp, 0);
    return comp.changes;
  }
  var DecorationComparator2 = class {
    constructor() {
      this.changes = [];
    }
    compareRange() {
    }
    comparePoint(from, to, a, b) {
      if (from < to || a && a.heightRelevant || b && b.heightRelevant)
        addRange(from, to, this.changes, 5);
    }
  };
  function visiblePixelRange(dom, paddingTop) {
    let rect = dom.getBoundingClientRect();
    let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
    let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
    let top2 = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
    for (let parent = dom.parentNode; parent && parent != doc2.body; ) {
      if (parent.nodeType == 1) {
        let elt = parent;
        let style = window.getComputedStyle(elt);
        if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) && style.overflow != "visible") {
          let parentRect = elt.getBoundingClientRect();
          left = Math.max(left, parentRect.left);
          right = Math.min(right, parentRect.right);
          top2 = Math.max(top2, parentRect.top);
          bottom = Math.min(parent == dom.parentNode ? win.innerHeight : bottom, parentRect.bottom);
        }
        parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
      } else if (parent.nodeType == 11) {
        parent = parent.host;
      } else {
        break;
      }
    }
    return {
      left: left - rect.left,
      right: Math.max(left, right) - rect.left,
      top: top2 - (rect.top + paddingTop),
      bottom: Math.max(top2, bottom) - (rect.top + paddingTop)
    };
  }
  function inWindow(elt) {
    let rect = elt.getBoundingClientRect(), win = elt.ownerDocument.defaultView || window;
    return rect.left < win.innerWidth && rect.right > 0 && rect.top < win.innerHeight && rect.bottom > 0;
  }
  function fullPixelRange(dom, paddingTop) {
    let rect = dom.getBoundingClientRect();
    return {
      left: 0,
      right: rect.right - rect.left,
      top: paddingTop,
      bottom: rect.bottom - (rect.top + paddingTop)
    };
  }
  var LineGap = class {
    constructor(from, to, size, displaySize) {
      this.from = from;
      this.to = to;
      this.size = size;
      this.displaySize = displaySize;
    }
    static same(a, b) {
      if (a.length != b.length)
        return false;
      for (let i = 0; i < a.length; i++) {
        let gA = a[i], gB = b[i];
        if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
          return false;
      }
      return true;
    }
    draw(viewState, wrapping) {
      return Decoration.replace({
        widget: new LineGapWidget(this.displaySize * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
      }).range(this.from, this.to);
    }
  };
  var LineGapWidget = class extends WidgetType {
    constructor(size, vertical) {
      super();
      this.size = size;
      this.vertical = vertical;
    }
    eq(other) {
      return other.size == this.size && other.vertical == this.vertical;
    }
    toDOM() {
      let elt = document.createElement("div");
      if (this.vertical) {
        elt.style.height = this.size + "px";
      } else {
        elt.style.width = this.size + "px";
        elt.style.height = "2px";
        elt.style.display = "inline-block";
      }
      return elt;
    }
    get estimatedHeight() {
      return this.vertical ? this.size : -1;
    }
  };
  var ViewState = class {
    constructor(state) {
      this.state = state;
      this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
      this.inView = true;
      this.paddingTop = 0;
      this.paddingBottom = 0;
      this.contentDOMWidth = 0;
      this.contentDOMHeight = 0;
      this.editorHeight = 0;
      this.editorWidth = 0;
      this.scrollTop = 0;
      this.scrolledToBottom = false;
      this.scaleX = 1;
      this.scaleY = 1;
      this.scrollAnchorPos = 0;
      this.scrollAnchorHeight = -1;
      this.scaler = IdScaler;
      this.scrollTarget = null;
      this.printing = false;
      this.mustMeasureContent = true;
      this.defaultTextDirection = Direction.LTR;
      this.visibleRanges = [];
      this.mustEnforceCursorAssoc = false;
      let guessWrapping = state.facet(contentAttributes).some((v) => typeof v != "function" && v.class == "cm-lineWrapping");
      this.heightOracle = new HeightOracle(guessWrapping);
      this.stateDeco = state.facet(decorations).filter((d) => typeof d != "function");
      this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
      for (let i = 0; i < 2; i++) {
        this.viewport = this.getViewport(0, null);
        if (!this.updateForViewport())
          break;
      }
      this.updateViewportLines();
      this.lineGaps = this.ensureLineGaps([]);
      this.lineGapDeco = Decoration.set(this.lineGaps.map((gap) => gap.draw(this, false)));
      this.computeVisibleRanges();
    }
    updateForViewport() {
      let viewports = [this.viewport], { main } = this.state.selection;
      for (let i = 0; i <= 1; i++) {
        let pos = i ? main.head : main.anchor;
        if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
          let { from, to } = this.lineBlockAt(pos);
          viewports.push(new Viewport(from, to));
        }
      }
      this.viewports = viewports.sort((a, b) => a.from - b.from);
      return this.updateScaler();
    }
    updateScaler() {
      let scaler = this.scaler;
      this.scaler = this.heightMap.height <= 7e6 ? IdScaler : new BigScaler(this.heightOracle, this.heightMap, this.viewports);
      return scaler.eq(this.scaler) ? 0 : 2;
    }
    updateViewportLines() {
      this.viewportLines = [];
      this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (block) => {
        this.viewportLines.push(scaleBlock(block, this.scaler));
      });
    }
    update(update, scrollTarget = null) {
      this.state = update.state;
      let prevDeco = this.stateDeco;
      this.stateDeco = this.state.facet(decorations).filter((d) => typeof d != "function");
      let contentChanges = update.changedRanges;
      let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
      let prevHeight = this.heightMap.height;
      let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
      clearHeightChangeFlag();
      this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
      if (this.heightMap.height != prevHeight || heightChangeFlag)
        update.flags |= 2;
      if (scrollAnchor) {
        this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);
        this.scrollAnchorHeight = scrollAnchor.top;
      } else {
        this.scrollAnchorPos = -1;
        this.scrollAnchorHeight = prevHeight;
      }
      let viewport2 = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
      if (scrollTarget && (scrollTarget.range.head < viewport2.from || scrollTarget.range.head > viewport2.to) || !this.viewportIsAppropriate(viewport2))
        viewport2 = this.getViewport(0, scrollTarget);
      let viewportChange = viewport2.from != this.viewport.from || viewport2.to != this.viewport.to;
      this.viewport = viewport2;
      update.flags |= this.updateForViewport();
      if (viewportChange || !update.changes.empty || update.flags & 2)
        this.updateViewportLines();
      if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
        this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
      update.flags |= this.computeVisibleRanges(update.changes);
      if (scrollTarget)
        this.scrollTarget = scrollTarget;
      if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping && update.state.selection.main.empty && update.state.selection.main.assoc && !update.state.facet(nativeSelectionHidden))
        this.mustEnforceCursorAssoc = true;
    }
    measure(view) {
      let dom = view.contentDOM, style = window.getComputedStyle(dom);
      let oracle = this.heightOracle;
      let whiteSpace = style.whiteSpace;
      this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
      let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
      let domRect = dom.getBoundingClientRect();
      let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
      this.contentDOMHeight = domRect.height;
      this.mustMeasureContent = false;
      let result = 0, bias = 0;
      if (domRect.width && domRect.height) {
        let { scaleX, scaleY } = getScale(dom, domRect);
        if (scaleX > 5e-3 && Math.abs(this.scaleX - scaleX) > 5e-3 || scaleY > 5e-3 && Math.abs(this.scaleY - scaleY) > 5e-3) {
          this.scaleX = scaleX;
          this.scaleY = scaleY;
          result |= 16;
          refresh = measureContent = true;
        }
      }
      let paddingTop = (parseInt(style.paddingTop) || 0) * this.scaleY;
      let paddingBottom = (parseInt(style.paddingBottom) || 0) * this.scaleY;
      if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
        this.paddingTop = paddingTop;
        this.paddingBottom = paddingBottom;
        result |= 16 | 2;
      }
      if (this.editorWidth != view.scrollDOM.clientWidth) {
        if (oracle.lineWrapping)
          measureContent = true;
        this.editorWidth = view.scrollDOM.clientWidth;
        result |= 16;
      }
      let scrollTop = view.scrollDOM.scrollTop * this.scaleY;
      if (this.scrollTop != scrollTop) {
        this.scrollAnchorHeight = -1;
        this.scrollTop = scrollTop;
      }
      this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);
      let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
      let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
      this.pixelViewport = pixelViewport;
      let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
      if (inView != this.inView) {
        this.inView = inView;
        if (inView)
          measureContent = true;
      }
      if (!this.inView && !this.scrollTarget && !inWindow(view.dom))
        return 0;
      let contentWidth = domRect.width;
      if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
        this.contentDOMWidth = domRect.width;
        this.editorHeight = view.scrollDOM.clientHeight;
        result |= 16;
      }
      if (measureContent) {
        let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
        if (oracle.mustRefreshForHeights(lineHeights))
          refresh = true;
        if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
          let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
          refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
          if (refresh) {
            view.docView.minWidth = 0;
            result |= 16;
          }
        }
        if (dTop > 0 && dBottom > 0)
          bias = Math.max(dTop, dBottom);
        else if (dTop < 0 && dBottom < 0)
          bias = Math.min(dTop, dBottom);
        clearHeightChangeFlag();
        for (let vp of this.viewports) {
          let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
          this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
        }
        if (heightChangeFlag)
          result |= 2;
      }
      let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
      if (viewportChange) {
        if (result & 2)
          result |= this.updateScaler();
        this.viewport = this.getViewport(bias, this.scrollTarget);
        result |= this.updateForViewport();
      }
      if (result & 2 || viewportChange)
        this.updateViewportLines();
      if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
        this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
      result |= this.computeVisibleRanges();
      if (this.mustEnforceCursorAssoc) {
        this.mustEnforceCursorAssoc = false;
        view.docView.enforceCursorAssoc();
      }
      return result;
    }
    get visibleTop() {
      return this.scaler.fromDOM(this.pixelViewport.top);
    }
    get visibleBottom() {
      return this.scaler.fromDOM(this.pixelViewport.bottom);
    }
    getViewport(bias, scrollTarget) {
      let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1e3 / 2));
      let map = this.heightMap, oracle = this.heightOracle;
      let { visibleTop, visibleBottom } = this;
      let viewport2 = new Viewport(map.lineAt(visibleTop - marginTop * 1e3, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1e3, QueryType.ByHeight, oracle, 0, 0).to);
      if (scrollTarget) {
        let { head } = scrollTarget.range;
        if (head < viewport2.from || head > viewport2.to) {
          let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
          let block = map.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;
          if (scrollTarget.y == "center")
            topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
          else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport2.from)
            topPos = block.top;
          else
            topPos = block.bottom - viewHeight;
          viewport2 = new Viewport(map.lineAt(topPos - 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).to);
        }
      }
      return viewport2;
    }
    mapViewport(viewport2, changes) {
      let from = changes.mapPos(viewport2.from, -1), to = changes.mapPos(viewport2.to, 1);
      return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);
    }
    // Checks if a given viewport covers the visible part of the
    // document and not too much beyond that.
    viewportIsAppropriate({ from, to }, bias = 0) {
      if (!this.inView)
        return true;
      let { top: top2 } = this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0);
      let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0);
      let { visibleTop, visibleBottom } = this;
      return (from == 0 || top2 <= visibleTop - Math.max(10, Math.min(
        -bias,
        250
        /* VP.MaxCoverMargin */
      ))) && (to == this.state.doc.length || bottom >= visibleBottom + Math.max(10, Math.min(
        bias,
        250
        /* VP.MaxCoverMargin */
      ))) && (top2 > visibleTop - 2 * 1e3 && bottom < visibleBottom + 2 * 1e3);
    }
    mapLineGaps(gaps, changes) {
      if (!gaps.length || changes.empty)
        return gaps;
      let mapped = [];
      for (let gap of gaps)
        if (!changes.touchesRange(gap.from, gap.to))
          mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size, gap.displaySize));
      return mapped;
    }
    // Computes positions in the viewport where the start or end of a
    // line should be hidden, trying to reuse existing line gaps when
    // appropriate to avoid unneccesary redraws.
    // Uses crude character-counting for the positioning and sizing,
    // since actual DOM coordinates aren't always available and
    // predictable. Relies on generous margins (see LG.Margin) to hide
    // the artifacts this might produce from the user.
    ensureLineGaps(current, mayMeasure) {
      let wrapping = this.heightOracle.lineWrapping;
      let margin = wrapping ? 1e4 : 2e3, halfMargin = margin >> 1, doubleMargin = margin << 1;
      if (this.defaultTextDirection != Direction.LTR && !wrapping)
        return [];
      let gaps = [];
      let addGap = (from, to, line, structure) => {
        if (to - from < halfMargin)
          return;
        let sel = this.state.selection.main, avoid = [sel.from];
        if (!sel.empty)
          avoid.push(sel.to);
        for (let pos of avoid) {
          if (pos > from && pos < to) {
            addGap(from, pos - 10, line, structure);
            addGap(pos + 10, to, line, structure);
            return;
          }
        }
        let gap = find(current, (gap2) => gap2.from >= line.from && gap2.to <= line.to && Math.abs(gap2.from - from) < halfMargin && Math.abs(gap2.to - to) < halfMargin && !avoid.some((pos) => gap2.from < pos && gap2.to > pos));
        if (!gap) {
          if (to < line.to && mayMeasure && wrapping && mayMeasure.visibleRanges.some((r) => r.from <= to && r.to >= to)) {
            let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
            if (lineStart > from)
              to = lineStart;
          }
          let size = this.gapSize(line, from, to, structure);
          let displaySize = wrapping || size < 2e6 ? size : 2e6;
          gap = new LineGap(from, to, size, displaySize);
        }
        gaps.push(gap);
      };
      let checkLine = (line) => {
        if (line.length < doubleMargin || line.type != BlockType.Text)
          return;
        let structure = lineStructure(line.from, line.to, this.stateDeco);
        if (structure.total < doubleMargin)
          return;
        let target = this.scrollTarget ? this.scrollTarget.range.head : null;
        let viewFrom, viewTo;
        if (wrapping) {
          let marginHeight = margin / this.heightOracle.lineLength * this.heightOracle.lineHeight;
          let top2, bot;
          if (target != null) {
            let targetFrac = findFraction(structure, target);
            let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
            top2 = targetFrac - spaceFrac;
            bot = targetFrac + spaceFrac;
          } else {
            top2 = (this.visibleTop - line.top - marginHeight) / line.height;
            bot = (this.visibleBottom - line.top + marginHeight) / line.height;
          }
          viewFrom = findPosition(structure, top2);
          viewTo = findPosition(structure, bot);
        } else {
          let totalWidth = structure.total * this.heightOracle.charWidth;
          let marginWidth = margin * this.heightOracle.charWidth;
          let horizOffset = 0;
          if (totalWidth > 2e6)
            for (let old of current) {
              if (old.from >= line.from && old.from < line.to && old.size != old.displaySize && old.from * this.heightOracle.charWidth + horizOffset < this.pixelViewport.left)
                horizOffset = old.size - old.displaySize;
            }
          let pxLeft = this.pixelViewport.left + horizOffset, pxRight = this.pixelViewport.right + horizOffset;
          let left, right;
          if (target != null) {
            let targetFrac = findFraction(structure, target);
            let spaceFrac = ((pxRight - pxLeft) / 2 + marginWidth) / totalWidth;
            left = targetFrac - spaceFrac;
            right = targetFrac + spaceFrac;
          } else {
            left = (pxLeft - marginWidth) / totalWidth;
            right = (pxRight + marginWidth) / totalWidth;
          }
          viewFrom = findPosition(structure, left);
          viewTo = findPosition(structure, right);
        }
        if (viewFrom > line.from)
          addGap(line.from, viewFrom, line, structure);
        if (viewTo < line.to)
          addGap(viewTo, line.to, line, structure);
      };
      for (let line of this.viewportLines) {
        if (Array.isArray(line.type))
          line.type.forEach(checkLine);
        else
          checkLine(line);
      }
      return gaps;
    }
    gapSize(line, from, to, structure) {
      let fraction = findFraction(structure, to) - findFraction(structure, from);
      if (this.heightOracle.lineWrapping) {
        return line.height * fraction;
      } else {
        return structure.total * this.heightOracle.charWidth * fraction;
      }
    }
    updateLineGaps(gaps) {
      if (!LineGap.same(gaps, this.lineGaps)) {
        this.lineGaps = gaps;
        this.lineGapDeco = Decoration.set(gaps.map((gap) => gap.draw(this, this.heightOracle.lineWrapping)));
      }
    }
    computeVisibleRanges(changes) {
      let deco = this.stateDeco;
      if (this.lineGaps.length)
        deco = deco.concat(this.lineGapDeco);
      let ranges = [];
      RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
        span(from, to) {
          ranges.push({ from, to });
        },
        point() {
        }
      }, 20);
      let changed = 0;
      if (ranges.length != this.visibleRanges.length) {
        changed = 8 | 4;
      } else {
        for (let i = 0; i < ranges.length && !(changed & 8); i++) {
          let old = this.visibleRanges[i], nw = ranges[i];
          if (old.from != nw.from || old.to != nw.to) {
            changed |= 4;
            if (!(changes && changes.mapPos(old.from, -1) == nw.from && changes.mapPos(old.to, 1) == nw.to))
              changed |= 8;
          }
        }
      }
      this.visibleRanges = ranges;
      return changed;
    }
    lineBlockAt(pos) {
      return pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find((b) => b.from <= pos && b.to >= pos) || scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
    }
    lineBlockAtHeight(height) {
      return height >= this.viewportLines[0].top && height <= this.viewportLines[this.viewportLines.length - 1].bottom && this.viewportLines.find((l) => l.top <= height && l.bottom >= height) || scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
    }
    scrollAnchorAt(scrollTop) {
      let block = this.lineBlockAtHeight(scrollTop + 8);
      return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];
    }
    elementAtHeight(height) {
      return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
    }
    get docHeight() {
      return this.scaler.toDOM(this.heightMap.height);
    }
    get contentHeight() {
      return this.docHeight + this.paddingTop + this.paddingBottom;
    }
  };
  var Viewport = class {
    constructor(from, to) {
      this.from = from;
      this.to = to;
    }
  };
  function lineStructure(from, to, stateDeco) {
    let ranges = [], pos = from, total = 0;
    RangeSet.spans(stateDeco, from, to, {
      span() {
      },
      point(from2, to2) {
        if (from2 > pos) {
          ranges.push({ from: pos, to: from2 });
          total += from2 - pos;
        }
        pos = to2;
      }
    }, 20);
    if (pos < to) {
      ranges.push({ from: pos, to });
      total += to - pos;
    }
    return { total, ranges };
  }
  function findPosition({ total, ranges }, ratio) {
    if (ratio <= 0)
      return ranges[0].from;
    if (ratio >= 1)
      return ranges[ranges.length - 1].to;
    let dist2 = Math.floor(total * ratio);
    for (let i = 0; ; i++) {
      let { from, to } = ranges[i], size = to - from;
      if (dist2 <= size)
        return from + dist2;
      dist2 -= size;
    }
  }
  function findFraction(structure, pos) {
    let counted = 0;
    for (let { from, to } of structure.ranges) {
      if (pos <= to) {
        counted += pos - from;
        break;
      }
      counted += to - from;
    }
    return counted / structure.total;
  }
  function find(array2, f) {
    for (let val of array2)
      if (f(val))
        return val;
    return void 0;
  }
  var IdScaler = {
    toDOM(n) {
      return n;
    },
    fromDOM(n) {
      return n;
    },
    scale: 1,
    eq(other) {
      return other == this;
    }
  };
  var BigScaler = class _BigScaler {
    constructor(oracle, heightMap, viewports) {
      let vpHeight = 0, base2 = 0, domBase = 0;
      this.viewports = viewports.map(({ from, to }) => {
        let top2 = heightMap.lineAt(from, QueryType.ByPos, oracle, 0, 0).top;
        let bottom = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;
        vpHeight += bottom - top2;
        return { from, to, top: top2, bottom, domTop: 0, domBottom: 0 };
      });
      this.scale = (7e6 - vpHeight) / (heightMap.height - vpHeight);
      for (let obj of this.viewports) {
        obj.domTop = domBase + (obj.top - base2) * this.scale;
        domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
        base2 = obj.bottom;
      }
    }
    toDOM(n) {
      for (let i = 0, base2 = 0, domBase = 0; ; i++) {
        let vp = i < this.viewports.length ? this.viewports[i] : null;
        if (!vp || n < vp.top)
          return domBase + (n - base2) * this.scale;
        if (n <= vp.bottom)
          return vp.domTop + (n - vp.top);
        base2 = vp.bottom;
        domBase = vp.domBottom;
      }
    }
    fromDOM(n) {
      for (let i = 0, base2 = 0, domBase = 0; ; i++) {
        let vp = i < this.viewports.length ? this.viewports[i] : null;
        if (!vp || n < vp.domTop)
          return base2 + (n - domBase) / this.scale;
        if (n <= vp.domBottom)
          return vp.top + (n - vp.domTop);
        base2 = vp.bottom;
        domBase = vp.domBottom;
      }
    }
    eq(other) {
      if (!(other instanceof _BigScaler))
        return false;
      return this.scale == other.scale && this.viewports.length == other.viewports.length && this.viewports.every((vp, i) => vp.from == other.viewports[i].from && vp.to == other.viewports[i].to);
    }
  };
  function scaleBlock(block, scaler) {
    if (scaler.scale == 1)
      return block;
    let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
    return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map((b) => scaleBlock(b, scaler)) : block._content);
  }
  var theme = /* @__PURE__ */ Facet.define({ combine: (strs) => strs.join(" ") });
  var darkTheme = /* @__PURE__ */ Facet.define({ combine: (values) => values.indexOf(true) > -1 });
  var baseThemeID = /* @__PURE__ */ StyleModule.newName();
  var baseLightID = /* @__PURE__ */ StyleModule.newName();
  var baseDarkID = /* @__PURE__ */ StyleModule.newName();
  var lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
  function buildTheme(main, spec, scopes) {
    return new StyleModule(spec, {
      finish(sel) {
        return /&/.test(sel) ? sel.replace(/&\w*/, (m) => {
          if (m == "&")
            return main;
          if (!scopes || !scopes[m])
            throw new RangeError(`Unsupported selector: ${m}`);
          return scopes[m];
        }) : main + " " + sel;
      }
    });
  }
  var baseTheme$1 = /* @__PURE__ */ buildTheme("." + baseThemeID, {
    "&": {
      position: "relative !important",
      boxSizing: "border-box",
      "&.cm-focused": {
        // Provide a simple default outline to make sure a focused
        // editor is visually distinct. Can't leave the default behavior
        // because that will apply to the content element, which is
        // inside the scrollable container and doesn't include the
        // gutters. We also can't use an 'auto' outline, since those
        // are, for some reason, drawn behind the element content, which
        // will cause things like the active line background to cover
        // the outline (#297).
        outline: "1px dotted #212121"
      },
      display: "flex !important",
      flexDirection: "column"
    },
    ".cm-scroller": {
      display: "flex !important",
      alignItems: "flex-start !important",
      fontFamily: "monospace",
      lineHeight: 1.4,
      height: "100%",
      overflowX: "auto",
      position: "relative",
      zIndex: 0,
      overflowAnchor: "none"
    },
    ".cm-content": {
      margin: 0,
      flexGrow: 2,
      flexShrink: 0,
      display: "block",
      whiteSpace: "pre",
      wordWrap: "normal",
      // https://github.com/codemirror/dev/issues/456
      boxSizing: "border-box",
      minHeight: "100%",
      padding: "4px 0",
      outline: "none",
      "&[contenteditable=true]": {
        WebkitUserModify: "read-write-plaintext-only"
      }
    },
    ".cm-lineWrapping": {
      whiteSpace_fallback: "pre-wrap",
      // For IE
      whiteSpace: "break-spaces",
      wordBreak: "break-word",
      // For Safari, which doesn't support overflow-wrap: anywhere
      overflowWrap: "anywhere",
      flexShrink: 1
    },
    "&light .cm-content": { caretColor: "black" },
    "&dark .cm-content": { caretColor: "white" },
    ".cm-line": {
      display: "block",
      padding: "0 2px 0 6px"
    },
    ".cm-layer": {
      position: "absolute",
      left: 0,
      top: 0,
      contain: "size style",
      "& > *": {
        position: "absolute"
      }
    },
    "&light .cm-selectionBackground": {
      background: "#d9d9d9"
    },
    "&dark .cm-selectionBackground": {
      background: "#222"
    },
    "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
      background: "#d7d4f0"
    },
    "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
      background: "#233"
    },
    ".cm-cursorLayer": {
      pointerEvents: "none"
    },
    "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
      animation: "steps(1) cm-blink 1.2s infinite"
    },
    // Two animations defined so that we can switch between them to
    // restart the animation without forcing another style
    // recomputation.
    "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
    "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
    ".cm-cursor, .cm-dropCursor": {
      borderLeft: "1.2px solid black",
      marginLeft: "-0.6px",
      pointerEvents: "none"
    },
    ".cm-cursor": {
      display: "none"
    },
    "&dark .cm-cursor": {
      borderLeftColor: "#ddd"
    },
    ".cm-dropCursor": {
      position: "absolute"
    },
    "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
      display: "block"
    },
    ".cm-iso": {
      unicodeBidi: "isolate"
    },
    ".cm-announced": {
      position: "fixed",
      top: "-10000px"
    },
    "@media print": {
      ".cm-announced": { display: "none" }
    },
    "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
    "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
    "&light .cm-specialChar": { color: "red" },
    "&dark .cm-specialChar": { color: "#f78" },
    ".cm-gutters": {
      flexShrink: 0,
      display: "flex",
      height: "100%",
      boxSizing: "border-box",
      insetInlineStart: 0,
      zIndex: 200
    },
    "&light .cm-gutters": {
      backgroundColor: "#f5f5f5",
      color: "#6c6c6c",
      borderRight: "1px solid #ddd"
    },
    "&dark .cm-gutters": {
      backgroundColor: "#333338",
      color: "#ccc"
    },
    ".cm-gutter": {
      display: "flex !important",
      // Necessary -- prevents margin collapsing
      flexDirection: "column",
      flexShrink: 0,
      boxSizing: "border-box",
      minHeight: "100%",
      overflow: "hidden"
    },
    ".cm-gutterElement": {
      boxSizing: "border-box"
    },
    ".cm-lineNumbers .cm-gutterElement": {
      padding: "0 3px 0 5px",
      minWidth: "20px",
      textAlign: "right",
      whiteSpace: "nowrap"
    },
    "&light .cm-activeLineGutter": {
      backgroundColor: "#e2f2ff"
    },
    "&dark .cm-activeLineGutter": {
      backgroundColor: "#222227"
    },
    ".cm-panels": {
      boxSizing: "border-box",
      position: "sticky",
      left: 0,
      right: 0,
      zIndex: 300
    },
    "&light .cm-panels": {
      backgroundColor: "#f5f5f5",
      color: "black"
    },
    "&light .cm-panels-top": {
      borderBottom: "1px solid #ddd"
    },
    "&light .cm-panels-bottom": {
      borderTop: "1px solid #ddd"
    },
    "&dark .cm-panels": {
      backgroundColor: "#333338",
      color: "white"
    },
    ".cm-dialog": {
      padding: "2px 19px 4px 6px",
      position: "relative",
      "& label": { fontSize: "80%" }
    },
    ".cm-dialog-close": {
      position: "absolute",
      top: "3px",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      fontSize: "14px",
      padding: "0"
    },
    ".cm-tab": {
      display: "inline-block",
      overflow: "hidden",
      verticalAlign: "bottom"
    },
    ".cm-widgetBuffer": {
      verticalAlign: "text-top",
      height: "1em",
      width: 0,
      display: "inline"
    },
    ".cm-placeholder": {
      color: "#888",
      display: "inline-block",
      verticalAlign: "top",
      userSelect: "none"
    },
    ".cm-highlightSpace": {
      backgroundImage: "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",
      backgroundPosition: "center"
    },
    ".cm-highlightTab": {
      backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
      backgroundSize: "auto 100%",
      backgroundPosition: "right 90%",
      backgroundRepeat: "no-repeat"
    },
    ".cm-trailingSpace": {
      backgroundColor: "#ff332255"
    },
    ".cm-button": {
      verticalAlign: "middle",
      color: "inherit",
      fontSize: "70%",
      padding: ".2em 1em",
      borderRadius: "1px"
    },
    "&light .cm-button": {
      backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
      border: "1px solid #888",
      "&:active": {
        backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
      }
    },
    "&dark .cm-button": {
      backgroundImage: "linear-gradient(#393939, #111)",
      border: "1px solid #888",
      "&:active": {
        backgroundImage: "linear-gradient(#111, #333)"
      }
    },
    ".cm-textfield": {
      verticalAlign: "middle",
      color: "inherit",
      fontSize: "70%",
      border: "1px solid silver",
      padding: ".2em .5em"
    },
    "&light .cm-textfield": {
      backgroundColor: "white"
    },
    "&dark .cm-textfield": {
      border: "1px solid #555",
      backgroundColor: "inherit"
    }
  }, lightDarkIDs);
  var observeOptions = {
    childList: true,
    characterData: true,
    subtree: true,
    attributes: true,
    characterDataOldValue: true
  };
  var useCharData = browser.ie && browser.ie_version <= 11;
  var DOMObserver = class {
    constructor(view) {
      this.view = view;
      this.active = false;
      this.editContext = null;
      this.selectionRange = new DOMSelectionState();
      this.selectionChanged = false;
      this.delayedFlush = -1;
      this.resizeTimeout = -1;
      this.queue = [];
      this.delayedAndroidKey = null;
      this.flushingAndroidKey = -1;
      this.lastChange = 0;
      this.scrollTargets = [];
      this.intersection = null;
      this.resizeScroll = null;
      this.intersecting = false;
      this.gapIntersection = null;
      this.gaps = [];
      this.printQuery = null;
      this.parentCheck = -1;
      this.dom = view.contentDOM;
      this.observer = new MutationObserver((mutations) => {
        for (let mut of mutations)
          this.queue.push(mut);
        if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) && mutations.some((m) => m.type == "childList" && m.removedNodes.length || m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
          this.flushSoon();
        else
          this.flush();
      });
      if (window.EditContext && view.constructor.EDIT_CONTEXT !== false && // Chrome <126 doesn't support inverted selections in edit context (#1392)
      !(browser.chrome && browser.chrome_version < 126)) {
        this.editContext = new EditContextManager(view);
        if (view.state.facet(editable))
          view.contentDOM.editContext = this.editContext.editContext;
      }
      if (useCharData)
        this.onCharData = (event) => {
          this.queue.push({
            target: event.target,
            type: "characterData",
            oldValue: event.prevValue
          });
          this.flushSoon();
        };
      this.onSelectionChange = this.onSelectionChange.bind(this);
      this.onResize = this.onResize.bind(this);
      this.onPrint = this.onPrint.bind(this);
      this.onScroll = this.onScroll.bind(this);
      if (window.matchMedia)
        this.printQuery = window.matchMedia("print");
      if (typeof ResizeObserver == "function") {
        this.resizeScroll = new ResizeObserver(() => {
          var _a2;
          if (((_a2 = this.view.docView) === null || _a2 === void 0 ? void 0 : _a2.lastUpdate) < Date.now() - 75)
            this.onResize();
        });
        this.resizeScroll.observe(view.scrollDOM);
      }
      this.addWindowListeners(this.win = view.win);
      this.start();
      if (typeof IntersectionObserver == "function") {
        this.intersection = new IntersectionObserver((entries) => {
          if (this.parentCheck < 0)
            this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3);
          if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
            this.intersecting = !this.intersecting;
            if (this.intersecting != this.view.inView)
              this.onScrollChanged(document.createEvent("Event"));
          }
        }, { threshold: [0, 1e-3] });
        this.intersection.observe(this.dom);
        this.gapIntersection = new IntersectionObserver((entries) => {
          if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
            this.onScrollChanged(document.createEvent("Event"));
        }, {});
      }
      this.listenForScroll();
      this.readSelectionRange();
    }
    onScrollChanged(e) {
      this.view.inputState.runHandlers("scroll", e);
      if (this.intersecting)
        this.view.measure();
    }
    onScroll(e) {
      if (this.intersecting)
        this.flush(false);
      if (this.editContext)
        this.view.requestMeasure(this.editContext.measureReq);
      this.onScrollChanged(e);
    }
    onResize() {
      if (this.resizeTimeout < 0)
        this.resizeTimeout = setTimeout(() => {
          this.resizeTimeout = -1;
          this.view.requestMeasure();
        }, 50);
    }
    onPrint(event) {
      if ((event.type == "change" || !event.type) && !event.matches)
        return;
      this.view.viewState.printing = true;
      this.view.measure();
      setTimeout(() => {
        this.view.viewState.printing = false;
        this.view.requestMeasure();
      }, 500);
    }
    updateGaps(gaps) {
      if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
        this.gapIntersection.disconnect();
        for (let gap of gaps)
          this.gapIntersection.observe(gap);
        this.gaps = gaps;
      }
    }
    onSelectionChange(event) {
      let wasChanged = this.selectionChanged;
      if (!this.readSelectionRange() || this.delayedAndroidKey)
        return;
      let { view } = this, sel = this.selectionRange;
      if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(this.dom, sel))
        return;
      let context2 = sel.anchorNode && view.docView.nearest(sel.anchorNode);
      if (context2 && context2.ignoreEvent(event)) {
        if (!wasChanged)
          this.selectionChanged = false;
        return;
      }
      if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
      sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
        this.flushSoon();
      else
        this.flush(false);
    }
    readSelectionRange() {
      let { view } = this;
      let selection = getSelection(view.root);
      if (!selection)
        return false;
      let range = browser.safari && view.root.nodeType == 11 && view.root.activeElement == this.dom && safariSelectionRangeHack(this.view, selection) || selection;
      if (!range || this.selectionRange.eq(range))
        return false;
      let local = hasSelection(this.dom, range);
      if (local && !this.selectionChanged && view.inputState.lastFocusTime > Date.now() - 200 && view.inputState.lastTouchTime < Date.now() - 300 && atElementStart(this.dom, range)) {
        this.view.inputState.lastFocusTime = 0;
        view.docView.updateSelection();
        return false;
      }
      this.selectionRange.setRange(range);
      if (local)
        this.selectionChanged = true;
      return true;
    }
    setSelectionRange(anchor, head) {
      this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
      this.selectionChanged = false;
    }
    clearSelectionRange() {
      this.selectionRange.set(null, 0, null, 0);
    }
    listenForScroll() {
      this.parentCheck = -1;
      let i = 0, changed = null;
      for (let dom = this.dom; dom; ) {
        if (dom.nodeType == 1) {
          if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
            i++;
          else if (!changed)
            changed = this.scrollTargets.slice(0, i);
          if (changed)
            changed.push(dom);
          dom = dom.assignedSlot || dom.parentNode;
        } else if (dom.nodeType == 11) {
          dom = dom.host;
        } else {
          break;
        }
      }
      if (i < this.scrollTargets.length && !changed)
        changed = this.scrollTargets.slice(0, i);
      if (changed) {
        for (let dom of this.scrollTargets)
          dom.removeEventListener("scroll", this.onScroll);
        for (let dom of this.scrollTargets = changed)
          dom.addEventListener("scroll", this.onScroll);
      }
    }
    ignore(f) {
      if (!this.active)
        return f();
      try {
        this.stop();
        return f();
      } finally {
        this.start();
        this.clear();
      }
    }
    start() {
      if (this.active)
        return;
      this.observer.observe(this.dom, observeOptions);
      if (useCharData)
        this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
      this.active = true;
    }
    stop() {
      if (!this.active)
        return;
      this.active = false;
      this.observer.disconnect();
      if (useCharData)
        this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
    }
    // Throw away any pending changes
    clear() {
      this.processRecords();
      this.queue.length = 0;
      this.selectionChanged = false;
    }
    // Chrome Android, especially in combination with GBoard, not only
    // doesn't reliably fire regular key events, but also often
    // surrounds the effect of enter or backspace with a bunch of
    // composition events that, when interrupted, cause text duplication
    // or other kinds of corruption. This hack makes the editor back off
    // from handling DOM changes for a moment when such a key is
    // detected (via beforeinput or keydown), and then tries to flush
    // them or, if that has no effect, dispatches the given key.
    delayAndroidKey(key, keyCode) {
      var _a2;
      if (!this.delayedAndroidKey) {
        let flush = () => {
          let key2 = this.delayedAndroidKey;
          if (key2) {
            this.clearDelayedAndroidKey();
            this.view.inputState.lastKeyCode = key2.keyCode;
            this.view.inputState.lastKeyTime = Date.now();
            let flushed = this.flush();
            if (!flushed && key2.force)
              dispatchKey(this.dom, key2.key, key2.keyCode);
          }
        };
        this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
      }
      if (!this.delayedAndroidKey || key == "Enter")
        this.delayedAndroidKey = {
          key,
          keyCode,
          // Only run the key handler when no changes are detected if
          // this isn't coming right after another change, in which case
          // it is probably part of a weird chain of updates, and should
          // be ignored if it returns the DOM to its previous state.
          force: this.lastChange < Date.now() - 50 || !!((_a2 = this.delayedAndroidKey) === null || _a2 === void 0 ? void 0 : _a2.force)
        };
    }
    clearDelayedAndroidKey() {
      this.win.cancelAnimationFrame(this.flushingAndroidKey);
      this.delayedAndroidKey = null;
      this.flushingAndroidKey = -1;
    }
    flushSoon() {
      if (this.delayedFlush < 0)
        this.delayedFlush = this.view.win.requestAnimationFrame(() => {
          this.delayedFlush = -1;
          this.flush();
        });
    }
    forceFlush() {
      if (this.delayedFlush >= 0) {
        this.view.win.cancelAnimationFrame(this.delayedFlush);
        this.delayedFlush = -1;
      }
      this.flush();
    }
    pendingRecords() {
      for (let mut of this.observer.takeRecords())
        this.queue.push(mut);
      return this.queue;
    }
    processRecords() {
      let records = this.pendingRecords();
      if (records.length)
        this.queue = [];
      let from = -1, to = -1, typeOver = false;
      for (let record of records) {
        let range = this.readMutation(record);
        if (!range)
          continue;
        if (range.typeOver)
          typeOver = true;
        if (from == -1) {
          ({ from, to } = range);
        } else {
          from = Math.min(range.from, from);
          to = Math.max(range.to, to);
        }
      }
      return { from, to, typeOver };
    }
    readChange() {
      let { from, to, typeOver } = this.processRecords();
      let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
      if (from < 0 && !newSel)
        return null;
      if (from > -1)
        this.lastChange = Date.now();
      this.view.inputState.lastFocusTime = 0;
      this.selectionChanged = false;
      let change = new DOMChange(this.view, from, to, typeOver);
      this.view.docView.domChanged = { newSel: change.newSel ? change.newSel.main : null };
      return change;
    }
    // Apply pending changes, if any
    flush(readSelection = true) {
      if (this.delayedFlush >= 0 || this.delayedAndroidKey)
        return false;
      if (readSelection)
        this.readSelectionRange();
      let domChange = this.readChange();
      if (!domChange) {
        this.view.requestMeasure();
        return false;
      }
      let startState = this.view.state;
      let handled = applyDOMChange(this.view, domChange);
      if (this.view.state == startState && (domChange.domChanged || domChange.newSel && !domChange.newSel.main.eq(this.view.state.selection.main)))
        this.view.update([]);
      return handled;
    }
    readMutation(rec) {
      let cView = this.view.docView.nearest(rec.target);
      if (!cView || cView.ignoreMutation(rec))
        return null;
      cView.markDirty(rec.type == "attributes");
      if (rec.type == "attributes")
        cView.flags |= 4;
      if (rec.type == "childList") {
        let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
        let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
        return {
          from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
          to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
          typeOver: false
        };
      } else if (rec.type == "characterData") {
        return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
      } else {
        return null;
      }
    }
    setWindow(win) {
      if (win != this.win) {
        this.removeWindowListeners(this.win);
        this.win = win;
        this.addWindowListeners(this.win);
      }
    }
    addWindowListeners(win) {
      win.addEventListener("resize", this.onResize);
      if (this.printQuery) {
        if (this.printQuery.addEventListener)
          this.printQuery.addEventListener("change", this.onPrint);
        else
          this.printQuery.addListener(this.onPrint);
      } else
        win.addEventListener("beforeprint", this.onPrint);
      win.addEventListener("scroll", this.onScroll);
      win.document.addEventListener("selectionchange", this.onSelectionChange);
    }
    removeWindowListeners(win) {
      win.removeEventListener("scroll", this.onScroll);
      win.removeEventListener("resize", this.onResize);
      if (this.printQuery) {
        if (this.printQuery.removeEventListener)
          this.printQuery.removeEventListener("change", this.onPrint);
        else
          this.printQuery.removeListener(this.onPrint);
      } else
        win.removeEventListener("beforeprint", this.onPrint);
      win.document.removeEventListener("selectionchange", this.onSelectionChange);
    }
    update(update) {
      if (this.editContext) {
        this.editContext.update(update);
        if (update.startState.facet(editable) != update.state.facet(editable))
          update.view.contentDOM.editContext = update.state.facet(editable) ? this.editContext.editContext : null;
      }
    }
    destroy() {
      var _a2, _b, _c;
      this.stop();
      (_a2 = this.intersection) === null || _a2 === void 0 ? void 0 : _a2.disconnect();
      (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
      (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
      for (let dom of this.scrollTargets)
        dom.removeEventListener("scroll", this.onScroll);
      this.removeWindowListeners(this.win);
      clearTimeout(this.parentCheck);
      clearTimeout(this.resizeTimeout);
      this.win.cancelAnimationFrame(this.delayedFlush);
      this.win.cancelAnimationFrame(this.flushingAndroidKey);
      if (this.editContext) {
        this.view.contentDOM.editContext = null;
        this.editContext.destroy();
      }
    }
  };
  function findChild(cView, dom, dir) {
    while (dom) {
      let curView = ContentView.get(dom);
      if (curView && curView.parent == cView)
        return curView;
      let parent = dom.parentNode;
      dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
    }
    return null;
  }
  function buildSelectionRangeFromRange(view, range) {
    let anchorNode = range.startContainer, anchorOffset = range.startOffset;
    let focusNode = range.endContainer, focusOffset = range.endOffset;
    let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
    if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
      [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
    return { anchorNode, anchorOffset, focusNode, focusOffset };
  }
  function safariSelectionRangeHack(view, selection) {
    if (selection.getComposedRanges) {
      let range = selection.getComposedRanges(view.root)[0];
      if (range)
        return buildSelectionRangeFromRange(view, range);
    }
    let found = null;
    function read(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
      found = event.getTargetRanges()[0];
    }
    view.contentDOM.addEventListener("beforeinput", read, true);
    view.dom.ownerDocument.execCommand("indent");
    view.contentDOM.removeEventListener("beforeinput", read, true);
    return found ? buildSelectionRangeFromRange(view, found) : null;
  }
  var EditContextManager = class {
    constructor(view) {
      this.from = 0;
      this.to = 0;
      this.pendingContextChange = null;
      this.handlers = /* @__PURE__ */ Object.create(null);
      this.composing = null;
      this.resetRange(view.state);
      let context2 = this.editContext = new window.EditContext({
        text: view.state.doc.sliceString(this.from, this.to),
        selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, view.state.selection.main.anchor))),
        selectionEnd: this.toContextPos(view.state.selection.main.head)
      });
      this.handlers.textupdate = (e) => {
        let main = view.state.selection.main, { anchor, head } = main;
        let from = this.toEditorPos(e.updateRangeStart), to = this.toEditorPos(e.updateRangeEnd);
        if (view.inputState.composing >= 0 && !this.composing)
          this.composing = { contextBase: e.updateRangeStart, editorBase: from, drifted: false };
        let change = { from, to, insert: Text.of(e.text.split("\n")) };
        if (change.from == this.from && anchor < this.from)
          change.from = anchor;
        else if (change.to == this.to && anchor > this.to)
          change.to = anchor;
        if (change.from == change.to && !change.insert.length) {
          let newSel = EditorSelection.single(this.toEditorPos(e.selectionStart), this.toEditorPos(e.selectionEnd));
          if (!newSel.main.eq(main))
            view.dispatch({ selection: newSel, userEvent: "select" });
          return;
        }
        if ((browser.mac || browser.android) && change.from == head - 1 && /^\. ?$/.test(e.text) && view.contentDOM.getAttribute("autocorrect") == "off")
          change = { from, to, insert: Text.of([e.text.replace(".", " ")]) };
        this.pendingContextChange = change;
        if (!view.state.readOnly) {
          let newLen = this.to - this.from + (change.to - change.from + change.insert.length);
          applyDOMChangeInner(view, change, EditorSelection.single(this.toEditorPos(e.selectionStart, newLen), this.toEditorPos(e.selectionEnd, newLen)));
        }
        if (this.pendingContextChange) {
          this.revertPending(view.state);
          this.setSelection(view.state);
        }
      };
      this.handlers.characterboundsupdate = (e) => {
        let rects = [], prev = null;
        for (let i = this.toEditorPos(e.rangeStart), end = this.toEditorPos(e.rangeEnd); i < end; i++) {
          let rect = view.coordsForChar(i);
          prev = rect && new DOMRect(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top) || prev || new DOMRect();
          rects.push(prev);
        }
        context2.updateCharacterBounds(e.rangeStart, rects);
      };
      this.handlers.textformatupdate = (e) => {
        let deco = [];
        for (let format of e.getTextFormats()) {
          let lineStyle = format.underlineStyle, thickness2 = format.underlineThickness;
          if (lineStyle != "None" && thickness2 != "None") {
            let from = this.toEditorPos(format.rangeStart), to = this.toEditorPos(format.rangeEnd);
            if (from < to) {
              let style = `text-decoration: underline ${lineStyle == "Dashed" ? "dashed " : lineStyle == "Squiggle" ? "wavy " : ""}${thickness2 == "Thin" ? 1 : 2}px`;
              deco.push(Decoration.mark({ attributes: { style } }).range(from, to));
            }
          }
        }
        view.dispatch({ effects: setEditContextFormatting.of(Decoration.set(deco)) });
      };
      this.handlers.compositionstart = () => {
        if (view.inputState.composing < 0) {
          view.inputState.composing = 0;
          view.inputState.compositionFirstChange = true;
        }
      };
      this.handlers.compositionend = () => {
        view.inputState.composing = -1;
        view.inputState.compositionFirstChange = null;
        if (this.composing) {
          let { drifted } = this.composing;
          this.composing = null;
          if (drifted)
            this.reset(view.state);
        }
      };
      for (let event in this.handlers)
        context2.addEventListener(event, this.handlers[event]);
      this.measureReq = { read: (view2) => {
        this.editContext.updateControlBounds(view2.contentDOM.getBoundingClientRect());
        let sel = getSelection(view2.root);
        if (sel && sel.rangeCount)
          this.editContext.updateSelectionBounds(sel.getRangeAt(0).getBoundingClientRect());
      } };
    }
    applyEdits(update) {
      let off = 0, abort = false, pending = this.pendingContextChange;
      update.changes.iterChanges((fromA, toA, _fromB, _toB, insert2) => {
        if (abort)
          return;
        let dLen = insert2.length - (toA - fromA);
        if (pending && toA >= pending.to) {
          if (pending.from == fromA && pending.to == toA && pending.insert.eq(insert2)) {
            pending = this.pendingContextChange = null;
            off += dLen;
            this.to += dLen;
            return;
          } else {
            pending = null;
            this.revertPending(update.state);
          }
        }
        fromA += off;
        toA += off;
        if (toA <= this.from) {
          this.from += dLen;
          this.to += dLen;
        } else if (fromA < this.to) {
          if (fromA < this.from || toA > this.to || this.to - this.from + insert2.length > 3e4) {
            abort = true;
            return;
          }
          this.editContext.updateText(this.toContextPos(fromA), this.toContextPos(toA), insert2.toString());
          this.to += dLen;
        }
        off += dLen;
      });
      if (pending && !abort)
        this.revertPending(update.state);
      return !abort;
    }
    update(update) {
      let reverted = this.pendingContextChange, startSel = update.startState.selection.main;
      if (this.composing && (this.composing.drifted || !update.changes.touchesRange(startSel.from, startSel.to) && update.transactions.some((tr) => !tr.isUserEvent("input.type") && tr.changes.touchesRange(this.from, this.to)))) {
        this.composing.drifted = true;
        this.composing.editorBase = update.changes.mapPos(this.composing.editorBase);
      } else if (!this.applyEdits(update) || !this.rangeIsValid(update.state)) {
        this.pendingContextChange = null;
        this.reset(update.state);
      } else if (update.docChanged || update.selectionSet || reverted) {
        this.setSelection(update.state);
      }
      if (update.geometryChanged || update.docChanged || update.selectionSet)
        update.view.requestMeasure(this.measureReq);
    }
    resetRange(state) {
      let { head } = state.selection.main;
      this.from = Math.max(
        0,
        head - 1e4
        /* CxVp.Margin */
      );
      this.to = Math.min(
        state.doc.length,
        head + 1e4
        /* CxVp.Margin */
      );
    }
    reset(state) {
      this.resetRange(state);
      this.editContext.updateText(0, this.editContext.text.length, state.doc.sliceString(this.from, this.to));
      this.setSelection(state);
    }
    revertPending(state) {
      let pending = this.pendingContextChange;
      this.pendingContextChange = null;
      this.editContext.updateText(this.toContextPos(pending.from), this.toContextPos(pending.from + pending.insert.length), state.doc.sliceString(pending.from, pending.to));
    }
    setSelection(state) {
      let { main } = state.selection;
      let start = this.toContextPos(Math.max(this.from, Math.min(this.to, main.anchor)));
      let end = this.toContextPos(main.head);
      if (this.editContext.selectionStart != start || this.editContext.selectionEnd != end)
        this.editContext.updateSelection(start, end);
    }
    rangeIsValid(state) {
      let { head } = state.selection.main;
      return !(this.from > 0 && head - this.from < 500 || this.to < state.doc.length && this.to - head < 500 || this.to - this.from > 1e4 * 3);
    }
    toEditorPos(contextPos, clipLen = this.to - this.from) {
      contextPos = Math.min(contextPos, clipLen);
      let c = this.composing;
      return c && c.drifted ? c.editorBase + (contextPos - c.contextBase) : contextPos + this.from;
    }
    toContextPos(editorPos) {
      let c = this.composing;
      return c && c.drifted ? c.contextBase + (editorPos - c.editorBase) : editorPos - this.from;
    }
    destroy() {
      for (let event in this.handlers)
        this.editContext.removeEventListener(event, this.handlers[event]);
    }
  };
  var EditorView = class _EditorView {
    /**
    The current editor state.
    */
    get state() {
      return this.viewState.state;
    }
    /**
    To be able to display large documents without consuming too much
    memory or overloading the browser, CodeMirror only draws the
    code that is visible (plus a margin around it) to the DOM. This
    property tells you the extent of the current drawn viewport, in
    document positions.
    */
    get viewport() {
      return this.viewState.viewport;
    }
    /**
    When there are, for example, large collapsed ranges in the
    viewport, its size can be a lot bigger than the actual visible
    content. Thus, if you are doing something like styling the
    content in the viewport, it is preferable to only do so for
    these ranges, which are the subset of the viewport that is
    actually drawn.
    */
    get visibleRanges() {
      return this.viewState.visibleRanges;
    }
    /**
    Returns false when the editor is entirely scrolled out of view
    or otherwise hidden.
    */
    get inView() {
      return this.viewState.inView;
    }
    /**
    Indicates whether the user is currently composing text via
    [IME](https://en.wikipedia.org/wiki/Input_method), and at least
    one change has been made in the current composition.
    */
    get composing() {
      return !!this.inputState && this.inputState.composing > 0;
    }
    /**
    Indicates whether the user is currently in composing state. Note
    that on some platforms, like Android, this will be the case a
    lot, since just putting the cursor on a word starts a
    composition there.
    */
    get compositionStarted() {
      return !!this.inputState && this.inputState.composing >= 0;
    }
    /**
    The document or shadow root that the view lives in.
    */
    get root() {
      return this._root;
    }
    /**
    @internal
    */
    get win() {
      return this.dom.ownerDocument.defaultView || window;
    }
    /**
    Construct a new view. You'll want to either provide a `parent`
    option, or put `view.dom` into your document after creating a
    view, so that the user can see the editor.
    */
    constructor(config2 = {}) {
      var _a2;
      this.plugins = [];
      this.pluginMap = /* @__PURE__ */ new Map();
      this.editorAttrs = {};
      this.contentAttrs = {};
      this.bidiCache = [];
      this.destroyed = false;
      this.updateState = 2;
      this.measureScheduled = -1;
      this.measureRequests = [];
      this.contentDOM = document.createElement("div");
      this.scrollDOM = document.createElement("div");
      this.scrollDOM.tabIndex = -1;
      this.scrollDOM.className = "cm-scroller";
      this.scrollDOM.appendChild(this.contentDOM);
      this.announceDOM = document.createElement("div");
      this.announceDOM.className = "cm-announced";
      this.announceDOM.setAttribute("aria-live", "polite");
      this.dom = document.createElement("div");
      this.dom.appendChild(this.announceDOM);
      this.dom.appendChild(this.scrollDOM);
      if (config2.parent)
        config2.parent.appendChild(this.dom);
      let { dispatch } = config2;
      this.dispatchTransactions = config2.dispatchTransactions || dispatch && ((trs) => trs.forEach((tr) => dispatch(tr, this))) || ((trs) => this.update(trs));
      this.dispatch = this.dispatch.bind(this);
      this._root = config2.root || getRoot(config2.parent) || document;
      this.viewState = new ViewState(config2.state || EditorState.create(config2));
      if (config2.scrollTo && config2.scrollTo.is(scrollIntoView))
        this.viewState.scrollTarget = config2.scrollTo.value.clip(this.viewState.state);
      this.plugins = this.state.facet(viewPlugin).map((spec) => new PluginInstance(spec));
      for (let plugin of this.plugins)
        plugin.update(this);
      this.observer = new DOMObserver(this);
      this.inputState = new InputState(this);
      this.inputState.ensureHandlers(this.plugins);
      this.docView = new DocView(this);
      this.mountStyles();
      this.updateAttrs();
      this.updateState = 0;
      this.requestMeasure();
      if ((_a2 = document.fonts) === null || _a2 === void 0 ? void 0 : _a2.ready)
        document.fonts.ready.then(() => this.requestMeasure());
    }
    dispatch(...input) {
      let trs = input.length == 1 && input[0] instanceof Transaction ? input : input.length == 1 && Array.isArray(input[0]) ? input[0] : [this.state.update(...input)];
      this.dispatchTransactions(trs, this);
    }
    /**
    Update the view for the given array of transactions. This will
    update the visible document and selection to match the state
    produced by the transactions, and notify view plugins of the
    change. You should usually call
    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
    as a primitive.
    */
    update(transactions) {
      if (this.updateState != 0)
        throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
      let redrawn = false, attrsChanged = false, update;
      let state = this.state;
      for (let tr of transactions) {
        if (tr.startState != state)
          throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
        state = tr.state;
      }
      if (this.destroyed) {
        this.viewState.state = state;
        return;
      }
      let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
      if (transactions.some((tr) => tr.annotation(isFocusChange))) {
        this.inputState.notifiedFocused = focus;
        focusFlag = 1;
      } else if (focus != this.inputState.notifiedFocused) {
        this.inputState.notifiedFocused = focus;
        dispatchFocus = focusChangeTransaction(state, focus);
        if (!dispatchFocus)
          focusFlag = 1;
      }
      let pendingKey = this.observer.delayedAndroidKey, domChange = null;
      if (pendingKey) {
        this.observer.clearDelayedAndroidKey();
        domChange = this.observer.readChange();
        if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
          domChange = null;
      } else {
        this.observer.clear();
      }
      if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
        return this.setState(state);
      update = ViewUpdate.create(this, state, transactions);
      update.flags |= focusFlag;
      let scrollTarget = this.viewState.scrollTarget;
      try {
        this.updateState = 2;
        for (let tr of transactions) {
          if (scrollTarget)
            scrollTarget = scrollTarget.map(tr.changes);
          if (tr.scrollIntoView) {
            let { main } = tr.state.selection;
            scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
          }
          for (let e of tr.effects)
            if (e.is(scrollIntoView))
              scrollTarget = e.value.clip(this.state);
        }
        this.viewState.update(update, scrollTarget);
        this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
        if (!update.empty) {
          this.updatePlugins(update);
          this.inputState.update(update);
        }
        redrawn = this.docView.update(update);
        if (this.state.facet(styleModule) != this.styleModules)
          this.mountStyles();
        attrsChanged = this.updateAttrs();
        this.showAnnouncements(transactions);
        this.docView.updateSelection(redrawn, transactions.some((tr) => tr.isUserEvent("select.pointer")));
      } finally {
        this.updateState = 0;
      }
      if (update.startState.facet(theme) != update.state.facet(theme))
        this.viewState.mustMeasureContent = true;
      if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
        this.requestMeasure();
      if (redrawn)
        this.docViewUpdate();
      if (!update.empty)
        for (let listener of this.state.facet(updateListener)) {
          try {
            listener(update);
          } catch (e) {
            logException(this.state, e, "update listener");
          }
        }
      if (dispatchFocus || domChange)
        Promise.resolve().then(() => {
          if (dispatchFocus && this.state == dispatchFocus.startState)
            this.dispatch(dispatchFocus);
          if (domChange) {
            if (!applyDOMChange(this, domChange) && pendingKey.force)
              dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
          }
        });
    }
    /**
    Reset the view to the given state. (This will cause the entire
    document to be redrawn and all view plugins to be reinitialized,
    so you should probably only use it when the new state isn't
    derived from the old state. Otherwise, use
    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
    */
    setState(newState) {
      if (this.updateState != 0)
        throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
      if (this.destroyed) {
        this.viewState.state = newState;
        return;
      }
      this.updateState = 2;
      let hadFocus = this.hasFocus;
      try {
        for (let plugin of this.plugins)
          plugin.destroy(this);
        this.viewState = new ViewState(newState);
        this.plugins = newState.facet(viewPlugin).map((spec) => new PluginInstance(spec));
        this.pluginMap.clear();
        for (let plugin of this.plugins)
          plugin.update(this);
        this.docView.destroy();
        this.docView = new DocView(this);
        this.inputState.ensureHandlers(this.plugins);
        this.mountStyles();
        this.updateAttrs();
        this.bidiCache = [];
      } finally {
        this.updateState = 0;
      }
      if (hadFocus)
        this.focus();
      this.requestMeasure();
    }
    updatePlugins(update) {
      let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
      if (prevSpecs != specs) {
        let newPlugins = [];
        for (let spec of specs) {
          let found = prevSpecs.indexOf(spec);
          if (found < 0) {
            newPlugins.push(new PluginInstance(spec));
          } else {
            let plugin = this.plugins[found];
            plugin.mustUpdate = update;
            newPlugins.push(plugin);
          }
        }
        for (let plugin of this.plugins)
          if (plugin.mustUpdate != update)
            plugin.destroy(this);
        this.plugins = newPlugins;
        this.pluginMap.clear();
      } else {
        for (let p of this.plugins)
          p.mustUpdate = update;
      }
      for (let i = 0; i < this.plugins.length; i++)
        this.plugins[i].update(this);
      if (prevSpecs != specs)
        this.inputState.ensureHandlers(this.plugins);
    }
    docViewUpdate() {
      for (let plugin of this.plugins) {
        let val = plugin.value;
        if (val && val.docViewUpdate) {
          try {
            val.docViewUpdate(this);
          } catch (e) {
            logException(this.state, e, "doc view update listener");
          }
        }
      }
    }
    /**
    @internal
    */
    measure(flush = true) {
      if (this.destroyed)
        return;
      if (this.measureScheduled > -1)
        this.win.cancelAnimationFrame(this.measureScheduled);
      if (this.observer.delayedAndroidKey) {
        this.measureScheduled = -1;
        this.requestMeasure();
        return;
      }
      this.measureScheduled = 0;
      if (flush)
        this.observer.forceFlush();
      let updated = null;
      let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;
      let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;
      if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)
        scrollAnchorHeight = -1;
      this.viewState.scrollAnchorHeight = -1;
      try {
        for (let i = 0; ; i++) {
          if (scrollAnchorHeight < 0) {
            if (isScrolledToBottom(sDOM)) {
              scrollAnchorPos = -1;
              scrollAnchorHeight = this.viewState.heightMap.height;
            } else {
              let block = this.viewState.scrollAnchorAt(scrollTop);
              scrollAnchorPos = block.from;
              scrollAnchorHeight = block.top;
            }
          }
          this.updateState = 1;
          let changed = this.viewState.measure(this);
          if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
            break;
          if (i > 5) {
            console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
            break;
          }
          let measuring = [];
          if (!(changed & 4))
            [this.measureRequests, measuring] = [measuring, this.measureRequests];
          let measured = measuring.map((m) => {
            try {
              return m.read(this);
            } catch (e) {
              logException(this.state, e);
              return BadMeasure;
            }
          });
          let update = ViewUpdate.create(this, this.state, []), redrawn = false;
          update.flags |= changed;
          if (!updated)
            updated = update;
          else
            updated.flags |= changed;
          this.updateState = 2;
          if (!update.empty) {
            this.updatePlugins(update);
            this.inputState.update(update);
            this.updateAttrs();
            redrawn = this.docView.update(update);
            if (redrawn)
              this.docViewUpdate();
          }
          for (let i2 = 0; i2 < measuring.length; i2++)
            if (measured[i2] != BadMeasure) {
              try {
                let m = measuring[i2];
                if (m.write)
                  m.write(measured[i2], this);
              } catch (e) {
                logException(this.state, e);
              }
            }
          if (redrawn)
            this.docView.updateSelection(true);
          if (!update.viewportChanged && this.measureRequests.length == 0) {
            if (this.viewState.editorHeight) {
              if (this.viewState.scrollTarget) {
                this.docView.scrollIntoView(this.viewState.scrollTarget);
                this.viewState.scrollTarget = null;
                scrollAnchorHeight = -1;
                continue;
              } else {
                let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(scrollAnchorPos).top;
                let diff = newAnchorHeight - scrollAnchorHeight;
                if (diff > 1 || diff < -1) {
                  scrollTop = scrollTop + diff;
                  sDOM.scrollTop = scrollTop / this.scaleY;
                  scrollAnchorHeight = -1;
                  continue;
                }
              }
            }
            break;
          }
        }
      } finally {
        this.updateState = 0;
        this.measureScheduled = -1;
      }
      if (updated && !updated.empty)
        for (let listener of this.state.facet(updateListener))
          listener(updated);
    }
    /**
    Get the CSS classes for the currently active editor themes.
    */
    get themeClasses() {
      return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(theme);
    }
    updateAttrs() {
      let editorAttrs = attrsFromFacet(this, editorAttributes, {
        class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
      });
      let contentAttrs = {
        spellcheck: "false",
        autocorrect: "off",
        autocapitalize: "off",
        writingsuggestions: "false",
        translate: "no",
        contenteditable: !this.state.facet(editable) ? "false" : "true",
        class: "cm-content",
        style: `${browser.tabSize}: ${this.state.tabSize}`,
        role: "textbox",
        "aria-multiline": "true"
      };
      if (this.state.readOnly)
        contentAttrs["aria-readonly"] = "true";
      attrsFromFacet(this, contentAttributes, contentAttrs);
      let changed = this.observer.ignore(() => {
        let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
        let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
        return changedContent || changedEditor;
      });
      this.editorAttrs = editorAttrs;
      this.contentAttrs = contentAttrs;
      return changed;
    }
    showAnnouncements(trs) {
      let first = true;
      for (let tr of trs)
        for (let effect of tr.effects)
          if (effect.is(_EditorView.announce)) {
            if (first)
              this.announceDOM.textContent = "";
            first = false;
            let div2 = this.announceDOM.appendChild(document.createElement("div"));
            div2.textContent = effect.value;
          }
    }
    mountStyles() {
      this.styleModules = this.state.facet(styleModule);
      let nonce = this.state.facet(_EditorView.cspNonce);
      StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1).reverse(), nonce ? { nonce } : void 0);
    }
    readMeasured() {
      if (this.updateState == 2)
        throw new Error("Reading the editor layout isn't allowed during an update");
      if (this.updateState == 0 && this.measureScheduled > -1)
        this.measure(false);
    }
    /**
    Schedule a layout measurement, optionally providing callbacks to
    do custom DOM measuring followed by a DOM write phase. Using
    this is preferable reading DOM layout directly from, for
    example, an event handler, because it'll make sure measuring and
    drawing done by other components is synchronized, avoiding
    unnecessary DOM layout computations.
    */
    requestMeasure(request) {
      if (this.measureScheduled < 0)
        this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
      if (request) {
        if (this.measureRequests.indexOf(request) > -1)
          return;
        if (request.key != null)
          for (let i = 0; i < this.measureRequests.length; i++) {
            if (this.measureRequests[i].key === request.key) {
              this.measureRequests[i] = request;
              return;
            }
          }
        this.measureRequests.push(request);
      }
    }
    /**
    Get the value of a specific plugin, if present. Note that
    plugins that crash can be dropped from a view, so even when you
    know you registered a given plugin, it is recommended to check
    the return value of this method.
    */
    plugin(plugin) {
      let known = this.pluginMap.get(plugin);
      if (known === void 0 || known && known.plugin != plugin)
        this.pluginMap.set(plugin, known = this.plugins.find((p) => p.plugin == plugin) || null);
      return known && known.update(this).value;
    }
    /**
    The top position of the document, in screen coordinates. This
    may be negative when the editor is scrolled down. Points
    directly to the top of the first line, not above the padding.
    */
    get documentTop() {
      return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
    }
    /**
    Reports the padding above and below the document.
    */
    get documentPadding() {
      return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
    }
    /**
    If the editor is transformed with CSS, this provides the scale
    along the X axis. Otherwise, it will just be 1. Note that
    transforms other than translation and scaling are not supported.
    */
    get scaleX() {
      return this.viewState.scaleX;
    }
    /**
    Provide the CSS transformed scale along the Y axis.
    */
    get scaleY() {
      return this.viewState.scaleY;
    }
    /**
    Find the text line or block widget at the given vertical
    position (which is interpreted as relative to the [top of the
    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
    */
    elementAtHeight(height) {
      this.readMeasured();
      return this.viewState.elementAtHeight(height);
    }
    /**
    Find the line block (see
    [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
    height, again interpreted relative to the [top of the
    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
    */
    lineBlockAtHeight(height) {
      this.readMeasured();
      return this.viewState.lineBlockAtHeight(height);
    }
    /**
    Get the extent and vertical position of all [line
    blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
    are relative to the [top of the
    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
    */
    get viewportLineBlocks() {
      return this.viewState.viewportLines;
    }
    /**
    Find the line block around the given document position. A line
    block is a range delimited on both sides by either a
    non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line break, or the
    start/end of the document. It will usually just hold a line of
    text, but may be broken into multiple textblocks by block
    widgets.
    */
    lineBlockAt(pos) {
      return this.viewState.lineBlockAt(pos);
    }
    /**
    The editor's total content height.
    */
    get contentHeight() {
      return this.viewState.contentHeight;
    }
    /**
    Move a cursor position by [grapheme
    cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
    the motion is away from the line start, or towards it. In
    bidirectional text, the line is traversed in visual order, using
    the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
    When the start position was the last one on the line, the
    returned position will be across the line break. If there is no
    further line, the original position is returned.
    
    By default, this method moves over a single cluster. The
    optional `by` argument can be used to move across more. It will
    be called with the first cluster as argument, and should return
    a predicate that determines, for each subsequent cluster,
    whether it should also be moved over.
    */
    moveByChar(start, forward, by) {
      return skipAtoms(this, start, moveByChar(this, start, forward, by));
    }
    /**
    Move a cursor position across the next group of either
    [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
    non-whitespace characters.
    */
    moveByGroup(start, forward) {
      return skipAtoms(this, start, moveByChar(this, start, forward, (initial) => byGroup(this, start.head, initial)));
    }
    /**
    Get the cursor position visually at the start or end of a line.
    Note that this may differ from the _logical_ position at its
    start or end (which is simply at `line.from`/`line.to`) if text
    at the start or end goes against the line's base text direction.
    */
    visualLineSide(line, end) {
      let order = this.bidiSpans(line), dir = this.textDirectionAt(line.from);
      let span = order[end ? order.length - 1 : 0];
      return EditorSelection.cursor(span.side(end, dir) + line.from, span.forward(!end, dir) ? 1 : -1);
    }
    /**
    Move to the next line boundary in the given direction. If
    `includeWrap` is true, line wrapping is on, and there is a
    further wrap point on the current line, the wrap point will be
    returned. Otherwise this function will return the start or end
    of the line.
    */
    moveToLineBoundary(start, forward, includeWrap = true) {
      return moveToLineBoundary(this, start, forward, includeWrap);
    }
    /**
    Move a cursor position vertically. When `distance` isn't given,
    it defaults to moving to the next line (including wrapped
    lines). Otherwise, `distance` should provide a positive distance
    in pixels.
    
    When `start` has a
    [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
    motion will use that as a target horizontal position. Otherwise,
    the cursor's own horizontal position is used. The returned
    cursor will have its goal column set to whichever column was
    used.
    */
    moveVertically(start, forward, distance2) {
      return skipAtoms(this, start, moveVertically(this, start, forward, distance2));
    }
    /**
    Find the DOM parent node and offset (child offset if `node` is
    an element, character offset when it is a text node) at the
    given document position.
    
    Note that for positions that aren't currently in
    `visibleRanges`, the resulting DOM position isn't necessarily
    meaningful (it may just point before or after a placeholder
    element).
    */
    domAtPos(pos) {
      return this.docView.domAtPos(pos);
    }
    /**
    Find the document position at the given DOM node. Can be useful
    for associating positions with DOM events. Will raise an error
    when `node` isn't part of the editor content.
    */
    posAtDOM(node, offset = 0) {
      return this.docView.posFromDOM(node, offset);
    }
    posAtCoords(coords, precise = true) {
      this.readMeasured();
      return posAtCoords(this, coords, precise);
    }
    /**
    Get the screen coordinates at the given document position.
    `side` determines whether the coordinates are based on the
    element before (-1) or after (1) the position (if no element is
    available on the given side, the method will transparently use
    another strategy to get reasonable coordinates).
    */
    coordsAtPos(pos, side = 1) {
      this.readMeasured();
      let rect = this.docView.coordsAt(pos, side);
      if (!rect || rect.left == rect.right)
        return rect;
      let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
      let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
      return flattenRect(rect, span.dir == Direction.LTR == side > 0);
    }
    /**
    Return the rectangle around a given character. If `pos` does not
    point in front of a character that is in the viewport and
    rendered (i.e. not replaced, not a line break), this will return
    null. For space characters that are a line wrap point, this will
    return the position before the line break.
    */
    coordsForChar(pos) {
      this.readMeasured();
      return this.docView.coordsForChar(pos);
    }
    /**
    The default width of a character in the editor. May not
    accurately reflect the width of all characters (given variable
    width fonts or styling of invididual ranges).
    */
    get defaultCharacterWidth() {
      return this.viewState.heightOracle.charWidth;
    }
    /**
    The default height of a line in the editor. May not be accurate
    for all lines.
    */
    get defaultLineHeight() {
      return this.viewState.heightOracle.lineHeight;
    }
    /**
    The text direction
    ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
    CSS property) of the editor's content element.
    */
    get textDirection() {
      return this.viewState.defaultTextDirection;
    }
    /**
    Find the text direction of the block at the given position, as
    assigned by CSS. If
    [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
    isn't enabled, or the given position is outside of the viewport,
    this will always return the same as
    [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
    this may trigger a DOM layout.
    */
    textDirectionAt(pos) {
      let perLine = this.state.facet(perLineTextDirection);
      if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
        return this.textDirection;
      this.readMeasured();
      return this.docView.textDirectionAt(pos);
    }
    /**
    Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
    (as determined by the
    [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
    CSS property of its content element).
    */
    get lineWrapping() {
      return this.viewState.heightOracle.lineWrapping;
    }
    /**
    Returns the bidirectional text structure of the given line
    (which should be in the current document) as an array of span
    objects. The order of these spans matches the [text
    direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
    left-to-right, the leftmost spans come first, otherwise the
    rightmost spans come first.
    */
    bidiSpans(line) {
      if (line.length > MaxBidiLine)
        return trivialOrder(line.length);
      let dir = this.textDirectionAt(line.from), isolates;
      for (let entry of this.bidiCache) {
        if (entry.from == line.from && entry.dir == dir && (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line))))
          return entry.order;
      }
      if (!isolates)
        isolates = getIsolatedRanges(this, line);
      let order = computeOrder(line.text, dir, isolates);
      this.bidiCache.push(new CachedOrder(line.from, line.to, dir, isolates, true, order));
      return order;
    }
    /**
    Check whether the editor has focus.
    */
    get hasFocus() {
      var _a2;
      return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a2 = this.inputState) === null || _a2 === void 0 ? void 0 : _a2.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
    }
    /**
    Put focus on the editor.
    */
    focus() {
      this.observer.ignore(() => {
        focusPreventScroll(this.contentDOM);
        this.docView.updateSelection();
      });
    }
    /**
    Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
    necessary when moving the editor's existing DOM to a new window or shadow root.
    */
    setRoot(root) {
      if (this._root != root) {
        this._root = root;
        this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
        this.mountStyles();
      }
    }
    /**
    Clean up this editor view, removing its element from the
    document, unregistering event handlers, and notifying
    plugins. The view instance can no longer be used after
    calling this.
    */
    destroy() {
      if (this.root.activeElement == this.contentDOM)
        this.contentDOM.blur();
      for (let plugin of this.plugins)
        plugin.destroy(this);
      this.plugins = [];
      this.inputState.destroy();
      this.docView.destroy();
      this.dom.remove();
      this.observer.destroy();
      if (this.measureScheduled > -1)
        this.win.cancelAnimationFrame(this.measureScheduled);
      this.destroyed = true;
    }
    /**
    Returns an effect that can be
    [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
    cause it to scroll the given position or range into view.
    */
    static scrollIntoView(pos, options = {}) {
      return scrollIntoView.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
    }
    /**
    Return an effect that resets the editor to its current (at the
    time this method was called) scroll position. Note that this
    only affects the editor's own scrollable element, not parents.
    See also
    [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
    
    The effect should be used with a document identical to the one
    it was created for. Failing to do so is not an error, but may
    not scroll to the expected position. You can
    [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
    */
    scrollSnapshot() {
      let { scrollTop, scrollLeft } = this.scrollDOM;
      let ref = this.viewState.scrollAnchorAt(scrollTop);
      return scrollIntoView.of(new ScrollTarget(EditorSelection.cursor(ref.from), "start", "start", ref.top - scrollTop, scrollLeft, true));
    }
    /**
    Enable or disable tab-focus mode, which disables key bindings
    for Tab and Shift-Tab, letting the browser's default
    focus-changing behavior go through instead. This is useful to
    prevent trapping keyboard users in your editor.
    
    Without argument, this toggles the mode. With a boolean, it
    enables (true) or disables it (false). Given a number, it
    temporarily enables the mode until that number of milliseconds
    have passed or another non-Tab key is pressed.
    */
    setTabFocusMode(to) {
      if (to == null)
        this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1;
      else if (typeof to == "boolean")
        this.inputState.tabFocusMode = to ? 0 : -1;
      else if (this.inputState.tabFocusMode != 0)
        this.inputState.tabFocusMode = Date.now() + to;
    }
    /**
    Returns an extension that can be used to add DOM event handlers.
    The value should be an object mapping event names to handler
    functions. For any given event, such functions are ordered by
    extension precedence, and the first handler to return true will
    be assumed to have handled that event, and no other handlers or
    built-in behavior will be activated for it. These are registered
    on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
    for `scroll` handlers, which will be called any time the
    editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
    its parent nodes is scrolled.
    */
    static domEventHandlers(handlers2) {
      return ViewPlugin.define(() => ({}), { eventHandlers: handlers2 });
    }
    /**
    Create an extension that registers DOM event observers. Contrary
    to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
    observers can't be prevented from running by a higher-precedence
    handler returning true. They also don't prevent other handlers
    and observers from running when they return true, and should not
    call `preventDefault`.
    */
    static domEventObservers(observers2) {
      return ViewPlugin.define(() => ({}), { eventObservers: observers2 });
    }
    /**
    Create a theme extension. The first argument can be a
    [`style-mod`](https://github.com/marijnh/style-mod#documentation)
    style spec providing the styles for the theme. These will be
    prefixed with a generated class for the style.
    
    Because the selectors will be prefixed with a scope class, rule
    that directly match the editor's [wrapper
    element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
    added—need to be explicitly differentiated by adding an `&` to
    the selector for that element—for example
    `&.cm-focused`.
    
    When `dark` is set to true, the theme will be marked as dark,
    which will cause the `&dark` rules from [base
    themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
    `&light` when a light theme is active).
    */
    static theme(spec, options) {
      let prefix = StyleModule.newName();
      let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
      if (options && options.dark)
        result.push(darkTheme.of(true));
      return result;
    }
    /**
    Create an extension that adds styles to the base theme. Like
    with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
    place of the editor wrapper element when directly targeting
    that. You can also use `&dark` or `&light` instead to only
    target editors with a dark or light theme.
    */
    static baseTheme(spec) {
      return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
    }
    /**
    Retrieve an editor view instance from the view's DOM
    representation.
    */
    static findFromDOM(dom) {
      var _a2;
      let content2 = dom.querySelector(".cm-content");
      let cView = content2 && ContentView.get(content2) || ContentView.get(dom);
      return ((_a2 = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a2 === void 0 ? void 0 : _a2.view) || null;
    }
  };
  EditorView.styleModule = styleModule;
  EditorView.inputHandler = inputHandler;
  EditorView.clipboardInputFilter = clipboardInputFilter;
  EditorView.clipboardOutputFilter = clipboardOutputFilter;
  EditorView.scrollHandler = scrollHandler;
  EditorView.focusChangeEffect = focusChangeEffect;
  EditorView.perLineTextDirection = perLineTextDirection;
  EditorView.exceptionSink = exceptionSink;
  EditorView.updateListener = updateListener;
  EditorView.editable = editable;
  EditorView.mouseSelectionStyle = mouseSelectionStyle;
  EditorView.dragMovesSelection = dragMovesSelection$1;
  EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
  EditorView.decorations = decorations;
  EditorView.outerDecorations = outerDecorations;
  EditorView.atomicRanges = atomicRanges;
  EditorView.bidiIsolatedRanges = bidiIsolatedRanges;
  EditorView.scrollMargins = scrollMargins;
  EditorView.darkTheme = darkTheme;
  EditorView.cspNonce = /* @__PURE__ */ Facet.define({ combine: (values) => values.length ? values[0] : "" });
  EditorView.contentAttributes = contentAttributes;
  EditorView.editorAttributes = editorAttributes;
  EditorView.lineWrapping = /* @__PURE__ */ EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
  EditorView.announce = /* @__PURE__ */ StateEffect.define();
  var MaxBidiLine = 4096;
  var BadMeasure = {};
  var CachedOrder = class _CachedOrder {
    constructor(from, to, dir, isolates, fresh, order) {
      this.from = from;
      this.to = to;
      this.dir = dir;
      this.isolates = isolates;
      this.fresh = fresh;
      this.order = order;
    }
    static update(cache3, changes) {
      if (changes.empty && !cache3.some((c) => c.fresh))
        return cache3;
      let result = [], lastDir = cache3.length ? cache3[cache3.length - 1].dir : Direction.LTR;
      for (let i = Math.max(0, cache3.length - 10); i < cache3.length; i++) {
        let entry = cache3[i];
        if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
          result.push(new _CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
      }
      return result;
    }
  };
  function attrsFromFacet(view, facet, base2) {
    for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
      let source = sources[i], value = typeof source == "function" ? source(view) : source;
      if (value)
        combineAttrs(value, base2);
    }
    return base2;
  }
  var currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
  function normalizeKeyName(name2, platform) {
    const parts = name2.split(/-(?!$)/);
    let result = parts[parts.length - 1];
    if (result == "Space")
      result = " ";
    let alt, ctrl, shift2, meta2;
    for (let i = 0; i < parts.length - 1; ++i) {
      const mod2 = parts[i];
      if (/^(cmd|meta|m)$/i.test(mod2))
        meta2 = true;
      else if (/^a(lt)?$/i.test(mod2))
        alt = true;
      else if (/^(c|ctrl|control)$/i.test(mod2))
        ctrl = true;
      else if (/^s(hift)?$/i.test(mod2))
        shift2 = true;
      else if (/^mod$/i.test(mod2)) {
        if (platform == "mac")
          meta2 = true;
        else
          ctrl = true;
      } else
        throw new Error("Unrecognized modifier name: " + mod2);
    }
    if (alt)
      result = "Alt-" + result;
    if (ctrl)
      result = "Ctrl-" + result;
    if (meta2)
      result = "Meta-" + result;
    if (shift2)
      result = "Shift-" + result;
    return result;
  }
  function modifiers(name2, event, shift2) {
    if (event.altKey)
      name2 = "Alt-" + name2;
    if (event.ctrlKey)
      name2 = "Ctrl-" + name2;
    if (event.metaKey)
      name2 = "Meta-" + name2;
    if (shift2 !== false && event.shiftKey)
      name2 = "Shift-" + name2;
    return name2;
  }
  var handleKeyEvents = /* @__PURE__ */ Prec.default(/* @__PURE__ */ EditorView.domEventHandlers({
    keydown(event, view) {
      return runHandlers(getKeymap(view.state), event, view, "editor");
    }
  }));
  var keymap = /* @__PURE__ */ Facet.define({ enables: handleKeyEvents });
  var Keymaps = /* @__PURE__ */ new WeakMap();
  function getKeymap(state) {
    let bindings = state.facet(keymap);
    let map = Keymaps.get(bindings);
    if (!map)
      Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
    return map;
  }
  function runScopeHandlers(view, event, scope) {
    return runHandlers(getKeymap(view.state), event, view, scope);
  }
  var storedPrefix = null;
  var PrefixTimeout = 4e3;
  function buildKeymap(bindings, platform = currentPlatform) {
    let bound = /* @__PURE__ */ Object.create(null);
    let isPrefix = /* @__PURE__ */ Object.create(null);
    let checkPrefix = (name2, is) => {
      let current = isPrefix[name2];
      if (current == null)
        isPrefix[name2] = is;
      else if (current != is)
        throw new Error("Key binding " + name2 + " is used both as a regular binding and as a multi-stroke prefix");
    };
    let add3 = (scope, key, command2, preventDefault, stopPropagation) => {
      var _a2, _b;
      let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
      let parts = key.split(/ (?!$)/).map((k) => normalizeKeyName(k, platform));
      for (let i = 1; i < parts.length; i++) {
        let prefix = parts.slice(0, i).join(" ");
        checkPrefix(prefix, true);
        if (!scopeObj[prefix])
          scopeObj[prefix] = {
            preventDefault: true,
            stopPropagation: false,
            run: [(view) => {
              let ourObj = storedPrefix = { view, prefix, scope };
              setTimeout(() => {
                if (storedPrefix == ourObj)
                  storedPrefix = null;
              }, PrefixTimeout);
              return true;
            }]
          };
      }
      let full = parts.join(" ");
      checkPrefix(full, false);
      let binding = scopeObj[full] || (scopeObj[full] = {
        preventDefault: false,
        stopPropagation: false,
        run: ((_b = (_a2 = scopeObj._any) === null || _a2 === void 0 ? void 0 : _a2.run) === null || _b === void 0 ? void 0 : _b.slice()) || []
      });
      if (command2)
        binding.run.push(command2);
      if (preventDefault)
        binding.preventDefault = true;
      if (stopPropagation)
        binding.stopPropagation = true;
    };
    for (let b of bindings) {
      let scopes = b.scope ? b.scope.split(" ") : ["editor"];
      if (b.any)
        for (let scope of scopes) {
          let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
          if (!scopeObj._any)
            scopeObj._any = { preventDefault: false, stopPropagation: false, run: [] };
          let { any: any2 } = b;
          for (let key in scopeObj)
            scopeObj[key].run.push((view) => any2(view, currentKeyEvent));
        }
      let name2 = b[platform] || b.key;
      if (!name2)
        continue;
      for (let scope of scopes) {
        add3(scope, name2, b.run, b.preventDefault, b.stopPropagation);
        if (b.shift)
          add3(scope, "Shift-" + name2, b.shift, b.preventDefault, b.stopPropagation);
      }
    }
    return bound;
  }
  var currentKeyEvent = null;
  function runHandlers(map, event, view, scope) {
    currentKeyEvent = event;
    let name2 = keyName(event);
    let charCode = codePointAt2(name2, 0), isChar = codePointSize2(charCode) == name2.length && name2 != " ";
    let prefix = "", handled = false, prevented = false, stopPropagation = false;
    if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
      prefix = storedPrefix.prefix + " ";
      if (modifierCodes.indexOf(event.keyCode) < 0) {
        prevented = true;
        storedPrefix = null;
      }
    }
    let ran = /* @__PURE__ */ new Set();
    let runFor = (binding) => {
      if (binding) {
        for (let cmd2 of binding.run)
          if (!ran.has(cmd2)) {
            ran.add(cmd2);
            if (cmd2(view)) {
              if (binding.stopPropagation)
                stopPropagation = true;
              return true;
            }
          }
        if (binding.preventDefault) {
          if (binding.stopPropagation)
            stopPropagation = true;
          prevented = true;
        }
      }
      return false;
    };
    let scopeObj = map[scope], baseName, shiftName;
    if (scopeObj) {
      if (runFor(scopeObj[prefix + modifiers(name2, event, !isChar)])) {
        handled = true;
      } else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
      !(browser.windows && event.ctrlKey && event.altKey) && (baseName = base[event.keyCode]) && baseName != name2) {
        if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) {
          handled = true;
        } else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name2 && shiftName != baseName && runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) {
          handled = true;
        }
      } else if (isChar && event.shiftKey && runFor(scopeObj[prefix + modifiers(name2, event, true)])) {
        handled = true;
      }
      if (!handled && runFor(scopeObj._any))
        handled = true;
    }
    if (prevented)
      handled = true;
    if (handled && stopPropagation)
      event.stopPropagation();
    currentKeyEvent = null;
    return handled;
  }
  var RectangleMarker = class _RectangleMarker {
    /**
    Create a marker with the given class and dimensions. If `width`
    is null, the DOM element will get no width style.
    */
    constructor(className, left, top2, width, height) {
      this.className = className;
      this.left = left;
      this.top = top2;
      this.width = width;
      this.height = height;
    }
    draw() {
      let elt = document.createElement("div");
      elt.className = this.className;
      this.adjust(elt);
      return elt;
    }
    update(elt, prev) {
      if (prev.className != this.className)
        return false;
      this.adjust(elt);
      return true;
    }
    adjust(elt) {
      elt.style.left = this.left + "px";
      elt.style.top = this.top + "px";
      if (this.width != null)
        elt.style.width = this.width + "px";
      elt.style.height = this.height + "px";
    }
    eq(p) {
      return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height && this.className == p.className;
    }
    /**
    Create a set of rectangles for the given selection range,
    assigning them theclass`className`. Will create a single
    rectangle for empty ranges, and a set of selection-style
    rectangles covering the range's content (in a bidi-aware
    way) for non-empty ones.
    */
    static forRange(view, className, range) {
      if (range.empty) {
        let pos = view.coordsAtPos(range.head, range.assoc || 1);
        if (!pos)
          return [];
        let base2 = getBase(view);
        return [new _RectangleMarker(className, pos.left - base2.left, pos.top - base2.top, null, pos.bottom - pos.top)];
      } else {
        return rectanglesForRange(view, className, range);
      }
    }
  };
  function getBase(view) {
    let rect = view.scrollDOM.getBoundingClientRect();
    let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth * view.scaleX;
    return { left: left - view.scrollDOM.scrollLeft * view.scaleX, top: rect.top - view.scrollDOM.scrollTop * view.scaleY };
  }
  function wrappedLine(view, pos, side, inside2) {
    let coords = view.coordsAtPos(pos, side * 2);
    if (!coords)
      return inside2;
    let editorRect = view.dom.getBoundingClientRect();
    let y = (coords.top + coords.bottom) / 2;
    let left = view.posAtCoords({ x: editorRect.left + 1, y });
    let right = view.posAtCoords({ x: editorRect.right - 1, y });
    if (left == null || right == null)
      return inside2;
    return { from: Math.max(inside2.from, Math.min(left, right)), to: Math.min(inside2.to, Math.max(left, right)) };
  }
  function rectanglesForRange(view, className, range) {
    if (range.to <= view.viewport.from || range.from >= view.viewport.to)
      return [];
    let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
    let ltr = view.textDirection == Direction.LTR;
    let content2 = view.contentDOM, contentRect = content2.getBoundingClientRect(), base2 = getBase(view);
    let lineElt = content2.querySelector(".cm-line"), lineStyle = lineElt && window.getComputedStyle(lineElt);
    let leftSide = contentRect.left + (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);
    let rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);
    let startBlock = blockAt(view, from, 1), endBlock = blockAt(view, to, -1);
    let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
    let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
    if (visualStart && (view.lineWrapping || startBlock.widgetLineBreaks))
      visualStart = wrappedLine(view, from, 1, visualStart);
    if (visualEnd && (view.lineWrapping || endBlock.widgetLineBreaks))
      visualEnd = wrappedLine(view, to, -1, visualEnd);
    if (visualStart && visualEnd && visualStart.from == visualEnd.from && visualStart.to == visualEnd.to) {
      return pieces(drawForLine(range.from, range.to, visualStart));
    } else {
      let top2 = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
      let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
      let between = [];
      if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) || startBlock.widgetLineBreaks > 1 && top2.bottom + view.defaultLineHeight / 2 < bottom.top)
        between.push(piece(leftSide, top2.bottom, rightSide, bottom.top));
      else if (top2.bottom < bottom.top && view.elementAtHeight((top2.bottom + bottom.top) / 2).type == BlockType.Text)
        top2.bottom = bottom.top = (top2.bottom + bottom.top) / 2;
      return pieces(top2).concat(between).concat(pieces(bottom));
    }
    function piece(left, top2, right, bottom) {
      return new RectangleMarker(className, left - base2.left, top2 - base2.top, right - left, bottom - top2);
    }
    function pieces({ top: top2, bottom, horizontal }) {
      let pieces2 = [];
      for (let i = 0; i < horizontal.length; i += 2)
        pieces2.push(piece(horizontal[i], top2, horizontal[i + 1], bottom));
      return pieces2;
    }
    function drawForLine(from2, to2, line) {
      let top2 = 1e9, bottom = -1e9, horizontal = [];
      function addSpan(from3, fromOpen, to3, toOpen, dir) {
        let fromCoords = view.coordsAtPos(from3, from3 == line.to ? -2 : 2);
        let toCoords = view.coordsAtPos(to3, to3 == line.from ? 2 : -2);
        if (!fromCoords || !toCoords)
          return;
        top2 = Math.min(fromCoords.top, toCoords.top, top2);
        bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
        if (dir == Direction.LTR)
          horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
        else
          horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
      }
      let start = from2 !== null && from2 !== void 0 ? from2 : line.from, end = to2 !== null && to2 !== void 0 ? to2 : line.to;
      for (let r of view.visibleRanges)
        if (r.to > start && r.from < end) {
          for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end); ; ) {
            let docLine = view.state.doc.lineAt(pos);
            for (let span of view.bidiSpans(docLine)) {
              let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
              if (spanFrom >= endPos)
                break;
              if (spanTo > pos)
                addSpan(Math.max(spanFrom, pos), from2 == null && spanFrom <= start, Math.min(spanTo, endPos), to2 == null && spanTo >= end, span.dir);
            }
            pos = docLine.to + 1;
            if (pos >= endPos)
              break;
          }
        }
      if (horizontal.length == 0)
        addSpan(start, from2 == null, end, to2 == null, view.textDirection);
      return { top: top2, bottom, horizontal };
    }
    function drawForWidget(block, top2) {
      let y = contentRect.top + (top2 ? block.top : block.bottom);
      return { top: y, bottom: y, horizontal: [] };
    }
  }
  function sameMarker(a, b) {
    return a.constructor == b.constructor && a.eq(b);
  }
  var LayerView = class {
    constructor(view, layer2) {
      this.view = view;
      this.layer = layer2;
      this.drawn = [];
      this.scaleX = 1;
      this.scaleY = 1;
      this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) };
      this.dom = view.scrollDOM.appendChild(document.createElement("div"));
      this.dom.classList.add("cm-layer");
      if (layer2.above)
        this.dom.classList.add("cm-layer-above");
      if (layer2.class)
        this.dom.classList.add(layer2.class);
      this.scale();
      this.dom.setAttribute("aria-hidden", "true");
      this.setOrder(view.state);
      view.requestMeasure(this.measureReq);
      if (layer2.mount)
        layer2.mount(this.dom, view);
    }
    update(update) {
      if (update.startState.facet(layerOrder) != update.state.facet(layerOrder))
        this.setOrder(update.state);
      if (this.layer.update(update, this.dom) || update.geometryChanged) {
        this.scale();
        update.view.requestMeasure(this.measureReq);
      }
    }
    docViewUpdate(view) {
      if (this.layer.updateOnDocViewUpdate !== false)
        view.requestMeasure(this.measureReq);
    }
    setOrder(state) {
      let pos = 0, order = state.facet(layerOrder);
      while (pos < order.length && order[pos] != this.layer)
        pos++;
      this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);
    }
    measure() {
      return this.layer.markers(this.view);
    }
    scale() {
      let { scaleX, scaleY } = this.view;
      if (scaleX != this.scaleX || scaleY != this.scaleY) {
        this.scaleX = scaleX;
        this.scaleY = scaleY;
        this.dom.style.transform = `scale(${1 / scaleX}, ${1 / scaleY})`;
      }
    }
    draw(markers) {
      if (markers.length != this.drawn.length || markers.some((p, i) => !sameMarker(p, this.drawn[i]))) {
        let old = this.dom.firstChild, oldI = 0;
        for (let marker of markers) {
          if (marker.update && old && marker.constructor && this.drawn[oldI].constructor && marker.update(old, this.drawn[oldI])) {
            old = old.nextSibling;
            oldI++;
          } else {
            this.dom.insertBefore(marker.draw(), old);
          }
        }
        while (old) {
          let next = old.nextSibling;
          old.remove();
          old = next;
        }
        this.drawn = markers;
      }
    }
    destroy() {
      if (this.layer.destroy)
        this.layer.destroy(this.dom, this.view);
      this.dom.remove();
    }
  };
  var layerOrder = /* @__PURE__ */ Facet.define();
  function layer(config2) {
    return [
      ViewPlugin.define((v) => new LayerView(v, config2)),
      layerOrder.of(config2)
    ];
  }
  var selectionConfig = /* @__PURE__ */ Facet.define({
    combine(configs) {
      return combineConfig(configs, {
        cursorBlinkRate: 1200,
        drawRangeCursor: true
      }, {
        cursorBlinkRate: (a, b) => Math.min(a, b),
        drawRangeCursor: (a, b) => a || b
      });
    }
  });
  function drawSelection(config2 = {}) {
    return [
      selectionConfig.of(config2),
      cursorLayer,
      selectionLayer,
      hideNativeSelection,
      nativeSelectionHidden.of(true)
    ];
  }
  function configChanged(update) {
    return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
  }
  var cursorLayer = /* @__PURE__ */ layer({
    above: true,
    markers(view) {
      let { state } = view, conf = state.facet(selectionConfig);
      let cursors = [];
      for (let r of state.selection.ranges) {
        let prim = r == state.selection.main;
        if (r.empty || conf.drawRangeCursor) {
          let className = prim ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary";
          let cursor = r.empty ? r : EditorSelection.cursor(r.head, r.head > r.anchor ? -1 : 1);
          for (let piece of RectangleMarker.forRange(view, className, cursor))
            cursors.push(piece);
        }
      }
      return cursors;
    },
    update(update, dom) {
      if (update.transactions.some((tr) => tr.selection))
        dom.style.animationName = dom.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
      let confChange = configChanged(update);
      if (confChange)
        setBlinkRate(update.state, dom);
      return update.docChanged || update.selectionSet || confChange;
    },
    mount(dom, view) {
      setBlinkRate(view.state, dom);
    },
    class: "cm-cursorLayer"
  });
  function setBlinkRate(state, dom) {
    dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + "ms";
  }
  var selectionLayer = /* @__PURE__ */ layer({
    above: false,
    markers(view) {
      return view.state.selection.ranges.map((r) => r.empty ? [] : RectangleMarker.forRange(view, "cm-selectionBackground", r)).reduce((a, b) => a.concat(b));
    },
    update(update, dom) {
      return update.docChanged || update.selectionSet || update.viewportChanged || configChanged(update);
    },
    class: "cm-selectionLayer"
  });
  var hideNativeSelection = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ EditorView.theme({
    ".cm-line": {
      "& ::selection, &::selection": { backgroundColor: "transparent !important" },
      caretColor: "transparent !important"
    },
    ".cm-content": {
      caretColor: "transparent !important",
      "& :focus": {
        caretColor: "initial !important",
        "&::selection, & ::selection": {
          backgroundColor: "Highlight !important"
        }
      }
    }
  }));
  var setDropCursorPos = /* @__PURE__ */ StateEffect.define({
    map(pos, mapping) {
      return pos == null ? null : mapping.mapPos(pos);
    }
  });
  var dropCursorPos = /* @__PURE__ */ StateField.define({
    create() {
      return null;
    },
    update(pos, tr) {
      if (pos != null)
        pos = tr.changes.mapPos(pos);
      return tr.effects.reduce((pos2, e) => e.is(setDropCursorPos) ? e.value : pos2, pos);
    }
  });
  var drawDropCursor = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.cursor = null;
      this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
    }
    update(update) {
      var _a2;
      let cursorPos = update.state.field(dropCursorPos);
      if (cursorPos == null) {
        if (this.cursor != null) {
          (_a2 = this.cursor) === null || _a2 === void 0 ? void 0 : _a2.remove();
          this.cursor = null;
        }
      } else {
        if (!this.cursor) {
          this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
          this.cursor.className = "cm-dropCursor";
        }
        if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)
          this.view.requestMeasure(this.measureReq);
      }
    }
    readPos() {
      let { view } = this;
      let pos = view.state.field(dropCursorPos);
      let rect = pos != null && view.coordsAtPos(pos);
      if (!rect)
        return null;
      let outer = view.scrollDOM.getBoundingClientRect();
      return {
        left: rect.left - outer.left + view.scrollDOM.scrollLeft * view.scaleX,
        top: rect.top - outer.top + view.scrollDOM.scrollTop * view.scaleY,
        height: rect.bottom - rect.top
      };
    }
    drawCursor(pos) {
      if (this.cursor) {
        let { scaleX, scaleY } = this.view;
        if (pos) {
          this.cursor.style.left = pos.left / scaleX + "px";
          this.cursor.style.top = pos.top / scaleY + "px";
          this.cursor.style.height = pos.height / scaleY + "px";
        } else {
          this.cursor.style.left = "-100000px";
        }
      }
    }
    destroy() {
      if (this.cursor)
        this.cursor.remove();
    }
    setDropPos(pos) {
      if (this.view.state.field(dropCursorPos) != pos)
        this.view.dispatch({ effects: setDropCursorPos.of(pos) });
    }
  }, {
    eventObservers: {
      dragover(event) {
        this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));
      },
      dragleave(event) {
        if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))
          this.setDropPos(null);
      },
      dragend() {
        this.setDropPos(null);
      },
      drop() {
        this.setDropPos(null);
      }
    }
  });
  function dropCursor() {
    return [dropCursorPos, drawDropCursor];
  }
  function iterMatches(doc2, re, from, to, f) {
    re.lastIndex = 0;
    for (let cursor = doc2.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
      if (!cursor.lineBreak)
        while (m = re.exec(cursor.value))
          f(pos + m.index, m);
    }
  }
  function matchRanges(view, maxLength) {
    let visible = view.visibleRanges;
    if (visible.length == 1 && visible[0].from == view.viewport.from && visible[0].to == view.viewport.to)
      return visible;
    let result = [];
    for (let { from, to } of visible) {
      from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
      to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
      if (result.length && result[result.length - 1].to >= from)
        result[result.length - 1].to = to;
      else
        result.push({ from, to });
    }
    return result;
  }
  var MatchDecorator = class {
    /**
    Create a decorator.
    */
    constructor(config2) {
      const { regexp, decoration, decorate, boundary, maxLength = 1e3 } = config2;
      if (!regexp.global)
        throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
      this.regexp = regexp;
      if (decorate) {
        this.addMatch = (match, view, from, add3) => decorate(add3, from, from + match[0].length, match, view);
      } else if (typeof decoration == "function") {
        this.addMatch = (match, view, from, add3) => {
          let deco = decoration(match, view, from);
          if (deco)
            add3(from, from + match[0].length, deco);
        };
      } else if (decoration) {
        this.addMatch = (match, _view2, from, add3) => add3(from, from + match[0].length, decoration);
      } else {
        throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
      }
      this.boundary = boundary;
      this.maxLength = maxLength;
    }
    /**
    Compute the full set of decorations for matches in the given
    view's viewport. You'll want to call this when initializing your
    plugin.
    */
    createDeco(view) {
      let build = new RangeSetBuilder(), add3 = build.add.bind(build);
      for (let { from, to } of matchRanges(view, this.maxLength))
        iterMatches(view.state.doc, this.regexp, from, to, (from2, m) => this.addMatch(m, view, from2, add3));
      return build.finish();
    }
    /**
    Update a set of decorations for a view update. `deco` _must_ be
    the set of decorations produced by _this_ `MatchDecorator` for
    the view state before the update.
    */
    updateDeco(update, deco) {
      let changeFrom = 1e9, changeTo = -1;
      if (update.docChanged)
        update.changes.iterChanges((_f, _t, from, to) => {
          if (to >= update.view.viewport.from && from <= update.view.viewport.to) {
            changeFrom = Math.min(from, changeFrom);
            changeTo = Math.max(to, changeTo);
          }
        });
      if (update.viewportMoved || changeTo - changeFrom > 1e3)
        return this.createDeco(update.view);
      if (changeTo > -1)
        return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
      return deco;
    }
    updateRange(view, deco, updateFrom, updateTo) {
      for (let r of view.visibleRanges) {
        let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);
        if (to >= from) {
          let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
          let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);
          if (this.boundary) {
            for (; from > fromLine.from; from--)
              if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                start = from;
                break;
              }
            for (; to < toLine.to; to++)
              if (this.boundary.test(toLine.text[to - toLine.from])) {
                end = to;
                break;
              }
          }
          let ranges = [], m;
          let add3 = (from2, to2, deco2) => ranges.push(deco2.range(from2, to2));
          if (fromLine == toLine) {
            this.regexp.lastIndex = start - fromLine.from;
            while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from)
              this.addMatch(m, view, m.index + fromLine.from, add3);
          } else {
            iterMatches(view.state.doc, this.regexp, start, end, (from2, m2) => this.addMatch(m2, view, from2, add3));
          }
          deco = deco.update({ filterFrom: start, filterTo: end, filter: (from2, to2) => from2 < start || to2 > end, add: ranges });
        }
      }
      return deco;
    }
  };
  var UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
  var Specials = /* @__PURE__ */ new RegExp("[\0-\b\n-\x7F-\x9F\xAD\u061C\u200B\u200E\u200F\u2028\u2029\u202D\u202E\u2066\u2067\u2069\uFEFF\uFFF9-\uFFFC]", UnicodeRegexpSupport);
  var Names = {
    0: "null",
    7: "bell",
    8: "backspace",
    10: "newline",
    11: "vertical tab",
    13: "carriage return",
    27: "escape",
    8203: "zero width space",
    8204: "zero width non-joiner",
    8205: "zero width joiner",
    8206: "left-to-right mark",
    8207: "right-to-left mark",
    8232: "line separator",
    8237: "left-to-right override",
    8238: "right-to-left override",
    8294: "left-to-right isolate",
    8295: "right-to-left isolate",
    8297: "pop directional isolate",
    8233: "paragraph separator",
    65279: "zero width no-break space",
    65532: "object replacement"
  };
  var _supportsTabSize = null;
  function supportsTabSize() {
    var _a2;
    if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
      let styles = document.body.style;
      _supportsTabSize = ((_a2 = styles.tabSize) !== null && _a2 !== void 0 ? _a2 : styles.MozTabSize) != null;
    }
    return _supportsTabSize || false;
  }
  var specialCharConfig = /* @__PURE__ */ Facet.define({
    combine(configs) {
      let config2 = combineConfig(configs, {
        render: null,
        specialChars: Specials,
        addSpecialChars: null
      });
      if (config2.replaceTabs = !supportsTabSize())
        config2.specialChars = new RegExp("	|" + config2.specialChars.source, UnicodeRegexpSupport);
      if (config2.addSpecialChars)
        config2.specialChars = new RegExp(config2.specialChars.source + "|" + config2.addSpecialChars.source, UnicodeRegexpSupport);
      return config2;
    }
  });
  function highlightSpecialChars(config2 = {}) {
    return [specialCharConfig.of(config2), specialCharPlugin()];
  }
  var _plugin = null;
  function specialCharPlugin() {
    return _plugin || (_plugin = ViewPlugin.fromClass(class {
      constructor(view) {
        this.view = view;
        this.decorations = Decoration.none;
        this.decorationCache = /* @__PURE__ */ Object.create(null);
        this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
        this.decorations = this.decorator.createDeco(view);
      }
      makeDecorator(conf) {
        return new MatchDecorator({
          regexp: conf.specialChars,
          decoration: (m, view, pos) => {
            let { doc: doc2 } = view.state;
            let code = codePointAt2(m[0], 0);
            if (code == 9) {
              let line = doc2.lineAt(pos);
              let size = view.state.tabSize, col = countColumn(line.text, size, pos - line.from);
              return Decoration.replace({
                widget: new TabWidget((size - col % size) * this.view.defaultCharacterWidth / this.view.scaleX)
              });
            }
            return this.decorationCache[code] || (this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(conf, code) }));
          },
          boundary: conf.replaceTabs ? void 0 : /[^]/
        });
      }
      update(update) {
        let conf = update.state.facet(specialCharConfig);
        if (update.startState.facet(specialCharConfig) != conf) {
          this.decorator = this.makeDecorator(conf);
          this.decorations = this.decorator.createDeco(update.view);
        } else {
          this.decorations = this.decorator.updateDeco(update, this.decorations);
        }
      }
    }, {
      decorations: (v) => v.decorations
    }));
  }
  var DefaultPlaceholder = "\u2022";
  function placeholder$1(code) {
    if (code >= 32)
      return DefaultPlaceholder;
    if (code == 10)
      return "\u2424";
    return String.fromCharCode(9216 + code);
  }
  var SpecialCharWidget = class extends WidgetType {
    constructor(options, code) {
      super();
      this.options = options;
      this.code = code;
    }
    eq(other) {
      return other.code == this.code;
    }
    toDOM(view) {
      let ph = placeholder$1(this.code);
      let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
      let custom = this.options.render && this.options.render(this.code, desc, ph);
      if (custom)
        return custom;
      let span = document.createElement("span");
      span.textContent = ph;
      span.title = desc;
      span.setAttribute("aria-label", desc);
      span.className = "cm-specialChar";
      return span;
    }
    ignoreEvent() {
      return false;
    }
  };
  var TabWidget = class extends WidgetType {
    constructor(width) {
      super();
      this.width = width;
    }
    eq(other) {
      return other.width == this.width;
    }
    toDOM() {
      let span = document.createElement("span");
      span.textContent = "	";
      span.className = "cm-tab";
      span.style.width = this.width + "px";
      return span;
    }
    ignoreEvent() {
      return false;
    }
  };
  function highlightActiveLine() {
    return activeLineHighlighter;
  }
  var lineDeco = /* @__PURE__ */ Decoration.line({ class: "cm-activeLine" });
  var activeLineHighlighter = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view) {
      this.decorations = this.getDeco(view);
    }
    update(update) {
      if (update.docChanged || update.selectionSet)
        this.decorations = this.getDeco(update.view);
    }
    getDeco(view) {
      let lastLineStart = -1, deco = [];
      for (let r of view.state.selection.ranges) {
        let line = view.lineBlockAt(r.head);
        if (line.from > lastLineStart) {
          deco.push(lineDeco.range(line.from));
          lastLineStart = line.from;
        }
      }
      return Decoration.set(deco);
    }
  }, {
    decorations: (v) => v.decorations
  });
  var MaxOff = 2e3;
  function rectangleFor(state, a, b) {
    let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);
    let ranges = [];
    if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
      let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);
      for (let i = startLine; i <= endLine; i++) {
        let line = state.doc.line(i);
        if (line.length <= endOff)
          ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));
      }
    } else {
      let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);
      for (let i = startLine; i <= endLine; i++) {
        let line = state.doc.line(i);
        let start = findColumn(line.text, startCol, state.tabSize, true);
        if (start < 0) {
          ranges.push(EditorSelection.cursor(line.to));
        } else {
          let end = findColumn(line.text, endCol, state.tabSize);
          ranges.push(EditorSelection.range(line.from + start, line.from + end));
        }
      }
    }
    return ranges;
  }
  function absoluteColumn(view, x) {
    let ref = view.coordsAtPos(view.viewport.from);
    return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
  }
  function getPos(view, event) {
    let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
    let line = view.state.doc.lineAt(offset), off = offset - line.from;
    let col = off > MaxOff ? -1 : off == line.length ? absoluteColumn(view, event.clientX) : countColumn(line.text, view.state.tabSize, offset - line.from);
    return { line: line.number, col, off };
  }
  function rectangleSelectionStyle(view, event) {
    let start = getPos(view, event), startSel = view.state.selection;
    if (!start)
      return null;
    return {
      update(update) {
        if (update.docChanged) {
          let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);
          let newLine = update.state.doc.lineAt(newStart);
          start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };
          startSel = startSel.map(update.changes);
        }
      },
      get(event2, _extend, multiple) {
        let cur2 = getPos(view, event2);
        if (!cur2)
          return startSel;
        let ranges = rectangleFor(view.state, start, cur2);
        if (!ranges.length)
          return startSel;
        if (multiple)
          return EditorSelection.create(ranges.concat(startSel.ranges));
        else
          return EditorSelection.create(ranges);
      }
    };
  }
  function rectangularSelection(options) {
    let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || ((e) => e.altKey && e.button == 0);
    return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);
  }
  var keys = {
    Alt: [18, (e) => !!e.altKey],
    Control: [17, (e) => !!e.ctrlKey],
    Shift: [16, (e) => !!e.shiftKey],
    Meta: [91, (e) => !!e.metaKey]
  };
  var showCrosshair = { style: "cursor: crosshair" };
  function crosshairCursor(options = {}) {
    let [code, getter] = keys[options.key || "Alt"];
    let plugin = ViewPlugin.fromClass(class {
      constructor(view) {
        this.view = view;
        this.isDown = false;
      }
      set(isDown) {
        if (this.isDown != isDown) {
          this.isDown = isDown;
          this.view.update([]);
        }
      }
    }, {
      eventObservers: {
        keydown(e) {
          this.set(e.keyCode == code || getter(e));
        },
        keyup(e) {
          if (e.keyCode == code || !getter(e))
            this.set(false);
        },
        mousemove(e) {
          this.set(getter(e));
        }
      }
    });
    return [
      plugin,
      EditorView.contentAttributes.of((view) => {
        var _a2;
        return ((_a2 = view.plugin(plugin)) === null || _a2 === void 0 ? void 0 : _a2.isDown) ? showCrosshair : null;
      })
    ];
  }
  var Outside = "-10000px";
  var TooltipViewManager = class {
    constructor(view, facet, createTooltipView, removeTooltipView) {
      this.facet = facet;
      this.createTooltipView = createTooltipView;
      this.removeTooltipView = removeTooltipView;
      this.input = view.state.facet(facet);
      this.tooltips = this.input.filter((t2) => t2);
      let prev = null;
      this.tooltipViews = this.tooltips.map((t2) => prev = createTooltipView(t2, prev));
    }
    update(update, above) {
      var _a2;
      let input = update.state.facet(this.facet);
      let tooltips = input.filter((x) => x);
      if (input === this.input) {
        for (let t2 of this.tooltipViews)
          if (t2.update)
            t2.update(update);
        return false;
      }
      let tooltipViews = [], newAbove = above ? [] : null;
      for (let i = 0; i < tooltips.length; i++) {
        let tip = tooltips[i], known = -1;
        if (!tip)
          continue;
        for (let i2 = 0; i2 < this.tooltips.length; i2++) {
          let other = this.tooltips[i2];
          if (other && other.create == tip.create)
            known = i2;
        }
        if (known < 0) {
          tooltipViews[i] = this.createTooltipView(tip, i ? tooltipViews[i - 1] : null);
          if (newAbove)
            newAbove[i] = !!tip.above;
        } else {
          let tooltipView = tooltipViews[i] = this.tooltipViews[known];
          if (newAbove)
            newAbove[i] = above[known];
          if (tooltipView.update)
            tooltipView.update(update);
        }
      }
      for (let t2 of this.tooltipViews)
        if (tooltipViews.indexOf(t2) < 0) {
          this.removeTooltipView(t2);
          (_a2 = t2.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(t2);
        }
      if (above) {
        newAbove.forEach((val, i) => above[i] = val);
        above.length = newAbove.length;
      }
      this.input = input;
      this.tooltips = tooltips;
      this.tooltipViews = tooltipViews;
      return true;
    }
  };
  function windowSpace(view) {
    let docElt = view.dom.ownerDocument.documentElement;
    return { top: 0, left: 0, bottom: docElt.clientHeight, right: docElt.clientWidth };
  }
  var tooltipConfig = /* @__PURE__ */ Facet.define({
    combine: (values) => {
      var _a2, _b, _c;
      return {
        position: browser.ios ? "absolute" : ((_a2 = values.find((conf) => conf.position)) === null || _a2 === void 0 ? void 0 : _a2.position) || "fixed",
        parent: ((_b = values.find((conf) => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,
        tooltipSpace: ((_c = values.find((conf) => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace
      };
    }
  });
  var knownHeight = /* @__PURE__ */ new WeakMap();
  var tooltipPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.above = [];
      this.inView = true;
      this.madeAbsolute = false;
      this.lastTransaction = 0;
      this.measureTimeout = -1;
      let config2 = view.state.facet(tooltipConfig);
      this.position = config2.position;
      this.parent = config2.parent;
      this.classes = view.themeClasses;
      this.createContainer();
      this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
      this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(() => this.measureSoon()) : null;
      this.manager = new TooltipViewManager(view, showTooltip, (t2, p) => this.createTooltip(t2, p), (t2) => {
        if (this.resizeObserver)
          this.resizeObserver.unobserve(t2.dom);
        t2.dom.remove();
      });
      this.above = this.manager.tooltips.map((t2) => !!t2.above);
      this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((entries) => {
        if (Date.now() > this.lastTransaction - 50 && entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
          this.measureSoon();
      }, { threshold: [1] }) : null;
      this.observeIntersection();
      view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
      this.maybeMeasure();
    }
    createContainer() {
      if (this.parent) {
        this.container = document.createElement("div");
        this.container.style.position = "relative";
        this.container.className = this.view.themeClasses;
        this.parent.appendChild(this.container);
      } else {
        this.container = this.view.dom;
      }
    }
    observeIntersection() {
      if (this.intersectionObserver) {
        this.intersectionObserver.disconnect();
        for (let tooltip of this.manager.tooltipViews)
          this.intersectionObserver.observe(tooltip.dom);
      }
    }
    measureSoon() {
      if (this.measureTimeout < 0)
        this.measureTimeout = setTimeout(() => {
          this.measureTimeout = -1;
          this.maybeMeasure();
        }, 50);
    }
    update(update) {
      if (update.transactions.length)
        this.lastTransaction = Date.now();
      let updated = this.manager.update(update, this.above);
      if (updated)
        this.observeIntersection();
      let shouldMeasure = updated || update.geometryChanged;
      let newConfig = update.state.facet(tooltipConfig);
      if (newConfig.position != this.position && !this.madeAbsolute) {
        this.position = newConfig.position;
        for (let t2 of this.manager.tooltipViews)
          t2.dom.style.position = this.position;
        shouldMeasure = true;
      }
      if (newConfig.parent != this.parent) {
        if (this.parent)
          this.container.remove();
        this.parent = newConfig.parent;
        this.createContainer();
        for (let t2 of this.manager.tooltipViews)
          this.container.appendChild(t2.dom);
        shouldMeasure = true;
      } else if (this.parent && this.view.themeClasses != this.classes) {
        this.classes = this.container.className = this.view.themeClasses;
      }
      if (shouldMeasure)
        this.maybeMeasure();
    }
    createTooltip(tooltip, prev) {
      let tooltipView = tooltip.create(this.view);
      let before = prev ? prev.dom : null;
      tooltipView.dom.classList.add("cm-tooltip");
      if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
        let arrow = document.createElement("div");
        arrow.className = "cm-tooltip-arrow";
        tooltipView.dom.appendChild(arrow);
      }
      tooltipView.dom.style.position = this.position;
      tooltipView.dom.style.top = Outside;
      tooltipView.dom.style.left = "0px";
      this.container.insertBefore(tooltipView.dom, before);
      if (tooltipView.mount)
        tooltipView.mount(this.view);
      if (this.resizeObserver)
        this.resizeObserver.observe(tooltipView.dom);
      return tooltipView;
    }
    destroy() {
      var _a2, _b, _c;
      this.view.win.removeEventListener("resize", this.measureSoon);
      for (let tooltipView of this.manager.tooltipViews) {
        tooltipView.dom.remove();
        (_a2 = tooltipView.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(tooltipView);
      }
      if (this.parent)
        this.container.remove();
      (_b = this.resizeObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
      (_c = this.intersectionObserver) === null || _c === void 0 ? void 0 : _c.disconnect();
      clearTimeout(this.measureTimeout);
    }
    readMeasure() {
      let scaleX = 1, scaleY = 1, makeAbsolute = false;
      if (this.position == "fixed" && this.manager.tooltipViews.length) {
        let { dom } = this.manager.tooltipViews[0];
        if (browser.gecko) {
          makeAbsolute = dom.offsetParent != this.container.ownerDocument.body;
        } else if (dom.style.top == Outside && dom.style.left == "0px") {
          let rect = dom.getBoundingClientRect();
          makeAbsolute = Math.abs(rect.top + 1e4) > 1 || Math.abs(rect.left) > 1;
        }
      }
      if (makeAbsolute || this.position == "absolute") {
        if (this.parent) {
          let rect = this.parent.getBoundingClientRect();
          if (rect.width && rect.height) {
            scaleX = rect.width / this.parent.offsetWidth;
            scaleY = rect.height / this.parent.offsetHeight;
          }
        } else {
          ({ scaleX, scaleY } = this.view.viewState);
        }
      }
      let visible = this.view.scrollDOM.getBoundingClientRect(), margins = getScrollMargins(this.view);
      return {
        visible: {
          left: visible.left + margins.left,
          top: visible.top + margins.top,
          right: visible.right - margins.right,
          bottom: visible.bottom - margins.bottom
        },
        parent: this.parent ? this.container.getBoundingClientRect() : this.view.dom.getBoundingClientRect(),
        pos: this.manager.tooltips.map((t2, i) => {
          let tv = this.manager.tooltipViews[i];
          return tv.getCoords ? tv.getCoords(t2.pos) : this.view.coordsAtPos(t2.pos);
        }),
        size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
        space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
        scaleX,
        scaleY,
        makeAbsolute
      };
    }
    writeMeasure(measured) {
      var _a2;
      if (measured.makeAbsolute) {
        this.madeAbsolute = true;
        this.position = "absolute";
        for (let t2 of this.manager.tooltipViews)
          t2.dom.style.position = "absolute";
      }
      let { visible, space: space2, scaleX, scaleY } = measured;
      let others = [];
      for (let i = 0; i < this.manager.tooltips.length; i++) {
        let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;
        let pos = measured.pos[i], size = measured.size[i];
        if (!pos || tooltip.clip !== false && (pos.bottom <= Math.max(visible.top, space2.top) || pos.top >= Math.min(visible.bottom, space2.bottom) || pos.right < Math.max(visible.left, space2.left) - 0.1 || pos.left > Math.min(visible.right, space2.right) + 0.1)) {
          dom.style.top = Outside;
          continue;
        }
        let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
        let arrowHeight = arrow ? 7 : 0;
        let width = size.right - size.left, height = (_a2 = knownHeight.get(tView)) !== null && _a2 !== void 0 ? _a2 : size.bottom - size.top;
        let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;
        let left = size.width > space2.right - space2.left ? ltr ? space2.left : space2.right - size.width : ltr ? Math.max(space2.left, Math.min(pos.left - (arrow ? 14 : 0) + offset.x, space2.right - width)) : Math.min(Math.max(space2.left, pos.left - width + (arrow ? 14 : 0) - offset.x), space2.right - width);
        let above = this.above[i];
        if (!tooltip.strictSide && (above ? pos.top - height - arrowHeight - offset.y < space2.top : pos.bottom + height + arrowHeight + offset.y > space2.bottom) && above == space2.bottom - pos.bottom > pos.top - space2.top)
          above = this.above[i] = !above;
        let spaceVert = (above ? pos.top - space2.top : space2.bottom - pos.bottom) - arrowHeight;
        if (spaceVert < height && tView.resize !== false) {
          if (spaceVert < this.view.defaultLineHeight) {
            dom.style.top = Outside;
            continue;
          }
          knownHeight.set(tView, height);
          dom.style.height = (height = spaceVert) / scaleY + "px";
        } else if (dom.style.height) {
          dom.style.height = "";
        }
        let top2 = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
        let right = left + width;
        if (tView.overlap !== true) {
          for (let r of others)
            if (r.left < right && r.right > left && r.top < top2 + height && r.bottom > top2)
              top2 = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;
        }
        if (this.position == "absolute") {
          dom.style.top = (top2 - measured.parent.top) / scaleY + "px";
          setLeftStyle(dom, (left - measured.parent.left) / scaleX);
        } else {
          dom.style.top = top2 / scaleY + "px";
          setLeftStyle(dom, left / scaleX);
        }
        if (arrow) {
          let arrowLeft = pos.left + (ltr ? offset.x : -offset.x) - (left + 14 - 7);
          arrow.style.left = arrowLeft / scaleX + "px";
        }
        if (tView.overlap !== true)
          others.push({ left, top: top2, right, bottom: top2 + height });
        dom.classList.toggle("cm-tooltip-above", above);
        dom.classList.toggle("cm-tooltip-below", !above);
        if (tView.positioned)
          tView.positioned(measured.space);
      }
    }
    maybeMeasure() {
      if (this.manager.tooltips.length) {
        if (this.view.inView)
          this.view.requestMeasure(this.measureReq);
        if (this.inView != this.view.inView) {
          this.inView = this.view.inView;
          if (!this.inView)
            for (let tv of this.manager.tooltipViews)
              tv.dom.style.top = Outside;
        }
      }
    }
  }, {
    eventObservers: {
      scroll() {
        this.maybeMeasure();
      }
    }
  });
  function setLeftStyle(elt, value) {
    let current = parseInt(elt.style.left, 10);
    if (isNaN(current) || Math.abs(value - current) > 1)
      elt.style.left = value + "px";
  }
  var baseTheme = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-tooltip": {
      zIndex: 500,
      boxSizing: "border-box"
    },
    "&light .cm-tooltip": {
      border: "1px solid #bbb",
      backgroundColor: "#f5f5f5"
    },
    "&light .cm-tooltip-section:not(:first-child)": {
      borderTop: "1px solid #bbb"
    },
    "&dark .cm-tooltip": {
      backgroundColor: "#333338",
      color: "white"
    },
    ".cm-tooltip-arrow": {
      height: `${7}px`,
      width: `${7 * 2}px`,
      position: "absolute",
      zIndex: -1,
      overflow: "hidden",
      "&:before, &:after": {
        content: "''",
        position: "absolute",
        width: 0,
        height: 0,
        borderLeft: `${7}px solid transparent`,
        borderRight: `${7}px solid transparent`
      },
      ".cm-tooltip-above &": {
        bottom: `-${7}px`,
        "&:before": {
          borderTop: `${7}px solid #bbb`
        },
        "&:after": {
          borderTop: `${7}px solid #f5f5f5`,
          bottom: "1px"
        }
      },
      ".cm-tooltip-below &": {
        top: `-${7}px`,
        "&:before": {
          borderBottom: `${7}px solid #bbb`
        },
        "&:after": {
          borderBottom: `${7}px solid #f5f5f5`,
          top: "1px"
        }
      }
    },
    "&dark .cm-tooltip .cm-tooltip-arrow": {
      "&:before": {
        borderTopColor: "#333338",
        borderBottomColor: "#333338"
      },
      "&:after": {
        borderTopColor: "transparent",
        borderBottomColor: "transparent"
      }
    }
  });
  var noOffset = { x: 0, y: 0 };
  var showTooltip = /* @__PURE__ */ Facet.define({
    enables: [tooltipPlugin, baseTheme]
  });
  var showHoverTooltip = /* @__PURE__ */ Facet.define({
    combine: (inputs) => inputs.reduce((a, i) => a.concat(i), [])
  });
  var HoverTooltipHost = class _HoverTooltipHost {
    // Needs to be static so that host tooltip instances always match
    static create(view) {
      return new _HoverTooltipHost(view);
    }
    constructor(view) {
      this.view = view;
      this.mounted = false;
      this.dom = document.createElement("div");
      this.dom.classList.add("cm-tooltip-hover");
      this.manager = new TooltipViewManager(view, showHoverTooltip, (t2, p) => this.createHostedView(t2, p), (t2) => t2.dom.remove());
    }
    createHostedView(tooltip, prev) {
      let hostedView = tooltip.create(this.view);
      hostedView.dom.classList.add("cm-tooltip-section");
      this.dom.insertBefore(hostedView.dom, prev ? prev.dom.nextSibling : this.dom.firstChild);
      if (this.mounted && hostedView.mount)
        hostedView.mount(this.view);
      return hostedView;
    }
    mount(view) {
      for (let hostedView of this.manager.tooltipViews) {
        if (hostedView.mount)
          hostedView.mount(view);
      }
      this.mounted = true;
    }
    positioned(space2) {
      for (let hostedView of this.manager.tooltipViews) {
        if (hostedView.positioned)
          hostedView.positioned(space2);
      }
    }
    update(update) {
      this.manager.update(update);
    }
    destroy() {
      var _a2;
      for (let t2 of this.manager.tooltipViews)
        (_a2 = t2.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(t2);
    }
    passProp(name2) {
      let value = void 0;
      for (let view of this.manager.tooltipViews) {
        let given = view[name2];
        if (given !== void 0) {
          if (value === void 0)
            value = given;
          else if (value !== given)
            return void 0;
        }
      }
      return value;
    }
    get offset() {
      return this.passProp("offset");
    }
    get getCoords() {
      return this.passProp("getCoords");
    }
    get overlap() {
      return this.passProp("overlap");
    }
    get resize() {
      return this.passProp("resize");
    }
  };
  var showHoverTooltipHost = /* @__PURE__ */ showTooltip.compute([showHoverTooltip], (state) => {
    let tooltips = state.facet(showHoverTooltip);
    if (tooltips.length === 0)
      return null;
    return {
      pos: Math.min(...tooltips.map((t2) => t2.pos)),
      end: Math.max(...tooltips.map((t2) => {
        var _a2;
        return (_a2 = t2.end) !== null && _a2 !== void 0 ? _a2 : t2.pos;
      })),
      create: HoverTooltipHost.create,
      above: tooltips[0].above,
      arrow: tooltips.some((t2) => t2.arrow)
    };
  });
  var HoverPlugin = class {
    constructor(view, source, field, setHover, hoverTime) {
      this.view = view;
      this.source = source;
      this.field = field;
      this.setHover = setHover;
      this.hoverTime = hoverTime;
      this.hoverTimeout = -1;
      this.restartTimeout = -1;
      this.pending = null;
      this.lastMove = { x: 0, y: 0, target: view.dom, time: 0 };
      this.checkHover = this.checkHover.bind(this);
      view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
      view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
    }
    update() {
      if (this.pending) {
        this.pending = null;
        clearTimeout(this.restartTimeout);
        this.restartTimeout = setTimeout(() => this.startHover(), 20);
      }
    }
    get active() {
      return this.view.state.field(this.field);
    }
    checkHover() {
      this.hoverTimeout = -1;
      if (this.active.length)
        return;
      let hovered = Date.now() - this.lastMove.time;
      if (hovered < this.hoverTime)
        this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);
      else
        this.startHover();
    }
    startHover() {
      clearTimeout(this.restartTimeout);
      let { view, lastMove } = this;
      let desc = view.docView.nearest(lastMove.target);
      if (!desc)
        return;
      let pos, side = 1;
      if (desc instanceof WidgetView) {
        pos = desc.posAtStart;
      } else {
        pos = view.posAtCoords(lastMove);
        if (pos == null)
          return;
        let posCoords = view.coordsAtPos(pos);
        if (!posCoords || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom || lastMove.x < posCoords.left - view.defaultCharacterWidth || lastMove.x > posCoords.right + view.defaultCharacterWidth)
          return;
        let bidi = view.bidiSpans(view.state.doc.lineAt(pos)).find((s) => s.from <= pos && s.to >= pos);
        let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
        side = lastMove.x < posCoords.left ? -rtl : rtl;
      }
      let open = this.source(view, pos, side);
      if (open === null || open === void 0 ? void 0 : open.then) {
        let pending = this.pending = { pos };
        open.then((result) => {
          if (this.pending == pending) {
            this.pending = null;
            if (result && !(Array.isArray(result) && !result.length))
              view.dispatch({ effects: this.setHover.of(Array.isArray(result) ? result : [result]) });
          }
        }, (e) => logException(view.state, e, "hover tooltip"));
      } else if (open && !(Array.isArray(open) && !open.length)) {
        view.dispatch({ effects: this.setHover.of(Array.isArray(open) ? open : [open]) });
      }
    }
    get tooltip() {
      let plugin = this.view.plugin(tooltipPlugin);
      let index = plugin ? plugin.manager.tooltips.findIndex((t2) => t2.create == HoverTooltipHost.create) : -1;
      return index > -1 ? plugin.manager.tooltipViews[index] : null;
    }
    mousemove(event) {
      var _a2, _b;
      this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };
      if (this.hoverTimeout < 0)
        this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
      let { active, tooltip } = this;
      if (active.length && tooltip && !isInTooltip(tooltip.dom, event) || this.pending) {
        let { pos } = active[0] || this.pending, end = (_b = (_a2 = active[0]) === null || _a2 === void 0 ? void 0 : _a2.end) !== null && _b !== void 0 ? _b : pos;
        if (pos == end ? this.view.posAtCoords(this.lastMove) != pos : !isOverRange(this.view, pos, end, event.clientX, event.clientY)) {
          this.view.dispatch({ effects: this.setHover.of([]) });
          this.pending = null;
        }
      }
    }
    mouseleave(event) {
      clearTimeout(this.hoverTimeout);
      this.hoverTimeout = -1;
      let { active } = this;
      if (active.length) {
        let { tooltip } = this;
        let inTooltip = tooltip && tooltip.dom.contains(event.relatedTarget);
        if (!inTooltip)
          this.view.dispatch({ effects: this.setHover.of([]) });
        else
          this.watchTooltipLeave(tooltip.dom);
      }
    }
    watchTooltipLeave(tooltip) {
      let watch = (event) => {
        tooltip.removeEventListener("mouseleave", watch);
        if (this.active.length && !this.view.dom.contains(event.relatedTarget))
          this.view.dispatch({ effects: this.setHover.of([]) });
      };
      tooltip.addEventListener("mouseleave", watch);
    }
    destroy() {
      clearTimeout(this.hoverTimeout);
      this.view.dom.removeEventListener("mouseleave", this.mouseleave);
      this.view.dom.removeEventListener("mousemove", this.mousemove);
    }
  };
  var tooltipMargin = 4;
  function isInTooltip(tooltip, event) {
    let { left, right, top: top2, bottom } = tooltip.getBoundingClientRect(), arrow;
    if (arrow = tooltip.querySelector(".cm-tooltip-arrow")) {
      let arrowRect = arrow.getBoundingClientRect();
      top2 = Math.min(arrowRect.top, top2);
      bottom = Math.max(arrowRect.bottom, bottom);
    }
    return event.clientX >= left - tooltipMargin && event.clientX <= right + tooltipMargin && event.clientY >= top2 - tooltipMargin && event.clientY <= bottom + tooltipMargin;
  }
  function isOverRange(view, from, to, x, y, margin) {
    let rect = view.scrollDOM.getBoundingClientRect();
    let docBottom = view.documentTop + view.documentPadding.top + view.contentHeight;
    if (rect.left > x || rect.right < x || rect.top > y || Math.min(rect.bottom, docBottom) < y)
      return false;
    let pos = view.posAtCoords({ x, y }, false);
    return pos >= from && pos <= to;
  }
  function hoverTooltip(source, options = {}) {
    let setHover = StateEffect.define();
    let hoverState = StateField.define({
      create() {
        return [];
      },
      update(value, tr) {
        if (value.length) {
          if (options.hideOnChange && (tr.docChanged || tr.selection))
            value = [];
          else if (options.hideOn)
            value = value.filter((v) => !options.hideOn(tr, v));
          if (tr.docChanged) {
            let mapped = [];
            for (let tooltip of value) {
              let newPos = tr.changes.mapPos(tooltip.pos, -1, MapMode.TrackDel);
              if (newPos != null) {
                let copy = Object.assign(/* @__PURE__ */ Object.create(null), tooltip);
                copy.pos = newPos;
                if (copy.end != null)
                  copy.end = tr.changes.mapPos(copy.end);
                mapped.push(copy);
              }
            }
            value = mapped;
          }
        }
        for (let effect of tr.effects) {
          if (effect.is(setHover))
            value = effect.value;
          if (effect.is(closeHoverTooltipEffect))
            value = [];
        }
        return value;
      },
      provide: (f) => showHoverTooltip.from(f)
    });
    return {
      active: hoverState,
      extension: [
        hoverState,
        ViewPlugin.define((view) => new HoverPlugin(
          view,
          source,
          hoverState,
          setHover,
          options.hoverTime || 300
          /* Hover.Time */
        )),
        showHoverTooltipHost
      ]
    };
  }
  function getTooltip(view, tooltip) {
    let plugin = view.plugin(tooltipPlugin);
    if (!plugin)
      return null;
    let found = plugin.manager.tooltips.indexOf(tooltip);
    return found < 0 ? null : plugin.manager.tooltipViews[found];
  }
  var closeHoverTooltipEffect = /* @__PURE__ */ StateEffect.define();
  var panelConfig = /* @__PURE__ */ Facet.define({
    combine(configs) {
      let topContainer, bottomContainer;
      for (let c of configs) {
        topContainer = topContainer || c.topContainer;
        bottomContainer = bottomContainer || c.bottomContainer;
      }
      return { topContainer, bottomContainer };
    }
  });
  function getPanel(view, panel) {
    let plugin = view.plugin(panelPlugin);
    let index = plugin ? plugin.specs.indexOf(panel) : -1;
    return index > -1 ? plugin.panels[index] : null;
  }
  var panelPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view) {
      this.input = view.state.facet(showPanel);
      this.specs = this.input.filter((s) => s);
      this.panels = this.specs.map((spec) => spec(view));
      let conf = view.state.facet(panelConfig);
      this.top = new PanelGroup(view, true, conf.topContainer);
      this.bottom = new PanelGroup(view, false, conf.bottomContainer);
      this.top.sync(this.panels.filter((p) => p.top));
      this.bottom.sync(this.panels.filter((p) => !p.top));
      for (let p of this.panels) {
        p.dom.classList.add("cm-panel");
        if (p.mount)
          p.mount();
      }
    }
    update(update) {
      let conf = update.state.facet(panelConfig);
      if (this.top.container != conf.topContainer) {
        this.top.sync([]);
        this.top = new PanelGroup(update.view, true, conf.topContainer);
      }
      if (this.bottom.container != conf.bottomContainer) {
        this.bottom.sync([]);
        this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
      }
      this.top.syncClasses();
      this.bottom.syncClasses();
      let input = update.state.facet(showPanel);
      if (input != this.input) {
        let specs = input.filter((x) => x);
        let panels = [], top2 = [], bottom = [], mount = [];
        for (let spec of specs) {
          let known = this.specs.indexOf(spec), panel;
          if (known < 0) {
            panel = spec(update.view);
            mount.push(panel);
          } else {
            panel = this.panels[known];
            if (panel.update)
              panel.update(update);
          }
          panels.push(panel);
          (panel.top ? top2 : bottom).push(panel);
        }
        this.specs = specs;
        this.panels = panels;
        this.top.sync(top2);
        this.bottom.sync(bottom);
        for (let p of mount) {
          p.dom.classList.add("cm-panel");
          if (p.mount)
            p.mount();
        }
      } else {
        for (let p of this.panels)
          if (p.update)
            p.update(update);
      }
    }
    destroy() {
      this.top.sync([]);
      this.bottom.sync([]);
    }
  }, {
    provide: (plugin) => EditorView.scrollMargins.of((view) => {
      let value = view.plugin(plugin);
      return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };
    })
  });
  var PanelGroup = class {
    constructor(view, top2, container) {
      this.view = view;
      this.top = top2;
      this.container = container;
      this.dom = void 0;
      this.classes = "";
      this.panels = [];
      this.syncClasses();
    }
    sync(panels) {
      for (let p of this.panels)
        if (p.destroy && panels.indexOf(p) < 0)
          p.destroy();
      this.panels = panels;
      this.syncDOM();
    }
    syncDOM() {
      if (this.panels.length == 0) {
        if (this.dom) {
          this.dom.remove();
          this.dom = void 0;
        }
        return;
      }
      if (!this.dom) {
        this.dom = document.createElement("div");
        this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
        this.dom.style[this.top ? "top" : "bottom"] = "0";
        let parent = this.container || this.view.dom;
        parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
      }
      let curDOM = this.dom.firstChild;
      for (let panel of this.panels) {
        if (panel.dom.parentNode == this.dom) {
          while (curDOM != panel.dom)
            curDOM = rm(curDOM);
          curDOM = curDOM.nextSibling;
        } else {
          this.dom.insertBefore(panel.dom, curDOM);
        }
      }
      while (curDOM)
        curDOM = rm(curDOM);
    }
    scrollMargin() {
      return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
    }
    syncClasses() {
      if (!this.container || this.classes == this.view.themeClasses)
        return;
      for (let cls of this.classes.split(" "))
        if (cls)
          this.container.classList.remove(cls);
      for (let cls of (this.classes = this.view.themeClasses).split(" "))
        if (cls)
          this.container.classList.add(cls);
    }
  };
  function rm(node) {
    let next = node.nextSibling;
    node.remove();
    return next;
  }
  var showPanel = /* @__PURE__ */ Facet.define({
    enables: panelPlugin
  });
  var GutterMarker = class extends RangeValue {
    /**
    @internal
    */
    compare(other) {
      return this == other || this.constructor == other.constructor && this.eq(other);
    }
    /**
    Compare this marker to another marker of the same type.
    */
    eq(other) {
      return false;
    }
    /**
    Called if the marker has a `toDOM` method and its representation
    was removed from a gutter.
    */
    destroy(dom) {
    }
  };
  GutterMarker.prototype.elementClass = "";
  GutterMarker.prototype.toDOM = void 0;
  GutterMarker.prototype.mapMode = MapMode.TrackBefore;
  GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
  GutterMarker.prototype.point = true;
  var gutterLineClass = /* @__PURE__ */ Facet.define();
  var gutterWidgetClass = /* @__PURE__ */ Facet.define();
  var defaults = {
    class: "",
    renderEmptyElements: false,
    elementStyle: "",
    markers: () => RangeSet.empty,
    lineMarker: () => null,
    widgetMarker: () => null,
    lineMarkerChange: null,
    initialSpacer: null,
    updateSpacer: null,
    domEventHandlers: {}
  };
  var activeGutters = /* @__PURE__ */ Facet.define();
  function gutter(config2) {
    return [gutters(), activeGutters.of({ ...defaults, ...config2 })];
  }
  var unfixGutters = /* @__PURE__ */ Facet.define({
    combine: (values) => values.some((x) => x)
  });
  function gutters(config2) {
    let result = [
      gutterView
    ];
    if (config2 && config2.fixed === false)
      result.push(unfixGutters.of(true));
    return result;
  }
  var gutterView = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.prevViewport = view.viewport;
      this.dom = document.createElement("div");
      this.dom.className = "cm-gutters";
      this.dom.setAttribute("aria-hidden", "true");
      this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
      this.gutters = view.state.facet(activeGutters).map((conf) => new SingleGutterView(view, conf));
      for (let gutter2 of this.gutters)
        this.dom.appendChild(gutter2.dom);
      this.fixed = !view.state.facet(unfixGutters);
      if (this.fixed) {
        this.dom.style.position = "sticky";
      }
      this.syncGutters(false);
      view.scrollDOM.insertBefore(this.dom, view.contentDOM);
    }
    update(update) {
      if (this.updateGutters(update)) {
        let vpA = this.prevViewport, vpB = update.view.viewport;
        let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
        this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
      }
      if (update.geometryChanged) {
        this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
      }
      if (this.view.state.facet(unfixGutters) != !this.fixed) {
        this.fixed = !this.fixed;
        this.dom.style.position = this.fixed ? "sticky" : "";
      }
      this.prevViewport = update.view.viewport;
    }
    syncGutters(detach) {
      let after = this.dom.nextSibling;
      if (detach)
        this.dom.remove();
      let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
      let classSet = [];
      let contexts = this.gutters.map((gutter2) => new UpdateContext(gutter2, this.view.viewport, -this.view.documentPadding.top));
      for (let line of this.view.viewportLineBlocks) {
        if (classSet.length)
          classSet = [];
        if (Array.isArray(line.type)) {
          let first = true;
          for (let b of line.type) {
            if (b.type == BlockType.Text && first) {
              advanceCursor(lineClasses, classSet, b.from);
              for (let cx of contexts)
                cx.line(this.view, b, classSet);
              first = false;
            } else if (b.widget) {
              for (let cx of contexts)
                cx.widget(this.view, b);
            }
          }
        } else if (line.type == BlockType.Text) {
          advanceCursor(lineClasses, classSet, line.from);
          for (let cx of contexts)
            cx.line(this.view, line, classSet);
        } else if (line.widget) {
          for (let cx of contexts)
            cx.widget(this.view, line);
        }
      }
      for (let cx of contexts)
        cx.finish();
      if (detach)
        this.view.scrollDOM.insertBefore(this.dom, after);
    }
    updateGutters(update) {
      let prev = update.startState.facet(activeGutters), cur2 = update.state.facet(activeGutters);
      let change = update.docChanged || update.heightChanged || update.viewportChanged || !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
      if (prev == cur2) {
        for (let gutter2 of this.gutters)
          if (gutter2.update(update))
            change = true;
      } else {
        change = true;
        let gutters2 = [];
        for (let conf of cur2) {
          let known = prev.indexOf(conf);
          if (known < 0) {
            gutters2.push(new SingleGutterView(this.view, conf));
          } else {
            this.gutters[known].update(update);
            gutters2.push(this.gutters[known]);
          }
        }
        for (let g of this.gutters) {
          g.dom.remove();
          if (gutters2.indexOf(g) < 0)
            g.destroy();
        }
        for (let g of gutters2)
          this.dom.appendChild(g.dom);
        this.gutters = gutters2;
      }
      return change;
    }
    destroy() {
      for (let view of this.gutters)
        view.destroy();
      this.dom.remove();
    }
  }, {
    provide: (plugin) => EditorView.scrollMargins.of((view) => {
      let value = view.plugin(plugin);
      if (!value || value.gutters.length == 0 || !value.fixed)
        return null;
      return view.textDirection == Direction.LTR ? { left: value.dom.offsetWidth * view.scaleX } : { right: value.dom.offsetWidth * view.scaleX };
    })
  });
  function asArray2(val) {
    return Array.isArray(val) ? val : [val];
  }
  function advanceCursor(cursor, collect, pos) {
    while (cursor.value && cursor.from <= pos) {
      if (cursor.from == pos)
        collect.push(cursor.value);
      cursor.next();
    }
  }
  var UpdateContext = class {
    constructor(gutter2, viewport2, height) {
      this.gutter = gutter2;
      this.height = height;
      this.i = 0;
      this.cursor = RangeSet.iter(gutter2.markers, viewport2.from);
    }
    addElement(view, block, markers) {
      let { gutter: gutter2 } = this, above = (block.top - this.height) / view.scaleY, height = block.height / view.scaleY;
      if (this.i == gutter2.elements.length) {
        let newElt = new GutterElement(view, height, above, markers);
        gutter2.elements.push(newElt);
        gutter2.dom.appendChild(newElt.dom);
      } else {
        gutter2.elements[this.i].update(view, height, above, markers);
      }
      this.height = block.bottom;
      this.i++;
    }
    line(view, line, extraMarkers) {
      let localMarkers = [];
      advanceCursor(this.cursor, localMarkers, line.from);
      if (extraMarkers.length)
        localMarkers = localMarkers.concat(extraMarkers);
      let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
      if (forLine)
        localMarkers.unshift(forLine);
      let gutter2 = this.gutter;
      if (localMarkers.length == 0 && !gutter2.config.renderEmptyElements)
        return;
      this.addElement(view, line, localMarkers);
    }
    widget(view, block) {
      let marker = this.gutter.config.widgetMarker(view, block.widget, block), markers = marker ? [marker] : null;
      for (let cls of view.state.facet(gutterWidgetClass)) {
        let marker2 = cls(view, block.widget, block);
        if (marker2)
          (markers || (markers = [])).push(marker2);
      }
      if (markers)
        this.addElement(view, block, markers);
    }
    finish() {
      let gutter2 = this.gutter;
      while (gutter2.elements.length > this.i) {
        let last = gutter2.elements.pop();
        gutter2.dom.removeChild(last.dom);
        last.destroy();
      }
    }
  };
  var SingleGutterView = class {
    constructor(view, config2) {
      this.view = view;
      this.config = config2;
      this.elements = [];
      this.spacer = null;
      this.dom = document.createElement("div");
      this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
      for (let prop in config2.domEventHandlers) {
        this.dom.addEventListener(prop, (event) => {
          let target = event.target, y;
          if (target != this.dom && this.dom.contains(target)) {
            while (target.parentNode != this.dom)
              target = target.parentNode;
            let rect = target.getBoundingClientRect();
            y = (rect.top + rect.bottom) / 2;
          } else {
            y = event.clientY;
          }
          let line = view.lineBlockAtHeight(y - view.documentTop);
          if (config2.domEventHandlers[prop](view, line, event))
            event.preventDefault();
        });
      }
      this.markers = asArray2(config2.markers(view));
      if (config2.initialSpacer) {
        this.spacer = new GutterElement(view, 0, 0, [config2.initialSpacer(view)]);
        this.dom.appendChild(this.spacer.dom);
        this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
      }
    }
    update(update) {
      let prevMarkers = this.markers;
      this.markers = asArray2(this.config.markers(update.view));
      if (this.spacer && this.config.updateSpacer) {
        let updated = this.config.updateSpacer(this.spacer.markers[0], update);
        if (updated != this.spacer.markers[0])
          this.spacer.update(update.view, 0, 0, [updated]);
      }
      let vp = update.view.viewport;
      return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
    }
    destroy() {
      for (let elt of this.elements)
        elt.destroy();
    }
  };
  var GutterElement = class {
    constructor(view, height, above, markers) {
      this.height = -1;
      this.above = 0;
      this.markers = [];
      this.dom = document.createElement("div");
      this.dom.className = "cm-gutterElement";
      this.update(view, height, above, markers);
    }
    update(view, height, above, markers) {
      if (this.height != height) {
        this.height = height;
        this.dom.style.height = height + "px";
      }
      if (this.above != above)
        this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
      if (!sameMarkers(this.markers, markers))
        this.setMarkers(view, markers);
    }
    setMarkers(view, markers) {
      let cls = "cm-gutterElement", domPos = this.dom.firstChild;
      for (let iNew = 0, iOld = 0; ; ) {
        let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
        if (marker) {
          let c = marker.elementClass;
          if (c)
            cls += " " + c;
          for (let i = iOld; i < this.markers.length; i++)
            if (this.markers[i].compare(marker)) {
              skipTo = i;
              matched = true;
              break;
            }
        } else {
          skipTo = this.markers.length;
        }
        while (iOld < skipTo) {
          let next = this.markers[iOld++];
          if (next.toDOM) {
            next.destroy(domPos);
            let after = domPos.nextSibling;
            domPos.remove();
            domPos = after;
          }
        }
        if (!marker)
          break;
        if (marker.toDOM) {
          if (matched)
            domPos = domPos.nextSibling;
          else
            this.dom.insertBefore(marker.toDOM(view), domPos);
        }
        if (matched)
          iOld++;
      }
      this.dom.className = cls;
      this.markers = markers;
    }
    destroy() {
      this.setMarkers(null, []);
    }
  };
  function sameMarkers(a, b) {
    if (a.length != b.length)
      return false;
    for (let i = 0; i < a.length; i++)
      if (!a[i].compare(b[i]))
        return false;
    return true;
  }
  var lineNumberMarkers = /* @__PURE__ */ Facet.define();
  var lineNumberWidgetMarker = /* @__PURE__ */ Facet.define();
  var lineNumberConfig = /* @__PURE__ */ Facet.define({
    combine(values) {
      return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
        domEventHandlers(a, b) {
          let result = Object.assign({}, a);
          for (let event in b) {
            let exists = result[event], add3 = b[event];
            result[event] = exists ? (view, line, event2) => exists(view, line, event2) || add3(view, line, event2) : add3;
          }
          return result;
        }
      });
    }
  });
  var NumberMarker = class extends GutterMarker {
    constructor(number2) {
      super();
      this.number = number2;
    }
    eq(other) {
      return this.number == other.number;
    }
    toDOM() {
      return document.createTextNode(this.number);
    }
  };
  function formatNumber(view, number2) {
    return view.state.facet(lineNumberConfig).formatNumber(number2, view.state);
  }
  var lineNumberGutter = /* @__PURE__ */ activeGutters.compute([lineNumberConfig], (state) => ({
    class: "cm-lineNumbers",
    renderEmptyElements: false,
    markers(view) {
      return view.state.facet(lineNumberMarkers);
    },
    lineMarker(view, line, others) {
      if (others.some((m) => m.toDOM))
        return null;
      return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
    },
    widgetMarker: (view, widget, block) => {
      for (let m of view.state.facet(lineNumberWidgetMarker)) {
        let result = m(view, widget, block);
        if (result)
          return result;
      }
      return null;
    },
    lineMarkerChange: (update) => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),
    initialSpacer(view) {
      return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
    },
    updateSpacer(spacer, update) {
      let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
      return max == spacer.number ? spacer : new NumberMarker(max);
    },
    domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
  }));
  function lineNumbers(config2 = {}) {
    return [
      lineNumberConfig.of(config2),
      gutters(),
      lineNumberGutter
    ];
  }
  function maxLineNumber(lines) {
    let last = 9;
    while (last < lines)
      last = last * 10 + 9;
    return last;
  }
  var activeLineGutterMarker = /* @__PURE__ */ new class extends GutterMarker {
    constructor() {
      super(...arguments);
      this.elementClass = "cm-activeLineGutter";
    }
  }();
  var activeLineGutterHighlighter = /* @__PURE__ */ gutterLineClass.compute(["selection"], (state) => {
    let marks2 = [], last = -1;
    for (let range of state.selection.ranges) {
      let linePos = state.doc.lineAt(range.head).from;
      if (linePos > last) {
        last = linePos;
        marks2.push(activeLineGutterMarker.range(linePos));
      }
    }
    return RangeSet.of(marks2);
  });
  function highlightActiveLineGutter() {
    return activeLineGutterHighlighter;
  }

  // node_modules/@lezer/common/dist/index.js
  var DefaultBufferLength = 1024;
  var nextPropID = 0;
  var Range2 = class {
    constructor(from, to) {
      this.from = from;
      this.to = to;
    }
  };
  var NodeProp = class {
    /**
    Create a new node prop type.
    */
    constructor(config2 = {}) {
      this.id = nextPropID++;
      this.perNode = !!config2.perNode;
      this.deserialize = config2.deserialize || (() => {
        throw new Error("This node type doesn't define a deserialize function");
      });
    }
    /**
    This is meant to be used with
    [`NodeSet.extend`](#common.NodeSet.extend) or
    [`LRParser.configure`](#lr.ParserConfig.props) to compute
    prop values for each node type in the set. Takes a [match
    object](#common.NodeType^match) or function that returns undefined
    if the node type doesn't get this prop, and the prop's value if
    it does.
    */
    add(match) {
      if (this.perNode)
        throw new RangeError("Can't add per-node props to node types");
      if (typeof match != "function")
        match = NodeType.match(match);
      return (type) => {
        let result = match(type);
        return result === void 0 ? null : [this, result];
      };
    }
  };
  NodeProp.closedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
  NodeProp.openedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
  NodeProp.group = new NodeProp({ deserialize: (str) => str.split(" ") });
  NodeProp.isolate = new NodeProp({ deserialize: (value) => {
    if (value && value != "rtl" && value != "ltr" && value != "auto")
      throw new RangeError("Invalid value for isolate: " + value);
    return value || "auto";
  } });
  NodeProp.contextHash = new NodeProp({ perNode: true });
  NodeProp.lookAhead = new NodeProp({ perNode: true });
  NodeProp.mounted = new NodeProp({ perNode: true });
  var MountedTree = class {
    constructor(tree, overlay, parser2) {
      this.tree = tree;
      this.overlay = overlay;
      this.parser = parser2;
    }
    /**
    @internal
    */
    static get(tree) {
      return tree && tree.props && tree.props[NodeProp.mounted.id];
    }
  };
  var noProps = /* @__PURE__ */ Object.create(null);
  var NodeType = class _NodeType {
    /**
    @internal
    */
    constructor(name2, props, id2, flags = 0) {
      this.name = name2;
      this.props = props;
      this.id = id2;
      this.flags = flags;
    }
    /**
    Define a node type.
    */
    static define(spec) {
      let props = spec.props && spec.props.length ? /* @__PURE__ */ Object.create(null) : noProps;
      let flags = (spec.top ? 1 : 0) | (spec.skipped ? 2 : 0) | (spec.error ? 4 : 0) | (spec.name == null ? 8 : 0);
      let type = new _NodeType(spec.name || "", props, spec.id, flags);
      if (spec.props)
        for (let src of spec.props) {
          if (!Array.isArray(src))
            src = src(type);
          if (src) {
            if (src[0].perNode)
              throw new RangeError("Can't store a per-node prop on a node type");
            props[src[0].id] = src[1];
          }
        }
      return type;
    }
    /**
    Retrieves a node prop for this type. Will return `undefined` if
    the prop isn't present on this node.
    */
    prop(prop) {
      return this.props[prop.id];
    }
    /**
    True when this is the top node of a grammar.
    */
    get isTop() {
      return (this.flags & 1) > 0;
    }
    /**
    True when this node is produced by a skip rule.
    */
    get isSkipped() {
      return (this.flags & 2) > 0;
    }
    /**
    Indicates whether this is an error node.
    */
    get isError() {
      return (this.flags & 4) > 0;
    }
    /**
    When true, this node type doesn't correspond to a user-declared
    named node, for example because it is used to cache repetition.
    */
    get isAnonymous() {
      return (this.flags & 8) > 0;
    }
    /**
    Returns true when this node's name or one of its
    [groups](#common.NodeProp^group) matches the given string.
    */
    is(name2) {
      if (typeof name2 == "string") {
        if (this.name == name2)
          return true;
        let group = this.prop(NodeProp.group);
        return group ? group.indexOf(name2) > -1 : false;
      }
      return this.id == name2;
    }
    /**
    Create a function from node types to arbitrary values by
    specifying an object whose property names are node or
    [group](#common.NodeProp^group) names. Often useful with
    [`NodeProp.add`](#common.NodeProp.add). You can put multiple
    names, separated by spaces, in a single property name to map
    multiple node names to a single value.
    */
    static match(map) {
      let direct = /* @__PURE__ */ Object.create(null);
      for (let prop in map)
        for (let name2 of prop.split(" "))
          direct[name2] = map[prop];
      return (node) => {
        for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
          let found = direct[i < 0 ? node.name : groups[i]];
          if (found)
            return found;
        }
      };
    }
  };
  NodeType.none = new NodeType(
    "",
    /* @__PURE__ */ Object.create(null),
    0,
    8
    /* NodeFlag.Anonymous */
  );
  var NodeSet = class _NodeSet {
    /**
    Create a set with the given types. The `id` property of each
    type should correspond to its position within the array.
    */
    constructor(types2) {
      this.types = types2;
      for (let i = 0; i < types2.length; i++)
        if (types2[i].id != i)
          throw new RangeError("Node type ids should correspond to array positions when creating a node set");
    }
    /**
    Create a copy of this set with some node properties added. The
    arguments to this method can be created with
    [`NodeProp.add`](#common.NodeProp.add).
    */
    extend(...props) {
      let newTypes = [];
      for (let type of this.types) {
        let newProps = null;
        for (let source of props) {
          let add3 = source(type);
          if (add3) {
            if (!newProps)
              newProps = Object.assign({}, type.props);
            newProps[add3[0].id] = add3[1];
          }
        }
        newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
      }
      return new _NodeSet(newTypes);
    }
  };
  var CachedNode = /* @__PURE__ */ new WeakMap();
  var CachedInnerNode = /* @__PURE__ */ new WeakMap();
  var IterMode;
  (function(IterMode2) {
    IterMode2[IterMode2["ExcludeBuffers"] = 1] = "ExcludeBuffers";
    IterMode2[IterMode2["IncludeAnonymous"] = 2] = "IncludeAnonymous";
    IterMode2[IterMode2["IgnoreMounts"] = 4] = "IgnoreMounts";
    IterMode2[IterMode2["IgnoreOverlays"] = 8] = "IgnoreOverlays";
  })(IterMode || (IterMode = {}));
  var Tree = class _Tree {
    /**
    Construct a new tree. See also [`Tree.build`](#common.Tree^build).
    */
    constructor(type, children, positions, length2, props) {
      this.type = type;
      this.children = children;
      this.positions = positions;
      this.length = length2;
      this.props = null;
      if (props && props.length) {
        this.props = /* @__PURE__ */ Object.create(null);
        for (let [prop, value] of props)
          this.props[typeof prop == "number" ? prop : prop.id] = value;
      }
    }
    /**
    @internal
    */
    toString() {
      let mounted = MountedTree.get(this);
      if (mounted && !mounted.overlay)
        return mounted.tree.toString();
      let children = "";
      for (let ch of this.children) {
        let str = ch.toString();
        if (str) {
          if (children)
            children += ",";
          children += str;
        }
      }
      return !this.type.name ? children : (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? "(" + children + ")" : "");
    }
    /**
    Get a [tree cursor](#common.TreeCursor) positioned at the top of
    the tree. Mode can be used to [control](#common.IterMode) which
    nodes the cursor visits.
    */
    cursor(mode = 0) {
      return new TreeCursor(this.topNode, mode);
    }
    /**
    Get a [tree cursor](#common.TreeCursor) pointing into this tree
    at the given position and side (see
    [`moveTo`](#common.TreeCursor.moveTo).
    */
    cursorAt(pos, side = 0, mode = 0) {
      let scope = CachedNode.get(this) || this.topNode;
      let cursor = new TreeCursor(scope);
      cursor.moveTo(pos, side);
      CachedNode.set(this, cursor._tree);
      return cursor;
    }
    /**
    Get a [syntax node](#common.SyntaxNode) object for the top of the
    tree.
    */
    get topNode() {
      return new TreeNode(this, 0, 0, null);
    }
    /**
    Get the [syntax node](#common.SyntaxNode) at the given position.
    If `side` is -1, this will move into nodes that end at the
    position. If 1, it'll move into nodes that start at the
    position. With 0, it'll only enter nodes that cover the position
    from both sides.
    
    Note that this will not enter
    [overlays](#common.MountedTree.overlay), and you often want
    [`resolveInner`](#common.Tree.resolveInner) instead.
    */
    resolve(pos, side = 0) {
      let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
      CachedNode.set(this, node);
      return node;
    }
    /**
    Like [`resolve`](#common.Tree.resolve), but will enter
    [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
    pointing into the innermost overlaid tree at the given position
    (with parent links going through all parent structure, including
    the host trees).
    */
    resolveInner(pos, side = 0) {
      let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
      CachedInnerNode.set(this, node);
      return node;
    }
    /**
    In some situations, it can be useful to iterate through all
    nodes around a position, including those in overlays that don't
    directly cover the position. This method gives you an iterator
    that will produce all nodes, from small to big, around the given
    position.
    */
    resolveStack(pos, side = 0) {
      return stackIterator(this, pos, side);
    }
    /**
    Iterate over the tree and its children, calling `enter` for any
    node that touches the `from`/`to` region (if given) before
    running over such a node's children, and `leave` (if given) when
    leaving the node. When `enter` returns `false`, that node will
    not have its children iterated over (or `leave` called).
    */
    iterate(spec) {
      let { enter, leave, from = 0, to = this.length } = spec;
      let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;
      for (let c = this.cursor(mode | IterMode.IncludeAnonymous); ; ) {
        let entered = false;
        if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {
          if (c.firstChild())
            continue;
          entered = true;
        }
        for (; ; ) {
          if (entered && leave && (anon || !c.type.isAnonymous))
            leave(c);
          if (c.nextSibling())
            break;
          if (!c.parent())
            return;
          entered = true;
        }
      }
    }
    /**
    Get the value of the given [node prop](#common.NodeProp) for this
    node. Works with both per-node and per-type props.
    */
    prop(prop) {
      return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : void 0;
    }
    /**
    Returns the node's [per-node props](#common.NodeProp.perNode) in a
    format that can be passed to the [`Tree`](#common.Tree)
    constructor.
    */
    get propValues() {
      let result = [];
      if (this.props)
        for (let id2 in this.props)
          result.push([+id2, this.props[id2]]);
      return result;
    }
    /**
    Balance the direct children of this tree, producing a copy of
    which may have children grouped into subtrees with type
    [`NodeType.none`](#common.NodeType^none).
    */
    balance(config2 = {}) {
      return this.children.length <= 8 ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length2) => new _Tree(this.type, children, positions, length2, this.propValues), config2.makeTree || ((children, positions, length2) => new _Tree(NodeType.none, children, positions, length2)));
    }
    /**
    Build a tree from a postfix-ordered buffer of node information,
    or a cursor over such a buffer.
    */
    static build(data) {
      return buildTree(data);
    }
  };
  Tree.empty = new Tree(NodeType.none, [], [], 0);
  var FlatBufferCursor = class _FlatBufferCursor {
    constructor(buffer2, index) {
      this.buffer = buffer2;
      this.index = index;
    }
    get id() {
      return this.buffer[this.index - 4];
    }
    get start() {
      return this.buffer[this.index - 3];
    }
    get end() {
      return this.buffer[this.index - 2];
    }
    get size() {
      return this.buffer[this.index - 1];
    }
    get pos() {
      return this.index;
    }
    next() {
      this.index -= 4;
    }
    fork() {
      return new _FlatBufferCursor(this.buffer, this.index);
    }
  };
  var TreeBuffer = class _TreeBuffer {
    /**
    Create a tree buffer.
    */
    constructor(buffer2, length2, set) {
      this.buffer = buffer2;
      this.length = length2;
      this.set = set;
    }
    /**
    @internal
    */
    get type() {
      return NodeType.none;
    }
    /**
    @internal
    */
    toString() {
      let result = [];
      for (let index = 0; index < this.buffer.length; ) {
        result.push(this.childString(index));
        index = this.buffer[index + 3];
      }
      return result.join(",");
    }
    /**
    @internal
    */
    childString(index) {
      let id2 = this.buffer[index], endIndex = this.buffer[index + 3];
      let type = this.set.types[id2], result = type.name;
      if (/\W/.test(result) && !type.isError)
        result = JSON.stringify(result);
      index += 4;
      if (endIndex == index)
        return result;
      let children = [];
      while (index < endIndex) {
        children.push(this.childString(index));
        index = this.buffer[index + 3];
      }
      return result + "(" + children.join(",") + ")";
    }
    /**
    @internal
    */
    findChild(startIndex, endIndex, dir, pos, side) {
      let { buffer: buffer2 } = this, pick = -1;
      for (let i = startIndex; i != endIndex; i = buffer2[i + 3]) {
        if (checkSide(side, pos, buffer2[i + 1], buffer2[i + 2])) {
          pick = i;
          if (dir > 0)
            break;
        }
      }
      return pick;
    }
    /**
    @internal
    */
    slice(startI, endI, from) {
      let b = this.buffer;
      let copy = new Uint16Array(endI - startI), len = 0;
      for (let i = startI, j = 0; i < endI; ) {
        copy[j++] = b[i++];
        copy[j++] = b[i++] - from;
        let to = copy[j++] = b[i++] - from;
        copy[j++] = b[i++] - startI;
        len = Math.max(len, to);
      }
      return new _TreeBuffer(copy, len, this.set);
    }
  };
  function checkSide(side, pos, from, to) {
    switch (side) {
      case -2:
        return from < pos;
      case -1:
        return to >= pos && from < pos;
      case 0:
        return from < pos && to > pos;
      case 1:
        return from <= pos && to > pos;
      case 2:
        return to > pos;
      case 4:
        return true;
    }
  }
  function resolveNode(node, pos, side, overlays) {
    var _a2;
    while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {
      let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
      if (!parent)
        return node;
      node = parent;
    }
    let mode = overlays ? 0 : IterMode.IgnoreOverlays;
    if (overlays)
      for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
        if (scan instanceof TreeNode && scan.index < 0 && ((_a2 = parent.enter(pos, side, mode)) === null || _a2 === void 0 ? void 0 : _a2.from) != scan.from)
          node = parent;
      }
    for (; ; ) {
      let inner = node.enter(pos, side, mode);
      if (!inner)
        return node;
      node = inner;
    }
  }
  var BaseNode = class {
    cursor(mode = 0) {
      return new TreeCursor(this, mode);
    }
    getChild(type, before = null, after = null) {
      let r = getChildren(this, type, before, after);
      return r.length ? r[0] : null;
    }
    getChildren(type, before = null, after = null) {
      return getChildren(this, type, before, after);
    }
    resolve(pos, side = 0) {
      return resolveNode(this, pos, side, false);
    }
    resolveInner(pos, side = 0) {
      return resolveNode(this, pos, side, true);
    }
    matchContext(context2) {
      return matchNodeContext(this.parent, context2);
    }
    enterUnfinishedNodesBefore(pos) {
      let scan = this.childBefore(pos), node = this;
      while (scan) {
        let last = scan.lastChild;
        if (!last || last.to != scan.to)
          break;
        if (last.type.isError && last.from == last.to) {
          node = scan;
          scan = last.prevSibling;
        } else {
          scan = last;
        }
      }
      return node;
    }
    get node() {
      return this;
    }
    get next() {
      return this.parent;
    }
  };
  var TreeNode = class _TreeNode extends BaseNode {
    constructor(_tree, from, index, _parent) {
      super();
      this._tree = _tree;
      this.from = from;
      this.index = index;
      this._parent = _parent;
    }
    get type() {
      return this._tree.type;
    }
    get name() {
      return this._tree.type.name;
    }
    get to() {
      return this.from + this._tree.length;
    }
    nextChild(i, dir, pos, side, mode = 0) {
      for (let parent = this; ; ) {
        for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
          let next = children[i], start = positions[i] + parent.from;
          if (!checkSide(side, pos, start, start + next.length))
            continue;
          if (next instanceof TreeBuffer) {
            if (mode & IterMode.ExcludeBuffers)
              continue;
            let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
            if (index > -1)
              return new BufferNode(new BufferContext(parent, next, i, start), null, index);
          } else if (mode & IterMode.IncludeAnonymous || (!next.type.isAnonymous || hasChild(next))) {
            let mounted;
            if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)
              return new _TreeNode(mounted.tree, start, i, parent);
            let inner = new _TreeNode(next, start, i, parent);
            return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
          }
        }
        if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous)
          return null;
        if (parent.index >= 0)
          i = parent.index + dir;
        else
          i = dir < 0 ? -1 : parent._parent._tree.children.length;
        parent = parent._parent;
        if (!parent)
          return null;
      }
    }
    get firstChild() {
      return this.nextChild(
        0,
        1,
        0,
        4
        /* Side.DontCare */
      );
    }
    get lastChild() {
      return this.nextChild(
        this._tree.children.length - 1,
        -1,
        0,
        4
        /* Side.DontCare */
      );
    }
    childAfter(pos) {
      return this.nextChild(
        0,
        1,
        pos,
        2
        /* Side.After */
      );
    }
    childBefore(pos) {
      return this.nextChild(
        this._tree.children.length - 1,
        -1,
        pos,
        -2
        /* Side.Before */
      );
    }
    enter(pos, side, mode = 0) {
      let mounted;
      if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {
        let rPos = pos - this.from;
        for (let { from, to } of mounted.overlay) {
          if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to >= rPos : to > rPos))
            return new _TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
        }
      }
      return this.nextChild(0, 1, pos, side, mode);
    }
    nextSignificantParent() {
      let val = this;
      while (val.type.isAnonymous && val._parent)
        val = val._parent;
      return val;
    }
    get parent() {
      return this._parent ? this._parent.nextSignificantParent() : null;
    }
    get nextSibling() {
      return this._parent && this.index >= 0 ? this._parent.nextChild(
        this.index + 1,
        1,
        0,
        4
        /* Side.DontCare */
      ) : null;
    }
    get prevSibling() {
      return this._parent && this.index >= 0 ? this._parent.nextChild(
        this.index - 1,
        -1,
        0,
        4
        /* Side.DontCare */
      ) : null;
    }
    get tree() {
      return this._tree;
    }
    toTree() {
      return this._tree;
    }
    /**
    @internal
    */
    toString() {
      return this._tree.toString();
    }
  };
  function getChildren(node, type, before, after) {
    let cur2 = node.cursor(), result = [];
    if (!cur2.firstChild())
      return result;
    if (before != null)
      for (let found = false; !found; ) {
        found = cur2.type.is(before);
        if (!cur2.nextSibling())
          return result;
      }
    for (; ; ) {
      if (after != null && cur2.type.is(after))
        return result;
      if (cur2.type.is(type))
        result.push(cur2.node);
      if (!cur2.nextSibling())
        return after == null ? result : [];
    }
  }
  function matchNodeContext(node, context2, i = context2.length - 1) {
    for (let p = node; i >= 0; p = p.parent) {
      if (!p)
        return false;
      if (!p.type.isAnonymous) {
        if (context2[i] && context2[i] != p.name)
          return false;
        i--;
      }
    }
    return true;
  }
  var BufferContext = class {
    constructor(parent, buffer2, index, start) {
      this.parent = parent;
      this.buffer = buffer2;
      this.index = index;
      this.start = start;
    }
  };
  var BufferNode = class _BufferNode extends BaseNode {
    get name() {
      return this.type.name;
    }
    get from() {
      return this.context.start + this.context.buffer.buffer[this.index + 1];
    }
    get to() {
      return this.context.start + this.context.buffer.buffer[this.index + 2];
    }
    constructor(context2, _parent, index) {
      super();
      this.context = context2;
      this._parent = _parent;
      this.index = index;
      this.type = context2.buffer.set.types[context2.buffer.buffer[index]];
    }
    child(dir, pos, side) {
      let { buffer: buffer2 } = this.context;
      let index = buffer2.findChild(this.index + 4, buffer2.buffer[this.index + 3], dir, pos - this.context.start, side);
      return index < 0 ? null : new _BufferNode(this.context, this, index);
    }
    get firstChild() {
      return this.child(
        1,
        0,
        4
        /* Side.DontCare */
      );
    }
    get lastChild() {
      return this.child(
        -1,
        0,
        4
        /* Side.DontCare */
      );
    }
    childAfter(pos) {
      return this.child(
        1,
        pos,
        2
        /* Side.After */
      );
    }
    childBefore(pos) {
      return this.child(
        -1,
        pos,
        -2
        /* Side.Before */
      );
    }
    enter(pos, side, mode = 0) {
      if (mode & IterMode.ExcludeBuffers)
        return null;
      let { buffer: buffer2 } = this.context;
      let index = buffer2.findChild(this.index + 4, buffer2.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
      return index < 0 ? null : new _BufferNode(this.context, this, index);
    }
    get parent() {
      return this._parent || this.context.parent.nextSignificantParent();
    }
    externalSibling(dir) {
      return this._parent ? null : this.context.parent.nextChild(
        this.context.index + dir,
        dir,
        0,
        4
        /* Side.DontCare */
      );
    }
    get nextSibling() {
      let { buffer: buffer2 } = this.context;
      let after = buffer2.buffer[this.index + 3];
      if (after < (this._parent ? buffer2.buffer[this._parent.index + 3] : buffer2.buffer.length))
        return new _BufferNode(this.context, this._parent, after);
      return this.externalSibling(1);
    }
    get prevSibling() {
      let { buffer: buffer2 } = this.context;
      let parentStart = this._parent ? this._parent.index + 4 : 0;
      if (this.index == parentStart)
        return this.externalSibling(-1);
      return new _BufferNode(this.context, this._parent, buffer2.findChild(
        parentStart,
        this.index,
        -1,
        0,
        4
        /* Side.DontCare */
      ));
    }
    get tree() {
      return null;
    }
    toTree() {
      let children = [], positions = [];
      let { buffer: buffer2 } = this.context;
      let startI = this.index + 4, endI = buffer2.buffer[this.index + 3];
      if (endI > startI) {
        let from = buffer2.buffer[this.index + 1];
        children.push(buffer2.slice(startI, endI, from));
        positions.push(0);
      }
      return new Tree(this.type, children, positions, this.to - this.from);
    }
    /**
    @internal
    */
    toString() {
      return this.context.buffer.childString(this.index);
    }
  };
  function iterStack(heads) {
    if (!heads.length)
      return null;
    let pick = 0, picked = heads[0];
    for (let i = 1; i < heads.length; i++) {
      let node = heads[i];
      if (node.from > picked.from || node.to < picked.to) {
        picked = node;
        pick = i;
      }
    }
    let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;
    let newHeads = heads.slice();
    if (next)
      newHeads[pick] = next;
    else
      newHeads.splice(pick, 1);
    return new StackIterator(newHeads, picked);
  }
  var StackIterator = class {
    constructor(heads, node) {
      this.heads = heads;
      this.node = node;
    }
    get next() {
      return iterStack(this.heads);
    }
  };
  function stackIterator(tree, pos, side) {
    let inner = tree.resolveInner(pos, side), layers = null;
    for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {
      if (scan.index < 0) {
        let parent = scan.parent;
        (layers || (layers = [inner])).push(parent.resolve(pos, side));
        scan = parent;
      } else {
        let mount = MountedTree.get(scan.tree);
        if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {
          let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);
          (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));
        }
      }
    }
    return layers ? iterStack(layers) : inner;
  }
  var TreeCursor = class {
    /**
    Shorthand for `.type.name`.
    */
    get name() {
      return this.type.name;
    }
    /**
    @internal
    */
    constructor(node, mode = 0) {
      this.mode = mode;
      this.buffer = null;
      this.stack = [];
      this.index = 0;
      this.bufferNode = null;
      if (node instanceof TreeNode) {
        this.yieldNode(node);
      } else {
        this._tree = node.context.parent;
        this.buffer = node.context;
        for (let n = node._parent; n; n = n._parent)
          this.stack.unshift(n.index);
        this.bufferNode = node;
        this.yieldBuf(node.index);
      }
    }
    yieldNode(node) {
      if (!node)
        return false;
      this._tree = node;
      this.type = node.type;
      this.from = node.from;
      this.to = node.to;
      return true;
    }
    yieldBuf(index, type) {
      this.index = index;
      let { start, buffer: buffer2 } = this.buffer;
      this.type = type || buffer2.set.types[buffer2.buffer[index]];
      this.from = start + buffer2.buffer[index + 1];
      this.to = start + buffer2.buffer[index + 2];
      return true;
    }
    /**
    @internal
    */
    yield(node) {
      if (!node)
        return false;
      if (node instanceof TreeNode) {
        this.buffer = null;
        return this.yieldNode(node);
      }
      this.buffer = node.context;
      return this.yieldBuf(node.index, node.type);
    }
    /**
    @internal
    */
    toString() {
      return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
    }
    /**
    @internal
    */
    enterChild(dir, pos, side) {
      if (!this.buffer)
        return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
      let { buffer: buffer2 } = this.buffer;
      let index = buffer2.findChild(this.index + 4, buffer2.buffer[this.index + 3], dir, pos - this.buffer.start, side);
      if (index < 0)
        return false;
      this.stack.push(this.index);
      return this.yieldBuf(index);
    }
    /**
    Move the cursor to this node's first child. When this returns
    false, the node has no child, and the cursor has not been moved.
    */
    firstChild() {
      return this.enterChild(
        1,
        0,
        4
        /* Side.DontCare */
      );
    }
    /**
    Move the cursor to this node's last child.
    */
    lastChild() {
      return this.enterChild(
        -1,
        0,
        4
        /* Side.DontCare */
      );
    }
    /**
    Move the cursor to the first child that ends after `pos`.
    */
    childAfter(pos) {
      return this.enterChild(
        1,
        pos,
        2
        /* Side.After */
      );
    }
    /**
    Move to the last child that starts before `pos`.
    */
    childBefore(pos) {
      return this.enterChild(
        -1,
        pos,
        -2
        /* Side.Before */
      );
    }
    /**
    Move the cursor to the child around `pos`. If side is -1 the
    child may end at that position, when 1 it may start there. This
    will also enter [overlaid](#common.MountedTree.overlay)
    [mounted](#common.NodeProp^mounted) trees unless `overlays` is
    set to false.
    */
    enter(pos, side, mode = this.mode) {
      if (!this.buffer)
        return this.yield(this._tree.enter(pos, side, mode));
      return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
    }
    /**
    Move to the node's parent node, if this isn't the top node.
    */
    parent() {
      if (!this.buffer)
        return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);
      if (this.stack.length)
        return this.yieldBuf(this.stack.pop());
      let parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
      this.buffer = null;
      return this.yieldNode(parent);
    }
    /**
    @internal
    */
    sibling(dir) {
      if (!this.buffer)
        return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4, this.mode));
      let { buffer: buffer2 } = this.buffer, d = this.stack.length - 1;
      if (dir < 0) {
        let parentStart = d < 0 ? 0 : this.stack[d] + 4;
        if (this.index != parentStart)
          return this.yieldBuf(buffer2.findChild(
            parentStart,
            this.index,
            -1,
            0,
            4
            /* Side.DontCare */
          ));
      } else {
        let after = buffer2.buffer[this.index + 3];
        if (after < (d < 0 ? buffer2.buffer.length : buffer2.buffer[this.stack[d] + 3]))
          return this.yieldBuf(after);
      }
      return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4, this.mode)) : false;
    }
    /**
    Move to this node's next sibling, if any.
    */
    nextSibling() {
      return this.sibling(1);
    }
    /**
    Move to this node's previous sibling, if any.
    */
    prevSibling() {
      return this.sibling(-1);
    }
    atLastNode(dir) {
      let index, parent, { buffer: buffer2 } = this;
      if (buffer2) {
        if (dir > 0) {
          if (this.index < buffer2.buffer.buffer.length)
            return false;
        } else {
          for (let i = 0; i < this.index; i++)
            if (buffer2.buffer.buffer[i + 3] < this.index)
              return false;
        }
        ({ index, parent } = buffer2);
      } else {
        ({ index, _parent: parent } = this._tree);
      }
      for (; parent; { index, _parent: parent } = parent) {
        if (index > -1)
          for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
            let child = parent._tree.children[i];
            if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child))
              return false;
          }
      }
      return true;
    }
    move(dir, enter) {
      if (enter && this.enterChild(
        dir,
        0,
        4
        /* Side.DontCare */
      ))
        return true;
      for (; ; ) {
        if (this.sibling(dir))
          return true;
        if (this.atLastNode(dir) || !this.parent())
          return false;
      }
    }
    /**
    Move to the next node in a
    [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
    traversal, going from a node to its first child or, if the
    current node is empty or `enter` is false, its next sibling or
    the next sibling of the first parent node that has one.
    */
    next(enter = true) {
      return this.move(1, enter);
    }
    /**
    Move to the next node in a last-to-first pre-order traversal. A
    node is followed by its last child or, if it has none, its
    previous sibling or the previous sibling of the first parent
    node that has one.
    */
    prev(enter = true) {
      return this.move(-1, enter);
    }
    /**
    Move the cursor to the innermost node that covers `pos`. If
    `side` is -1, it will enter nodes that end at `pos`. If it is 1,
    it will enter nodes that start at `pos`.
    */
    moveTo(pos, side = 0) {
      while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos))
        if (!this.parent())
          break;
      while (this.enterChild(1, pos, side)) {
      }
      return this;
    }
    /**
    Get a [syntax node](#common.SyntaxNode) at the cursor's current
    position.
    */
    get node() {
      if (!this.buffer)
        return this._tree;
      let cache3 = this.bufferNode, result = null, depth2 = 0;
      if (cache3 && cache3.context == this.buffer) {
        scan: for (let index = this.index, d = this.stack.length; d >= 0; ) {
          for (let c = cache3; c; c = c._parent)
            if (c.index == index) {
              if (index == this.index)
                return c;
              result = c;
              depth2 = d + 1;
              break scan;
            }
          index = this.stack[--d];
        }
      }
      for (let i = depth2; i < this.stack.length; i++)
        result = new BufferNode(this.buffer, result, this.stack[i]);
      return this.bufferNode = new BufferNode(this.buffer, result, this.index);
    }
    /**
    Get the [tree](#common.Tree) that represents the current node, if
    any. Will return null when the node is in a [tree
    buffer](#common.TreeBuffer).
    */
    get tree() {
      return this.buffer ? null : this._tree._tree;
    }
    /**
    Iterate over the current node and all its descendants, calling
    `enter` when entering a node and `leave`, if given, when leaving
    one. When `enter` returns `false`, any children of that node are
    skipped, and `leave` isn't called for it.
    */
    iterate(enter, leave) {
      for (let depth2 = 0; ; ) {
        let mustLeave = false;
        if (this.type.isAnonymous || enter(this) !== false) {
          if (this.firstChild()) {
            depth2++;
            continue;
          }
          if (!this.type.isAnonymous)
            mustLeave = true;
        }
        for (; ; ) {
          if (mustLeave && leave)
            leave(this);
          mustLeave = this.type.isAnonymous;
          if (!depth2)
            return;
          if (this.nextSibling())
            break;
          this.parent();
          depth2--;
          mustLeave = true;
        }
      }
    }
    /**
    Test whether the current node matches a given context—a sequence
    of direct parent node names. Empty strings in the context array
    are treated as wildcards.
    */
    matchContext(context2) {
      if (!this.buffer)
        return matchNodeContext(this.node.parent, context2);
      let { buffer: buffer2 } = this.buffer, { types: types2 } = buffer2.set;
      for (let i = context2.length - 1, d = this.stack.length - 1; i >= 0; d--) {
        if (d < 0)
          return matchNodeContext(this._tree, context2, i);
        let type = types2[buffer2.buffer[this.stack[d]]];
        if (!type.isAnonymous) {
          if (context2[i] && context2[i] != type.name)
            return false;
          i--;
        }
      }
      return true;
    }
  };
  function hasChild(tree) {
    return tree.children.some((ch) => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
  }
  function buildTree(data) {
    var _a2;
    let { buffer: buffer2, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
    let cursor = Array.isArray(buffer2) ? new FlatBufferCursor(buffer2, buffer2.length) : buffer2;
    let types2 = nodeSet.types;
    let contextHash = 0, lookAhead = 0;
    function takeNode(parentStart, minPos, children2, positions2, inRepeat, depth2) {
      let { id: id2, start, end, size } = cursor;
      let lookAheadAtStart = lookAhead, contextAtStart = contextHash;
      while (size < 0) {
        cursor.next();
        if (size == -1) {
          let node2 = reused[id2];
          children2.push(node2);
          positions2.push(start - parentStart);
          return;
        } else if (size == -3) {
          contextHash = id2;
          return;
        } else if (size == -4) {
          lookAhead = id2;
          return;
        } else {
          throw new RangeError(`Unrecognized record size: ${size}`);
        }
      }
      let type = types2[id2], node, buffer3;
      let startPos = start - parentStart;
      if (end - start <= maxBufferLength && (buffer3 = findBufferSize(cursor.pos - minPos, inRepeat))) {
        let data2 = new Uint16Array(buffer3.size - buffer3.skip);
        let endPos = cursor.pos - buffer3.size, index = data2.length;
        while (cursor.pos > endPos)
          index = copyToBuffer(buffer3.start, data2, index);
        node = new TreeBuffer(data2, end - buffer3.start, nodeSet);
        startPos = buffer3.start - parentStart;
      } else {
        let endPos = cursor.pos - size;
        cursor.next();
        let localChildren = [], localPositions = [];
        let localInRepeat = id2 >= minRepeatType ? id2 : -1;
        let lastGroup = 0, lastEnd = end;
        while (cursor.pos > endPos) {
          if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
            if (cursor.end <= lastEnd - maxBufferLength) {
              makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
              lastGroup = localChildren.length;
              lastEnd = cursor.end;
            }
            cursor.next();
          } else if (depth2 > 2500) {
            takeFlatNode(start, endPos, localChildren, localPositions);
          } else {
            takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth2 + 1);
          }
        }
        if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
          makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
        localChildren.reverse();
        localPositions.reverse();
        if (localInRepeat > -1 && lastGroup > 0) {
          let make = makeBalanced(type, contextAtStart);
          node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
        } else {
          node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end, contextAtStart);
        }
      }
      children2.push(node);
      positions2.push(startPos);
    }
    function takeFlatNode(parentStart, minPos, children2, positions2) {
      let nodes = [];
      let nodeCount = 0, stopAt = -1;
      while (cursor.pos > minPos) {
        let { id: id2, start, end, size } = cursor;
        if (size > 4) {
          cursor.next();
        } else if (stopAt > -1 && start < stopAt) {
          break;
        } else {
          if (stopAt < 0)
            stopAt = end - maxBufferLength;
          nodes.push(id2, start, end);
          nodeCount++;
          cursor.next();
        }
      }
      if (nodeCount) {
        let buffer3 = new Uint16Array(nodeCount * 4);
        let start = nodes[nodes.length - 2];
        for (let i = nodes.length - 3, j = 0; i >= 0; i -= 3) {
          buffer3[j++] = nodes[i];
          buffer3[j++] = nodes[i + 1] - start;
          buffer3[j++] = nodes[i + 2] - start;
          buffer3[j++] = j;
        }
        children2.push(new TreeBuffer(buffer3, nodes[2] - start, nodeSet));
        positions2.push(start - parentStart);
      }
    }
    function makeBalanced(type, contextHash2) {
      return (children2, positions2, length3) => {
        let lookAhead2 = 0, lastI = children2.length - 1, last, lookAheadProp;
        if (lastI >= 0 && (last = children2[lastI]) instanceof Tree) {
          if (!lastI && last.type == type && last.length == length3)
            return last;
          if (lookAheadProp = last.prop(NodeProp.lookAhead))
            lookAhead2 = positions2[lastI] + last.length + lookAheadProp;
        }
        return makeTree(type, children2, positions2, length3, lookAhead2, contextHash2);
      };
    }
    function makeRepeatLeaf(children2, positions2, base2, i, from, to, type, lookAhead2, contextHash2) {
      let localChildren = [], localPositions = [];
      while (children2.length > i) {
        localChildren.push(children2.pop());
        localPositions.push(positions2.pop() + base2 - from);
      }
      children2.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead2 - to, contextHash2));
      positions2.push(from - base2);
    }
    function makeTree(type, children2, positions2, length3, lookAhead2, contextHash2, props) {
      if (contextHash2) {
        let pair2 = [NodeProp.contextHash, contextHash2];
        props = props ? [pair2].concat(props) : [pair2];
      }
      if (lookAhead2 > 25) {
        let pair2 = [NodeProp.lookAhead, lookAhead2];
        props = props ? [pair2].concat(props) : [pair2];
      }
      return new Tree(type, children2, positions2, length3, props);
    }
    function findBufferSize(maxSize, inRepeat) {
      let fork = cursor.fork();
      let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
      let result = { size: 0, start: 0, skip: 0 };
      scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos; ) {
        let nodeSize2 = fork.size;
        if (fork.id == inRepeat && nodeSize2 >= 0) {
          result.size = size;
          result.start = start;
          result.skip = skip;
          skip += 4;
          size += 4;
          fork.next();
          continue;
        }
        let startPos = fork.pos - nodeSize2;
        if (nodeSize2 < 0 || startPos < minPos || fork.start < minStart)
          break;
        let localSkipped = fork.id >= minRepeatType ? 4 : 0;
        let nodeStart2 = fork.start;
        fork.next();
        while (fork.pos > startPos) {
          if (fork.size < 0) {
            if (fork.size == -3)
              localSkipped += 4;
            else
              break scan;
          } else if (fork.id >= minRepeatType) {
            localSkipped += 4;
          }
          fork.next();
        }
        start = nodeStart2;
        size += nodeSize2;
        skip += localSkipped;
      }
      if (inRepeat < 0 || size == maxSize) {
        result.size = size;
        result.start = start;
        result.skip = skip;
      }
      return result.size > 4 ? result : void 0;
    }
    function copyToBuffer(bufferStart, buffer3, index) {
      let { id: id2, start, end, size } = cursor;
      cursor.next();
      if (size >= 0 && id2 < minRepeatType) {
        let startIndex = index;
        if (size > 4) {
          let endPos = cursor.pos - (size - 4);
          while (cursor.pos > endPos)
            index = copyToBuffer(bufferStart, buffer3, index);
        }
        buffer3[--index] = startIndex;
        buffer3[--index] = end - bufferStart;
        buffer3[--index] = start - bufferStart;
        buffer3[--index] = id2;
      } else if (size == -3) {
        contextHash = id2;
      } else if (size == -4) {
        lookAhead = id2;
      }
      return index;
    }
    let children = [], positions = [];
    while (cursor.pos > 0)
      takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);
    let length2 = (_a2 = data.length) !== null && _a2 !== void 0 ? _a2 : children.length ? positions[0] + children[0].length : 0;
    return new Tree(types2[data.topID], children.reverse(), positions.reverse(), length2);
  }
  var nodeSizeCache = /* @__PURE__ */ new WeakMap();
  function nodeSize(balanceType, node) {
    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
      return 1;
    let size = nodeSizeCache.get(node);
    if (size == null) {
      size = 1;
      for (let child of node.children) {
        if (child.type != balanceType || !(child instanceof Tree)) {
          size = 1;
          break;
        }
        size += nodeSize(balanceType, child);
      }
      nodeSizeCache.set(node, size);
    }
    return size;
  }
  function balanceRange(balanceType, children, positions, from, to, start, length2, mkTop, mkTree) {
    let total = 0;
    for (let i = from; i < to; i++)
      total += nodeSize(balanceType, children[i]);
    let maxChild = Math.ceil(
      total * 1.5 / 8
      /* Balance.BranchFactor */
    );
    let localChildren = [], localPositions = [];
    function divide(children2, positions2, from2, to2, offset) {
      for (let i = from2; i < to2; ) {
        let groupFrom = i, groupStart = positions2[i], groupSize = nodeSize(balanceType, children2[i]);
        i++;
        for (; i < to2; i++) {
          let nextSize = nodeSize(balanceType, children2[i]);
          if (groupSize + nextSize >= maxChild)
            break;
          groupSize += nextSize;
        }
        if (i == groupFrom + 1) {
          if (groupSize > maxChild) {
            let only = children2[groupFrom];
            divide(only.children, only.positions, 0, only.children.length, positions2[groupFrom] + offset);
            continue;
          }
          localChildren.push(children2[groupFrom]);
        } else {
          let length3 = positions2[i - 1] + children2[i - 1].length - groupStart;
          localChildren.push(balanceRange(balanceType, children2, positions2, groupFrom, i, groupStart, length3, null, mkTree));
        }
        localPositions.push(groupStart + offset - start);
      }
    }
    divide(children, positions, from, to, 0);
    return (mkTop || mkTree)(localChildren, localPositions, length2);
  }
  var NodeWeakMap = class {
    constructor() {
      this.map = /* @__PURE__ */ new WeakMap();
    }
    setBuffer(buffer2, index, value) {
      let inner = this.map.get(buffer2);
      if (!inner)
        this.map.set(buffer2, inner = /* @__PURE__ */ new Map());
      inner.set(index, value);
    }
    getBuffer(buffer2, index) {
      let inner = this.map.get(buffer2);
      return inner && inner.get(index);
    }
    /**
    Set the value for this syntax node.
    */
    set(node, value) {
      if (node instanceof BufferNode)
        this.setBuffer(node.context.buffer, node.index, value);
      else if (node instanceof TreeNode)
        this.map.set(node.tree, value);
    }
    /**
    Retrieve value for this syntax node, if it exists in the map.
    */
    get(node) {
      return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index) : node instanceof TreeNode ? this.map.get(node.tree) : void 0;
    }
    /**
    Set the value for the node that a cursor currently points to.
    */
    cursorSet(cursor, value) {
      if (cursor.buffer)
        this.setBuffer(cursor.buffer.buffer, cursor.index, value);
      else
        this.map.set(cursor.tree, value);
    }
    /**
    Retrieve the value for the node that a cursor currently points
    to.
    */
    cursorGet(cursor) {
      return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);
    }
  };
  var TreeFragment = class _TreeFragment {
    /**
    Construct a tree fragment. You'll usually want to use
    [`addTree`](#common.TreeFragment^addTree) and
    [`applyChanges`](#common.TreeFragment^applyChanges) instead of
    calling this directly.
    */
    constructor(from, to, tree, offset, openStart = false, openEnd = false) {
      this.from = from;
      this.to = to;
      this.tree = tree;
      this.offset = offset;
      this.open = (openStart ? 1 : 0) | (openEnd ? 2 : 0);
    }
    /**
    Whether the start of the fragment represents the start of a
    parse, or the end of a change. (In the second case, it may not
    be safe to reuse some nodes at the start, depending on the
    parsing algorithm.)
    */
    get openStart() {
      return (this.open & 1) > 0;
    }
    /**
    Whether the end of the fragment represents the end of a
    full-document parse, or the start of a change.
    */
    get openEnd() {
      return (this.open & 2) > 0;
    }
    /**
    Create a set of fragments from a freshly parsed tree, or update
    an existing set of fragments by replacing the ones that overlap
    with a tree with content from the new tree. When `partial` is
    true, the parse is treated as incomplete, and the resulting
    fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
    true.
    */
    static addTree(tree, fragments = [], partial = false) {
      let result = [new _TreeFragment(0, tree.length, tree, 0, false, partial)];
      for (let f of fragments)
        if (f.to > tree.length)
          result.push(f);
      return result;
    }
    /**
    Apply a set of edits to an array of fragments, removing or
    splitting fragments as necessary to remove edited ranges, and
    adjusting offsets for fragments that moved.
    */
    static applyChanges(fragments, changes, minGap = 128) {
      if (!changes.length)
        return fragments;
      let result = [];
      let fI = 1, nextF = fragments.length ? fragments[0] : null;
      for (let cI = 0, pos = 0, off = 0; ; cI++) {
        let nextC = cI < changes.length ? changes[cI] : null;
        let nextPos = nextC ? nextC.fromA : 1e9;
        if (nextPos - pos >= minGap)
          while (nextF && nextF.from < nextPos) {
            let cut = nextF;
            if (pos >= cut.from || nextPos <= cut.to || off) {
              let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
              cut = fFrom >= fTo ? null : new _TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
            }
            if (cut)
              result.push(cut);
            if (nextF.to > nextPos)
              break;
            nextF = fI < fragments.length ? fragments[fI++] : null;
          }
        if (!nextC)
          break;
        pos = nextC.toA;
        off = nextC.toA - nextC.toB;
      }
      return result;
    }
  };
  var Parser = class {
    /**
    Start a parse, returning a [partial parse](#common.PartialParse)
    object. [`fragments`](#common.TreeFragment) can be passed in to
    make the parse incremental.
    
    By default, the entire input is parsed. You can pass `ranges`,
    which should be a sorted array of non-empty, non-overlapping
    ranges, to parse only those ranges. The tree returned in that
    case will start at `ranges[0].from`.
    */
    startParse(input, fragments, ranges) {
      if (typeof input == "string")
        input = new StringInput(input);
      ranges = !ranges ? [new Range2(0, input.length)] : ranges.length ? ranges.map((r) => new Range2(r.from, r.to)) : [new Range2(0, 0)];
      return this.createParse(input, fragments || [], ranges);
    }
    /**
    Run a full parse, returning the resulting tree.
    */
    parse(input, fragments, ranges) {
      let parse2 = this.startParse(input, fragments, ranges);
      for (; ; ) {
        let done = parse2.advance();
        if (done)
          return done;
      }
    }
  };
  var StringInput = class {
    constructor(string2) {
      this.string = string2;
    }
    get length() {
      return this.string.length;
    }
    chunk(from) {
      return this.string.slice(from);
    }
    get lineChunks() {
      return false;
    }
    read(from, to) {
      return this.string.slice(from, to);
    }
  };
  var stoppedInner = new NodeProp({ perNode: true });

  // node_modules/@lezer/highlight/dist/index.js
  var nextTagID = 0;
  var Tag = class _Tag {
    /**
    @internal
    */
    constructor(name2, set, base2, modified) {
      this.name = name2;
      this.set = set;
      this.base = base2;
      this.modified = modified;
      this.id = nextTagID++;
    }
    toString() {
      let { name: name2 } = this;
      for (let mod2 of this.modified)
        if (mod2.name)
          name2 = `${mod2.name}(${name2})`;
      return name2;
    }
    static define(nameOrParent, parent) {
      let name2 = typeof nameOrParent == "string" ? nameOrParent : "?";
      if (nameOrParent instanceof _Tag)
        parent = nameOrParent;
      if (parent === null || parent === void 0 ? void 0 : parent.base)
        throw new Error("Can not derive from a modified tag");
      let tag = new _Tag(name2, [], null, []);
      tag.set.push(tag);
      if (parent)
        for (let t2 of parent.set)
          tag.set.push(t2);
      return tag;
    }
    /**
    Define a tag _modifier_, which is a function that, given a tag,
    will return a tag that is a subtag of the original. Applying the
    same modifier to a twice tag will return the same value (`m1(t1)
    == m1(t1)`) and applying multiple modifiers will, regardless or
    order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
    
    When multiple modifiers are applied to a given base tag, each
    smaller set of modifiers is registered as a parent, so that for
    example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
    `m1(m3(t1)`, and so on.
    */
    static defineModifier(name2) {
      let mod2 = new Modifier(name2);
      return (tag) => {
        if (tag.modified.indexOf(mod2) > -1)
          return tag;
        return Modifier.get(tag.base || tag, tag.modified.concat(mod2).sort((a, b) => a.id - b.id));
      };
    }
  };
  var nextModifierID = 0;
  var Modifier = class _Modifier {
    constructor(name2) {
      this.name = name2;
      this.instances = [];
      this.id = nextModifierID++;
    }
    static get(base2, mods) {
      if (!mods.length)
        return base2;
      let exists = mods[0].instances.find((t2) => t2.base == base2 && sameArray2(mods, t2.modified));
      if (exists)
        return exists;
      let set = [], tag = new Tag(base2.name, set, base2, mods);
      for (let m of mods)
        m.instances.push(tag);
      let configs = powerSet(mods);
      for (let parent of base2.set)
        if (!parent.modified.length)
          for (let config2 of configs)
            set.push(_Modifier.get(parent, config2));
      return tag;
    }
  };
  function sameArray2(a, b) {
    return a.length == b.length && a.every((x, i) => x == b[i]);
  }
  function powerSet(array2) {
    let sets = [[]];
    for (let i = 0; i < array2.length; i++) {
      for (let j = 0, e = sets.length; j < e; j++) {
        sets.push(sets[j].concat(array2[i]));
      }
    }
    return sets.sort((a, b) => b.length - a.length);
  }
  function styleTags(spec) {
    let byName = /* @__PURE__ */ Object.create(null);
    for (let prop in spec) {
      let tags2 = spec[prop];
      if (!Array.isArray(tags2))
        tags2 = [tags2];
      for (let part of prop.split(" "))
        if (part) {
          let pieces = [], mode = 2, rest = part;
          for (let pos = 0; ; ) {
            if (rest == "..." && pos > 0 && pos + 3 == part.length) {
              mode = 1;
              break;
            }
            let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
            if (!m)
              throw new RangeError("Invalid path: " + part);
            pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
            pos += m[0].length;
            if (pos == part.length)
              break;
            let next = part[pos++];
            if (pos == part.length && next == "!") {
              mode = 0;
              break;
            }
            if (next != "/")
              throw new RangeError("Invalid path: " + part);
            rest = part.slice(pos);
          }
          let last = pieces.length - 1, inner = pieces[last];
          if (!inner)
            throw new RangeError("Invalid path: " + part);
          let rule = new Rule(tags2, mode, last > 0 ? pieces.slice(0, last) : null);
          byName[inner] = rule.sort(byName[inner]);
        }
    }
    return ruleNodeProp.add(byName);
  }
  var ruleNodeProp = new NodeProp();
  var Rule = class {
    constructor(tags2, mode, context2, next) {
      this.tags = tags2;
      this.mode = mode;
      this.context = context2;
      this.next = next;
    }
    get opaque() {
      return this.mode == 0;
    }
    get inherit() {
      return this.mode == 1;
    }
    sort(other) {
      if (!other || other.depth < this.depth) {
        this.next = other;
        return this;
      }
      other.next = this.sort(other.next);
      return other;
    }
    get depth() {
      return this.context ? this.context.length : 0;
    }
  };
  Rule.empty = new Rule([], 2, null);
  function tagHighlighter(tags2, options) {
    let map = /* @__PURE__ */ Object.create(null);
    for (let style of tags2) {
      if (!Array.isArray(style.tag))
        map[style.tag.id] = style.class;
      else
        for (let tag of style.tag)
          map[tag.id] = style.class;
    }
    let { scope, all: all2 = null } = options || {};
    return {
      style: (tags3) => {
        let cls = all2;
        for (let tag of tags3) {
          for (let sub2 of tag.set) {
            let tagClass = map[sub2.id];
            if (tagClass) {
              cls = cls ? cls + " " + tagClass : tagClass;
              break;
            }
          }
        }
        return cls;
      },
      scope
    };
  }
  function highlightTags(highlighters, tags2) {
    let result = null;
    for (let highlighter of highlighters) {
      let value = highlighter.style(tags2);
      if (value)
        result = result ? result + " " + value : value;
    }
    return result;
  }
  function highlightTree(tree, highlighter, putStyle, from = 0, to = tree.length) {
    let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
    builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
    builder.flush(to);
  }
  var HighlightBuilder = class {
    constructor(at, highlighters, span) {
      this.at = at;
      this.highlighters = highlighters;
      this.span = span;
      this.class = "";
    }
    startSpan(at, cls) {
      if (cls != this.class) {
        this.flush(at);
        if (at > this.at)
          this.at = at;
        this.class = cls;
      }
    }
    flush(to) {
      if (to > this.at && this.class)
        this.span(this.at, to, this.class);
    }
    highlightRange(cursor, from, to, inheritedClass, highlighters) {
      let { type, from: start, to: end } = cursor;
      if (start >= to || end <= from)
        return;
      if (type.isTop)
        highlighters = this.highlighters.filter((h) => !h.scope || h.scope(type));
      let cls = inheritedClass;
      let rule = getStyleTags(cursor) || Rule.empty;
      let tagCls = highlightTags(highlighters, rule.tags);
      if (tagCls) {
        if (cls)
          cls += " ";
        cls += tagCls;
        if (rule.mode == 1)
          inheritedClass += (inheritedClass ? " " : "") + tagCls;
      }
      this.startSpan(Math.max(from, start), cls);
      if (rule.opaque)
        return;
      let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
      if (mounted && mounted.overlay) {
        let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
        let innerHighlighters = this.highlighters.filter((h) => !h.scope || h.scope(mounted.tree.type));
        let hasChild2 = cursor.firstChild();
        for (let i = 0, pos = start; ; i++) {
          let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
          let nextPos = next ? next.from + start : end;
          let rangeFrom2 = Math.max(from, pos), rangeTo2 = Math.min(to, nextPos);
          if (rangeFrom2 < rangeTo2 && hasChild2) {
            while (cursor.from < rangeTo2) {
              this.highlightRange(cursor, rangeFrom2, rangeTo2, inheritedClass, highlighters);
              this.startSpan(Math.min(rangeTo2, cursor.to), cls);
              if (cursor.to >= nextPos || !cursor.nextSibling())
                break;
            }
          }
          if (!next || nextPos > to)
            break;
          pos = next.to + start;
          if (pos > from) {
            this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), "", innerHighlighters);
            this.startSpan(Math.min(to, pos), cls);
          }
        }
        if (hasChild2)
          cursor.parent();
      } else if (cursor.firstChild()) {
        if (mounted)
          inheritedClass = "";
        do {
          if (cursor.to <= from)
            continue;
          if (cursor.from >= to)
            break;
          this.highlightRange(cursor, from, to, inheritedClass, highlighters);
          this.startSpan(Math.min(to, cursor.to), cls);
        } while (cursor.nextSibling());
        cursor.parent();
      }
    }
  };
  function getStyleTags(node) {
    let rule = node.type.prop(ruleNodeProp);
    while (rule && rule.context && !node.matchContext(rule.context))
      rule = rule.next;
    return rule || null;
  }
  var t = Tag.define;
  var comment = t();
  var name = t();
  var typeName = t(name);
  var propertyName = t(name);
  var literal = t();
  var string = t(literal);
  var number = t(literal);
  var content = t();
  var heading = t(content);
  var keyword = t();
  var operator = t();
  var punctuation = t();
  var bracket = t(punctuation);
  var meta = t();
  var tags = {
    /**
    A comment.
    */
    comment,
    /**
    A line [comment](#highlight.tags.comment).
    */
    lineComment: t(comment),
    /**
    A block [comment](#highlight.tags.comment).
    */
    blockComment: t(comment),
    /**
    A documentation [comment](#highlight.tags.comment).
    */
    docComment: t(comment),
    /**
    Any kind of identifier.
    */
    name,
    /**
    The [name](#highlight.tags.name) of a variable.
    */
    variableName: t(name),
    /**
    A type [name](#highlight.tags.name).
    */
    typeName,
    /**
    A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
    */
    tagName: t(typeName),
    /**
    A property or field [name](#highlight.tags.name).
    */
    propertyName,
    /**
    An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
    */
    attributeName: t(propertyName),
    /**
    The [name](#highlight.tags.name) of a class.
    */
    className: t(name),
    /**
    A label [name](#highlight.tags.name).
    */
    labelName: t(name),
    /**
    A namespace [name](#highlight.tags.name).
    */
    namespace: t(name),
    /**
    The [name](#highlight.tags.name) of a macro.
    */
    macroName: t(name),
    /**
    A literal value.
    */
    literal,
    /**
    A string [literal](#highlight.tags.literal).
    */
    string,
    /**
    A documentation [string](#highlight.tags.string).
    */
    docString: t(string),
    /**
    A character literal (subtag of [string](#highlight.tags.string)).
    */
    character: t(string),
    /**
    An attribute value (subtag of [string](#highlight.tags.string)).
    */
    attributeValue: t(string),
    /**
    A number [literal](#highlight.tags.literal).
    */
    number,
    /**
    An integer [number](#highlight.tags.number) literal.
    */
    integer: t(number),
    /**
    A floating-point [number](#highlight.tags.number) literal.
    */
    float: t(number),
    /**
    A boolean [literal](#highlight.tags.literal).
    */
    bool: t(literal),
    /**
    Regular expression [literal](#highlight.tags.literal).
    */
    regexp: t(literal),
    /**
    An escape [literal](#highlight.tags.literal), for example a
    backslash escape in a string.
    */
    escape: t(literal),
    /**
    A color [literal](#highlight.tags.literal).
    */
    color: t(literal),
    /**
    A URL [literal](#highlight.tags.literal).
    */
    url: t(literal),
    /**
    A language keyword.
    */
    keyword,
    /**
    The [keyword](#highlight.tags.keyword) for the self or this
    object.
    */
    self: t(keyword),
    /**
    The [keyword](#highlight.tags.keyword) for null.
    */
    null: t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) denoting some atomic value.
    */
    atom: t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) that represents a unit.
    */
    unit: t(keyword),
    /**
    A modifier [keyword](#highlight.tags.keyword).
    */
    modifier: t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) that acts as an operator.
    */
    operatorKeyword: t(keyword),
    /**
    A control-flow related [keyword](#highlight.tags.keyword).
    */
    controlKeyword: t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) that defines something.
    */
    definitionKeyword: t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) related to defining or
    interfacing with modules.
    */
    moduleKeyword: t(keyword),
    /**
    An operator.
    */
    operator,
    /**
    An [operator](#highlight.tags.operator) that dereferences something.
    */
    derefOperator: t(operator),
    /**
    Arithmetic-related [operator](#highlight.tags.operator).
    */
    arithmeticOperator: t(operator),
    /**
    Logical [operator](#highlight.tags.operator).
    */
    logicOperator: t(operator),
    /**
    Bit [operator](#highlight.tags.operator).
    */
    bitwiseOperator: t(operator),
    /**
    Comparison [operator](#highlight.tags.operator).
    */
    compareOperator: t(operator),
    /**
    [Operator](#highlight.tags.operator) that updates its operand.
    */
    updateOperator: t(operator),
    /**
    [Operator](#highlight.tags.operator) that defines something.
    */
    definitionOperator: t(operator),
    /**
    Type-related [operator](#highlight.tags.operator).
    */
    typeOperator: t(operator),
    /**
    Control-flow [operator](#highlight.tags.operator).
    */
    controlOperator: t(operator),
    /**
    Program or markup punctuation.
    */
    punctuation,
    /**
    [Punctuation](#highlight.tags.punctuation) that separates
    things.
    */
    separator: t(punctuation),
    /**
    Bracket-style [punctuation](#highlight.tags.punctuation).
    */
    bracket,
    /**
    Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
    tokens).
    */
    angleBracket: t(bracket),
    /**
    Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
    tokens).
    */
    squareBracket: t(bracket),
    /**
    Parentheses (usually `(` and `)` tokens). Subtag of
    [bracket](#highlight.tags.bracket).
    */
    paren: t(bracket),
    /**
    Braces (usually `{` and `}` tokens). Subtag of
    [bracket](#highlight.tags.bracket).
    */
    brace: t(bracket),
    /**
    Content, for example plain text in XML or markup documents.
    */
    content,
    /**
    [Content](#highlight.tags.content) that represents a heading.
    */
    heading,
    /**
    A level 1 [heading](#highlight.tags.heading).
    */
    heading1: t(heading),
    /**
    A level 2 [heading](#highlight.tags.heading).
    */
    heading2: t(heading),
    /**
    A level 3 [heading](#highlight.tags.heading).
    */
    heading3: t(heading),
    /**
    A level 4 [heading](#highlight.tags.heading).
    */
    heading4: t(heading),
    /**
    A level 5 [heading](#highlight.tags.heading).
    */
    heading5: t(heading),
    /**
    A level 6 [heading](#highlight.tags.heading).
    */
    heading6: t(heading),
    /**
    A prose [content](#highlight.tags.content) separator (such as a horizontal rule).
    */
    contentSeparator: t(content),
    /**
    [Content](#highlight.tags.content) that represents a list.
    */
    list: t(content),
    /**
    [Content](#highlight.tags.content) that represents a quote.
    */
    quote: t(content),
    /**
    [Content](#highlight.tags.content) that is emphasized.
    */
    emphasis: t(content),
    /**
    [Content](#highlight.tags.content) that is styled strong.
    */
    strong: t(content),
    /**
    [Content](#highlight.tags.content) that is part of a link.
    */
    link: t(content),
    /**
    [Content](#highlight.tags.content) that is styled as code or
    monospace.
    */
    monospace: t(content),
    /**
    [Content](#highlight.tags.content) that has a strike-through
    style.
    */
    strikethrough: t(content),
    /**
    Inserted text in a change-tracking format.
    */
    inserted: t(),
    /**
    Deleted text.
    */
    deleted: t(),
    /**
    Changed text.
    */
    changed: t(),
    /**
    An invalid or unsyntactic element.
    */
    invalid: t(),
    /**
    Metadata or meta-instruction.
    */
    meta,
    /**
    [Metadata](#highlight.tags.meta) that applies to the entire
    document.
    */
    documentMeta: t(meta),
    /**
    [Metadata](#highlight.tags.meta) that annotates or adds
    attributes to a given syntactic element.
    */
    annotation: t(meta),
    /**
    Processing instruction or preprocessor directive. Subtag of
    [meta](#highlight.tags.meta).
    */
    processingInstruction: t(meta),
    /**
    [Modifier](#highlight.Tag^defineModifier) that indicates that a
    given element is being defined. Expected to be used with the
    various [name](#highlight.tags.name) tags.
    */
    definition: Tag.defineModifier("definition"),
    /**
    [Modifier](#highlight.Tag^defineModifier) that indicates that
    something is constant. Mostly expected to be used with
    [variable names](#highlight.tags.variableName).
    */
    constant: Tag.defineModifier("constant"),
    /**
    [Modifier](#highlight.Tag^defineModifier) used to indicate that
    a [variable](#highlight.tags.variableName) or [property
    name](#highlight.tags.propertyName) is being called or defined
    as a function.
    */
    function: Tag.defineModifier("function"),
    /**
    [Modifier](#highlight.Tag^defineModifier) that can be applied to
    [names](#highlight.tags.name) to indicate that they belong to
    the language's standard environment.
    */
    standard: Tag.defineModifier("standard"),
    /**
    [Modifier](#highlight.Tag^defineModifier) that indicates a given
    [names](#highlight.tags.name) is local to some scope.
    */
    local: Tag.defineModifier("local"),
    /**
    A generic variant [modifier](#highlight.Tag^defineModifier) that
    can be used to tag language-specific alternative variants of
    some common tag. It is recommended for themes to define special
    forms of at least the [string](#highlight.tags.string) and
    [variable name](#highlight.tags.variableName) tags, since those
    come up a lot.
    */
    special: Tag.defineModifier("special")
  };
  for (let name2 in tags) {
    let val = tags[name2];
    if (val instanceof Tag)
      val.name = name2;
  }
  var classHighlighter = tagHighlighter([
    { tag: tags.link, class: "tok-link" },
    { tag: tags.heading, class: "tok-heading" },
    { tag: tags.emphasis, class: "tok-emphasis" },
    { tag: tags.strong, class: "tok-strong" },
    { tag: tags.keyword, class: "tok-keyword" },
    { tag: tags.atom, class: "tok-atom" },
    { tag: tags.bool, class: "tok-bool" },
    { tag: tags.url, class: "tok-url" },
    { tag: tags.labelName, class: "tok-labelName" },
    { tag: tags.inserted, class: "tok-inserted" },
    { tag: tags.deleted, class: "tok-deleted" },
    { tag: tags.literal, class: "tok-literal" },
    { tag: tags.string, class: "tok-string" },
    { tag: tags.number, class: "tok-number" },
    { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "tok-string2" },
    { tag: tags.variableName, class: "tok-variableName" },
    { tag: tags.local(tags.variableName), class: "tok-variableName tok-local" },
    { tag: tags.definition(tags.variableName), class: "tok-variableName tok-definition" },
    { tag: tags.special(tags.variableName), class: "tok-variableName2" },
    { tag: tags.definition(tags.propertyName), class: "tok-propertyName tok-definition" },
    { tag: tags.typeName, class: "tok-typeName" },
    { tag: tags.namespace, class: "tok-namespace" },
    { tag: tags.className, class: "tok-className" },
    { tag: tags.macroName, class: "tok-macroName" },
    { tag: tags.propertyName, class: "tok-propertyName" },
    { tag: tags.operator, class: "tok-operator" },
    { tag: tags.comment, class: "tok-comment" },
    { tag: tags.meta, class: "tok-meta" },
    { tag: tags.invalid, class: "tok-invalid" },
    { tag: tags.punctuation, class: "tok-punctuation" }
  ]);

  // node_modules/@codemirror/language/dist/index.js
  var _a;
  var languageDataProp = /* @__PURE__ */ new NodeProp();
  function defineLanguageFacet(baseData) {
    return Facet.define({
      combine: baseData ? (values) => values.concat(baseData) : void 0
    });
  }
  var sublanguageProp = /* @__PURE__ */ new NodeProp();
  var Language = class {
    /**
    Construct a language object. If you need to invoke this
    directly, first define a data facet with
    [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
    configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
    to the language's outer syntax node.
    */
    constructor(data, parser2, extraExtensions = [], name2 = "") {
      this.data = data;
      this.name = name2;
      if (!EditorState.prototype.hasOwnProperty("tree"))
        Object.defineProperty(EditorState.prototype, "tree", { get() {
          return syntaxTree(this);
        } });
      this.parser = parser2;
      this.extension = [
        language.of(this),
        EditorState.languageData.of((state, pos, side) => {
          let top2 = topNodeAt(state, pos, side), data2 = top2.type.prop(languageDataProp);
          if (!data2)
            return [];
          let base2 = state.facet(data2), sub2 = top2.type.prop(sublanguageProp);
          if (sub2) {
            let innerNode = top2.resolve(pos - top2.from, side);
            for (let sublang of sub2)
              if (sublang.test(innerNode, state)) {
                let data3 = state.facet(sublang.facet);
                return sublang.type == "replace" ? data3 : data3.concat(base2);
              }
          }
          return base2;
        })
      ].concat(extraExtensions);
    }
    /**
    Query whether this language is active at the given position.
    */
    isActiveAt(state, pos, side = -1) {
      return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
    }
    /**
    Find the document regions that were parsed using this language.
    The returned regions will _include_ any nested languages rooted
    in this language, when those exist.
    */
    findRegions(state) {
      let lang = state.facet(language);
      if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
        return [{ from: 0, to: state.doc.length }];
      if (!lang || !lang.allowsNesting)
        return [];
      let result = [];
      let explore = (tree, from) => {
        if (tree.prop(languageDataProp) == this.data) {
          result.push({ from, to: from + tree.length });
          return;
        }
        let mount = tree.prop(NodeProp.mounted);
        if (mount) {
          if (mount.tree.prop(languageDataProp) == this.data) {
            if (mount.overlay)
              for (let r of mount.overlay)
                result.push({ from: r.from + from, to: r.to + from });
            else
              result.push({ from, to: from + tree.length });
            return;
          } else if (mount.overlay) {
            let size = result.length;
            explore(mount.tree, mount.overlay[0].from + from);
            if (result.length > size)
              return;
          }
        }
        for (let i = 0; i < tree.children.length; i++) {
          let ch = tree.children[i];
          if (ch instanceof Tree)
            explore(ch, tree.positions[i] + from);
        }
      };
      explore(syntaxTree(state), 0);
      return result;
    }
    /**
    Indicates whether this language allows nested languages. The
    default implementation returns true.
    */
    get allowsNesting() {
      return true;
    }
  };
  Language.setState = /* @__PURE__ */ StateEffect.define();
  function topNodeAt(state, pos, side) {
    let topLang = state.facet(language), tree = syntaxTree(state).topNode;
    if (!topLang || topLang.allowsNesting) {
      for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
        if (node.type.isTop)
          tree = node;
    }
    return tree;
  }
  var LRLanguage = class _LRLanguage extends Language {
    constructor(data, parser2, name2) {
      super(data, parser2, [], name2);
      this.parser = parser2;
    }
    /**
    Define a language from a parser.
    */
    static define(spec) {
      let data = defineLanguageFacet(spec.languageData);
      return new _LRLanguage(data, spec.parser.configure({
        props: [languageDataProp.add((type) => type.isTop ? data : void 0)]
      }), spec.name);
    }
    /**
    Create a new instance of this language with a reconfigured
    version of its parser and optionally a new name.
    */
    configure(options, name2) {
      return new _LRLanguage(this.data, this.parser.configure(options), name2 || this.name);
    }
    get allowsNesting() {
      return this.parser.hasWrappers();
    }
  };
  function syntaxTree(state) {
    let field = state.field(Language.state, false);
    return field ? field.tree : Tree.empty;
  }
  var DocInput = class {
    /**
    Create an input object for the given document.
    */
    constructor(doc2) {
      this.doc = doc2;
      this.cursorPos = 0;
      this.string = "";
      this.cursor = doc2.iter();
    }
    get length() {
      return this.doc.length;
    }
    syncTo(pos) {
      this.string = this.cursor.next(pos - this.cursorPos).value;
      this.cursorPos = pos + this.string.length;
      return this.cursorPos - this.string.length;
    }
    chunk(pos) {
      this.syncTo(pos);
      return this.string;
    }
    get lineChunks() {
      return true;
    }
    read(from, to) {
      let stringStart = this.cursorPos - this.string.length;
      if (from < stringStart || to >= this.cursorPos)
        return this.doc.sliceString(from, to);
      else
        return this.string.slice(from - stringStart, to - stringStart);
    }
  };
  var currentContext = null;
  var ParseContext = class _ParseContext {
    constructor(parser2, state, fragments = [], tree, treeLen, viewport2, skipped, scheduleOn) {
      this.parser = parser2;
      this.state = state;
      this.fragments = fragments;
      this.tree = tree;
      this.treeLen = treeLen;
      this.viewport = viewport2;
      this.skipped = skipped;
      this.scheduleOn = scheduleOn;
      this.parse = null;
      this.tempSkipped = [];
    }
    /**
    @internal
    */
    static create(parser2, state, viewport2) {
      return new _ParseContext(parser2, state, [], Tree.empty, 0, viewport2, [], null);
    }
    startParse() {
      return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
    }
    /**
    @internal
    */
    work(until, upto) {
      if (upto != null && upto >= this.state.doc.length)
        upto = void 0;
      if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
        this.takeTree();
        return true;
      }
      return this.withContext(() => {
        var _a2;
        if (typeof until == "number") {
          let endTime = Date.now() + until;
          until = () => Date.now() > endTime;
        }
        if (!this.parse)
          this.parse = this.startParse();
        if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) && upto < this.state.doc.length)
          this.parse.stopAt(upto);
        for (; ; ) {
          let done = this.parse.advance();
          if (done) {
            this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
            this.treeLen = (_a2 = this.parse.stoppedAt) !== null && _a2 !== void 0 ? _a2 : this.state.doc.length;
            this.tree = done;
            this.parse = null;
            if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
              this.parse = this.startParse();
            else
              return true;
          }
          if (until())
            return false;
        }
      });
    }
    /**
    @internal
    */
    takeTree() {
      let pos, tree;
      if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
        if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
          this.parse.stopAt(pos);
        this.withContext(() => {
          while (!(tree = this.parse.advance())) {
          }
        });
        this.treeLen = pos;
        this.tree = tree;
        this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
        this.parse = null;
      }
    }
    withContext(f) {
      let prev = currentContext;
      currentContext = this;
      try {
        return f();
      } finally {
        currentContext = prev;
      }
    }
    withoutTempSkipped(fragments) {
      for (let r; r = this.tempSkipped.pop(); )
        fragments = cutFragments(fragments, r.from, r.to);
      return fragments;
    }
    /**
    @internal
    */
    changes(changes, newState) {
      let { fragments, tree, treeLen, viewport: viewport2, skipped } = this;
      this.takeTree();
      if (!changes.empty) {
        let ranges = [];
        changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
        fragments = TreeFragment.applyChanges(fragments, ranges);
        tree = Tree.empty;
        treeLen = 0;
        viewport2 = { from: changes.mapPos(viewport2.from, -1), to: changes.mapPos(viewport2.to, 1) };
        if (this.skipped.length) {
          skipped = [];
          for (let r of this.skipped) {
            let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
            if (from < to)
              skipped.push({ from, to });
          }
        }
      }
      return new _ParseContext(this.parser, newState, fragments, tree, treeLen, viewport2, skipped, this.scheduleOn);
    }
    /**
    @internal
    */
    updateViewport(viewport2) {
      if (this.viewport.from == viewport2.from && this.viewport.to == viewport2.to)
        return false;
      this.viewport = viewport2;
      let startLen = this.skipped.length;
      for (let i = 0; i < this.skipped.length; i++) {
        let { from, to } = this.skipped[i];
        if (from < viewport2.to && to > viewport2.from) {
          this.fragments = cutFragments(this.fragments, from, to);
          this.skipped.splice(i--, 1);
        }
      }
      if (this.skipped.length >= startLen)
        return false;
      this.reset();
      return true;
    }
    /**
    @internal
    */
    reset() {
      if (this.parse) {
        this.takeTree();
        this.parse = null;
      }
    }
    /**
    Notify the parse scheduler that the given region was skipped
    because it wasn't in view, and the parse should be restarted
    when it comes into view.
    */
    skipUntilInView(from, to) {
      this.skipped.push({ from, to });
    }
    /**
    Returns a parser intended to be used as placeholder when
    asynchronously loading a nested parser. It'll skip its input and
    mark it as not-really-parsed, so that the next update will parse
    it again.
    
    When `until` is given, a reparse will be scheduled when that
    promise resolves.
    */
    static getSkippingParser(until) {
      return new class extends Parser {
        createParse(input, fragments, ranges) {
          let from = ranges[0].from, to = ranges[ranges.length - 1].to;
          let parser2 = {
            parsedPos: from,
            advance() {
              let cx = currentContext;
              if (cx) {
                for (let r of ranges)
                  cx.tempSkipped.push(r);
                if (until)
                  cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
              }
              this.parsedPos = to;
              return new Tree(NodeType.none, [], [], to - from);
            },
            stoppedAt: null,
            stopAt() {
            }
          };
          return parser2;
        }
      }();
    }
    /**
    @internal
    */
    isDone(upto) {
      upto = Math.min(upto, this.state.doc.length);
      let frags = this.fragments;
      return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
    }
    /**
    Get the context for the current parse, or `null` if no editor
    parse is in progress.
    */
    static get() {
      return currentContext;
    }
  };
  function cutFragments(fragments, from, to) {
    return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
  }
  var LanguageState = class _LanguageState {
    constructor(context2) {
      this.context = context2;
      this.tree = context2.tree;
    }
    apply(tr) {
      if (!tr.docChanged && this.tree == this.context.tree)
        return this;
      let newCx = this.context.changes(tr.changes, tr.state);
      let upto = this.context.treeLen == tr.startState.doc.length ? void 0 : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
      if (!newCx.work(20, upto))
        newCx.takeTree();
      return new _LanguageState(newCx);
    }
    static init(state) {
      let vpTo = Math.min(3e3, state.doc.length);
      let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
      if (!parseState.work(20, vpTo))
        parseState.takeTree();
      return new _LanguageState(parseState);
    }
  };
  Language.state = /* @__PURE__ */ StateField.define({
    create: LanguageState.init,
    update(value, tr) {
      for (let e of tr.effects)
        if (e.is(Language.setState))
          return e.value;
      if (tr.startState.facet(language) != tr.state.facet(language))
        return LanguageState.init(tr.state);
      return value.apply(tr);
    }
  });
  var requestIdle = (callback) => {
    let timeout = setTimeout(
      () => callback(),
      500
      /* Work.MaxPause */
    );
    return () => clearTimeout(timeout);
  };
  if (typeof requestIdleCallback != "undefined")
    requestIdle = (callback) => {
      let idle = -1, timeout = setTimeout(
        () => {
          idle = requestIdleCallback(callback, {
            timeout: 500 - 100
            /* Work.MinPause */
          });
        },
        100
        /* Work.MinPause */
      );
      return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
    };
  var isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? () => navigator.scheduling.isInputPending() : null;
  var parseWorker = /* @__PURE__ */ ViewPlugin.fromClass(class ParseWorker {
    constructor(view) {
      this.view = view;
      this.working = null;
      this.workScheduled = 0;
      this.chunkEnd = -1;
      this.chunkBudget = -1;
      this.work = this.work.bind(this);
      this.scheduleWork();
    }
    update(update) {
      let cx = this.view.state.field(Language.state).context;
      if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
        this.scheduleWork();
      if (update.docChanged || update.selectionSet) {
        if (this.view.hasFocus)
          this.chunkBudget += 50;
        this.scheduleWork();
      }
      this.checkAsyncSchedule(cx);
    }
    scheduleWork() {
      if (this.working)
        return;
      let { state } = this.view, field = state.field(Language.state);
      if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
        this.working = requestIdle(this.work);
    }
    work(deadline) {
      this.working = null;
      let now = Date.now();
      if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {
        this.chunkEnd = now + 3e4;
        this.chunkBudget = 3e3;
      }
      if (this.chunkBudget <= 0)
        return;
      let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
      if (field.tree == field.context.tree && field.context.isDone(
        vpTo + 1e5
        /* Work.MaxParseAhead */
      ))
        return;
      let endTime = Date.now() + Math.min(this.chunkBudget, 100, deadline && !isInputPending ? Math.max(25, deadline.timeRemaining() - 5) : 1e9);
      let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1e3;
      let done = field.context.work(() => {
        return isInputPending && isInputPending() || Date.now() > endTime;
      }, vpTo + (viewportFirst ? 0 : 1e5));
      this.chunkBudget -= Date.now() - now;
      if (done || this.chunkBudget <= 0) {
        field.context.takeTree();
        this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
      }
      if (this.chunkBudget > 0 && !(done && !viewportFirst))
        this.scheduleWork();
      this.checkAsyncSchedule(field.context);
    }
    checkAsyncSchedule(cx) {
      if (cx.scheduleOn) {
        this.workScheduled++;
        cx.scheduleOn.then(() => this.scheduleWork()).catch((err) => logException(this.view.state, err)).then(() => this.workScheduled--);
        cx.scheduleOn = null;
      }
    }
    destroy() {
      if (this.working)
        this.working();
    }
    isWorking() {
      return !!(this.working || this.workScheduled > 0);
    }
  }, {
    eventHandlers: { focus() {
      this.scheduleWork();
    } }
  });
  var language = /* @__PURE__ */ Facet.define({
    combine(languages) {
      return languages.length ? languages[0] : null;
    },
    enables: (language2) => [
      Language.state,
      parseWorker,
      EditorView.contentAttributes.compute([language2], (state) => {
        let lang = state.facet(language2);
        return lang && lang.name ? { "data-language": lang.name } : {};
      })
    ]
  });
  var LanguageSupport = class {
    /**
    Create a language support object.
    */
    constructor(language2, support = []) {
      this.language = language2;
      this.support = support;
      this.extension = [language2, support];
    }
  };
  var indentService = /* @__PURE__ */ Facet.define();
  var indentUnit = /* @__PURE__ */ Facet.define({
    combine: (values) => {
      if (!values.length)
        return "  ";
      let unit = values[0];
      if (!unit || /\S/.test(unit) || Array.from(unit).some((e) => e != unit[0]))
        throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
      return unit;
    }
  });
  function getIndentUnit(state) {
    let unit = state.facet(indentUnit);
    return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
  }
  function indentString(state, cols) {
    let result = "", ts = state.tabSize, ch = state.facet(indentUnit)[0];
    if (ch == "	") {
      while (cols >= ts) {
        result += "	";
        cols -= ts;
      }
      ch = " ";
    }
    for (let i = 0; i < cols; i++)
      result += ch;
    return result;
  }
  function getIndentation(context2, pos) {
    if (context2 instanceof EditorState)
      context2 = new IndentContext(context2);
    for (let service of context2.state.facet(indentService)) {
      let result = service(context2, pos);
      if (result !== void 0)
        return result;
    }
    let tree = syntaxTree(context2.state);
    return tree.length >= pos ? syntaxIndentation(context2, tree, pos) : null;
  }
  var IndentContext = class {
    /**
    Create an indent context.
    */
    constructor(state, options = {}) {
      this.state = state;
      this.options = options;
      this.unit = getIndentUnit(state);
    }
    /**
    Get a description of the line at the given position, taking
    [simulated line
    breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
    into account. If there is such a break at `pos`, the `bias`
    argument determines whether the part of the line line before or
    after the break is used.
    */
    lineAt(pos, bias = 1) {
      let line = this.state.doc.lineAt(pos);
      let { simulateBreak, simulateDoubleBreak } = this.options;
      if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
        if (simulateDoubleBreak && simulateBreak == pos)
          return { text: "", from: pos };
        else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
          return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
        else
          return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
      }
      return line;
    }
    /**
    Get the text directly after `pos`, either the entire line
    or the next 100 characters, whichever is shorter.
    */
    textAfterPos(pos, bias = 1) {
      if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
        return "";
      let { text, from } = this.lineAt(pos, bias);
      return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
    }
    /**
    Find the column for the given position.
    */
    column(pos, bias = 1) {
      let { text, from } = this.lineAt(pos, bias);
      let result = this.countColumn(text, pos - from);
      let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
      if (override > -1)
        result += override - this.countColumn(text, text.search(/\S|$/));
      return result;
    }
    /**
    Find the column position (taking tabs into account) of the given
    position in the given string.
    */
    countColumn(line, pos = line.length) {
      return countColumn(line, this.state.tabSize, pos);
    }
    /**
    Find the indentation column of the line at the given point.
    */
    lineIndent(pos, bias = 1) {
      let { text, from } = this.lineAt(pos, bias);
      let override = this.options.overrideIndentation;
      if (override) {
        let overriden = override(from);
        if (overriden > -1)
          return overriden;
      }
      return this.countColumn(text, text.search(/\S|$/));
    }
    /**
    Returns the [simulated line
    break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
    for this context, if any.
    */
    get simulatedBreak() {
      return this.options.simulateBreak || null;
    }
  };
  var indentNodeProp = /* @__PURE__ */ new NodeProp();
  function syntaxIndentation(cx, ast, pos) {
    let stack2 = ast.resolveStack(pos);
    let inner = ast.resolveInner(pos, -1).resolve(pos, 0).enterUnfinishedNodesBefore(pos);
    if (inner != stack2.node) {
      let add3 = [];
      for (let cur2 = inner; cur2 && !(cur2.from == stack2.node.from && cur2.type == stack2.node.type); cur2 = cur2.parent)
        add3.push(cur2);
      for (let i = add3.length - 1; i >= 0; i--)
        stack2 = { node: add3[i], next: stack2 };
    }
    return indentFor(stack2, cx, pos);
  }
  function indentFor(stack2, cx, pos) {
    for (let cur2 = stack2; cur2; cur2 = cur2.next) {
      let strategy = indentStrategy(cur2.node);
      if (strategy)
        return strategy(TreeIndentContext.create(cx, pos, cur2));
    }
    return 0;
  }
  function ignoreClosed(cx) {
    return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
  }
  function indentStrategy(tree) {
    let strategy = tree.type.prop(indentNodeProp);
    if (strategy)
      return strategy;
    let first = tree.firstChild, close;
    if (first && (close = first.type.prop(NodeProp.closedBy))) {
      let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
      return (cx) => delimitedStrategy(cx, true, 1, void 0, closed && !ignoreClosed(cx) ? last.from : void 0);
    }
    return tree.parent == null ? topIndent : null;
  }
  function topIndent() {
    return 0;
  }
  var TreeIndentContext = class _TreeIndentContext extends IndentContext {
    constructor(base2, pos, context2) {
      super(base2.state, base2.options);
      this.base = base2;
      this.pos = pos;
      this.context = context2;
    }
    /**
    The syntax tree node to which the indentation strategy
    applies.
    */
    get node() {
      return this.context.node;
    }
    /**
    @internal
    */
    static create(base2, pos, context2) {
      return new _TreeIndentContext(base2, pos, context2);
    }
    /**
    Get the text directly after `this.pos`, either the entire line
    or the next 100 characters, whichever is shorter.
    */
    get textAfter() {
      return this.textAfterPos(this.pos);
    }
    /**
    Get the indentation at the reference line for `this.node`, which
    is the line on which it starts, unless there is a node that is
    _not_ a parent of this node covering the start of that line. If
    so, the line at the start of that node is tried, again skipping
    on if it is covered by another such node.
    */
    get baseIndent() {
      return this.baseIndentFor(this.node);
    }
    /**
    Get the indentation for the reference line of the given node
    (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
    */
    baseIndentFor(node) {
      let line = this.state.doc.lineAt(node.from);
      for (; ; ) {
        let atBreak = node.resolve(line.from);
        while (atBreak.parent && atBreak.parent.from == atBreak.from)
          atBreak = atBreak.parent;
        if (isParent(atBreak, node))
          break;
        line = this.state.doc.lineAt(atBreak.from);
      }
      return this.lineIndent(line.from);
    }
    /**
    Continue looking for indentations in the node's parent nodes,
    and return the result of that.
    */
    continue() {
      return indentFor(this.context.next, this.base, this.pos);
    }
  };
  function isParent(parent, of) {
    for (let cur2 = of; cur2; cur2 = cur2.parent)
      if (parent == cur2)
        return true;
    return false;
  }
  function bracketedAligned(context2) {
    let tree = context2.node;
    let openToken = tree.childAfter(tree.from), last = tree.lastChild;
    if (!openToken)
      return null;
    let sim = context2.options.simulateBreak;
    let openLine = context2.state.doc.lineAt(openToken.from);
    let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
    for (let pos = openToken.to; ; ) {
      let next = tree.childAfter(pos);
      if (!next || next == last)
        return null;
      if (!next.type.isSkipped) {
        if (next.from >= lineEnd)
          return null;
        let space2 = /^ */.exec(openLine.text.slice(openToken.to - openLine.from))[0].length;
        return { from: openToken.from, to: openToken.to + space2 };
      }
      pos = next.to;
    }
  }
  function delimitedIndent({ closing: closing2, align = true, units = 1 }) {
    return (context2) => delimitedStrategy(context2, align, units, closing2);
  }
  function delimitedStrategy(context2, align, units, closing2, closedAt) {
    let after = context2.textAfter, space2 = after.match(/^\s*/)[0].length;
    let closed = closing2 && after.slice(space2, space2 + closing2.length) == closing2 || closedAt == context2.pos + space2;
    let aligned = align ? bracketedAligned(context2) : null;
    if (aligned)
      return closed ? context2.column(aligned.from) : context2.column(aligned.to);
    return context2.baseIndent + (closed ? 0 : context2.unit * units);
  }
  var flatIndent = (context2) => context2.baseIndent;
  function continuedIndent({ except, units = 1 } = {}) {
    return (context2) => {
      let matchExcept = except && except.test(context2.textAfter);
      return context2.baseIndent + (matchExcept ? 0 : units * context2.unit);
    };
  }
  var DontIndentBeyond = 200;
  function indentOnInput() {
    return EditorState.transactionFilter.of((tr) => {
      if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete"))
        return tr;
      let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
      if (!rules.length)
        return tr;
      let doc2 = tr.newDoc, { head } = tr.newSelection.main, line = doc2.lineAt(head);
      if (head > line.from + DontIndentBeyond)
        return tr;
      let lineStart = doc2.sliceString(line.from, head);
      if (!rules.some((r) => r.test(lineStart)))
        return tr;
      let { state } = tr, last = -1, changes = [];
      for (let { head: head2 } of state.selection.ranges) {
        let line2 = state.doc.lineAt(head2);
        if (line2.from == last)
          continue;
        last = line2.from;
        let indent = getIndentation(state, line2.from);
        if (indent == null)
          continue;
        let cur2 = /^\s*/.exec(line2.text)[0];
        let norm = indentString(state, indent);
        if (cur2 != norm)
          changes.push({ from: line2.from, to: line2.from + cur2.length, insert: norm });
      }
      return changes.length ? [tr, { changes, sequential: true }] : tr;
    });
  }
  var foldService = /* @__PURE__ */ Facet.define();
  var foldNodeProp = /* @__PURE__ */ new NodeProp();
  function foldInside(node) {
    let first = node.firstChild, last = node.lastChild;
    return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;
  }
  function syntaxFolding(state, start, end) {
    let tree = syntaxTree(state);
    if (tree.length < end)
      return null;
    let stack2 = tree.resolveStack(end, 1);
    let found = null;
    for (let iter = stack2; iter; iter = iter.next) {
      let cur2 = iter.node;
      if (cur2.to <= end || cur2.from > end)
        continue;
      if (found && cur2.from < start)
        break;
      let prop = cur2.type.prop(foldNodeProp);
      if (prop && (cur2.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur2))) {
        let value = prop(cur2, state);
        if (value && value.from <= end && value.from >= start && value.to > end)
          found = value;
      }
    }
    return found;
  }
  function isUnfinished(node) {
    let ch = node.lastChild;
    return ch && ch.to == node.to && ch.type.isError;
  }
  function foldable(state, lineStart, lineEnd) {
    for (let service of state.facet(foldService)) {
      let result = service(state, lineStart, lineEnd);
      if (result)
        return result;
    }
    return syntaxFolding(state, lineStart, lineEnd);
  }
  function mapRange(range, mapping) {
    let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
    return from >= to ? void 0 : { from, to };
  }
  var foldEffect = /* @__PURE__ */ StateEffect.define({ map: mapRange });
  var unfoldEffect = /* @__PURE__ */ StateEffect.define({ map: mapRange });
  function selectedLines(view) {
    let lines = [];
    for (let { head } of view.state.selection.ranges) {
      if (lines.some((l) => l.from <= head && l.to >= head))
        continue;
      lines.push(view.lineBlockAt(head));
    }
    return lines;
  }
  var foldState = /* @__PURE__ */ StateField.define({
    create() {
      return Decoration.none;
    },
    update(folded, tr) {
      folded = folded.map(tr.changes);
      for (let e of tr.effects) {
        if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) {
          let { preparePlaceholder } = tr.state.facet(foldConfig);
          let widget = !preparePlaceholder ? foldWidget : Decoration.replace({ widget: new PreparedFoldWidget(preparePlaceholder(tr.state, e.value)) });
          folded = folded.update({ add: [widget.range(e.value.from, e.value.to)] });
        } else if (e.is(unfoldEffect)) {
          folded = folded.update({
            filter: (from, to) => e.value.from != from || e.value.to != to,
            filterFrom: e.value.from,
            filterTo: e.value.to
          });
        }
      }
      if (tr.selection) {
        let onSelection = false, { head } = tr.selection.main;
        folded.between(head, head, (a, b) => {
          if (a < head && b > head)
            onSelection = true;
        });
        if (onSelection)
          folded = folded.update({
            filterFrom: head,
            filterTo: head,
            filter: (a, b) => b <= head || a >= head
          });
      }
      return folded;
    },
    provide: (f) => EditorView.decorations.from(f),
    toJSON(folded, state) {
      let ranges = [];
      folded.between(0, state.doc.length, (from, to) => {
        ranges.push(from, to);
      });
      return ranges;
    },
    fromJSON(value) {
      if (!Array.isArray(value) || value.length % 2)
        throw new RangeError("Invalid JSON for fold state");
      let ranges = [];
      for (let i = 0; i < value.length; ) {
        let from = value[i++], to = value[i++];
        if (typeof from != "number" || typeof to != "number")
          throw new RangeError("Invalid JSON for fold state");
        ranges.push(foldWidget.range(from, to));
      }
      return Decoration.set(ranges, true);
    }
  });
  function findFold(state, from, to) {
    var _a2;
    let found = null;
    (_a2 = state.field(foldState, false)) === null || _a2 === void 0 ? void 0 : _a2.between(from, to, (from2, to2) => {
      if (!found || found.from > from2)
        found = { from: from2, to: to2 };
    });
    return found;
  }
  function foldExists(folded, from, to) {
    let found = false;
    folded.between(from, from, (a, b) => {
      if (a == from && b == to)
        found = true;
    });
    return found;
  }
  function maybeEnable(state, other) {
    return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));
  }
  var foldCode = (view) => {
    for (let line of selectedLines(view)) {
      let range = foldable(view.state, line.from, line.to);
      if (range) {
        view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });
        return true;
      }
    }
    return false;
  };
  var unfoldCode = (view) => {
    if (!view.state.field(foldState, false))
      return false;
    let effects = [];
    for (let line of selectedLines(view)) {
      let folded = findFold(view.state, line.from, line.to);
      if (folded)
        effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
    }
    if (effects.length)
      view.dispatch({ effects });
    return effects.length > 0;
  };
  function announceFold(view, range, fold = true) {
    let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;
    return EditorView.announce.of(`${view.state.phrase(fold ? "Folded lines" : "Unfolded lines")} ${lineFrom} ${view.state.phrase("to")} ${lineTo}.`);
  }
  var foldAll = (view) => {
    let { state } = view, effects = [];
    for (let pos = 0; pos < state.doc.length; ) {
      let line = view.lineBlockAt(pos), range = foldable(state, line.from, line.to);
      if (range)
        effects.push(foldEffect.of(range));
      pos = (range ? view.lineBlockAt(range.to) : line).to + 1;
    }
    if (effects.length)
      view.dispatch({ effects: maybeEnable(view.state, effects) });
    return !!effects.length;
  };
  var unfoldAll = (view) => {
    let field = view.state.field(foldState, false);
    if (!field || !field.size)
      return false;
    let effects = [];
    field.between(0, view.state.doc.length, (from, to) => {
      effects.push(unfoldEffect.of({ from, to }));
    });
    view.dispatch({ effects });
    return true;
  };
  var foldKeymap = [
    { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: foldCode },
    { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: unfoldCode },
    { key: "Ctrl-Alt-[", run: foldAll },
    { key: "Ctrl-Alt-]", run: unfoldAll }
  ];
  var defaultConfig = {
    placeholderDOM: null,
    preparePlaceholder: null,
    placeholderText: "\u2026"
  };
  var foldConfig = /* @__PURE__ */ Facet.define({
    combine(values) {
      return combineConfig(values, defaultConfig);
    }
  });
  function codeFolding(config2) {
    let result = [foldState, baseTheme$12];
    if (config2)
      result.push(foldConfig.of(config2));
    return result;
  }
  function widgetToDOM(view, prepared) {
    let { state } = view, conf = state.facet(foldConfig);
    let onclick = (event) => {
      let line = view.lineBlockAt(view.posAtDOM(event.target));
      let folded = findFold(view.state, line.from, line.to);
      if (folded)
        view.dispatch({ effects: unfoldEffect.of(folded) });
      event.preventDefault();
    };
    if (conf.placeholderDOM)
      return conf.placeholderDOM(view, onclick, prepared);
    let element2 = document.createElement("span");
    element2.textContent = conf.placeholderText;
    element2.setAttribute("aria-label", state.phrase("folded code"));
    element2.title = state.phrase("unfold");
    element2.className = "cm-foldPlaceholder";
    element2.onclick = onclick;
    return element2;
  }
  var foldWidget = /* @__PURE__ */ Decoration.replace({ widget: /* @__PURE__ */ new class extends WidgetType {
    toDOM(view) {
      return widgetToDOM(view, null);
    }
  }() });
  var PreparedFoldWidget = class extends WidgetType {
    constructor(value) {
      super();
      this.value = value;
    }
    eq(other) {
      return this.value == other.value;
    }
    toDOM(view) {
      return widgetToDOM(view, this.value);
    }
  };
  var foldGutterDefaults = {
    openText: "\u2304",
    closedText: "\u203A",
    markerDOM: null,
    domEventHandlers: {},
    foldingChanged: () => false
  };
  var FoldMarker = class extends GutterMarker {
    constructor(config2, open) {
      super();
      this.config = config2;
      this.open = open;
    }
    eq(other) {
      return this.config == other.config && this.open == other.open;
    }
    toDOM(view) {
      if (this.config.markerDOM)
        return this.config.markerDOM(this.open);
      let span = document.createElement("span");
      span.textContent = this.open ? this.config.openText : this.config.closedText;
      span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
      return span;
    }
  };
  function foldGutter(config2 = {}) {
    let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config2);
    let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
    let markers = ViewPlugin.fromClass(class {
      constructor(view) {
        this.from = view.viewport.from;
        this.markers = this.buildMarkers(view);
      }
      update(update) {
        if (update.docChanged || update.viewportChanged || update.startState.facet(language) != update.state.facet(language) || update.startState.field(foldState, false) != update.state.field(foldState, false) || syntaxTree(update.startState) != syntaxTree(update.state) || fullConfig.foldingChanged(update))
          this.markers = this.buildMarkers(update.view);
      }
      buildMarkers(view) {
        let builder = new RangeSetBuilder();
        for (let line of view.viewportLineBlocks) {
          let mark = findFold(view.state, line.from, line.to) ? canUnfold : foldable(view.state, line.from, line.to) ? canFold : null;
          if (mark)
            builder.add(line.from, line.from, mark);
        }
        return builder.finish();
      }
    });
    let { domEventHandlers } = fullConfig;
    return [
      markers,
      gutter({
        class: "cm-foldGutter",
        markers(view) {
          var _a2;
          return ((_a2 = view.plugin(markers)) === null || _a2 === void 0 ? void 0 : _a2.markers) || RangeSet.empty;
        },
        initialSpacer() {
          return new FoldMarker(fullConfig, false);
        },
        domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), { click: (view, line, event) => {
          if (domEventHandlers.click && domEventHandlers.click(view, line, event))
            return true;
          let folded = findFold(view.state, line.from, line.to);
          if (folded) {
            view.dispatch({ effects: unfoldEffect.of(folded) });
            return true;
          }
          let range = foldable(view.state, line.from, line.to);
          if (range) {
            view.dispatch({ effects: foldEffect.of(range) });
            return true;
          }
          return false;
        } })
      }),
      codeFolding()
    ];
  }
  var baseTheme$12 = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-foldPlaceholder": {
      backgroundColor: "#eee",
      border: "1px solid #ddd",
      color: "#888",
      borderRadius: ".2em",
      margin: "0 1px",
      padding: "0 1px",
      cursor: "pointer"
    },
    ".cm-foldGutter span": {
      padding: "0 1px",
      cursor: "pointer"
    }
  });
  var HighlightStyle = class _HighlightStyle {
    constructor(specs, options) {
      this.specs = specs;
      let modSpec;
      function def(spec) {
        let cls = StyleModule.newName();
        (modSpec || (modSpec = /* @__PURE__ */ Object.create(null)))["." + cls] = spec;
        return cls;
      }
      const all2 = typeof options.all == "string" ? options.all : options.all ? def(options.all) : void 0;
      const scopeOpt = options.scope;
      this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data : scopeOpt ? (type) => type == scopeOpt : void 0;
      this.style = tagHighlighter(specs.map((style) => ({
        tag: style.tag,
        class: style.class || def(Object.assign({}, style, { tag: null }))
      })), {
        all: all2
      }).style;
      this.module = modSpec ? new StyleModule(modSpec) : null;
      this.themeType = options.themeType;
    }
    /**
    Create a highlighter style that associates the given styles to
    the given tags. The specs must be objects that hold a style tag
    or array of tags in their `tag` property, and either a single
    `class` property providing a static CSS class (for highlighter
    that rely on external styling), or a
    [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
    set of CSS properties (which define the styling for those tags).
    
    The CSS rules created for a highlighter will be emitted in the
    order of the spec's properties. That means that for elements that
    have multiple tags associated with them, styles defined further
    down in the list will have a higher CSS precedence than styles
    defined earlier.
    */
    static define(specs, options) {
      return new _HighlightStyle(specs, options || {});
    }
  };
  var highlighterFacet = /* @__PURE__ */ Facet.define();
  var fallbackHighlighter = /* @__PURE__ */ Facet.define({
    combine(values) {
      return values.length ? [values[0]] : null;
    }
  });
  function getHighlighters(state) {
    let main = state.facet(highlighterFacet);
    return main.length ? main : state.facet(fallbackHighlighter);
  }
  function syntaxHighlighting(highlighter, options) {
    let ext = [treeHighlighter], themeType;
    if (highlighter instanceof HighlightStyle) {
      if (highlighter.module)
        ext.push(EditorView.styleModule.of(highlighter.module));
      themeType = highlighter.themeType;
    }
    if (options === null || options === void 0 ? void 0 : options.fallback)
      ext.push(fallbackHighlighter.of(highlighter));
    else if (themeType)
      ext.push(highlighterFacet.computeN([EditorView.darkTheme], (state) => {
        return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
      }));
    else
      ext.push(highlighterFacet.of(highlighter));
    return ext;
  }
  var TreeHighlighter = class {
    constructor(view) {
      this.markCache = /* @__PURE__ */ Object.create(null);
      this.tree = syntaxTree(view.state);
      this.decorations = this.buildDeco(view, getHighlighters(view.state));
      this.decoratedTo = view.viewport.to;
    }
    update(update) {
      let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
      let styleChange = highlighters != getHighlighters(update.startState);
      let { viewport: viewport2 } = update.view, decoratedToMapped = update.changes.mapPos(this.decoratedTo, 1);
      if (tree.length < viewport2.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport2.to) {
        this.decorations = this.decorations.map(update.changes);
        this.decoratedTo = decoratedToMapped;
      } else if (tree != this.tree || update.viewportChanged || styleChange) {
        this.tree = tree;
        this.decorations = this.buildDeco(update.view, highlighters);
        this.decoratedTo = viewport2.to;
      }
    }
    buildDeco(view, highlighters) {
      if (!highlighters || !this.tree.length)
        return Decoration.none;
      let builder = new RangeSetBuilder();
      for (let { from, to } of view.visibleRanges) {
        highlightTree(this.tree, highlighters, (from2, to2, style) => {
          builder.add(from2, to2, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
        }, from, to);
      }
      return builder.finish();
    }
  };
  var treeHighlighter = /* @__PURE__ */ Prec.high(/* @__PURE__ */ ViewPlugin.fromClass(TreeHighlighter, {
    decorations: (v) => v.decorations
  }));
  var defaultHighlightStyle = /* @__PURE__ */ HighlightStyle.define([
    {
      tag: tags.meta,
      color: "#404740"
    },
    {
      tag: tags.link,
      textDecoration: "underline"
    },
    {
      tag: tags.heading,
      textDecoration: "underline",
      fontWeight: "bold"
    },
    {
      tag: tags.emphasis,
      fontStyle: "italic"
    },
    {
      tag: tags.strong,
      fontWeight: "bold"
    },
    {
      tag: tags.strikethrough,
      textDecoration: "line-through"
    },
    {
      tag: tags.keyword,
      color: "#708"
    },
    {
      tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
      color: "#219"
    },
    {
      tag: [tags.literal, tags.inserted],
      color: "#164"
    },
    {
      tag: [tags.string, tags.deleted],
      color: "#a11"
    },
    {
      tag: [tags.regexp, tags.escape, /* @__PURE__ */ tags.special(tags.string)],
      color: "#e40"
    },
    {
      tag: /* @__PURE__ */ tags.definition(tags.variableName),
      color: "#00f"
    },
    {
      tag: /* @__PURE__ */ tags.local(tags.variableName),
      color: "#30a"
    },
    {
      tag: [tags.typeName, tags.namespace],
      color: "#085"
    },
    {
      tag: tags.className,
      color: "#167"
    },
    {
      tag: [/* @__PURE__ */ tags.special(tags.variableName), tags.macroName],
      color: "#256"
    },
    {
      tag: /* @__PURE__ */ tags.definition(tags.propertyName),
      color: "#00c"
    },
    {
      tag: tags.comment,
      color: "#940"
    },
    {
      tag: tags.invalid,
      color: "#f00"
    }
  ]);
  var baseTheme2 = /* @__PURE__ */ EditorView.baseTheme({
    "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
    "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
  });
  var DefaultScanDist = 1e4;
  var DefaultBrackets = "()[]{}";
  var bracketMatchingConfig = /* @__PURE__ */ Facet.define({
    combine(configs) {
      return combineConfig(configs, {
        afterCursor: true,
        brackets: DefaultBrackets,
        maxScanDistance: DefaultScanDist,
        renderMatch: defaultRenderMatch
      });
    }
  });
  var matchingMark = /* @__PURE__ */ Decoration.mark({ class: "cm-matchingBracket" });
  var nonmatchingMark = /* @__PURE__ */ Decoration.mark({ class: "cm-nonmatchingBracket" });
  function defaultRenderMatch(match) {
    let decorations2 = [];
    let mark = match.matched ? matchingMark : nonmatchingMark;
    decorations2.push(mark.range(match.start.from, match.start.to));
    if (match.end)
      decorations2.push(mark.range(match.end.from, match.end.to));
    return decorations2;
  }
  var bracketMatchingState = /* @__PURE__ */ StateField.define({
    create() {
      return Decoration.none;
    },
    update(deco, tr) {
      if (!tr.docChanged && !tr.selection)
        return deco;
      let decorations2 = [];
      let config2 = tr.state.facet(bracketMatchingConfig);
      for (let range of tr.state.selection.ranges) {
        if (!range.empty)
          continue;
        let match = matchBrackets(tr.state, range.head, -1, config2) || range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config2) || config2.afterCursor && (matchBrackets(tr.state, range.head, 1, config2) || range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config2));
        if (match)
          decorations2 = decorations2.concat(config2.renderMatch(match, tr.state));
      }
      return Decoration.set(decorations2, true);
    },
    provide: (f) => EditorView.decorations.from(f)
  });
  var bracketMatchingUnique = [
    bracketMatchingState,
    baseTheme2
  ];
  function bracketMatching(config2 = {}) {
    return [bracketMatchingConfig.of(config2), bracketMatchingUnique];
  }
  var bracketMatchingHandle = /* @__PURE__ */ new NodeProp();
  function matchingNodes(node, dir, brackets) {
    let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
    if (byProp)
      return byProp;
    if (node.name.length == 1) {
      let index = brackets.indexOf(node.name);
      if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
        return [brackets[index + dir]];
    }
    return null;
  }
  function findHandle(node) {
    let hasHandle = node.type.prop(bracketMatchingHandle);
    return hasHandle ? hasHandle(node.node) : node;
  }
  function matchBrackets(state, pos, dir, config2 = {}) {
    let maxScanDistance = config2.maxScanDistance || DefaultScanDist, brackets = config2.brackets || DefaultBrackets;
    let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
    for (let cur2 = node; cur2; cur2 = cur2.parent) {
      let matches = matchingNodes(cur2.type, dir, brackets);
      if (matches && cur2.from < cur2.to) {
        let handle = findHandle(cur2);
        if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))
          return matchMarkedBrackets(state, pos, dir, cur2, handle, matches, brackets);
      }
    }
    return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
  }
  function matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {
    let parent = token.parent, firstToken = { from: handle.from, to: handle.to };
    let depth2 = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
    if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
      do {
        if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
          if (depth2 == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
            let endHandle = findHandle(cursor);
            return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : void 0, matched: true };
          } else if (matchingNodes(cursor.type, dir, brackets)) {
            depth2++;
          } else if (matchingNodes(cursor.type, -dir, brackets)) {
            if (depth2 == 0) {
              let endHandle = findHandle(cursor);
              return {
                start: firstToken,
                end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : void 0,
                matched: false
              };
            }
            depth2--;
          }
        }
      } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
    return { start: firstToken, matched: false };
  }
  function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
    let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
    let bracket2 = brackets.indexOf(startCh);
    if (bracket2 < 0 || bracket2 % 2 == 0 != dir > 0)
      return null;
    let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
    let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth2 = 0;
    for (let distance2 = 0; !iter.next().done && distance2 <= maxScanDistance; ) {
      let text = iter.value;
      if (dir < 0)
        distance2 += text.length;
      let basePos = pos + distance2 * dir;
      for (let pos2 = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos2 != end; pos2 += dir) {
        let found = brackets.indexOf(text[pos2]);
        if (found < 0 || tree.resolveInner(basePos + pos2, 1).type != tokenType)
          continue;
        if (found % 2 == 0 == dir > 0) {
          depth2++;
        } else if (depth2 == 1) {
          return { start: startToken, end: { from: basePos + pos2, to: basePos + pos2 + 1 }, matched: found >> 1 == bracket2 >> 1 };
        } else {
          depth2--;
        }
      }
      if (dir > 0)
        distance2 += text.length;
    }
    return iter.done ? { start: startToken, matched: false } : null;
  }
  var noTokens = /* @__PURE__ */ Object.create(null);
  var typeArray = [NodeType.none];
  var warned = [];
  var byTag = /* @__PURE__ */ Object.create(null);
  var defaultTable = /* @__PURE__ */ Object.create(null);
  for (let [legacyName, name2] of [
    ["variable", "variableName"],
    ["variable-2", "variableName.special"],
    ["string-2", "string.special"],
    ["def", "variableName.definition"],
    ["tag", "tagName"],
    ["attribute", "attributeName"],
    ["type", "typeName"],
    ["builtin", "variableName.standard"],
    ["qualifier", "modifier"],
    ["error", "invalid"],
    ["header", "heading"],
    ["property", "propertyName"]
  ])
    defaultTable[legacyName] = /* @__PURE__ */ createTokenType(noTokens, name2);
  function warnForPart(part, msg) {
    if (warned.indexOf(part) > -1)
      return;
    warned.push(part);
    console.warn(msg);
  }
  function createTokenType(extra, tagStr) {
    let tags$1 = [];
    for (let name3 of tagStr.split(" ")) {
      let found = [];
      for (let part of name3.split(".")) {
        let value = extra[part] || tags[part];
        if (!value) {
          warnForPart(part, `Unknown highlighting tag ${part}`);
        } else if (typeof value == "function") {
          if (!found.length)
            warnForPart(part, `Modifier ${part} used at start of tag`);
          else
            found = found.map(value);
        } else {
          if (found.length)
            warnForPart(part, `Tag ${part} used as modifier`);
          else
            found = Array.isArray(value) ? value : [value];
        }
      }
      for (let tag of found)
        tags$1.push(tag);
    }
    if (!tags$1.length)
      return 0;
    let name2 = tagStr.replace(/ /g, "_"), key = name2 + " " + tags$1.map((t2) => t2.id);
    let known = byTag[key];
    if (known)
      return known.id;
    let type = byTag[key] = NodeType.define({
      id: typeArray.length,
      name: name2,
      props: [styleTags({ [name2]: tags$1 })]
    });
    typeArray.push(type);
    return type.id;
  }
  var marks = {
    rtl: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "rtl" }, bidiIsolate: Direction.RTL }),
    ltr: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "ltr" }, bidiIsolate: Direction.LTR }),
    auto: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "auto" }, bidiIsolate: null })
  };

  // node_modules/@codemirror/commands/dist/index.js
  var toggleComment = (target) => {
    let { state } = target, line = state.doc.lineAt(state.selection.main.from), config2 = getConfig(target.state, line.from);
    return config2.line ? toggleLineComment(target) : config2.block ? toggleBlockCommentByLine(target) : false;
  };
  function command(f, option) {
    return ({ state, dispatch }) => {
      if (state.readOnly)
        return false;
      let tr = f(option, state);
      if (!tr)
        return false;
      dispatch(state.update(tr));
      return true;
    };
  }
  var toggleLineComment = /* @__PURE__ */ command(
    changeLineComment,
    0
    /* CommentOption.Toggle */
  );
  var toggleBlockComment = /* @__PURE__ */ command(
    changeBlockComment,
    0
    /* CommentOption.Toggle */
  );
  var toggleBlockCommentByLine = /* @__PURE__ */ command(
    (o, s) => changeBlockComment(o, s, selectedLineRanges(s)),
    0
    /* CommentOption.Toggle */
  );
  function getConfig(state, pos) {
    let data = state.languageDataAt("commentTokens", pos, 1);
    return data.length ? data[0] : {};
  }
  var SearchMargin = 50;
  function findBlockComment(state, { open, close }, from, to) {
    let textBefore = state.sliceDoc(from - SearchMargin, from);
    let textAfter = state.sliceDoc(to, to + SearchMargin);
    let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
    let beforeOff = textBefore.length - spaceBefore;
    if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
      return {
        open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
        close: { pos: to + spaceAfter, margin: spaceAfter && 1 }
      };
    }
    let startText, endText;
    if (to - from <= 2 * SearchMargin) {
      startText = endText = state.sliceDoc(from, to);
    } else {
      startText = state.sliceDoc(from, from + SearchMargin);
      endText = state.sliceDoc(to - SearchMargin, to);
    }
    let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
    let endOff = endText.length - endSpace - close.length;
    if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close.length) == close) {
      return {
        open: {
          pos: from + startSpace + open.length,
          margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0
        },
        close: {
          pos: to - endSpace - close.length,
          margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0
        }
      };
    }
    return null;
  }
  function selectedLineRanges(state) {
    let ranges = [];
    for (let r of state.selection.ranges) {
      let fromLine = state.doc.lineAt(r.from);
      let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
      if (toLine.from > fromLine.from && toLine.from == r.to)
        toLine = r.to == fromLine.to + 1 ? fromLine : state.doc.lineAt(r.to - 1);
      let last = ranges.length - 1;
      if (last >= 0 && ranges[last].to > fromLine.from)
        ranges[last].to = toLine.to;
      else
        ranges.push({ from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length, to: toLine.to });
    }
    return ranges;
  }
  function changeBlockComment(option, state, ranges = state.selection.ranges) {
    let tokens = ranges.map((r) => getConfig(state, r.from).block);
    if (!tokens.every((c) => c))
      return null;
    let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));
    if (option != 2 && !comments.every((c) => c)) {
      return { changes: state.changes(ranges.map((range, i) => {
        if (comments[i])
          return [];
        return [{ from: range.from, insert: tokens[i].open + " " }, { from: range.to, insert: " " + tokens[i].close }];
      })) };
    } else if (option != 1 && comments.some((c) => c)) {
      let changes = [];
      for (let i = 0, comment2; i < comments.length; i++)
        if (comment2 = comments[i]) {
          let token = tokens[i], { open, close } = comment2;
          changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
        }
      return { changes };
    }
    return null;
  }
  function changeLineComment(option, state, ranges = state.selection.ranges) {
    let lines = [];
    let prevLine = -1;
    for (let { from, to } of ranges) {
      let startI = lines.length, minIndent = 1e9;
      let token = getConfig(state, from).line;
      if (!token)
        continue;
      for (let pos = from; pos <= to; ) {
        let line = state.doc.lineAt(pos);
        if (line.from > prevLine && (from == to || to > line.from)) {
          prevLine = line.from;
          let indent = /^\s*/.exec(line.text)[0].length;
          let empty2 = indent == line.length;
          let comment2 = line.text.slice(indent, indent + token.length) == token ? indent : -1;
          if (indent < line.text.length && indent < minIndent)
            minIndent = indent;
          lines.push({ line, comment: comment2, token, indent, empty: empty2, single: false });
        }
        pos = line.to + 1;
      }
      if (minIndent < 1e9) {
        for (let i = startI; i < lines.length; i++)
          if (lines[i].indent < lines[i].line.text.length)
            lines[i].indent = minIndent;
      }
      if (lines.length == startI + 1)
        lines[startI].single = true;
    }
    if (option != 2 && lines.some((l) => l.comment < 0 && (!l.empty || l.single))) {
      let changes = [];
      for (let { line, token, indent, empty: empty2, single } of lines)
        if (single || !empty2)
          changes.push({ from: line.from + indent, insert: token + " " });
      let changeSet = state.changes(changes);
      return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
    } else if (option != 1 && lines.some((l) => l.comment >= 0)) {
      let changes = [];
      for (let { line, comment: comment2, token } of lines)
        if (comment2 >= 0) {
          let from = line.from + comment2, to = from + token.length;
          if (line.text[to - line.from] == " ")
            to++;
          changes.push({ from, to });
        }
      return { changes };
    }
    return null;
  }
  var fromHistory = /* @__PURE__ */ Annotation.define();
  var isolateHistory = /* @__PURE__ */ Annotation.define();
  var invertedEffects = /* @__PURE__ */ Facet.define();
  var historyConfig = /* @__PURE__ */ Facet.define({
    combine(configs) {
      return combineConfig(configs, {
        minDepth: 100,
        newGroupDelay: 500,
        joinToEvent: (_t, isAdjacent2) => isAdjacent2
      }, {
        minDepth: Math.max,
        newGroupDelay: Math.min,
        joinToEvent: (a, b) => (tr, adj) => a(tr, adj) || b(tr, adj)
      });
    }
  });
  var historyField_ = /* @__PURE__ */ StateField.define({
    create() {
      return HistoryState.empty;
    },
    update(state, tr) {
      let config2 = tr.state.facet(historyConfig);
      let fromHist = tr.annotation(fromHistory);
      if (fromHist) {
        let item = HistEvent.fromTransaction(tr, fromHist.selection), from = fromHist.side;
        let other = from == 0 ? state.undone : state.done;
        if (item)
          other = updateBranch(other, other.length, config2.minDepth, item);
        else
          other = addSelection(other, tr.startState.selection);
        return new HistoryState(from == 0 ? fromHist.rest : other, from == 0 ? other : fromHist.rest);
      }
      let isolate = tr.annotation(isolateHistory);
      if (isolate == "full" || isolate == "before")
        state = state.isolate();
      if (tr.annotation(Transaction.addToHistory) === false)
        return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
      let event = HistEvent.fromTransaction(tr);
      let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
      if (event)
        state = state.addChanges(event, time, userEvent, config2, tr);
      else if (tr.selection)
        state = state.addSelection(tr.startState.selection, time, userEvent, config2.newGroupDelay);
      if (isolate == "full" || isolate == "after")
        state = state.isolate();
      return state;
    },
    toJSON(value) {
      return { done: value.done.map((e) => e.toJSON()), undone: value.undone.map((e) => e.toJSON()) };
    },
    fromJSON(json) {
      return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
    }
  });
  function history(config2 = {}) {
    return [
      historyField_,
      historyConfig.of(config2),
      EditorView.domEventHandlers({
        beforeinput(e, view) {
          let command2 = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
          if (!command2)
            return false;
          e.preventDefault();
          return command2(view);
        }
      })
    ];
  }
  function cmd(side, selection) {
    return function({ state, dispatch }) {
      if (!selection && state.readOnly)
        return false;
      let historyState = state.field(historyField_, false);
      if (!historyState)
        return false;
      let tr = historyState.pop(side, state, selection);
      if (!tr)
        return false;
      dispatch(tr);
      return true;
    };
  }
  var undo = /* @__PURE__ */ cmd(0, false);
  var redo = /* @__PURE__ */ cmd(1, false);
  var undoSelection = /* @__PURE__ */ cmd(0, true);
  var redoSelection = /* @__PURE__ */ cmd(1, true);
  var HistEvent = class _HistEvent {
    constructor(changes, effects, mapped, startSelection, selectionsAfter) {
      this.changes = changes;
      this.effects = effects;
      this.mapped = mapped;
      this.startSelection = startSelection;
      this.selectionsAfter = selectionsAfter;
    }
    setSelAfter(after) {
      return new _HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
    }
    toJSON() {
      var _a2, _b, _c;
      return {
        changes: (_a2 = this.changes) === null || _a2 === void 0 ? void 0 : _a2.toJSON(),
        mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
        startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
        selectionsAfter: this.selectionsAfter.map((s) => s.toJSON())
      };
    }
    static fromJSON(json) {
      return new _HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
    }
    // This does not check `addToHistory` and such, it assumes the
    // transaction needs to be converted to an item. Returns null when
    // there are no changes or effects in the transaction.
    static fromTransaction(tr, selection) {
      let effects = none2;
      for (let invert of tr.startState.facet(invertedEffects)) {
        let result = invert(tr);
        if (result.length)
          effects = effects.concat(result);
      }
      if (!effects.length && tr.changes.empty)
        return null;
      return new _HistEvent(tr.changes.invert(tr.startState.doc), effects, void 0, selection || tr.startState.selection, none2);
    }
    static selection(selections) {
      return new _HistEvent(void 0, none2, void 0, void 0, selections);
    }
  };
  function updateBranch(branch, to, maxLen, newEvent) {
    let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
    let newBranch = branch.slice(start, to);
    newBranch.push(newEvent);
    return newBranch;
  }
  function isAdjacent(a, b) {
    let ranges = [], isAdjacent2 = false;
    a.iterChangedRanges((f, t2) => ranges.push(f, t2));
    b.iterChangedRanges((_f, _t, f, t2) => {
      for (let i = 0; i < ranges.length; ) {
        let from = ranges[i++], to = ranges[i++];
        if (t2 >= from && f <= to)
          isAdjacent2 = true;
      }
    });
    return isAdjacent2;
  }
  function eqSelectionShape(a, b) {
    return a.ranges.length == b.ranges.length && a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
  }
  function conc(a, b) {
    return !a.length ? b : !b.length ? a : a.concat(b);
  }
  var none2 = [];
  var MaxSelectionsPerEvent = 200;
  function addSelection(branch, selection) {
    if (!branch.length) {
      return [HistEvent.selection([selection])];
    } else {
      let lastEvent = branch[branch.length - 1];
      let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
      if (sels.length && sels[sels.length - 1].eq(selection))
        return branch;
      sels.push(selection);
      return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
    }
  }
  function popSelection(branch) {
    let last = branch[branch.length - 1];
    let newBranch = branch.slice();
    newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
    return newBranch;
  }
  function addMappingToBranch(branch, mapping) {
    if (!branch.length)
      return branch;
    let length2 = branch.length, selections = none2;
    while (length2) {
      let event = mapEvent(branch[length2 - 1], mapping, selections);
      if (event.changes && !event.changes.empty || event.effects.length) {
        let result = branch.slice(0, length2);
        result[length2 - 1] = event;
        return result;
      } else {
        mapping = event.mapped;
        length2--;
        selections = event.selectionsAfter;
      }
    }
    return selections.length ? [HistEvent.selection(selections)] : none2;
  }
  function mapEvent(event, mapping, extraSelections) {
    let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map((s) => s.map(mapping)) : none2, extraSelections);
    if (!event.changes)
      return HistEvent.selection(selections);
    let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
    let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
    return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
  }
  var joinableUserEvent = /^(input\.type|delete)($|\.)/;
  var HistoryState = class _HistoryState {
    constructor(done, undone, prevTime = 0, prevUserEvent = void 0) {
      this.done = done;
      this.undone = undone;
      this.prevTime = prevTime;
      this.prevUserEvent = prevUserEvent;
    }
    isolate() {
      return this.prevTime ? new _HistoryState(this.done, this.undone) : this;
    }
    addChanges(event, time, userEvent, config2, tr) {
      let done = this.done, lastEvent = done[done.length - 1];
      if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes && (!userEvent || joinableUserEvent.test(userEvent)) && (!lastEvent.selectionsAfter.length && time - this.prevTime < config2.newGroupDelay && config2.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes)) || // For compose (but not compose.start) events, always join with previous event
      userEvent == "input.type.compose")) {
        done = updateBranch(done, done.length - 1, config2.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(StateEffect.mapEffects(event.effects, lastEvent.changes), lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none2));
      } else {
        done = updateBranch(done, done.length, config2.minDepth, event);
      }
      return new _HistoryState(done, none2, time, userEvent);
    }
    addSelection(selection, time, userEvent, newGroupDelay) {
      let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none2;
      if (last.length > 0 && time - this.prevTime < newGroupDelay && userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) && eqSelectionShape(last[last.length - 1], selection))
        return this;
      return new _HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
    }
    addMapping(mapping) {
      return new _HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
    }
    pop(side, state, onlySelection) {
      let branch = side == 0 ? this.done : this.undone;
      if (branch.length == 0)
        return null;
      let event = branch[branch.length - 1], selection = event.selectionsAfter[0] || state.selection;
      if (onlySelection && event.selectionsAfter.length) {
        return state.update({
          selection: event.selectionsAfter[event.selectionsAfter.length - 1],
          annotations: fromHistory.of({ side, rest: popSelection(branch), selection }),
          userEvent: side == 0 ? "select.undo" : "select.redo",
          scrollIntoView: true
        });
      } else if (!event.changes) {
        return null;
      } else {
        let rest = branch.length == 1 ? none2 : branch.slice(0, branch.length - 1);
        if (event.mapped)
          rest = addMappingToBranch(rest, event.mapped);
        return state.update({
          changes: event.changes,
          selection: event.startSelection,
          effects: event.effects,
          annotations: fromHistory.of({ side, rest, selection }),
          filter: false,
          userEvent: side == 0 ? "undo" : "redo",
          scrollIntoView: true
        });
      }
    }
  };
  HistoryState.empty = /* @__PURE__ */ new HistoryState(none2, none2);
  var historyKeymap = [
    { key: "Mod-z", run: undo, preventDefault: true },
    { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
    { linux: "Ctrl-Shift-z", run: redo, preventDefault: true },
    { key: "Mod-u", run: undoSelection, preventDefault: true },
    { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
  ];
  function updateSel(sel, by) {
    return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
  }
  function setSel(state, selection) {
    return state.update({ selection, scrollIntoView: true, userEvent: "select" });
  }
  function moveSel({ state, dispatch }, how) {
    let selection = updateSel(state.selection, how);
    if (selection.eq(state.selection, true))
      return false;
    dispatch(setSel(state, selection));
    return true;
  }
  function rangeEnd(range, forward) {
    return EditorSelection.cursor(forward ? range.to : range.from);
  }
  function cursorByChar(view, forward) {
    return moveSel(view, (range) => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
  }
  function ltrAtCursor(view) {
    return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
  }
  var cursorCharLeft = (view) => cursorByChar(view, !ltrAtCursor(view));
  var cursorCharRight = (view) => cursorByChar(view, ltrAtCursor(view));
  function cursorByGroup(view, forward) {
    return moveSel(view, (range) => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
  }
  var cursorGroupLeft = (view) => cursorByGroup(view, !ltrAtCursor(view));
  var cursorGroupRight = (view) => cursorByGroup(view, ltrAtCursor(view));
  var segmenter = typeof Intl != "undefined" && Intl.Segmenter ? /* @__PURE__ */ new Intl.Segmenter(void 0, { granularity: "word" }) : null;
  function interestingNode(state, node, bracketProp) {
    if (node.type.prop(bracketProp))
      return true;
    let len = node.to - node.from;
    return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
  }
  function moveBySyntax(state, start, forward) {
    let pos = syntaxTree(state).resolveInner(start.head);
    let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
    for (let at = start.head; ; ) {
      let next = forward ? pos.childAfter(at) : pos.childBefore(at);
      if (!next)
        break;
      if (interestingNode(state, next, bracketProp))
        pos = next;
      else
        at = forward ? next.to : next.from;
    }
    let bracket2 = pos.type.prop(bracketProp), match, newPos;
    if (bracket2 && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
      newPos = forward ? match.end.to : match.end.from;
    else
      newPos = forward ? pos.to : pos.from;
    return EditorSelection.cursor(newPos, forward ? -1 : 1);
  }
  var cursorSyntaxLeft = (view) => moveSel(view, (range) => moveBySyntax(view.state, range, !ltrAtCursor(view)));
  var cursorSyntaxRight = (view) => moveSel(view, (range) => moveBySyntax(view.state, range, ltrAtCursor(view)));
  function cursorByLine(view, forward) {
    return moveSel(view, (range) => {
      if (!range.empty)
        return rangeEnd(range, forward);
      let moved = view.moveVertically(range, forward);
      return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
    });
  }
  var cursorLineUp = (view) => cursorByLine(view, false);
  var cursorLineDown = (view) => cursorByLine(view, true);
  function pageInfo(view) {
    let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
    let marginTop = 0, marginBottom = 0, height;
    if (selfScroll) {
      for (let source of view.state.facet(EditorView.scrollMargins)) {
        let margins = source(view);
        if (margins === null || margins === void 0 ? void 0 : margins.top)
          marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
        if (margins === null || margins === void 0 ? void 0 : margins.bottom)
          marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
      }
      height = view.scrollDOM.clientHeight - marginTop - marginBottom;
    } else {
      height = (view.dom.ownerDocument.defaultView || window).innerHeight;
    }
    return {
      marginTop,
      marginBottom,
      selfScroll,
      height: Math.max(view.defaultLineHeight, height - 5)
    };
  }
  function cursorByPage(view, forward) {
    let page = pageInfo(view);
    let { state } = view, selection = updateSel(state.selection, (range) => {
      return range.empty ? view.moveVertically(range, forward, page.height) : rangeEnd(range, forward);
    });
    if (selection.eq(state.selection))
      return false;
    let effect;
    if (page.selfScroll) {
      let startPos = view.coordsAtPos(state.selection.main.head);
      let scrollRect = view.scrollDOM.getBoundingClientRect();
      let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;
      if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
        effect = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollTop });
    }
    view.dispatch(setSel(state, selection), { effects: effect });
    return true;
  }
  var cursorPageUp = (view) => cursorByPage(view, false);
  var cursorPageDown = (view) => cursorByPage(view, true);
  function moveByLineBoundary(view, start, forward) {
    let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);
    if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
      moved = view.moveToLineBoundary(start, forward, false);
    if (!forward && moved.head == line.from && line.length) {
      let space2 = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
      if (space2 && start.head != line.from + space2)
        moved = EditorSelection.cursor(line.from + space2);
    }
    return moved;
  }
  var cursorLineBoundaryForward = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, true));
  var cursorLineBoundaryBackward = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, false));
  var cursorLineBoundaryLeft = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, !ltrAtCursor(view)));
  var cursorLineBoundaryRight = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, ltrAtCursor(view)));
  var cursorLineStart = (view) => moveSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
  var cursorLineEnd = (view) => moveSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
  function toMatchingBracket(state, dispatch, extend) {
    let found = false, selection = updateSel(state.selection, (range) => {
      let matching = matchBrackets(state, range.head, -1) || matchBrackets(state, range.head, 1) || range.head > 0 && matchBrackets(state, range.head - 1, 1) || range.head < state.doc.length && matchBrackets(state, range.head + 1, -1);
      if (!matching || !matching.end)
        return range;
      found = true;
      let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
      return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
    });
    if (!found)
      return false;
    dispatch(setSel(state, selection));
    return true;
  }
  var cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
  function extendSel(target, how) {
    let selection = updateSel(target.state.selection, (range) => {
      let head = how(range);
      return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || void 0);
    });
    if (selection.eq(target.state.selection))
      return false;
    target.dispatch(setSel(target.state, selection));
    return true;
  }
  function selectByChar(view, forward) {
    return extendSel(view, (range) => view.moveByChar(range, forward));
  }
  var selectCharLeft = (view) => selectByChar(view, !ltrAtCursor(view));
  var selectCharRight = (view) => selectByChar(view, ltrAtCursor(view));
  function selectByGroup(view, forward) {
    return extendSel(view, (range) => view.moveByGroup(range, forward));
  }
  var selectGroupLeft = (view) => selectByGroup(view, !ltrAtCursor(view));
  var selectGroupRight = (view) => selectByGroup(view, ltrAtCursor(view));
  var selectSyntaxLeft = (view) => extendSel(view, (range) => moveBySyntax(view.state, range, !ltrAtCursor(view)));
  var selectSyntaxRight = (view) => extendSel(view, (range) => moveBySyntax(view.state, range, ltrAtCursor(view)));
  function selectByLine(view, forward) {
    return extendSel(view, (range) => view.moveVertically(range, forward));
  }
  var selectLineUp = (view) => selectByLine(view, false);
  var selectLineDown = (view) => selectByLine(view, true);
  function selectByPage(view, forward) {
    return extendSel(view, (range) => view.moveVertically(range, forward, pageInfo(view).height));
  }
  var selectPageUp = (view) => selectByPage(view, false);
  var selectPageDown = (view) => selectByPage(view, true);
  var selectLineBoundaryForward = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, true));
  var selectLineBoundaryBackward = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, false));
  var selectLineBoundaryLeft = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, !ltrAtCursor(view)));
  var selectLineBoundaryRight = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, ltrAtCursor(view)));
  var selectLineStart = (view) => extendSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).from));
  var selectLineEnd = (view) => extendSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).to));
  var cursorDocStart = ({ state, dispatch }) => {
    dispatch(setSel(state, { anchor: 0 }));
    return true;
  };
  var cursorDocEnd = ({ state, dispatch }) => {
    dispatch(setSel(state, { anchor: state.doc.length }));
    return true;
  };
  var selectDocStart = ({ state, dispatch }) => {
    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
    return true;
  };
  var selectDocEnd = ({ state, dispatch }) => {
    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
    return true;
  };
  var selectAll = ({ state, dispatch }) => {
    dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
    return true;
  };
  var selectLine = ({ state, dispatch }) => {
    let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
    dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
    return true;
  };
  var selectParentSyntax = ({ state, dispatch }) => {
    let selection = updateSel(state.selection, (range) => {
      let tree = syntaxTree(state), stack2 = tree.resolveStack(range.from, 1);
      if (range.empty) {
        let stackBefore = tree.resolveStack(range.from, -1);
        if (stackBefore.node.from >= stack2.node.from && stackBefore.node.to <= stack2.node.to)
          stack2 = stackBefore;
      }
      for (let cur2 = stack2; cur2; cur2 = cur2.next) {
        let { node } = cur2;
        if ((node.from < range.from && node.to >= range.to || node.to > range.to && node.from <= range.from) && cur2.next)
          return EditorSelection.range(node.to, node.from);
      }
      return range;
    });
    if (selection.eq(state.selection))
      return false;
    dispatch(setSel(state, selection));
    return true;
  };
  var simplifySelection = ({ state, dispatch }) => {
    let cur2 = state.selection, selection = null;
    if (cur2.ranges.length > 1)
      selection = EditorSelection.create([cur2.main]);
    else if (!cur2.main.empty)
      selection = EditorSelection.create([EditorSelection.cursor(cur2.main.head)]);
    if (!selection)
      return false;
    dispatch(setSel(state, selection));
    return true;
  };
  function deleteBy(target, by) {
    if (target.state.readOnly)
      return false;
    let event = "delete.selection", { state } = target;
    let changes = state.changeByRange((range) => {
      let { from, to } = range;
      if (from == to) {
        let towards = by(range);
        if (towards < from) {
          event = "delete.backward";
          towards = skipAtomic(target, towards, false);
        } else if (towards > from) {
          event = "delete.forward";
          towards = skipAtomic(target, towards, true);
        }
        from = Math.min(from, towards);
        to = Math.max(to, towards);
      } else {
        from = skipAtomic(target, from, false);
        to = skipAtomic(target, to, true);
      }
      return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from, from < range.head ? -1 : 1) };
    });
    if (changes.changes.empty)
      return false;
    target.dispatch(state.update(changes, {
      scrollIntoView: true,
      userEvent: event,
      effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : void 0
    }));
    return true;
  }
  function skipAtomic(target, pos, forward) {
    if (target instanceof EditorView)
      for (let ranges of target.state.facet(EditorView.atomicRanges).map((f) => f(target)))
        ranges.between(pos, pos, (from, to) => {
          if (from < pos && to > pos)
            pos = forward ? to : from;
        });
    return pos;
  }
  var deleteByChar = (target, forward, byIndentUnit) => deleteBy(target, (range) => {
    let pos = range.from, { state } = target, line = state.doc.lineAt(pos), before, targetPos;
    if (byIndentUnit && !forward && pos > line.from && pos < line.from + 200 && !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
      if (before[before.length - 1] == "	")
        return pos - 1;
      let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
      for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
        pos--;
      targetPos = pos;
    } else {
      targetPos = findClusterBreak2(line.text, pos - line.from, forward, forward) + line.from;
      if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
        targetPos += forward ? 1 : -1;
      else if (!forward && /[\ufe00-\ufe0f]/.test(line.text.slice(targetPos - line.from, pos - line.from)))
        targetPos = findClusterBreak2(line.text, targetPos - line.from, false, false) + line.from;
    }
    return targetPos;
  });
  var deleteCharBackward = (view) => deleteByChar(view, false, true);
  var deleteCharForward = (view) => deleteByChar(view, true, false);
  var deleteByGroup = (target, forward) => deleteBy(target, (range) => {
    let pos = range.head, { state } = target, line = state.doc.lineAt(pos);
    let categorize = state.charCategorizer(pos);
    for (let cat = null; ; ) {
      if (pos == (forward ? line.to : line.from)) {
        if (pos == range.head && line.number != (forward ? state.doc.lines : 1))
          pos += forward ? 1 : -1;
        break;
      }
      let next = findClusterBreak2(line.text, pos - line.from, forward) + line.from;
      let nextChar2 = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
      let nextCat = categorize(nextChar2);
      if (cat != null && nextCat != cat)
        break;
      if (nextChar2 != " " || pos != range.head)
        cat = nextCat;
      pos = next;
    }
    return pos;
  });
  var deleteGroupBackward = (target) => deleteByGroup(target, false);
  var deleteGroupForward = (target) => deleteByGroup(target, true);
  var deleteToLineEnd = (view) => deleteBy(view, (range) => {
    let lineEnd = view.lineBlockAt(range.head).to;
    return range.head < lineEnd ? lineEnd : Math.min(view.state.doc.length, range.head + 1);
  });
  var deleteLineBoundaryBackward = (view) => deleteBy(view, (range) => {
    let lineStart = view.moveToLineBoundary(range, false).head;
    return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);
  });
  var deleteLineBoundaryForward = (view) => deleteBy(view, (range) => {
    let lineStart = view.moveToLineBoundary(range, true).head;
    return range.head < lineStart ? lineStart : Math.min(view.state.doc.length, range.head + 1);
  });
  var splitLine = ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let changes = state.changeByRange((range) => {
      return {
        changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
        range: EditorSelection.cursor(range.from)
      };
    });
    dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
    return true;
  };
  var transposeChars = ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let changes = state.changeByRange((range) => {
      if (!range.empty || range.from == 0 || range.from == state.doc.length)
        return { range };
      let pos = range.from, line = state.doc.lineAt(pos);
      let from = pos == line.from ? pos - 1 : findClusterBreak2(line.text, pos - line.from, false) + line.from;
      let to = pos == line.to ? pos + 1 : findClusterBreak2(line.text, pos - line.from, true) + line.from;
      return {
        changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
        range: EditorSelection.cursor(to)
      };
    });
    if (changes.changes.empty)
      return false;
    dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
    return true;
  };
  function selectedLineBlocks(state) {
    let blocks = [], upto = -1;
    for (let range of state.selection.ranges) {
      let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
      if (!range.empty && range.to == endLine.from)
        endLine = state.doc.lineAt(range.to - 1);
      if (upto >= startLine.number) {
        let prev = blocks[blocks.length - 1];
        prev.to = endLine.to;
        prev.ranges.push(range);
      } else {
        blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
      }
      upto = endLine.number + 1;
    }
    return blocks;
  }
  function moveLine(state, dispatch, forward) {
    if (state.readOnly)
      return false;
    let changes = [], ranges = [];
    for (let block of selectedLineBlocks(state)) {
      if (forward ? block.to == state.doc.length : block.from == 0)
        continue;
      let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
      let size = nextLine.length + 1;
      if (forward) {
        changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
        for (let r of block.ranges)
          ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
      } else {
        changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
        for (let r of block.ranges)
          ranges.push(EditorSelection.range(r.anchor - size, r.head - size));
      }
    }
    if (!changes.length)
      return false;
    dispatch(state.update({
      changes,
      scrollIntoView: true,
      selection: EditorSelection.create(ranges, state.selection.mainIndex),
      userEvent: "move.line"
    }));
    return true;
  }
  var moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
  var moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
  function copyLine(state, dispatch, forward) {
    if (state.readOnly)
      return false;
    let changes = [];
    for (let block of selectedLineBlocks(state)) {
      if (forward)
        changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
      else
        changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
    }
    dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
    return true;
  }
  var copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
  var copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
  var deleteLine = (view) => {
    if (view.state.readOnly)
      return false;
    let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
      if (from > 0)
        from--;
      else if (to < state.doc.length)
        to++;
      return { from, to };
    }));
    let selection = updateSel(state.selection, (range) => {
      let dist2 = void 0;
      if (view.lineWrapping) {
        let block = view.lineBlockAt(range.head), pos = view.coordsAtPos(range.head, range.assoc || 1);
        if (pos)
          dist2 = block.bottom + view.documentTop - pos.bottom + view.defaultLineHeight / 2;
      }
      return view.moveVertically(range, true, dist2);
    }).map(changes);
    view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
    return true;
  };
  function isBetweenBrackets(state, pos) {
    if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
      return { from: pos, to: pos };
    let context2 = syntaxTree(state).resolveInner(pos);
    let before = context2.childBefore(pos), after = context2.childAfter(pos), closedBy;
    if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from && !/\S/.test(state.sliceDoc(before.to, after.from)))
      return { from: before.to, to: after.from };
    return null;
  }
  var insertNewlineAndIndent = /* @__PURE__ */ newlineAndIndent(false);
  var insertBlankLine = /* @__PURE__ */ newlineAndIndent(true);
  function newlineAndIndent(atEof) {
    return ({ state, dispatch }) => {
      if (state.readOnly)
        return false;
      let changes = state.changeByRange((range) => {
        let { from, to } = range, line = state.doc.lineAt(from);
        let explode = !atEof && from == to && isBetweenBrackets(state, from);
        if (atEof)
          from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
        let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
        let indent = getIndentation(cx, from);
        if (indent == null)
          indent = countColumn(/^\s*/.exec(state.doc.lineAt(from).text)[0], state.tabSize);
        while (to < line.to && /\s/.test(line.text[to - line.from]))
          to++;
        if (explode)
          ({ from, to } = explode);
        else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
          from = line.from;
        let insert2 = ["", indentString(state, indent)];
        if (explode)
          insert2.push(indentString(state, cx.lineIndent(line.from, -1)));
        return {
          changes: { from, to, insert: Text.of(insert2) },
          range: EditorSelection.cursor(from + 1 + insert2[1].length)
        };
      });
      dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
      return true;
    };
  }
  function changeBySelectedLine(state, f) {
    let atLine = -1;
    return state.changeByRange((range) => {
      let changes = [];
      for (let pos = range.from; pos <= range.to; ) {
        let line = state.doc.lineAt(pos);
        if (line.number > atLine && (range.empty || range.to > line.from)) {
          f(line, changes, range);
          atLine = line.number;
        }
        pos = line.to + 1;
      }
      let changeSet = state.changes(changes);
      return {
        changes,
        range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1))
      };
    });
  }
  var indentSelection = ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let updated = /* @__PURE__ */ Object.create(null);
    let context2 = new IndentContext(state, { overrideIndentation: (start) => {
      let found = updated[start];
      return found == null ? -1 : found;
    } });
    let changes = changeBySelectedLine(state, (line, changes2, range) => {
      let indent = getIndentation(context2, line.from);
      if (indent == null)
        return;
      if (!/\S/.test(line.text))
        indent = 0;
      let cur2 = /^\s*/.exec(line.text)[0];
      let norm = indentString(state, indent);
      if (cur2 != norm || range.from < line.from + cur2.length) {
        updated[line.from] = indent;
        changes2.push({ from: line.from, to: line.from + cur2.length, insert: norm });
      }
    });
    if (!changes.changes.empty)
      dispatch(state.update(changes, { userEvent: "indent" }));
    return true;
  };
  var indentMore = ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
      changes.push({ from: line.from, insert: state.facet(indentUnit) });
    }), { userEvent: "input.indent" }));
    return true;
  };
  var indentLess = ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
      let space2 = /^\s*/.exec(line.text)[0];
      if (!space2)
        return;
      let col = countColumn(space2, state.tabSize), keep = 0;
      let insert2 = indentString(state, Math.max(0, col - getIndentUnit(state)));
      while (keep < space2.length && keep < insert2.length && space2.charCodeAt(keep) == insert2.charCodeAt(keep))
        keep++;
      changes.push({ from: line.from + keep, to: line.from + space2.length, insert: insert2.slice(keep) });
    }), { userEvent: "delete.dedent" }));
    return true;
  };
  var toggleTabFocusMode = (view) => {
    view.setTabFocusMode();
    return true;
  };
  var emacsStyleKeymap = [
    { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
    { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
    { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
    { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
    { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
    { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
    { key: "Ctrl-d", run: deleteCharForward },
    { key: "Ctrl-h", run: deleteCharBackward },
    { key: "Ctrl-k", run: deleteToLineEnd },
    { key: "Ctrl-Alt-h", run: deleteGroupBackward },
    { key: "Ctrl-o", run: splitLine },
    { key: "Ctrl-t", run: transposeChars },
    { key: "Ctrl-v", run: cursorPageDown }
  ];
  var standardKeymap = /* @__PURE__ */ [
    { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
    { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },
    { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },
    { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
    { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },
    { mac: "Cmd-ArrowRight", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },
    { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
    { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
    { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
    { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
    { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
    { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
    { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
    { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
    { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
    { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
    { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
    { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
    { key: "Enter", run: insertNewlineAndIndent, shift: insertNewlineAndIndent },
    { key: "Mod-a", run: selectAll },
    { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
    { key: "Delete", run: deleteCharForward },
    { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
    { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
    { mac: "Mod-Backspace", run: deleteLineBoundaryBackward },
    { mac: "Mod-Delete", run: deleteLineBoundaryForward }
  ].concat(/* @__PURE__ */ emacsStyleKeymap.map((b) => ({ mac: b.key, run: b.run, shift: b.shift })));
  var defaultKeymap = /* @__PURE__ */ [
    { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
    { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
    { key: "Alt-ArrowUp", run: moveLineUp },
    { key: "Shift-Alt-ArrowUp", run: copyLineUp },
    { key: "Alt-ArrowDown", run: moveLineDown },
    { key: "Shift-Alt-ArrowDown", run: copyLineDown },
    { key: "Escape", run: simplifySelection },
    { key: "Mod-Enter", run: insertBlankLine },
    { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
    { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
    { key: "Mod-[", run: indentLess },
    { key: "Mod-]", run: indentMore },
    { key: "Mod-Alt-\\", run: indentSelection },
    { key: "Shift-Mod-k", run: deleteLine },
    { key: "Shift-Mod-\\", run: cursorMatchingBracket },
    { key: "Mod-/", run: toggleComment },
    { key: "Alt-A", run: toggleBlockComment },
    { key: "Ctrl-m", mac: "Shift-Alt-m", run: toggleTabFocusMode }
  ].concat(standardKeymap);

  // node_modules/@codemirror/search/dist/index.js
  var basicNormalize = typeof String.prototype.normalize == "function" ? (x) => x.normalize("NFKD") : (x) => x;
  var SearchCursor = class {
    /**
    Create a text cursor. The query is the search string, `from` to
    `to` provides the region to search.
    
    When `normalize` is given, it will be called, on both the query
    string and the content it is matched against, before comparing.
    You can, for example, create a case-insensitive search by
    passing `s => s.toLowerCase()`.
    
    Text is always normalized with
    [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
    (when supported).
    */
    constructor(text, query, from = 0, to = text.length, normalize3, test) {
      this.test = test;
      this.value = { from: 0, to: 0 };
      this.done = false;
      this.matches = [];
      this.buffer = "";
      this.bufferPos = 0;
      this.iter = text.iterRange(from, to);
      this.bufferStart = from;
      this.normalize = normalize3 ? (x) => normalize3(basicNormalize(x)) : basicNormalize;
      this.query = this.normalize(query);
    }
    peek() {
      if (this.bufferPos == this.buffer.length) {
        this.bufferStart += this.buffer.length;
        this.iter.next();
        if (this.iter.done)
          return -1;
        this.bufferPos = 0;
        this.buffer = this.iter.value;
      }
      return codePointAt2(this.buffer, this.bufferPos);
    }
    /**
    Look for the next match. Updates the iterator's
    [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
    [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
    at least once before using the cursor.
    */
    next() {
      while (this.matches.length)
        this.matches.pop();
      return this.nextOverlapping();
    }
    /**
    The `next` method will ignore matches that partially overlap a
    previous match. This method behaves like `next`, but includes
    such matches.
    */
    nextOverlapping() {
      for (; ; ) {
        let next = this.peek();
        if (next < 0) {
          this.done = true;
          return this;
        }
        let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;
        this.bufferPos += codePointSize2(next);
        let norm = this.normalize(str);
        if (norm.length)
          for (let i = 0, pos = start; ; i++) {
            let code = norm.charCodeAt(i);
            let match = this.match(code, pos, this.bufferPos + this.bufferStart);
            if (i == norm.length - 1) {
              if (match) {
                this.value = match;
                return this;
              }
              break;
            }
            if (pos == start && i < str.length && str.charCodeAt(i) == code)
              pos++;
          }
      }
    }
    match(code, pos, end) {
      let match = null;
      for (let i = 0; i < this.matches.length; i += 2) {
        let index = this.matches[i], keep = false;
        if (this.query.charCodeAt(index) == code) {
          if (index == this.query.length - 1) {
            match = { from: this.matches[i + 1], to: end };
          } else {
            this.matches[i]++;
            keep = true;
          }
        }
        if (!keep) {
          this.matches.splice(i, 2);
          i -= 2;
        }
      }
      if (this.query.charCodeAt(0) == code) {
        if (this.query.length == 1)
          match = { from: pos, to: end };
        else
          this.matches.push(1, pos);
      }
      if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferStart))
        match = null;
      return match;
    }
  };
  if (typeof Symbol != "undefined")
    SearchCursor.prototype[Symbol.iterator] = function() {
      return this;
    };
  var empty = { from: -1, to: -1, match: /* @__PURE__ */ /.*/.exec("") };
  var baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
  var RegExpCursor = class {
    /**
    Create a cursor that will search the given range in the given
    document. `query` should be the raw pattern (as you'd pass it to
    `new RegExp`).
    */
    constructor(text, query, options, from = 0, to = text.length) {
      this.text = text;
      this.to = to;
      this.curLine = "";
      this.done = false;
      this.value = empty;
      if (/\\[sWDnr]|\n|\r|\[\^/.test(query))
        return new MultilineRegExpCursor(text, query, options, from, to);
      this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
      this.test = options === null || options === void 0 ? void 0 : options.test;
      this.iter = text.iter();
      let startLine = text.lineAt(from);
      this.curLineStart = startLine.from;
      this.matchPos = toCharEnd(text, from);
      this.getLine(this.curLineStart);
    }
    getLine(skip) {
      this.iter.next(skip);
      if (this.iter.lineBreak) {
        this.curLine = "";
      } else {
        this.curLine = this.iter.value;
        if (this.curLineStart + this.curLine.length > this.to)
          this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
        this.iter.next();
      }
    }
    nextLine() {
      this.curLineStart = this.curLineStart + this.curLine.length + 1;
      if (this.curLineStart > this.to)
        this.curLine = "";
      else
        this.getLine(0);
    }
    /**
    Move to the next match, if there is one.
    */
    next() {
      for (let off = this.matchPos - this.curLineStart; ; ) {
        this.re.lastIndex = off;
        let match = this.matchPos <= this.to && this.re.exec(this.curLine);
        if (match) {
          let from = this.curLineStart + match.index, to = from + match[0].length;
          this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
          if (from == this.curLineStart + this.curLine.length)
            this.nextLine();
          if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {
            this.value = { from, to, match };
            return this;
          }
          off = this.matchPos - this.curLineStart;
        } else if (this.curLineStart + this.curLine.length < this.to) {
          this.nextLine();
          off = 0;
        } else {
          this.done = true;
          return this;
        }
      }
    }
  };
  var flattened = /* @__PURE__ */ new WeakMap();
  var FlattenedDoc = class _FlattenedDoc {
    constructor(from, text) {
      this.from = from;
      this.text = text;
    }
    get to() {
      return this.from + this.text.length;
    }
    static get(doc2, from, to) {
      let cached = flattened.get(doc2);
      if (!cached || cached.from >= to || cached.to <= from) {
        let flat = new _FlattenedDoc(from, doc2.sliceString(from, to));
        flattened.set(doc2, flat);
        return flat;
      }
      if (cached.from == from && cached.to == to)
        return cached;
      let { text, from: cachedFrom } = cached;
      if (cachedFrom > from) {
        text = doc2.sliceString(from, cachedFrom) + text;
        cachedFrom = from;
      }
      if (cached.to < to)
        text += doc2.sliceString(cached.to, to);
      flattened.set(doc2, new _FlattenedDoc(cachedFrom, text));
      return new _FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));
    }
  };
  var MultilineRegExpCursor = class {
    constructor(text, query, options, from, to) {
      this.text = text;
      this.to = to;
      this.done = false;
      this.value = empty;
      this.matchPos = toCharEnd(text, from);
      this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
      this.test = options === null || options === void 0 ? void 0 : options.test;
      this.flat = FlattenedDoc.get(text, from, this.chunkEnd(
        from + 5e3
        /* Chunk.Base */
      ));
    }
    chunkEnd(pos) {
      return pos >= this.to ? this.to : this.text.lineAt(pos).to;
    }
    next() {
      for (; ; ) {
        let off = this.re.lastIndex = this.matchPos - this.flat.from;
        let match = this.re.exec(this.flat.text);
        if (match && !match[0] && match.index == off) {
          this.re.lastIndex = off + 1;
          match = this.re.exec(this.flat.text);
        }
        if (match) {
          let from = this.flat.from + match.index, to = from + match[0].length;
          if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) && (!this.test || this.test(from, to, match))) {
            this.value = { from, to, match };
            this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
            return this;
          }
        }
        if (this.flat.to == this.to) {
          this.done = true;
          return this;
        }
        this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
      }
    }
  };
  if (typeof Symbol != "undefined") {
    RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] = function() {
      return this;
    };
  }
  function validRegExp(source) {
    try {
      new RegExp(source, baseFlags);
      return true;
    } catch (_a2) {
      return false;
    }
  }
  function toCharEnd(text, pos) {
    if (pos >= text.length)
      return pos;
    let line = text.lineAt(pos), next;
    while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 56320 && next < 57344)
      pos++;
    return pos;
  }
  function createLineDialog(view) {
    let line = String(view.state.doc.lineAt(view.state.selection.main.head).number);
    let input = crelt("input", { class: "cm-textfield", name: "line", value: line });
    let dom = crelt("form", {
      class: "cm-gotoLine",
      onkeydown: (event) => {
        if (event.keyCode == 27) {
          event.preventDefault();
          view.dispatch({ effects: dialogEffect.of(false) });
          view.focus();
        } else if (event.keyCode == 13) {
          event.preventDefault();
          go();
        }
      },
      onsubmit: (event) => {
        event.preventDefault();
        go();
      }
    }, crelt("label", view.state.phrase("Go to line"), ": ", input), " ", crelt("button", { class: "cm-button", type: "submit" }, view.state.phrase("go")), crelt("button", {
      name: "close",
      onclick: () => {
        view.dispatch({ effects: dialogEffect.of(false) });
        view.focus();
      },
      "aria-label": view.state.phrase("close"),
      type: "button"
    }, ["\xD7"]));
    function go() {
      let match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
      if (!match)
        return;
      let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);
      let [, sign2, ln, cl, percent] = match;
      let col = cl ? +cl.slice(1) : 0;
      let line2 = ln ? +ln : startLine.number;
      if (ln && percent) {
        let pc = line2 / 100;
        if (sign2)
          pc = pc * (sign2 == "-" ? -1 : 1) + startLine.number / state.doc.lines;
        line2 = Math.round(state.doc.lines * pc);
      } else if (ln && sign2) {
        line2 = line2 * (sign2 == "-" ? -1 : 1) + startLine.number;
      }
      let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line2)));
      let selection = EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length)));
      view.dispatch({
        effects: [dialogEffect.of(false), EditorView.scrollIntoView(selection.from, { y: "center" })],
        selection
      });
      view.focus();
    }
    return { dom };
  }
  var dialogEffect = /* @__PURE__ */ StateEffect.define();
  var dialogField = /* @__PURE__ */ StateField.define({
    create() {
      return true;
    },
    update(value, tr) {
      for (let e of tr.effects)
        if (e.is(dialogEffect))
          value = e.value;
      return value;
    },
    provide: (f) => showPanel.from(f, (val) => val ? createLineDialog : null)
  });
  var gotoLine = (view) => {
    let panel = getPanel(view, createLineDialog);
    if (!panel) {
      let effects = [dialogEffect.of(true)];
      if (view.state.field(dialogField, false) == null)
        effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$13]));
      view.dispatch({ effects });
      panel = getPanel(view, createLineDialog);
    }
    if (panel)
      panel.dom.querySelector("input").select();
    return true;
  };
  var baseTheme$13 = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-panel.cm-gotoLine": {
      padding: "2px 6px 4px",
      position: "relative",
      "& label": { fontSize: "80%" },
      "& [name=close]": {
        position: "absolute",
        top: "0",
        bottom: "0",
        right: "4px",
        backgroundColor: "inherit",
        border: "none",
        font: "inherit",
        padding: "0"
      }
    }
  });
  var defaultHighlightOptions = {
    highlightWordAroundCursor: false,
    minSelectionLength: 1,
    maxMatches: 100,
    wholeWords: false
  };
  var highlightConfig = /* @__PURE__ */ Facet.define({
    combine(options) {
      return combineConfig(options, defaultHighlightOptions, {
        highlightWordAroundCursor: (a, b) => a || b,
        minSelectionLength: Math.min,
        maxMatches: Math.min
      });
    }
  });
  function highlightSelectionMatches(options) {
    let ext = [defaultTheme, matchHighlighter];
    if (options)
      ext.push(highlightConfig.of(options));
    return ext;
  }
  var matchDeco = /* @__PURE__ */ Decoration.mark({ class: "cm-selectionMatch" });
  var mainMatchDeco = /* @__PURE__ */ Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
  function insideWordBoundaries(check, state, from, to) {
    return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) && (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);
  }
  function insideWord(check, state, from, to) {
    return check(state.sliceDoc(from, from + 1)) == CharCategory.Word && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;
  }
  var matchHighlighter = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view) {
      this.decorations = this.getDeco(view);
    }
    update(update) {
      if (update.selectionSet || update.docChanged || update.viewportChanged)
        this.decorations = this.getDeco(update.view);
    }
    getDeco(view) {
      let conf = view.state.facet(highlightConfig);
      let { state } = view, sel = state.selection;
      if (sel.ranges.length > 1)
        return Decoration.none;
      let range = sel.main, query, check = null;
      if (range.empty) {
        if (!conf.highlightWordAroundCursor)
          return Decoration.none;
        let word = state.wordAt(range.head);
        if (!word)
          return Decoration.none;
        check = state.charCategorizer(range.head);
        query = state.sliceDoc(word.from, word.to);
      } else {
        let len = range.to - range.from;
        if (len < conf.minSelectionLength || len > 200)
          return Decoration.none;
        if (conf.wholeWords) {
          query = state.sliceDoc(range.from, range.to);
          check = state.charCategorizer(range.head);
          if (!(insideWordBoundaries(check, state, range.from, range.to) && insideWord(check, state, range.from, range.to)))
            return Decoration.none;
        } else {
          query = state.sliceDoc(range.from, range.to);
          if (!query)
            return Decoration.none;
        }
      }
      let deco = [];
      for (let part of view.visibleRanges) {
        let cursor = new SearchCursor(state.doc, query, part.from, part.to);
        while (!cursor.next().done) {
          let { from, to } = cursor.value;
          if (!check || insideWordBoundaries(check, state, from, to)) {
            if (range.empty && from <= range.from && to >= range.to)
              deco.push(mainMatchDeco.range(from, to));
            else if (from >= range.to || to <= range.from)
              deco.push(matchDeco.range(from, to));
            if (deco.length > conf.maxMatches)
              return Decoration.none;
          }
        }
      }
      return Decoration.set(deco);
    }
  }, {
    decorations: (v) => v.decorations
  });
  var defaultTheme = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
    ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
  });
  var selectWord = ({ state, dispatch }) => {
    let { selection } = state;
    let newSel = EditorSelection.create(selection.ranges.map((range) => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);
    if (newSel.eq(selection))
      return false;
    dispatch(state.update({ selection: newSel }));
    return true;
  };
  function findNextOccurrence(state, query) {
    let { main, ranges } = state.selection;
    let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;
    for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to); ; ) {
      cursor.next();
      if (cursor.done) {
        if (cycled)
          return null;
        cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
        cycled = true;
      } else {
        if (cycled && ranges.some((r) => r.from == cursor.value.from))
          continue;
        if (fullWord) {
          let word2 = state.wordAt(cursor.value.from);
          if (!word2 || word2.from != cursor.value.from || word2.to != cursor.value.to)
            continue;
        }
        return cursor.value;
      }
    }
  }
  var selectNextOccurrence = ({ state, dispatch }) => {
    let { ranges } = state.selection;
    if (ranges.some((sel) => sel.from === sel.to))
      return selectWord({ state, dispatch });
    let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
    if (state.selection.ranges.some((r) => state.sliceDoc(r.from, r.to) != searchedText))
      return false;
    let range = findNextOccurrence(state, searchedText);
    if (!range)
      return false;
    dispatch(state.update({
      selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),
      effects: EditorView.scrollIntoView(range.to)
    }));
    return true;
  };
  var searchConfigFacet = /* @__PURE__ */ Facet.define({
    combine(configs) {
      return combineConfig(configs, {
        top: false,
        caseSensitive: false,
        literal: false,
        regexp: false,
        wholeWord: false,
        createPanel: (view) => new SearchPanel(view),
        scrollToMatch: (range) => EditorView.scrollIntoView(range)
      });
    }
  });
  var SearchQuery = class {
    /**
    Create a query object.
    */
    constructor(config2) {
      this.search = config2.search;
      this.caseSensitive = !!config2.caseSensitive;
      this.literal = !!config2.literal;
      this.regexp = !!config2.regexp;
      this.replace = config2.replace || "";
      this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
      this.unquoted = this.unquote(this.search);
      this.wholeWord = !!config2.wholeWord;
    }
    /**
    @internal
    */
    unquote(text) {
      return this.literal ? text : text.replace(/\\([nrt\\])/g, (_, ch) => ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "	" : "\\");
    }
    /**
    Compare this query to another query.
    */
    eq(other) {
      return this.search == other.search && this.replace == other.replace && this.caseSensitive == other.caseSensitive && this.regexp == other.regexp && this.wholeWord == other.wholeWord;
    }
    /**
    @internal
    */
    create() {
      return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
    }
    /**
    Get a search cursor for this query, searching through the given
    range in the given state.
    */
    getCursor(state, from = 0, to) {
      let st = state.doc ? state : EditorState.create({ doc: state });
      if (to == null)
        to = st.doc.length;
      return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);
    }
  };
  var QueryType2 = class {
    constructor(spec) {
      this.spec = spec;
    }
  };
  function stringCursor(spec, state, from, to) {
    return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? void 0 : (x) => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : void 0);
  }
  function stringWordTest(doc2, categorizer) {
    return (from, to, buf, bufPos) => {
      if (bufPos > from || bufPos + buf.length < to) {
        bufPos = Math.max(0, from - 2);
        buf = doc2.sliceString(bufPos, Math.min(doc2.length, to + 2));
      }
      return (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word || categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word) && (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word || categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);
    };
  }
  var StringQuery = class extends QueryType2 {
    constructor(spec) {
      super(spec);
    }
    nextMatch(state, curFrom, curTo) {
      let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();
      if (cursor.done) {
        let end = Math.min(state.doc.length, curFrom + this.spec.unquoted.length);
        cursor = stringCursor(this.spec, state, 0, end).nextOverlapping();
      }
      return cursor.done || cursor.value.from == curFrom && cursor.value.to == curTo ? null : cursor.value;
    }
    // Searching in reverse is, rather than implementing an inverted search
    // cursor, done by scanning chunk after chunk forward.
    prevMatchInRange(state, from, to) {
      for (let pos = to; ; ) {
        let start = Math.max(from, pos - 1e4 - this.spec.unquoted.length);
        let cursor = stringCursor(this.spec, state, start, pos), range = null;
        while (!cursor.nextOverlapping().done)
          range = cursor.value;
        if (range)
          return range;
        if (start == from)
          return null;
        pos -= 1e4;
      }
    }
    prevMatch(state, curFrom, curTo) {
      let found = this.prevMatchInRange(state, 0, curFrom);
      if (!found)
        found = this.prevMatchInRange(state, Math.max(0, curTo - this.spec.unquoted.length), state.doc.length);
      return found && (found.from != curFrom || found.to != curTo) ? found : null;
    }
    getReplacement(_result) {
      return this.spec.unquote(this.spec.replace);
    }
    matchAll(state, limit) {
      let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];
      while (!cursor.next().done) {
        if (ranges.length >= limit)
          return null;
        ranges.push(cursor.value);
      }
      return ranges;
    }
    highlight(state, from, to, add3) {
      let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));
      while (!cursor.next().done)
        add3(cursor.value.from, cursor.value.to);
    }
  };
  function regexpCursor(spec, state, from, to) {
    return new RegExpCursor(state.doc, spec.search, {
      ignoreCase: !spec.caseSensitive,
      test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : void 0
    }, from, to);
  }
  function charBefore(str, index) {
    return str.slice(findClusterBreak2(str, index, false), index);
  }
  function charAfter(str, index) {
    return str.slice(index, findClusterBreak2(str, index));
  }
  function regexpWordTest(categorizer) {
    return (_from, _to, match) => !match[0].length || (categorizer(charBefore(match.input, match.index)) != CharCategory.Word || categorizer(charAfter(match.input, match.index)) != CharCategory.Word) && (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word || categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);
  }
  var RegExpQuery = class extends QueryType2 {
    nextMatch(state, curFrom, curTo) {
      let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();
      if (cursor.done)
        cursor = regexpCursor(this.spec, state, 0, curFrom).next();
      return cursor.done ? null : cursor.value;
    }
    prevMatchInRange(state, from, to) {
      for (let size = 1; ; size++) {
        let start = Math.max(
          from,
          to - size * 1e4
          /* FindPrev.ChunkSize */
        );
        let cursor = regexpCursor(this.spec, state, start, to), range = null;
        while (!cursor.next().done)
          range = cursor.value;
        if (range && (start == from || range.from > start + 10))
          return range;
        if (start == from)
          return null;
      }
    }
    prevMatch(state, curFrom, curTo) {
      return this.prevMatchInRange(state, 0, curFrom) || this.prevMatchInRange(state, curTo, state.doc.length);
    }
    getReplacement(result) {
      return this.spec.unquote(this.spec.replace).replace(/\$([$&]|\d+)/g, (m, i) => {
        if (i == "&")
          return result.match[0];
        if (i == "$")
          return "$";
        for (let l = i.length; l > 0; l--) {
          let n = +i.slice(0, l);
          if (n > 0 && n < result.match.length)
            return result.match[n] + i.slice(l);
        }
        return m;
      });
    }
    matchAll(state, limit) {
      let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];
      while (!cursor.next().done) {
        if (ranges.length >= limit)
          return null;
        ranges.push(cursor.value);
      }
      return ranges;
    }
    highlight(state, from, to, add3) {
      let cursor = regexpCursor(this.spec, state, Math.max(
        0,
        from - 250
        /* RegExp.HighlightMargin */
      ), Math.min(to + 250, state.doc.length));
      while (!cursor.next().done)
        add3(cursor.value.from, cursor.value.to);
    }
  };
  var setSearchQuery = /* @__PURE__ */ StateEffect.define();
  var togglePanel = /* @__PURE__ */ StateEffect.define();
  var searchState = /* @__PURE__ */ StateField.define({
    create(state) {
      return new SearchState(defaultQuery(state).create(), null);
    },
    update(value, tr) {
      for (let effect of tr.effects) {
        if (effect.is(setSearchQuery))
          value = new SearchState(effect.value.create(), value.panel);
        else if (effect.is(togglePanel))
          value = new SearchState(value.query, effect.value ? createSearchPanel : null);
      }
      return value;
    },
    provide: (f) => showPanel.from(f, (val) => val.panel)
  });
  var SearchState = class {
    constructor(query, panel) {
      this.query = query;
      this.panel = panel;
    }
  };
  var matchMark = /* @__PURE__ */ Decoration.mark({ class: "cm-searchMatch" });
  var selectedMatchMark = /* @__PURE__ */ Decoration.mark({ class: "cm-searchMatch cm-searchMatch-selected" });
  var searchHighlighter = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.decorations = this.highlight(view.state.field(searchState));
    }
    update(update) {
      let state = update.state.field(searchState);
      if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)
        this.decorations = this.highlight(state);
    }
    highlight({ query, panel }) {
      if (!panel || !query.spec.valid)
        return Decoration.none;
      let { view } = this;
      let builder = new RangeSetBuilder();
      for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {
        let { from, to } = ranges[i];
        while (i < l - 1 && to > ranges[i + 1].from - 2 * 250)
          to = ranges[++i].to;
        query.highlight(view.state, from, to, (from2, to2) => {
          let selected = view.state.selection.ranges.some((r) => r.from == from2 && r.to == to2);
          builder.add(from2, to2, selected ? selectedMatchMark : matchMark);
        });
      }
      return builder.finish();
    }
  }, {
    decorations: (v) => v.decorations
  });
  function searchCommand(f) {
    return (view) => {
      let state = view.state.field(searchState, false);
      return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);
    };
  }
  var findNext = /* @__PURE__ */ searchCommand((view, { query }) => {
    let { to } = view.state.selection.main;
    let next = query.nextMatch(view.state, to, to);
    if (!next)
      return false;
    let selection = EditorSelection.single(next.from, next.to);
    let config2 = view.state.facet(searchConfigFacet);
    view.dispatch({
      selection,
      effects: [announceMatch(view, next), config2.scrollToMatch(selection.main, view)],
      userEvent: "select.search"
    });
    selectSearchInput(view);
    return true;
  });
  var findPrevious = /* @__PURE__ */ searchCommand((view, { query }) => {
    let { state } = view, { from } = state.selection.main;
    let prev = query.prevMatch(state, from, from);
    if (!prev)
      return false;
    let selection = EditorSelection.single(prev.from, prev.to);
    let config2 = view.state.facet(searchConfigFacet);
    view.dispatch({
      selection,
      effects: [announceMatch(view, prev), config2.scrollToMatch(selection.main, view)],
      userEvent: "select.search"
    });
    selectSearchInput(view);
    return true;
  });
  var selectMatches = /* @__PURE__ */ searchCommand((view, { query }) => {
    let ranges = query.matchAll(view.state, 1e3);
    if (!ranges || !ranges.length)
      return false;
    view.dispatch({
      selection: EditorSelection.create(ranges.map((r) => EditorSelection.range(r.from, r.to))),
      userEvent: "select.search.matches"
    });
    return true;
  });
  var selectSelectionMatches = ({ state, dispatch }) => {
    let sel = state.selection;
    if (sel.ranges.length > 1 || sel.main.empty)
      return false;
    let { from, to } = sel.main;
    let ranges = [], main = 0;
    for (let cur2 = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur2.next().done; ) {
      if (ranges.length > 1e3)
        return false;
      if (cur2.value.from == from)
        main = ranges.length;
      ranges.push(EditorSelection.range(cur2.value.from, cur2.value.to));
    }
    dispatch(state.update({
      selection: EditorSelection.create(ranges, main),
      userEvent: "select.search.matches"
    }));
    return true;
  };
  var replaceNext = /* @__PURE__ */ searchCommand((view, { query }) => {
    let { state } = view, { from, to } = state.selection.main;
    if (state.readOnly)
      return false;
    let match = query.nextMatch(state, from, from);
    if (!match)
      return false;
    let next = match;
    let changes = [], selection, replacement;
    let effects = [];
    if (next.from == from && next.to == to) {
      replacement = state.toText(query.getReplacement(next));
      changes.push({ from: next.from, to: next.to, insert: replacement });
      next = query.nextMatch(state, next.from, next.to);
      effects.push(EditorView.announce.of(state.phrase("replaced match on line $", state.doc.lineAt(from).number) + "."));
    }
    let changeSet = view.state.changes(changes);
    if (next) {
      selection = EditorSelection.single(next.from, next.to).map(changeSet);
      effects.push(announceMatch(view, next));
      effects.push(state.facet(searchConfigFacet).scrollToMatch(selection.main, view));
    }
    view.dispatch({
      changes: changeSet,
      selection,
      effects,
      userEvent: "input.replace"
    });
    return true;
  });
  var replaceAll = /* @__PURE__ */ searchCommand((view, { query }) => {
    if (view.state.readOnly)
      return false;
    let changes = query.matchAll(view.state, 1e9).map((match) => {
      let { from, to } = match;
      return { from, to, insert: query.getReplacement(match) };
    });
    if (!changes.length)
      return false;
    let announceText = view.state.phrase("replaced $ matches", changes.length) + ".";
    view.dispatch({
      changes,
      effects: EditorView.announce.of(announceText),
      userEvent: "input.replace.all"
    });
    return true;
  });
  function createSearchPanel(view) {
    return view.state.facet(searchConfigFacet).createPanel(view);
  }
  function defaultQuery(state, fallback) {
    var _a2, _b, _c, _d, _e;
    let sel = state.selection.main;
    let selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
    if (fallback && !selText)
      return fallback;
    let config2 = state.facet(searchConfigFacet);
    return new SearchQuery({
      search: ((_a2 = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a2 !== void 0 ? _a2 : config2.literal) ? selText : selText.replace(/\n/g, "\\n"),
      caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config2.caseSensitive,
      literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config2.literal,
      regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config2.regexp,
      wholeWord: (_e = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e !== void 0 ? _e : config2.wholeWord
    });
  }
  function getSearchInput(view) {
    let panel = getPanel(view, createSearchPanel);
    return panel && panel.dom.querySelector("[main-field]");
  }
  function selectSearchInput(view) {
    let input = getSearchInput(view);
    if (input && input == view.root.activeElement)
      input.select();
  }
  var openSearchPanel = (view) => {
    let state = view.state.field(searchState, false);
    if (state && state.panel) {
      let searchInput = getSearchInput(view);
      if (searchInput && searchInput != view.root.activeElement) {
        let query = defaultQuery(view.state, state.query.spec);
        if (query.valid)
          view.dispatch({ effects: setSearchQuery.of(query) });
        searchInput.focus();
        searchInput.select();
      }
    } else {
      view.dispatch({ effects: [
        togglePanel.of(true),
        state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)
      ] });
    }
    return true;
  };
  var closeSearchPanel = (view) => {
    let state = view.state.field(searchState, false);
    if (!state || !state.panel)
      return false;
    let panel = getPanel(view, createSearchPanel);
    if (panel && panel.dom.contains(view.root.activeElement))
      view.focus();
    view.dispatch({ effects: togglePanel.of(false) });
    return true;
  };
  var searchKeymap = [
    { key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
    { key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
    { key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
    { key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
    { key: "Mod-Shift-l", run: selectSelectionMatches },
    { key: "Mod-Alt-g", run: gotoLine },
    { key: "Mod-d", run: selectNextOccurrence, preventDefault: true }
  ];
  var SearchPanel = class {
    constructor(view) {
      this.view = view;
      let query = this.query = view.state.field(searchState).query.spec;
      this.commit = this.commit.bind(this);
      this.searchField = crelt("input", {
        value: query.search,
        placeholder: phrase(view, "Find"),
        "aria-label": phrase(view, "Find"),
        class: "cm-textfield",
        name: "search",
        form: "",
        "main-field": "true",
        onchange: this.commit,
        onkeyup: this.commit
      });
      this.replaceField = crelt("input", {
        value: query.replace,
        placeholder: phrase(view, "Replace"),
        "aria-label": phrase(view, "Replace"),
        class: "cm-textfield",
        name: "replace",
        form: "",
        onchange: this.commit,
        onkeyup: this.commit
      });
      this.caseField = crelt("input", {
        type: "checkbox",
        name: "case",
        form: "",
        checked: query.caseSensitive,
        onchange: this.commit
      });
      this.reField = crelt("input", {
        type: "checkbox",
        name: "re",
        form: "",
        checked: query.regexp,
        onchange: this.commit
      });
      this.wordField = crelt("input", {
        type: "checkbox",
        name: "word",
        form: "",
        checked: query.wholeWord,
        onchange: this.commit
      });
      function button(name2, onclick, content2) {
        return crelt("button", { class: "cm-button", name: name2, onclick, type: "button" }, content2);
      }
      this.dom = crelt("div", { onkeydown: (e) => this.keydown(e), class: "cm-search" }, [
        this.searchField,
        button("next", () => findNext(view), [phrase(view, "next")]),
        button("prev", () => findPrevious(view), [phrase(view, "previous")]),
        button("select", () => selectMatches(view), [phrase(view, "all")]),
        crelt("label", null, [this.caseField, phrase(view, "match case")]),
        crelt("label", null, [this.reField, phrase(view, "regexp")]),
        crelt("label", null, [this.wordField, phrase(view, "by word")]),
        ...view.state.readOnly ? [] : [
          crelt("br"),
          this.replaceField,
          button("replace", () => replaceNext(view), [phrase(view, "replace")]),
          button("replaceAll", () => replaceAll(view), [phrase(view, "replace all")])
        ],
        crelt("button", {
          name: "close",
          onclick: () => closeSearchPanel(view),
          "aria-label": phrase(view, "close"),
          type: "button"
        }, ["\xD7"])
      ]);
    }
    commit() {
      let query = new SearchQuery({
        search: this.searchField.value,
        caseSensitive: this.caseField.checked,
        regexp: this.reField.checked,
        wholeWord: this.wordField.checked,
        replace: this.replaceField.value
      });
      if (!query.eq(this.query)) {
        this.query = query;
        this.view.dispatch({ effects: setSearchQuery.of(query) });
      }
    }
    keydown(e) {
      if (runScopeHandlers(this.view, e, "search-panel")) {
        e.preventDefault();
      } else if (e.keyCode == 13 && e.target == this.searchField) {
        e.preventDefault();
        (e.shiftKey ? findPrevious : findNext)(this.view);
      } else if (e.keyCode == 13 && e.target == this.replaceField) {
        e.preventDefault();
        replaceNext(this.view);
      }
    }
    update(update) {
      for (let tr of update.transactions)
        for (let effect of tr.effects) {
          if (effect.is(setSearchQuery) && !effect.value.eq(this.query))
            this.setQuery(effect.value);
        }
    }
    setQuery(query) {
      this.query = query;
      this.searchField.value = query.search;
      this.replaceField.value = query.replace;
      this.caseField.checked = query.caseSensitive;
      this.reField.checked = query.regexp;
      this.wordField.checked = query.wholeWord;
    }
    mount() {
      this.searchField.select();
    }
    get pos() {
      return 80;
    }
    get top() {
      return this.view.state.facet(searchConfigFacet).top;
    }
  };
  function phrase(view, phrase2) {
    return view.state.phrase(phrase2);
  }
  var AnnounceMargin = 30;
  var Break = /[\s\.,:;?!]/;
  function announceMatch(view, { from, to }) {
    let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;
    let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);
    let text = view.state.sliceDoc(start, end);
    if (start != line.from) {
      for (let i = 0; i < AnnounceMargin; i++)
        if (!Break.test(text[i + 1]) && Break.test(text[i])) {
          text = text.slice(i);
          break;
        }
    }
    if (end != lineEnd) {
      for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)
        if (!Break.test(text[i - 1]) && Break.test(text[i])) {
          text = text.slice(0, i);
          break;
        }
    }
    return EditorView.announce.of(`${view.state.phrase("current match")}. ${text} ${view.state.phrase("on line")} ${line.number}.`);
  }
  var baseTheme3 = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-panel.cm-search": {
      padding: "2px 6px 4px",
      position: "relative",
      "& [name=close]": {
        position: "absolute",
        top: "0",
        right: "4px",
        backgroundColor: "inherit",
        border: "none",
        font: "inherit",
        padding: 0,
        margin: 0
      },
      "& input, & button, & label": {
        margin: ".2em .6em .2em 0"
      },
      "& input[type=checkbox]": {
        marginRight: ".2em"
      },
      "& label": {
        fontSize: "80%",
        whiteSpace: "pre"
      }
    },
    "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
    "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
    "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
    "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
  });
  var searchExtensions = [
    searchState,
    /* @__PURE__ */ Prec.low(searchHighlighter),
    baseTheme3
  ];

  // node_modules/@codemirror/autocomplete/dist/index.js
  var CompletionContext = class {
    /**
    Create a new completion context. (Mostly useful for testing
    completion sources—in the editor, the extension will create
    these for you.)
    */
    constructor(state, pos, explicit, view) {
      this.state = state;
      this.pos = pos;
      this.explicit = explicit;
      this.view = view;
      this.abortListeners = [];
      this.abortOnDocChange = false;
    }
    /**
    Get the extent, content, and (if there is a token) type of the
    token before `this.pos`.
    */
    tokenBefore(types2) {
      let token = syntaxTree(this.state).resolveInner(this.pos, -1);
      while (token && types2.indexOf(token.name) < 0)
        token = token.parent;
      return token ? {
        from: token.from,
        to: this.pos,
        text: this.state.sliceDoc(token.from, this.pos),
        type: token.type
      } : null;
    }
    /**
    Get the match of the given expression directly before the
    cursor.
    */
    matchBefore(expr) {
      let line = this.state.doc.lineAt(this.pos);
      let start = Math.max(line.from, this.pos - 250);
      let str = line.text.slice(start - line.from, this.pos - line.from);
      let found = str.search(ensureAnchor(expr, false));
      return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
    }
    /**
    Yields true when the query has been aborted. Can be useful in
    asynchronous queries to avoid doing work that will be ignored.
    */
    get aborted() {
      return this.abortListeners == null;
    }
    /**
    Allows you to register abort handlers, which will be called when
    the query is
    [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
    
    By default, running queries will not be aborted for regular
    typing or backspacing, on the assumption that they are likely to
    return a result with a
    [`validFor`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.validFor) field that
    allows the result to be used after all. Passing `onDocChange:
    true` will cause this query to be aborted for any document
    change.
    */
    addEventListener(type, listener, options) {
      if (type == "abort" && this.abortListeners) {
        this.abortListeners.push(listener);
        if (options && options.onDocChange)
          this.abortOnDocChange = true;
      }
    }
  };
  function toSet(chars) {
    let flat = Object.keys(chars).join("");
    let words = /\w/.test(flat);
    if (words)
      flat = flat.replace(/\w/g, "");
    return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
  }
  function prefixMatch(options) {
    let first = /* @__PURE__ */ Object.create(null), rest = /* @__PURE__ */ Object.create(null);
    for (let { label: label2 } of options) {
      first[label2[0]] = true;
      for (let i = 1; i < label2.length; i++)
        rest[label2[i]] = true;
    }
    let source = toSet(first) + toSet(rest) + "*$";
    return [new RegExp("^" + source), new RegExp(source)];
  }
  function completeFromList(list) {
    let options = list.map((o) => typeof o == "string" ? { label: o } : o);
    let [validFor, match] = options.every((o) => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
    return (context2) => {
      let token = context2.matchBefore(match);
      return token || context2.explicit ? { from: token ? token.from : context2.pos, options, validFor } : null;
    };
  }
  function ifNotIn(nodes, source) {
    return (context2) => {
      for (let pos = syntaxTree(context2.state).resolveInner(context2.pos, -1); pos; pos = pos.parent) {
        if (nodes.indexOf(pos.name) > -1)
          return null;
        if (pos.type.isTop)
          break;
      }
      return source(context2);
    };
  }
  var Option = class {
    constructor(completion, source, match, score2) {
      this.completion = completion;
      this.source = source;
      this.match = match;
      this.score = score2;
    }
  };
  function cur(state) {
    return state.selection.main.from;
  }
  function ensureAnchor(expr, start) {
    var _a2;
    let { source } = expr;
    let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
    if (!addStart && !addEnd)
      return expr;
    return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a2 = expr.flags) !== null && _a2 !== void 0 ? _a2 : expr.ignoreCase ? "i" : "");
  }
  var pickedCompletion = /* @__PURE__ */ Annotation.define();
  function insertCompletionText(state, text, from, to) {
    let { main } = state.selection, fromOff = from - main.from, toOff = to - main.from;
    return Object.assign(Object.assign({}, state.changeByRange((range) => {
      if (range != main && from != to && state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from, to))
        return { range };
      let lines = state.toText(text);
      return {
        changes: { from: range.from + fromOff, to: to == main.from ? range.to : range.from + toOff, insert: lines },
        range: EditorSelection.cursor(range.from + fromOff + lines.length)
      };
    })), { scrollIntoView: true, userEvent: "input.complete" });
  }
  var SourceCache = /* @__PURE__ */ new WeakMap();
  function asSource(source) {
    if (!Array.isArray(source))
      return source;
    let known = SourceCache.get(source);
    if (!known)
      SourceCache.set(source, known = completeFromList(source));
    return known;
  }
  var startCompletionEffect = /* @__PURE__ */ StateEffect.define();
  var closeCompletionEffect = /* @__PURE__ */ StateEffect.define();
  var FuzzyMatcher = class {
    constructor(pattern) {
      this.pattern = pattern;
      this.chars = [];
      this.folded = [];
      this.any = [];
      this.precise = [];
      this.byWord = [];
      this.score = 0;
      this.matched = [];
      for (let p = 0; p < pattern.length; ) {
        let char = codePointAt2(pattern, p), size = codePointSize2(char);
        this.chars.push(char);
        let part = pattern.slice(p, p + size), upper = part.toUpperCase();
        this.folded.push(codePointAt2(upper == part ? part.toLowerCase() : upper, 0));
        p += size;
      }
      this.astral = pattern.length != this.chars.length;
    }
    ret(score2, matched) {
      this.score = score2;
      this.matched = matched;
      return this;
    }
    // Matches a given word (completion) against the pattern (input).
    // Will return a boolean indicating whether there was a match and,
    // on success, set `this.score` to the score, `this.matched` to an
    // array of `from, to` pairs indicating the matched parts of `word`.
    //
    // The score is a number that is more negative the worse the match
    // is. See `Penalty` above.
    match(word) {
      if (this.pattern.length == 0)
        return this.ret(-100, []);
      if (word.length < this.pattern.length)
        return null;
      let { chars, folded, any: any2, precise, byWord } = this;
      if (chars.length == 1) {
        let first = codePointAt2(word, 0), firstSize = codePointSize2(first);
        let score2 = firstSize == word.length ? 0 : -100;
        if (first == chars[0]) ;
        else if (first == folded[0])
          score2 += -200;
        else
          return null;
        return this.ret(score2, [0, firstSize]);
      }
      let direct = word.indexOf(this.pattern);
      if (direct == 0)
        return this.ret(word.length == this.pattern.length ? 0 : -100, [0, this.pattern.length]);
      let len = chars.length, anyTo = 0;
      if (direct < 0) {
        for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len; ) {
          let next = codePointAt2(word, i);
          if (next == chars[anyTo] || next == folded[anyTo])
            any2[anyTo++] = i;
          i += codePointSize2(next);
        }
        if (anyTo < len)
          return null;
      }
      let preciseTo = 0;
      let byWordTo = 0, byWordFolded = false;
      let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
      let hasLower = /[a-z]/.test(word), wordAdjacent = true;
      for (let i = 0, e = Math.min(word.length, 200), prevType = 0; i < e && byWordTo < len; ) {
        let next = codePointAt2(word, i);
        if (direct < 0) {
          if (preciseTo < len && next == chars[preciseTo])
            precise[preciseTo++] = i;
          if (adjacentTo < len) {
            if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
              if (adjacentTo == 0)
                adjacentStart = i;
              adjacentEnd = i + 1;
              adjacentTo++;
            } else {
              adjacentTo = 0;
            }
          }
        }
        let ch, type = next < 255 ? next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 : next >= 65 && next <= 90 ? 1 : 0 : (ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 : ch != ch.toUpperCase() ? 2 : 0;
        if (!i || type == 1 && hasLower || prevType == 0 && type != 0) {
          if (chars[byWordTo] == next || folded[byWordTo] == next && (byWordFolded = true))
            byWord[byWordTo++] = i;
          else if (byWord.length)
            wordAdjacent = false;
        }
        prevType = type;
        i += codePointSize2(next);
      }
      if (byWordTo == len && byWord[0] == 0 && wordAdjacent)
        return this.result(-100 + (byWordFolded ? -200 : 0), byWord, word);
      if (adjacentTo == len && adjacentStart == 0)
        return this.ret(-200 - word.length + (adjacentEnd == word.length ? 0 : -100), [0, adjacentEnd]);
      if (direct > -1)
        return this.ret(-700 - word.length, [direct, direct + this.pattern.length]);
      if (adjacentTo == len)
        return this.ret(-200 + -700 - word.length, [adjacentStart, adjacentEnd]);
      if (byWordTo == len)
        return this.result(-100 + (byWordFolded ? -200 : 0) + -700 + (wordAdjacent ? 0 : -1100), byWord, word);
      return chars.length == 2 ? null : this.result((any2[0] ? -700 : 0) + -200 + -1100, any2, word);
    }
    result(score2, positions, word) {
      let result = [], i = 0;
      for (let pos of positions) {
        let to = pos + (this.astral ? codePointSize2(codePointAt2(word, pos)) : 1);
        if (i && result[i - 1] == pos)
          result[i - 1] = to;
        else {
          result[i++] = pos;
          result[i++] = to;
        }
      }
      return this.ret(score2 - word.length, result);
    }
  };
  var StrictMatcher = class {
    constructor(pattern) {
      this.pattern = pattern;
      this.matched = [];
      this.score = 0;
      this.folded = pattern.toLowerCase();
    }
    match(word) {
      if (word.length < this.pattern.length)
        return null;
      let start = word.slice(0, this.pattern.length);
      let match = start == this.pattern ? 0 : start.toLowerCase() == this.folded ? -200 : null;
      if (match == null)
        return null;
      this.matched = [0, start.length];
      this.score = match + (word.length == this.pattern.length ? 0 : -100);
      return this;
    }
  };
  var completionConfig = /* @__PURE__ */ Facet.define({
    combine(configs) {
      return combineConfig(configs, {
        activateOnTyping: true,
        activateOnCompletion: () => false,
        activateOnTypingDelay: 100,
        selectOnOpen: true,
        override: null,
        closeOnBlur: true,
        maxRenderedOptions: 100,
        defaultKeymap: true,
        tooltipClass: () => "",
        optionClass: () => "",
        aboveCursor: false,
        icons: true,
        addToOptions: [],
        positionInfo: defaultPositionInfo,
        filterStrict: false,
        compareCompletions: (a, b) => a.label.localeCompare(b.label),
        interactionDelay: 75,
        updateSyncTime: 100
      }, {
        defaultKeymap: (a, b) => a && b,
        closeOnBlur: (a, b) => a && b,
        icons: (a, b) => a && b,
        tooltipClass: (a, b) => (c) => joinClass(a(c), b(c)),
        optionClass: (a, b) => (c) => joinClass(a(c), b(c)),
        addToOptions: (a, b) => a.concat(b),
        filterStrict: (a, b) => a || b
      });
    }
  });
  function joinClass(a, b) {
    return a ? b ? a + " " + b : a : b;
  }
  function defaultPositionInfo(view, list, option, info, space2, tooltip) {
    let rtl = view.textDirection == Direction.RTL, left = rtl, narrow = false;
    let side = "top", offset, maxWidth;
    let spaceLeft = list.left - space2.left, spaceRight = space2.right - list.right;
    let infoWidth = info.right - info.left, infoHeight = info.bottom - info.top;
    if (left && spaceLeft < Math.min(infoWidth, spaceRight))
      left = false;
    else if (!left && spaceRight < Math.min(infoWidth, spaceLeft))
      left = true;
    if (infoWidth <= (left ? spaceLeft : spaceRight)) {
      offset = Math.max(space2.top, Math.min(option.top, space2.bottom - infoHeight)) - list.top;
      maxWidth = Math.min(400, left ? spaceLeft : spaceRight);
    } else {
      narrow = true;
      maxWidth = Math.min(
        400,
        (rtl ? list.right : space2.right - list.left) - 30
        /* Info.Margin */
      );
      let spaceBelow = space2.bottom - list.bottom;
      if (spaceBelow >= infoHeight || spaceBelow > list.top) {
        offset = option.bottom - list.top;
      } else {
        side = "bottom";
        offset = list.bottom - option.top;
      }
    }
    let scaleY = (list.bottom - list.top) / tooltip.offsetHeight;
    let scaleX = (list.right - list.left) / tooltip.offsetWidth;
    return {
      style: `${side}: ${offset / scaleY}px; max-width: ${maxWidth / scaleX}px`,
      class: "cm-completionInfo-" + (narrow ? rtl ? "left-narrow" : "right-narrow" : left ? "left" : "right")
    };
  }
  function optionContent(config2) {
    let content2 = config2.addToOptions.slice();
    if (config2.icons)
      content2.push({
        render(completion) {
          let icon = document.createElement("div");
          icon.classList.add("cm-completionIcon");
          if (completion.type)
            icon.classList.add(...completion.type.split(/\s+/g).map((cls) => "cm-completionIcon-" + cls));
          icon.setAttribute("aria-hidden", "true");
          return icon;
        },
        position: 20
      });
    content2.push({
      render(completion, _s, _v, match) {
        let labelElt = document.createElement("span");
        labelElt.className = "cm-completionLabel";
        let label2 = completion.displayLabel || completion.label, off = 0;
        for (let j = 0; j < match.length; ) {
          let from = match[j++], to = match[j++];
          if (from > off)
            labelElt.appendChild(document.createTextNode(label2.slice(off, from)));
          let span = labelElt.appendChild(document.createElement("span"));
          span.appendChild(document.createTextNode(label2.slice(from, to)));
          span.className = "cm-completionMatchedText";
          off = to;
        }
        if (off < label2.length)
          labelElt.appendChild(document.createTextNode(label2.slice(off)));
        return labelElt;
      },
      position: 50
    }, {
      render(completion) {
        if (!completion.detail)
          return null;
        let detailElt = document.createElement("span");
        detailElt.className = "cm-completionDetail";
        detailElt.textContent = completion.detail;
        return detailElt;
      },
      position: 80
    });
    return content2.sort((a, b) => a.position - b.position).map((a) => a.render);
  }
  function rangeAroundSelected(total, selected, max) {
    if (total <= max)
      return { from: 0, to: total };
    if (selected < 0)
      selected = 0;
    if (selected <= total >> 1) {
      let off2 = Math.floor(selected / max);
      return { from: off2 * max, to: (off2 + 1) * max };
    }
    let off = Math.floor((total - selected) / max);
    return { from: total - (off + 1) * max, to: total - off * max };
  }
  var CompletionTooltip = class {
    constructor(view, stateField, applyCompletion2) {
      this.view = view;
      this.stateField = stateField;
      this.applyCompletion = applyCompletion2;
      this.info = null;
      this.infoDestroy = null;
      this.placeInfoReq = {
        read: () => this.measureInfo(),
        write: (pos) => this.placeInfo(pos),
        key: this
      };
      this.space = null;
      this.currentClass = "";
      let cState = view.state.field(stateField);
      let { options, selected } = cState.open;
      let config2 = view.state.facet(completionConfig);
      this.optionContent = optionContent(config2);
      this.optionClass = config2.optionClass;
      this.tooltipClass = config2.tooltipClass;
      this.range = rangeAroundSelected(options.length, selected, config2.maxRenderedOptions);
      this.dom = document.createElement("div");
      this.dom.className = "cm-tooltip-autocomplete";
      this.updateTooltipClass(view.state);
      this.dom.addEventListener("mousedown", (e) => {
        let { options: options2 } = view.state.field(stateField).open;
        for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {
          if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options2.length) {
            this.applyCompletion(view, options2[+match[1]]);
            e.preventDefault();
            return;
          }
        }
      });
      this.dom.addEventListener("focusout", (e) => {
        let state = view.state.field(this.stateField, false);
        if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur && e.relatedTarget != view.contentDOM)
          view.dispatch({ effects: closeCompletionEffect.of(null) });
      });
      this.showOptions(options, cState.id);
    }
    mount() {
      this.updateSel();
    }
    showOptions(options, id2) {
      if (this.list)
        this.list.remove();
      this.list = this.dom.appendChild(this.createListBox(options, id2, this.range));
      this.list.addEventListener("scroll", () => {
        if (this.info)
          this.view.requestMeasure(this.placeInfoReq);
      });
    }
    update(update) {
      var _a2;
      let cState = update.state.field(this.stateField);
      let prevState = update.startState.field(this.stateField);
      this.updateTooltipClass(update.state);
      if (cState != prevState) {
        let { options, selected, disabled } = cState.open;
        if (!prevState.open || prevState.open.options != options) {
          this.range = rangeAroundSelected(options.length, selected, update.state.facet(completionConfig).maxRenderedOptions);
          this.showOptions(options, cState.id);
        }
        this.updateSel();
        if (disabled != ((_a2 = prevState.open) === null || _a2 === void 0 ? void 0 : _a2.disabled))
          this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!disabled);
      }
    }
    updateTooltipClass(state) {
      let cls = this.tooltipClass(state);
      if (cls != this.currentClass) {
        for (let c of this.currentClass.split(" "))
          if (c)
            this.dom.classList.remove(c);
        for (let c of cls.split(" "))
          if (c)
            this.dom.classList.add(c);
        this.currentClass = cls;
      }
    }
    positioned(space2) {
      this.space = space2;
      if (this.info)
        this.view.requestMeasure(this.placeInfoReq);
    }
    updateSel() {
      let cState = this.view.state.field(this.stateField), open = cState.open;
      if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
        this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
        this.showOptions(open.options, cState.id);
      }
      if (this.updateSelectedOption(open.selected)) {
        this.destroyInfo();
        let { completion } = open.options[open.selected];
        let { info } = completion;
        if (!info)
          return;
        let infoResult = typeof info === "string" ? document.createTextNode(info) : info(completion);
        if (!infoResult)
          return;
        if ("then" in infoResult) {
          infoResult.then((obj) => {
            if (obj && this.view.state.field(this.stateField, false) == cState)
              this.addInfoPane(obj, completion);
          }).catch((e) => logException(this.view.state, e, "completion info"));
        } else {
          this.addInfoPane(infoResult, completion);
        }
      }
    }
    addInfoPane(content2, completion) {
      this.destroyInfo();
      let wrap = this.info = document.createElement("div");
      wrap.className = "cm-tooltip cm-completionInfo";
      if (content2.nodeType != null) {
        wrap.appendChild(content2);
        this.infoDestroy = null;
      } else {
        let { dom, destroy } = content2;
        wrap.appendChild(dom);
        this.infoDestroy = destroy || null;
      }
      this.dom.appendChild(wrap);
      this.view.requestMeasure(this.placeInfoReq);
    }
    updateSelectedOption(selected) {
      let set = null;
      for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
        if (opt.nodeName != "LI" || !opt.id) {
          i--;
        } else if (i == selected) {
          if (!opt.hasAttribute("aria-selected")) {
            opt.setAttribute("aria-selected", "true");
            set = opt;
          }
        } else {
          if (opt.hasAttribute("aria-selected"))
            opt.removeAttribute("aria-selected");
        }
      }
      if (set)
        scrollIntoView2(this.list, set);
      return set;
    }
    measureInfo() {
      let sel = this.dom.querySelector("[aria-selected]");
      if (!sel || !this.info)
        return null;
      let listRect = this.dom.getBoundingClientRect();
      let infoRect = this.info.getBoundingClientRect();
      let selRect = sel.getBoundingClientRect();
      let space2 = this.space;
      if (!space2) {
        let docElt = this.dom.ownerDocument.documentElement;
        space2 = { left: 0, top: 0, right: docElt.clientWidth, bottom: docElt.clientHeight };
      }
      if (selRect.top > Math.min(space2.bottom, listRect.bottom) - 10 || selRect.bottom < Math.max(space2.top, listRect.top) + 10)
        return null;
      return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space2, this.dom);
    }
    placeInfo(pos) {
      if (this.info) {
        if (pos) {
          if (pos.style)
            this.info.style.cssText = pos.style;
          this.info.className = "cm-tooltip cm-completionInfo " + (pos.class || "");
        } else {
          this.info.style.cssText = "top: -1e6px";
        }
      }
    }
    createListBox(options, id2, range) {
      const ul = document.createElement("ul");
      ul.id = id2;
      ul.setAttribute("role", "listbox");
      ul.setAttribute("aria-expanded", "true");
      ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
      ul.addEventListener("mousedown", (e) => {
        if (e.target == ul)
          e.preventDefault();
      });
      let curSection = null;
      for (let i = range.from; i < range.to; i++) {
        let { completion, match } = options[i], { section } = completion;
        if (section) {
          let name2 = typeof section == "string" ? section : section.name;
          if (name2 != curSection && (i > range.from || range.from == 0)) {
            curSection = name2;
            if (typeof section != "string" && section.header) {
              ul.appendChild(section.header(section));
            } else {
              let header = ul.appendChild(document.createElement("completion-section"));
              header.textContent = name2;
            }
          }
        }
        const li = ul.appendChild(document.createElement("li"));
        li.id = id2 + "-" + i;
        li.setAttribute("role", "option");
        let cls = this.optionClass(completion);
        if (cls)
          li.className = cls;
        for (let source of this.optionContent) {
          let node = source(completion, this.view.state, this.view, match);
          if (node)
            li.appendChild(node);
        }
      }
      if (range.from)
        ul.classList.add("cm-completionListIncompleteTop");
      if (range.to < options.length)
        ul.classList.add("cm-completionListIncompleteBottom");
      return ul;
    }
    destroyInfo() {
      if (this.info) {
        if (this.infoDestroy)
          this.infoDestroy();
        this.info.remove();
        this.info = null;
      }
    }
    destroy() {
      this.destroyInfo();
    }
  };
  function completionTooltip(stateField, applyCompletion2) {
    return (view) => new CompletionTooltip(view, stateField, applyCompletion2);
  }
  function scrollIntoView2(container, element2) {
    let parent = container.getBoundingClientRect();
    let self2 = element2.getBoundingClientRect();
    let scaleY = parent.height / container.offsetHeight;
    if (self2.top < parent.top)
      container.scrollTop -= (parent.top - self2.top) / scaleY;
    else if (self2.bottom > parent.bottom)
      container.scrollTop += (self2.bottom - parent.bottom) / scaleY;
  }
  function score(option) {
    return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) + (option.type ? 1 : 0);
  }
  function sortOptions(active, state) {
    let options = [];
    let sections = null;
    let addOption = (option) => {
      options.push(option);
      let { section } = option.completion;
      if (section) {
        if (!sections)
          sections = [];
        let name2 = typeof section == "string" ? section : section.name;
        if (!sections.some((s) => s.name == name2))
          sections.push(typeof section == "string" ? { name: name2 } : section);
      }
    };
    let conf = state.facet(completionConfig);
    for (let a of active)
      if (a.hasResult()) {
        let getMatch = a.result.getMatch;
        if (a.result.filter === false) {
          for (let option of a.result.options) {
            addOption(new Option(option, a.source, getMatch ? getMatch(option) : [], 1e9 - options.length));
          }
        } else {
          let pattern = state.sliceDoc(a.from, a.to), match;
          let matcher = conf.filterStrict ? new StrictMatcher(pattern) : new FuzzyMatcher(pattern);
          for (let option of a.result.options)
            if (match = matcher.match(option.label)) {
              let matched = !option.displayLabel ? match.matched : getMatch ? getMatch(option, match.matched) : [];
              addOption(new Option(option, a.source, matched, match.score + (option.boost || 0)));
            }
        }
      }
    if (sections) {
      let sectionOrder = /* @__PURE__ */ Object.create(null), pos = 0;
      let cmp = (a, b) => {
        var _a2, _b;
        return ((_a2 = a.rank) !== null && _a2 !== void 0 ? _a2 : 1e9) - ((_b = b.rank) !== null && _b !== void 0 ? _b : 1e9) || (a.name < b.name ? -1 : 1);
      };
      for (let s of sections.sort(cmp)) {
        pos -= 1e5;
        sectionOrder[s.name] = pos;
      }
      for (let option of options) {
        let { section } = option.completion;
        if (section)
          option.score += sectionOrder[typeof section == "string" ? section : section.name];
      }
    }
    let result = [], prev = null;
    let compare2 = conf.compareCompletions;
    for (let opt of options.sort((a, b) => b.score - a.score || compare2(a.completion, b.completion))) {
      let cur2 = opt.completion;
      if (!prev || prev.label != cur2.label || prev.detail != cur2.detail || prev.type != null && cur2.type != null && prev.type != cur2.type || prev.apply != cur2.apply || prev.boost != cur2.boost)
        result.push(opt);
      else if (score(opt.completion) > score(prev))
        result[result.length - 1] = opt;
      prev = opt.completion;
    }
    return result;
  }
  var CompletionDialog = class _CompletionDialog {
    constructor(options, attrs, tooltip, timestamp, selected, disabled) {
      this.options = options;
      this.attrs = attrs;
      this.tooltip = tooltip;
      this.timestamp = timestamp;
      this.selected = selected;
      this.disabled = disabled;
    }
    setSelected(selected, id2) {
      return selected == this.selected || selected >= this.options.length ? this : new _CompletionDialog(this.options, makeAttrs(id2, selected), this.tooltip, this.timestamp, selected, this.disabled);
    }
    static build(active, state, id2, prev, conf, didSetActive) {
      if (prev && !didSetActive && active.some((s) => s.isPending))
        return prev.setDisabled();
      let options = sortOptions(active, state);
      if (!options.length)
        return prev && active.some((a) => a.isPending) ? prev.setDisabled() : null;
      let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
      if (prev && prev.selected != selected && prev.selected != -1) {
        let selectedValue = prev.options[prev.selected].completion;
        for (let i = 0; i < options.length; i++)
          if (options[i].completion == selectedValue) {
            selected = i;
            break;
          }
      }
      return new _CompletionDialog(options, makeAttrs(id2, selected), {
        pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),
        create: createTooltip,
        above: conf.aboveCursor
      }, prev ? prev.timestamp : Date.now(), selected, false);
    }
    map(changes) {
      return new _CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
    }
    setDisabled() {
      return new _CompletionDialog(this.options, this.attrs, this.tooltip, this.timestamp, this.selected, true);
    }
  };
  var CompletionState = class _CompletionState {
    constructor(active, id2, open) {
      this.active = active;
      this.id = id2;
      this.open = open;
    }
    static start() {
      return new _CompletionState(none3, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
    }
    update(tr) {
      let { state } = tr, conf = state.facet(completionConfig);
      let sources = conf.override || state.languageDataAt("autocomplete", cur(state)).map(asSource);
      let active = sources.map((source) => {
        let value = this.active.find((s) => s.source == source) || new ActiveSource(
          source,
          this.active.some(
            (a) => a.state != 0
            /* State.Inactive */
          ) ? 1 : 0
          /* State.Inactive */
        );
        return value.update(tr, conf);
      });
      if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))
        active = this.active;
      let open = this.open, didSet = tr.effects.some((e) => e.is(setActiveEffect));
      if (open && tr.docChanged)
        open = open.map(tr.changes);
      if (tr.selection || active.some((a) => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) || !sameResults(active, this.active) || didSet)
        open = CompletionDialog.build(active, state, this.id, open, conf, didSet);
      else if (open && open.disabled && !active.some((a) => a.isPending))
        open = null;
      if (!open && active.every((a) => !a.isPending) && active.some((a) => a.hasResult()))
        active = active.map((a) => a.hasResult() ? new ActiveSource(
          a.source,
          0
          /* State.Inactive */
        ) : a);
      for (let effect of tr.effects)
        if (effect.is(setSelectedEffect))
          open = open && open.setSelected(effect.value, this.id);
      return active == this.active && open == this.open ? this : new _CompletionState(active, this.id, open);
    }
    get tooltip() {
      return this.open ? this.open.tooltip : null;
    }
    get attrs() {
      return this.open ? this.open.attrs : this.active.length ? baseAttrs : noAttrs2;
    }
  };
  function sameResults(a, b) {
    if (a == b)
      return true;
    for (let iA = 0, iB = 0; ; ) {
      while (iA < a.length && !a[iA].hasResult())
        iA++;
      while (iB < b.length && !b[iB].hasResult())
        iB++;
      let endA = iA == a.length, endB = iB == b.length;
      if (endA || endB)
        return endA == endB;
      if (a[iA++].result != b[iB++].result)
        return false;
    }
  }
  var baseAttrs = {
    "aria-autocomplete": "list"
  };
  var noAttrs2 = {};
  function makeAttrs(id2, selected) {
    let result = {
      "aria-autocomplete": "list",
      "aria-haspopup": "listbox",
      "aria-controls": id2
    };
    if (selected > -1)
      result["aria-activedescendant"] = id2 + "-" + selected;
    return result;
  }
  var none3 = [];
  function getUpdateType(tr, conf) {
    if (tr.isUserEvent("input.complete")) {
      let completion = tr.annotation(pickedCompletion);
      if (completion && conf.activateOnCompletion(completion))
        return 4 | 8;
    }
    let typing = tr.isUserEvent("input.type");
    return typing && conf.activateOnTyping ? 4 | 1 : typing ? 1 : tr.isUserEvent("delete.backward") ? 2 : tr.selection ? 8 : tr.docChanged ? 16 : 0;
  }
  var ActiveSource = class _ActiveSource {
    constructor(source, state, explicit = false) {
      this.source = source;
      this.state = state;
      this.explicit = explicit;
    }
    hasResult() {
      return false;
    }
    get isPending() {
      return this.state == 1;
    }
    update(tr, conf) {
      let type = getUpdateType(tr, conf), value = this;
      if (type & 8 || type & 16 && this.touches(tr))
        value = new _ActiveSource(
          value.source,
          0
          /* State.Inactive */
        );
      if (type & 4 && value.state == 0)
        value = new _ActiveSource(
          this.source,
          1
          /* State.Pending */
        );
      value = value.updateFor(tr, type);
      for (let effect of tr.effects) {
        if (effect.is(startCompletionEffect))
          value = new _ActiveSource(value.source, 1, effect.value);
        else if (effect.is(closeCompletionEffect))
          value = new _ActiveSource(
            value.source,
            0
            /* State.Inactive */
          );
        else if (effect.is(setActiveEffect)) {
          for (let active of effect.value)
            if (active.source == value.source)
              value = active;
        }
      }
      return value;
    }
    updateFor(tr, type) {
      return this.map(tr.changes);
    }
    map(changes) {
      return this;
    }
    touches(tr) {
      return tr.changes.touchesRange(cur(tr.state));
    }
  };
  var ActiveResult = class _ActiveResult extends ActiveSource {
    constructor(source, explicit, limit, result, from, to) {
      super(source, 3, explicit);
      this.limit = limit;
      this.result = result;
      this.from = from;
      this.to = to;
    }
    hasResult() {
      return true;
    }
    updateFor(tr, type) {
      var _a2;
      if (!(type & 3))
        return this.map(tr.changes);
      let result = this.result;
      if (result.map && !tr.changes.empty)
        result = result.map(result, tr.changes);
      let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
      let pos = cur(tr.state);
      if (pos > to || !result || type & 2 && (cur(tr.startState) == this.from || pos < this.limit))
        return new ActiveSource(
          this.source,
          type & 4 ? 1 : 0
          /* State.Inactive */
        );
      let limit = tr.changes.mapPos(this.limit);
      if (checkValid(result.validFor, tr.state, from, to))
        return new _ActiveResult(this.source, this.explicit, limit, result, from, to);
      if (result.update && (result = result.update(result, from, to, new CompletionContext(tr.state, pos, false))))
        return new _ActiveResult(this.source, this.explicit, limit, result, result.from, (_a2 = result.to) !== null && _a2 !== void 0 ? _a2 : cur(tr.state));
      return new ActiveSource(this.source, 1, this.explicit);
    }
    map(mapping) {
      if (mapping.empty)
        return this;
      let result = this.result.map ? this.result.map(this.result, mapping) : this.result;
      if (!result)
        return new ActiveSource(
          this.source,
          0
          /* State.Inactive */
        );
      return new _ActiveResult(this.source, this.explicit, mapping.mapPos(this.limit), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
    }
    touches(tr) {
      return tr.changes.touchesRange(this.from, this.to);
    }
  };
  function checkValid(validFor, state, from, to) {
    if (!validFor)
      return false;
    let text = state.sliceDoc(from, to);
    return typeof validFor == "function" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);
  }
  var setActiveEffect = /* @__PURE__ */ StateEffect.define({
    map(sources, mapping) {
      return sources.map((s) => s.map(mapping));
    }
  });
  var setSelectedEffect = /* @__PURE__ */ StateEffect.define();
  var completionState = /* @__PURE__ */ StateField.define({
    create() {
      return CompletionState.start();
    },
    update(value, tr) {
      return value.update(tr);
    },
    provide: (f) => [
      showTooltip.from(f, (val) => val.tooltip),
      EditorView.contentAttributes.from(f, (state) => state.attrs)
    ]
  });
  function applyCompletion(view, option) {
    const apply = option.completion.apply || option.completion.label;
    let result = view.state.field(completionState).active.find((a) => a.source == option.source);
    if (!(result instanceof ActiveResult))
      return false;
    if (typeof apply == "string")
      view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), { annotations: pickedCompletion.of(option.completion) }));
    else
      apply(view, option.completion, result.from, result.to);
    return true;
  }
  var createTooltip = /* @__PURE__ */ completionTooltip(completionState, applyCompletion);
  function moveCompletionSelection(forward, by = "option") {
    return (view) => {
      let cState = view.state.field(completionState, false);
      if (!cState || !cState.open || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
        return false;
      let step2 = 1, tooltip;
      if (by == "page" && (tooltip = getTooltip(view, cState.open.tooltip)))
        step2 = Math.max(2, Math.floor(tooltip.dom.offsetHeight / tooltip.dom.querySelector("li").offsetHeight) - 1);
      let { length: length2 } = cState.open.options;
      let selected = cState.open.selected > -1 ? cState.open.selected + step2 * (forward ? 1 : -1) : forward ? 0 : length2 - 1;
      if (selected < 0)
        selected = by == "page" ? 0 : length2 - 1;
      else if (selected >= length2)
        selected = by == "page" ? length2 - 1 : 0;
      view.dispatch({ effects: setSelectedEffect.of(selected) });
      return true;
    };
  }
  var acceptCompletion = (view) => {
    let cState = view.state.field(completionState, false);
    if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
      return false;
    return applyCompletion(view, cState.open.options[cState.open.selected]);
  };
  var startCompletion = (view) => {
    let cState = view.state.field(completionState, false);
    if (!cState)
      return false;
    view.dispatch({ effects: startCompletionEffect.of(true) });
    return true;
  };
  var closeCompletion = (view) => {
    let cState = view.state.field(completionState, false);
    if (!cState || !cState.active.some(
      (a) => a.state != 0
      /* State.Inactive */
    ))
      return false;
    view.dispatch({ effects: closeCompletionEffect.of(null) });
    return true;
  };
  var RunningQuery = class {
    constructor(active, context2) {
      this.active = active;
      this.context = context2;
      this.time = Date.now();
      this.updates = [];
      this.done = void 0;
    }
  };
  var MaxUpdateCount = 50;
  var MinAbortTime = 1e3;
  var completionPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.debounceUpdate = -1;
      this.running = [];
      this.debounceAccept = -1;
      this.pendingStart = false;
      this.composing = 0;
      for (let active of view.state.field(completionState).active)
        if (active.isPending)
          this.startQuery(active);
    }
    update(update) {
      let cState = update.state.field(completionState);
      let conf = update.state.facet(completionConfig);
      if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
        return;
      let doesReset = update.transactions.some((tr) => {
        let type = getUpdateType(tr, conf);
        return type & 8 || (tr.selection || tr.docChanged) && !(type & 3);
      });
      for (let i = 0; i < this.running.length; i++) {
        let query = this.running[i];
        if (doesReset || query.context.abortOnDocChange && update.docChanged || query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
          for (let handler of query.context.abortListeners) {
            try {
              handler();
            } catch (e) {
              logException(this.view.state, e);
            }
          }
          query.context.abortListeners = null;
          this.running.splice(i--, 1);
        } else {
          query.updates.push(...update.transactions);
        }
      }
      if (this.debounceUpdate > -1)
        clearTimeout(this.debounceUpdate);
      if (update.transactions.some((tr) => tr.effects.some((e) => e.is(startCompletionEffect))))
        this.pendingStart = true;
      let delay = this.pendingStart ? 50 : conf.activateOnTypingDelay;
      this.debounceUpdate = cState.active.some((a) => a.isPending && !this.running.some((q) => q.active.source == a.source)) ? setTimeout(() => this.startUpdate(), delay) : -1;
      if (this.composing != 0)
        for (let tr of update.transactions) {
          if (tr.isUserEvent("input.type"))
            this.composing = 2;
          else if (this.composing == 2 && tr.selection)
            this.composing = 3;
        }
    }
    startUpdate() {
      this.debounceUpdate = -1;
      this.pendingStart = false;
      let { state } = this.view, cState = state.field(completionState);
      for (let active of cState.active) {
        if (active.isPending && !this.running.some((r) => r.active.source == active.source))
          this.startQuery(active);
      }
      if (this.running.length && cState.open && cState.open.disabled)
        this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
    }
    startQuery(active) {
      let { state } = this.view, pos = cur(state);
      let context2 = new CompletionContext(state, pos, active.explicit, this.view);
      let pending = new RunningQuery(active, context2);
      this.running.push(pending);
      Promise.resolve(active.source(context2)).then((result) => {
        if (!pending.context.aborted) {
          pending.done = result || null;
          this.scheduleAccept();
        }
      }, (err) => {
        this.view.dispatch({ effects: closeCompletionEffect.of(null) });
        logException(this.view.state, err);
      });
    }
    scheduleAccept() {
      if (this.running.every((q) => q.done !== void 0))
        this.accept();
      else if (this.debounceAccept < 0)
        this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
    }
    // For each finished query in this.running, try to create a result
    // or, if appropriate, restart the query.
    accept() {
      var _a2;
      if (this.debounceAccept > -1)
        clearTimeout(this.debounceAccept);
      this.debounceAccept = -1;
      let updated = [];
      let conf = this.view.state.facet(completionConfig), cState = this.view.state.field(completionState);
      for (let i = 0; i < this.running.length; i++) {
        let query = this.running[i];
        if (query.done === void 0)
          continue;
        this.running.splice(i--, 1);
        if (query.done) {
          let pos = cur(query.updates.length ? query.updates[0].startState : this.view.state);
          let limit = Math.min(pos, query.done.from + (query.active.explicit ? 0 : 1));
          let active = new ActiveResult(query.active.source, query.active.explicit, limit, query.done, query.done.from, (_a2 = query.done.to) !== null && _a2 !== void 0 ? _a2 : pos);
          for (let tr of query.updates)
            active = active.update(tr, conf);
          if (active.hasResult()) {
            updated.push(active);
            continue;
          }
        }
        let current = cState.active.find((a) => a.source == query.active.source);
        if (current && current.isPending) {
          if (query.done == null) {
            let active = new ActiveSource(
              query.active.source,
              0
              /* State.Inactive */
            );
            for (let tr of query.updates)
              active = active.update(tr, conf);
            if (!active.isPending)
              updated.push(active);
          } else {
            this.startQuery(current);
          }
        }
      }
      if (updated.length || cState.open && cState.open.disabled)
        this.view.dispatch({ effects: setActiveEffect.of(updated) });
    }
  }, {
    eventHandlers: {
      blur(event) {
        let state = this.view.state.field(completionState, false);
        if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {
          let dialog = state.open && getTooltip(this.view, state.open.tooltip);
          if (!dialog || !dialog.dom.contains(event.relatedTarget))
            setTimeout(() => this.view.dispatch({ effects: closeCompletionEffect.of(null) }), 10);
        }
      },
      compositionstart() {
        this.composing = 1;
      },
      compositionend() {
        if (this.composing == 3) {
          setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
        }
        this.composing = 0;
      }
    }
  });
  var windows = typeof navigator == "object" && /* @__PURE__ */ /Win/.test(navigator.platform);
  var commitCharacters = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ EditorView.domEventHandlers({
    keydown(event, view) {
      let field = view.state.field(completionState, false);
      if (!field || !field.open || field.open.disabled || field.open.selected < 0 || event.key.length > 1 || event.ctrlKey && !(windows && event.altKey) || event.metaKey)
        return false;
      let option = field.open.options[field.open.selected];
      let result = field.active.find((a) => a.source == option.source);
      let commitChars = option.completion.commitCharacters || result.result.commitCharacters;
      if (commitChars && commitChars.indexOf(event.key) > -1)
        applyCompletion(view, option);
      return false;
    }
  }));
  var baseTheme4 = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-tooltip.cm-tooltip-autocomplete": {
      "& > ul": {
        fontFamily: "monospace",
        whiteSpace: "nowrap",
        overflow: "hidden auto",
        maxWidth_fallback: "700px",
        maxWidth: "min(700px, 95vw)",
        minWidth: "250px",
        maxHeight: "10em",
        height: "100%",
        listStyle: "none",
        margin: 0,
        padding: 0,
        "& > li, & > completion-section": {
          padding: "1px 3px",
          lineHeight: 1.2
        },
        "& > li": {
          overflowX: "hidden",
          textOverflow: "ellipsis",
          cursor: "pointer"
        },
        "& > completion-section": {
          display: "list-item",
          borderBottom: "1px solid silver",
          paddingLeft: "0.5em",
          opacity: 0.7
        }
      }
    },
    "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
      background: "#17c",
      color: "white"
    },
    "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
      background: "#777"
    },
    "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
      background: "#347",
      color: "white"
    },
    "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
      background: "#444"
    },
    ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
      content: '"\xB7\xB7\xB7"',
      opacity: 0.5,
      display: "block",
      textAlign: "center"
    },
    ".cm-tooltip.cm-completionInfo": {
      position: "absolute",
      padding: "3px 9px",
      width: "max-content",
      maxWidth: `${400}px`,
      boxSizing: "border-box",
      whiteSpace: "pre-line"
    },
    ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
    ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
    ".cm-completionInfo.cm-completionInfo-left-narrow": { right: `${30}px` },
    ".cm-completionInfo.cm-completionInfo-right-narrow": { left: `${30}px` },
    "&light .cm-snippetField": { backgroundColor: "#00000022" },
    "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
    ".cm-snippetFieldPosition": {
      verticalAlign: "text-top",
      width: 0,
      height: "1.15em",
      display: "inline-block",
      margin: "0 -0.7px -.7em",
      borderLeft: "1.4px dotted #888"
    },
    ".cm-completionMatchedText": {
      textDecoration: "underline"
    },
    ".cm-completionDetail": {
      marginLeft: "0.5em",
      fontStyle: "italic"
    },
    ".cm-completionIcon": {
      fontSize: "90%",
      width: ".8em",
      display: "inline-block",
      textAlign: "center",
      paddingRight: ".6em",
      opacity: "0.6",
      boxSizing: "content-box"
    },
    ".cm-completionIcon-function, .cm-completionIcon-method": {
      "&:after": { content: "'\u0192'" }
    },
    ".cm-completionIcon-class": {
      "&:after": { content: "'\u25CB'" }
    },
    ".cm-completionIcon-interface": {
      "&:after": { content: "'\u25CC'" }
    },
    ".cm-completionIcon-variable": {
      "&:after": { content: "'\u{1D465}'" }
    },
    ".cm-completionIcon-constant": {
      "&:after": { content: "'\u{1D436}'" }
    },
    ".cm-completionIcon-type": {
      "&:after": { content: "'\u{1D461}'" }
    },
    ".cm-completionIcon-enum": {
      "&:after": { content: "'\u222A'" }
    },
    ".cm-completionIcon-property": {
      "&:after": { content: "'\u25A1'" }
    },
    ".cm-completionIcon-keyword": {
      "&:after": { content: "'\u{1F511}\uFE0E'" }
      // Disable emoji rendering
    },
    ".cm-completionIcon-namespace": {
      "&:after": { content: "'\u25A2'" }
    },
    ".cm-completionIcon-text": {
      "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
    }
  });
  var FieldPos = class {
    constructor(field, line, from, to) {
      this.field = field;
      this.line = line;
      this.from = from;
      this.to = to;
    }
  };
  var FieldRange = class _FieldRange {
    constructor(field, from, to) {
      this.field = field;
      this.from = from;
      this.to = to;
    }
    map(changes) {
      let from = changes.mapPos(this.from, -1, MapMode.TrackDel);
      let to = changes.mapPos(this.to, 1, MapMode.TrackDel);
      return from == null || to == null ? null : new _FieldRange(this.field, from, to);
    }
  };
  var Snippet = class _Snippet {
    constructor(lines, fieldPositions) {
      this.lines = lines;
      this.fieldPositions = fieldPositions;
    }
    instantiate(state, pos) {
      let text = [], lineStart = [pos];
      let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
      for (let line of this.lines) {
        if (text.length) {
          let indent = baseIndent, tabs = /^\t*/.exec(line)[0].length;
          for (let i = 0; i < tabs; i++)
            indent += state.facet(indentUnit);
          lineStart.push(pos + indent.length - tabs);
          line = indent + line.slice(tabs);
        }
        text.push(line);
        pos += line.length + 1;
      }
      let ranges = this.fieldPositions.map((pos2) => new FieldRange(pos2.field, lineStart[pos2.line] + pos2.from, lineStart[pos2.line] + pos2.to));
      return { text, ranges };
    }
    static parse(template) {
      let fields = [];
      let lines = [], positions = [], m;
      for (let line of template.split(/\r\n?|\n/)) {
        while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(line)) {
          let seq = m[1] ? +m[1] : null, rawName = m[2] || m[3] || "", found = -1;
          let name2 = rawName.replace(/\\[{}]/g, (m2) => m2[1]);
          for (let i = 0; i < fields.length; i++) {
            if (seq != null ? fields[i].seq == seq : name2 ? fields[i].name == name2 : false)
              found = i;
          }
          if (found < 0) {
            let i = 0;
            while (i < fields.length && (seq == null || fields[i].seq != null && fields[i].seq < seq))
              i++;
            fields.splice(i, 0, { seq, name: name2 });
            found = i;
            for (let pos of positions)
              if (pos.field >= found)
                pos.field++;
          }
          positions.push(new FieldPos(found, lines.length, m.index, m.index + name2.length));
          line = line.slice(0, m.index) + rawName + line.slice(m.index + m[0].length);
        }
        line = line.replace(/\\([{}])/g, (_, brace, index) => {
          for (let pos of positions)
            if (pos.line == lines.length && pos.from > index) {
              pos.from--;
              pos.to--;
            }
          return brace;
        });
        lines.push(line);
      }
      return new _Snippet(lines, positions);
    }
  };
  var fieldMarker = /* @__PURE__ */ Decoration.widget({ widget: /* @__PURE__ */ new class extends WidgetType {
    toDOM() {
      let span = document.createElement("span");
      span.className = "cm-snippetFieldPosition";
      return span;
    }
    ignoreEvent() {
      return false;
    }
  }() });
  var fieldRange = /* @__PURE__ */ Decoration.mark({ class: "cm-snippetField" });
  var ActiveSnippet = class _ActiveSnippet {
    constructor(ranges, active) {
      this.ranges = ranges;
      this.active = active;
      this.deco = Decoration.set(ranges.map((r) => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));
    }
    map(changes) {
      let ranges = [];
      for (let r of this.ranges) {
        let mapped = r.map(changes);
        if (!mapped)
          return null;
        ranges.push(mapped);
      }
      return new _ActiveSnippet(ranges, this.active);
    }
    selectionInsideField(sel) {
      return sel.ranges.every((range) => this.ranges.some((r) => r.field == this.active && r.from <= range.from && r.to >= range.to));
    }
  };
  var setActive = /* @__PURE__ */ StateEffect.define({
    map(value, changes) {
      return value && value.map(changes);
    }
  });
  var moveToField = /* @__PURE__ */ StateEffect.define();
  var snippetState = /* @__PURE__ */ StateField.define({
    create() {
      return null;
    },
    update(value, tr) {
      for (let effect of tr.effects) {
        if (effect.is(setActive))
          return effect.value;
        if (effect.is(moveToField) && value)
          return new ActiveSnippet(value.ranges, effect.value);
      }
      if (value && tr.docChanged)
        value = value.map(tr.changes);
      if (value && tr.selection && !value.selectionInsideField(tr.selection))
        value = null;
      return value;
    },
    provide: (f) => EditorView.decorations.from(f, (val) => val ? val.deco : Decoration.none)
  });
  function fieldSelection(ranges, field) {
    return EditorSelection.create(ranges.filter((r) => r.field == field).map((r) => EditorSelection.range(r.from, r.to)));
  }
  function snippet(template) {
    let snippet2 = Snippet.parse(template);
    return (editor, completion, from, to) => {
      let { text, ranges } = snippet2.instantiate(editor.state, from);
      let { main } = editor.state.selection;
      let spec = {
        changes: { from, to: to == main.from ? main.to : to, insert: Text.of(text) },
        scrollIntoView: true,
        annotations: completion ? [pickedCompletion.of(completion), Transaction.userEvent.of("input.complete")] : void 0
      };
      if (ranges.length)
        spec.selection = fieldSelection(ranges, 0);
      if (ranges.some((r) => r.field > 0)) {
        let active = new ActiveSnippet(ranges, 0);
        let effects = spec.effects = [setActive.of(active)];
        if (editor.state.field(snippetState, false) === void 0)
          effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme4]));
      }
      editor.dispatch(editor.state.update(spec));
    };
  }
  function moveField(dir) {
    return ({ state, dispatch }) => {
      let active = state.field(snippetState, false);
      if (!active || dir < 0 && active.active == 0)
        return false;
      let next = active.active + dir, last = dir > 0 && !active.ranges.some((r) => r.field == next + dir);
      dispatch(state.update({
        selection: fieldSelection(active.ranges, next),
        effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next)),
        scrollIntoView: true
      }));
      return true;
    };
  }
  var clearSnippet = ({ state, dispatch }) => {
    let active = state.field(snippetState, false);
    if (!active)
      return false;
    dispatch(state.update({ effects: setActive.of(null) }));
    return true;
  };
  var nextSnippetField = /* @__PURE__ */ moveField(1);
  var prevSnippetField = /* @__PURE__ */ moveField(-1);
  var defaultSnippetKeymap = [
    { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
    { key: "Escape", run: clearSnippet }
  ];
  var snippetKeymap = /* @__PURE__ */ Facet.define({
    combine(maps) {
      return maps.length ? maps[0] : defaultSnippetKeymap;
    }
  });
  var addSnippetKeymap = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ keymap.compute([snippetKeymap], (state) => state.facet(snippetKeymap)));
  function snippetCompletion(template, completion) {
    return Object.assign(Object.assign({}, completion), { apply: snippet(template) });
  }
  var snippetPointerHandler = /* @__PURE__ */ EditorView.domEventHandlers({
    mousedown(event, view) {
      let active = view.state.field(snippetState, false), pos;
      if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
        return false;
      let match = active.ranges.find((r) => r.from <= pos && r.to >= pos);
      if (!match || match.field == active.active)
        return false;
      view.dispatch({
        selection: fieldSelection(active.ranges, match.field),
        effects: setActive.of(active.ranges.some((r) => r.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null),
        scrollIntoView: true
      });
      return true;
    }
  });
  var defaults2 = {
    brackets: ["(", "[", "{", "'", '"'],
    before: ")]}:;>",
    stringPrefixes: []
  };
  var closeBracketEffect = /* @__PURE__ */ StateEffect.define({
    map(value, mapping) {
      let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
      return mapped == null ? void 0 : mapped;
    }
  });
  var closedBracket = /* @__PURE__ */ new class extends RangeValue {
  }();
  closedBracket.startSide = 1;
  closedBracket.endSide = -1;
  var bracketState = /* @__PURE__ */ StateField.define({
    create() {
      return RangeSet.empty;
    },
    update(value, tr) {
      value = value.map(tr.changes);
      if (tr.selection) {
        let line = tr.state.doc.lineAt(tr.selection.main.head);
        value = value.update({ filter: (from) => from >= line.from && from <= line.to });
      }
      for (let effect of tr.effects)
        if (effect.is(closeBracketEffect))
          value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
      return value;
    }
  });
  function closeBrackets() {
    return [inputHandler2, bracketState];
  }
  var definedClosing = "()[]{}<>\xAB\xBB\xBB\xAB\uFF3B\uFF3D\uFF5B\uFF5D";
  function closing(ch) {
    for (let i = 0; i < definedClosing.length; i += 2)
      if (definedClosing.charCodeAt(i) == ch)
        return definedClosing.charAt(i + 1);
    return fromCodePoint(ch < 128 ? ch : ch + 1);
  }
  function config(state, pos) {
    return state.languageDataAt("closeBrackets", pos)[0] || defaults2;
  }
  var android = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent);
  var inputHandler2 = /* @__PURE__ */ EditorView.inputHandler.of((view, from, to, insert2) => {
    if ((android ? view.composing : view.compositionStarted) || view.state.readOnly)
      return false;
    let sel = view.state.selection.main;
    if (insert2.length > 2 || insert2.length == 2 && codePointSize2(codePointAt2(insert2, 0)) == 1 || from != sel.from || to != sel.to)
      return false;
    let tr = insertBracket(view.state, insert2);
    if (!tr)
      return false;
    view.dispatch(tr);
    return true;
  });
  var deleteBracketPair = ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let conf = config(state, state.selection.main.head);
    let tokens = conf.brackets || defaults2.brackets;
    let dont = null, changes = state.changeByRange((range) => {
      if (range.empty) {
        let before = prevChar(state.doc, range.head);
        for (let token of tokens) {
          if (token == before && nextChar(state.doc, range.head) == closing(codePointAt2(token, 0)))
            return {
              changes: { from: range.head - token.length, to: range.head + token.length },
              range: EditorSelection.cursor(range.head - token.length)
            };
        }
      }
      return { range: dont = range };
    });
    if (!dont)
      dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete.backward" }));
    return !dont;
  };
  var closeBracketsKeymap = [
    { key: "Backspace", run: deleteBracketPair }
  ];
  function insertBracket(state, bracket2) {
    let conf = config(state, state.selection.main.head);
    let tokens = conf.brackets || defaults2.brackets;
    for (let tok of tokens) {
      let closed = closing(codePointAt2(tok, 0));
      if (bracket2 == tok)
        return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf) : handleOpen(state, tok, closed, conf.before || defaults2.before);
      if (bracket2 == closed && closedBracketAt(state, state.selection.main.from))
        return handleClose(state, tok, closed);
    }
    return null;
  }
  function closedBracketAt(state, pos) {
    let found = false;
    state.field(bracketState).between(0, state.doc.length, (from) => {
      if (from == pos)
        found = true;
    });
    return found;
  }
  function nextChar(doc2, pos) {
    let next = doc2.sliceString(pos, pos + 2);
    return next.slice(0, codePointSize2(codePointAt2(next, 0)));
  }
  function prevChar(doc2, pos) {
    let prev = doc2.sliceString(pos - 2, pos);
    return codePointSize2(codePointAt2(prev, 0)) == prev.length ? prev : prev.slice(1);
  }
  function handleOpen(state, open, close, closeBefore) {
    let dont = null, changes = state.changeByRange((range) => {
      if (!range.empty)
        return {
          changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
          effects: closeBracketEffect.of(range.to + open.length),
          range: EditorSelection.range(range.anchor + open.length, range.head + open.length)
        };
      let next = nextChar(state.doc, range.head);
      if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
        return {
          changes: { insert: open + close, from: range.head },
          effects: closeBracketEffect.of(range.head + open.length),
          range: EditorSelection.cursor(range.head + open.length)
        };
      return { range: dont = range };
    });
    return dont ? null : state.update(changes, {
      scrollIntoView: true,
      userEvent: "input.type"
    });
  }
  function handleClose(state, _open, close) {
    let dont = null, changes = state.changeByRange((range) => {
      if (range.empty && nextChar(state.doc, range.head) == close)
        return {
          changes: { from: range.head, to: range.head + close.length, insert: close },
          range: EditorSelection.cursor(range.head + close.length)
        };
      return dont = { range };
    });
    return dont ? null : state.update(changes, {
      scrollIntoView: true,
      userEvent: "input.type"
    });
  }
  function handleSame(state, token, allowTriple, config2) {
    let stringPrefixes = config2.stringPrefixes || defaults2.stringPrefixes;
    let dont = null, changes = state.changeByRange((range) => {
      if (!range.empty)
        return {
          changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
          effects: closeBracketEffect.of(range.to + token.length),
          range: EditorSelection.range(range.anchor + token.length, range.head + token.length)
        };
      let pos = range.head, next = nextChar(state.doc, pos), start;
      if (next == token) {
        if (nodeStart(state, pos)) {
          return {
            changes: { insert: token + token, from: pos },
            effects: closeBracketEffect.of(pos + token.length),
            range: EditorSelection.cursor(pos + token.length)
          };
        } else if (closedBracketAt(state, pos)) {
          let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
          let content2 = isTriple ? token + token + token : token;
          return {
            changes: { from: pos, to: pos + content2.length, insert: content2 },
            range: EditorSelection.cursor(pos + content2.length)
          };
        }
      } else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token && (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 && nodeStart(state, start)) {
        return {
          changes: { insert: token + token + token + token, from: pos },
          effects: closeBracketEffect.of(pos + token.length),
          range: EditorSelection.cursor(pos + token.length)
        };
      } else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
        if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes))
          return {
            changes: { insert: token + token, from: pos },
            effects: closeBracketEffect.of(pos + token.length),
            range: EditorSelection.cursor(pos + token.length)
          };
      }
      return { range: dont = range };
    });
    return dont ? null : state.update(changes, {
      scrollIntoView: true,
      userEvent: "input.type"
    });
  }
  function nodeStart(state, pos) {
    let tree = syntaxTree(state).resolveInner(pos + 1);
    return tree.parent && tree.from == pos;
  }
  function probablyInString(state, pos, quoteToken, prefixes) {
    let node = syntaxTree(state).resolveInner(pos, -1);
    let maxPrefix = prefixes.reduce((m, p) => Math.max(m, p.length), 0);
    for (let i = 0; i < 5; i++) {
      let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));
      let quotePos = start.indexOf(quoteToken);
      if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
        let first = node.firstChild;
        while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {
          if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)
            return false;
          first = first.firstChild;
        }
        return true;
      }
      let parent = node.to == pos && node.parent;
      if (!parent)
        break;
      node = parent;
    }
    return false;
  }
  function canStartStringAt(state, pos, prefixes) {
    let charCat = state.charCategorizer(pos);
    if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word)
      return pos;
    for (let prefix of prefixes) {
      let start = pos - prefix.length;
      if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word)
        return start;
    }
    return -1;
  }
  function autocompletion(config2 = {}) {
    return [
      commitCharacters,
      completionState,
      completionConfig.of(config2),
      completionPlugin,
      completionKeymapExt,
      baseTheme4
    ];
  }
  var completionKeymap = [
    { key: "Ctrl-Space", run: startCompletion },
    { mac: "Alt-`", run: startCompletion },
    { key: "Escape", run: closeCompletion },
    { key: "ArrowDown", run: /* @__PURE__ */ moveCompletionSelection(true) },
    { key: "ArrowUp", run: /* @__PURE__ */ moveCompletionSelection(false) },
    { key: "PageDown", run: /* @__PURE__ */ moveCompletionSelection(true, "page") },
    { key: "PageUp", run: /* @__PURE__ */ moveCompletionSelection(false, "page") },
    { key: "Enter", run: acceptCompletion }
  ];
  var completionKeymapExt = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ keymap.computeN([completionConfig], (state) => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));

  // node_modules/@codemirror/lint/dist/index.js
  var SelectedDiagnostic = class {
    constructor(from, to, diagnostic) {
      this.from = from;
      this.to = to;
      this.diagnostic = diagnostic;
    }
  };
  var LintState = class _LintState {
    constructor(diagnostics2, panel, selected) {
      this.diagnostics = diagnostics2;
      this.panel = panel;
      this.selected = selected;
    }
    static init(diagnostics2, panel, state) {
      let diagnosticFilter = state.facet(lintConfig).markerFilter;
      if (diagnosticFilter)
        diagnostics2 = diagnosticFilter(diagnostics2, state);
      let sorted = diagnostics2.slice().sort((a, b) => a.from - b.from || a.to - b.to);
      let deco = new RangeSetBuilder(), active = [], pos = 0;
      for (let i = 0; ; ) {
        let next = i == sorted.length ? null : sorted[i];
        if (!next && !active.length)
          break;
        let from, to;
        if (active.length) {
          from = pos;
          to = active.reduce((p, d) => Math.min(p, d.to), next && next.from > from ? next.from : 1e8);
        } else {
          from = next.from;
          to = next.to;
          active.push(next);
          i++;
        }
        while (i < sorted.length) {
          let next2 = sorted[i];
          if (next2.from == from && (next2.to > next2.from || next2.to == from)) {
            active.push(next2);
            i++;
            to = Math.min(next2.to, to);
          } else {
            to = Math.min(next2.from, to);
            break;
          }
        }
        let sev = maxSeverity(active);
        if (active.some((d) => d.from == d.to || d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from)) {
          deco.add(from, from, Decoration.widget({
            widget: new DiagnosticWidget(sev),
            diagnostics: active.slice()
          }));
        } else {
          let markClass = active.reduce((c, d) => d.markClass ? c + " " + d.markClass : c, "");
          deco.add(from, to, Decoration.mark({
            class: "cm-lintRange cm-lintRange-" + sev + markClass,
            diagnostics: active.slice(),
            inclusiveEnd: active.some((a) => a.to > to)
          }));
        }
        pos = to;
        for (let i2 = 0; i2 < active.length; i2++)
          if (active[i2].to <= pos)
            active.splice(i2--, 1);
      }
      let set = deco.finish();
      return new _LintState(set, panel, findDiagnostic(set));
    }
  };
  function findDiagnostic(diagnostics2, diagnostic = null, after = 0) {
    let found = null;
    diagnostics2.between(after, 1e9, (from, to, { spec }) => {
      if (diagnostic && spec.diagnostics.indexOf(diagnostic) < 0)
        return;
      if (!found)
        found = new SelectedDiagnostic(from, to, diagnostic || spec.diagnostics[0]);
      else if (spec.diagnostics.indexOf(found.diagnostic) < 0)
        return false;
      else
        found = new SelectedDiagnostic(found.from, to, found.diagnostic);
    });
    return found;
  }
  function hideTooltip(tr, tooltip) {
    let from = tooltip.pos, to = tooltip.end || from;
    let result = tr.state.facet(lintConfig).hideOn(tr, from, to);
    if (result != null)
      return result;
    let line = tr.startState.doc.lineAt(tooltip.pos);
    return !!(tr.effects.some((e) => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(line.from, Math.max(line.to, to)));
  }
  function maybeEnableLint(state, effects) {
    return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of(lintExtensions));
  }
  var setDiagnosticsEffect = /* @__PURE__ */ StateEffect.define();
  var togglePanel2 = /* @__PURE__ */ StateEffect.define();
  var movePanelSelection = /* @__PURE__ */ StateEffect.define();
  var lintState = /* @__PURE__ */ StateField.define({
    create() {
      return new LintState(Decoration.none, null, null);
    },
    update(value, tr) {
      if (tr.docChanged && value.diagnostics.size) {
        let mapped = value.diagnostics.map(tr.changes), selected = null, panel = value.panel;
        if (value.selected) {
          let selPos = tr.changes.mapPos(value.selected.from, 1);
          selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
        }
        if (!mapped.size && panel && tr.state.facet(lintConfig).autoPanel)
          panel = null;
        value = new LintState(mapped, panel, selected);
      }
      for (let effect of tr.effects) {
        if (effect.is(setDiagnosticsEffect)) {
          let panel = !tr.state.facet(lintConfig).autoPanel ? value.panel : effect.value.length ? LintPanel.open : null;
          value = LintState.init(effect.value, panel, tr.state);
        } else if (effect.is(togglePanel2)) {
          value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
        } else if (effect.is(movePanelSelection)) {
          value = new LintState(value.diagnostics, value.panel, effect.value);
        }
      }
      return value;
    },
    provide: (f) => [
      showPanel.from(f, (val) => val.panel),
      EditorView.decorations.from(f, (s) => s.diagnostics)
    ]
  });
  var activeMark = /* @__PURE__ */ Decoration.mark({ class: "cm-lintRange cm-lintRange-active" });
  function lintTooltip(view, pos, side) {
    let { diagnostics: diagnostics2 } = view.state.field(lintState);
    let found, start = -1, end = -1;
    diagnostics2.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {
      if (pos >= from && pos <= to && (from == to || (pos > from || side > 0) && (pos < to || side < 0))) {
        found = spec.diagnostics;
        start = from;
        end = to;
        return false;
      }
    });
    let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
    if (found && diagnosticFilter)
      found = diagnosticFilter(found, view.state);
    if (!found)
      return null;
    return {
      pos: start,
      end,
      above: view.state.doc.lineAt(start).to < end,
      create() {
        return { dom: diagnosticsTooltip(view, found) };
      }
    };
  }
  function diagnosticsTooltip(view, diagnostics2) {
    return crelt("ul", { class: "cm-tooltip-lint" }, diagnostics2.map((d) => renderDiagnostic(view, d, false)));
  }
  var openLintPanel = (view) => {
    let field = view.state.field(lintState, false);
    if (!field || !field.panel)
      view.dispatch({ effects: maybeEnableLint(view.state, [togglePanel2.of(true)]) });
    let panel = getPanel(view, LintPanel.open);
    if (panel)
      panel.dom.querySelector(".cm-panel-lint ul").focus();
    return true;
  };
  var closeLintPanel = (view) => {
    let field = view.state.field(lintState, false);
    if (!field || !field.panel)
      return false;
    view.dispatch({ effects: togglePanel2.of(false) });
    return true;
  };
  var nextDiagnostic = (view) => {
    let field = view.state.field(lintState, false);
    if (!field)
      return false;
    let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);
    if (!next.value) {
      next = field.diagnostics.iter(0);
      if (!next.value || next.from == sel.from && next.to == sel.to)
        return false;
    }
    view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });
    return true;
  };
  var lintKeymap = [
    { key: "Mod-Shift-m", run: openLintPanel, preventDefault: true },
    { key: "F8", run: nextDiagnostic }
  ];
  var lintConfig = /* @__PURE__ */ Facet.define({
    combine(input) {
      return Object.assign({ sources: input.map((i) => i.source).filter((x) => x != null) }, combineConfig(input.map((i) => i.config), {
        delay: 750,
        markerFilter: null,
        tooltipFilter: null,
        needsRefresh: null,
        hideOn: () => null
      }, {
        needsRefresh: (a, b) => !a ? b : !b ? a : (u) => a(u) || b(u)
      }));
    }
  });
  function assignKeys(actions) {
    let assigned = [];
    if (actions)
      actions: for (let { name: name2 } of actions) {
        for (let i = 0; i < name2.length; i++) {
          let ch = name2[i];
          if (/[a-zA-Z]/.test(ch) && !assigned.some((c) => c.toLowerCase() == ch.toLowerCase())) {
            assigned.push(ch);
            continue actions;
          }
        }
        assigned.push("");
      }
    return assigned;
  }
  function renderDiagnostic(view, diagnostic, inPanel) {
    var _a2;
    let keys2 = inPanel ? assignKeys(diagnostic.actions) : [];
    return crelt("li", { class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity }, crelt("span", { class: "cm-diagnosticText" }, diagnostic.renderMessage ? diagnostic.renderMessage(view) : diagnostic.message), (_a2 = diagnostic.actions) === null || _a2 === void 0 ? void 0 : _a2.map((action, i) => {
      let fired = false, click = (e) => {
        e.preventDefault();
        if (fired)
          return;
        fired = true;
        let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
        if (found)
          action.apply(view, found.from, found.to);
      };
      let { name: name2 } = action, keyIndex = keys2[i] ? name2.indexOf(keys2[i]) : -1;
      let nameElt = keyIndex < 0 ? name2 : [
        name2.slice(0, keyIndex),
        crelt("u", name2.slice(keyIndex, keyIndex + 1)),
        name2.slice(keyIndex + 1)
      ];
      return crelt("button", {
        type: "button",
        class: "cm-diagnosticAction",
        onclick: click,
        onmousedown: click,
        "aria-label": ` Action: ${name2}${keyIndex < 0 ? "" : ` (access key "${keys2[i]})"`}.`
      }, nameElt);
    }), diagnostic.source && crelt("div", { class: "cm-diagnosticSource" }, diagnostic.source));
  }
  var DiagnosticWidget = class extends WidgetType {
    constructor(sev) {
      super();
      this.sev = sev;
    }
    eq(other) {
      return other.sev == this.sev;
    }
    toDOM() {
      return crelt("span", { class: "cm-lintPoint cm-lintPoint-" + this.sev });
    }
  };
  var PanelItem = class {
    constructor(view, diagnostic) {
      this.diagnostic = diagnostic;
      this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16);
      this.dom = renderDiagnostic(view, diagnostic, true);
      this.dom.id = this.id;
      this.dom.setAttribute("role", "option");
    }
  };
  var LintPanel = class _LintPanel {
    constructor(view) {
      this.view = view;
      this.items = [];
      let onkeydown = (event) => {
        if (event.keyCode == 27) {
          closeLintPanel(this.view);
          this.view.focus();
        } else if (event.keyCode == 38 || event.keyCode == 33) {
          this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
        } else if (event.keyCode == 40 || event.keyCode == 34) {
          this.moveSelection((this.selectedIndex + 1) % this.items.length);
        } else if (event.keyCode == 36) {
          this.moveSelection(0);
        } else if (event.keyCode == 35) {
          this.moveSelection(this.items.length - 1);
        } else if (event.keyCode == 13) {
          this.view.focus();
        } else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) {
          let { diagnostic } = this.items[this.selectedIndex], keys2 = assignKeys(diagnostic.actions);
          for (let i = 0; i < keys2.length; i++)
            if (keys2[i].toUpperCase().charCodeAt(0) == event.keyCode) {
              let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
              if (found)
                diagnostic.actions[i].apply(view, found.from, found.to);
            }
        } else {
          return;
        }
        event.preventDefault();
      };
      let onclick = (event) => {
        for (let i = 0; i < this.items.length; i++) {
          if (this.items[i].dom.contains(event.target))
            this.moveSelection(i);
        }
      };
      this.list = crelt("ul", {
        tabIndex: 0,
        role: "listbox",
        "aria-label": this.view.state.phrase("Diagnostics"),
        onkeydown,
        onclick
      });
      this.dom = crelt("div", { class: "cm-panel-lint" }, this.list, crelt("button", {
        type: "button",
        name: "close",
        "aria-label": this.view.state.phrase("close"),
        onclick: () => closeLintPanel(this.view)
      }, "\xD7"));
      this.update();
    }
    get selectedIndex() {
      let selected = this.view.state.field(lintState).selected;
      if (!selected)
        return -1;
      for (let i = 0; i < this.items.length; i++)
        if (this.items[i].diagnostic == selected.diagnostic)
          return i;
      return -1;
    }
    update() {
      let { diagnostics: diagnostics2, selected } = this.view.state.field(lintState);
      let i = 0, needsSync = false, newSelectedItem = null;
      let seen = /* @__PURE__ */ new Set();
      diagnostics2.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
        for (let diagnostic of spec.diagnostics) {
          if (seen.has(diagnostic))
            continue;
          seen.add(diagnostic);
          let found = -1, item;
          for (let j = i; j < this.items.length; j++)
            if (this.items[j].diagnostic == diagnostic) {
              found = j;
              break;
            }
          if (found < 0) {
            item = new PanelItem(this.view, diagnostic);
            this.items.splice(i, 0, item);
            needsSync = true;
          } else {
            item = this.items[found];
            if (found > i) {
              this.items.splice(i, found - i);
              needsSync = true;
            }
          }
          if (selected && item.diagnostic == selected.diagnostic) {
            if (!item.dom.hasAttribute("aria-selected")) {
              item.dom.setAttribute("aria-selected", "true");
              newSelectedItem = item;
            }
          } else if (item.dom.hasAttribute("aria-selected")) {
            item.dom.removeAttribute("aria-selected");
          }
          i++;
        }
      });
      while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
        needsSync = true;
        this.items.pop();
      }
      if (this.items.length == 0) {
        this.items.push(new PanelItem(this.view, {
          from: -1,
          to: -1,
          severity: "info",
          message: this.view.state.phrase("No diagnostics")
        }));
        needsSync = true;
      }
      if (newSelectedItem) {
        this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
        this.view.requestMeasure({
          key: this,
          read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
          write: ({ sel, panel }) => {
            let scaleY = panel.height / this.list.offsetHeight;
            if (sel.top < panel.top)
              this.list.scrollTop -= (panel.top - sel.top) / scaleY;
            else if (sel.bottom > panel.bottom)
              this.list.scrollTop += (sel.bottom - panel.bottom) / scaleY;
          }
        });
      } else if (this.selectedIndex < 0) {
        this.list.removeAttribute("aria-activedescendant");
      }
      if (needsSync)
        this.sync();
    }
    sync() {
      let domPos = this.list.firstChild;
      function rm2() {
        let prev = domPos;
        domPos = prev.nextSibling;
        prev.remove();
      }
      for (let item of this.items) {
        if (item.dom.parentNode == this.list) {
          while (domPos != item.dom)
            rm2();
          domPos = item.dom.nextSibling;
        } else {
          this.list.insertBefore(item.dom, domPos);
        }
      }
      while (domPos)
        rm2();
    }
    moveSelection(selectedIndex) {
      if (this.selectedIndex < 0)
        return;
      let field = this.view.state.field(lintState);
      let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
      if (!selection)
        return;
      this.view.dispatch({
        selection: { anchor: selection.from, head: selection.to },
        scrollIntoView: true,
        effects: movePanelSelection.of(selection)
      });
    }
    static open(view) {
      return new _LintPanel(view);
    }
  };
  function svg(content2, attrs = `viewBox="0 0 40 40"`) {
    return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${attrs}>${encodeURIComponent(content2)}</svg>')`;
  }
  function underline(color2) {
    return svg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${color2}" fill="none" stroke-width=".7"/>`, `width="6" height="3"`);
  }
  var baseTheme5 = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-diagnostic": {
      padding: "3px 6px 3px 8px",
      marginLeft: "-1px",
      display: "block",
      whiteSpace: "pre-wrap"
    },
    ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
    ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
    ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
    ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
    ".cm-diagnosticAction": {
      font: "inherit",
      border: "none",
      padding: "2px 4px",
      backgroundColor: "#444",
      color: "white",
      borderRadius: "3px",
      marginLeft: "8px",
      cursor: "pointer"
    },
    ".cm-diagnosticSource": {
      fontSize: "70%",
      opacity: 0.7
    },
    ".cm-lintRange": {
      backgroundPosition: "left bottom",
      backgroundRepeat: "repeat-x",
      paddingBottom: "0.7px"
    },
    ".cm-lintRange-error": { backgroundImage: /* @__PURE__ */ underline("#d11") },
    ".cm-lintRange-warning": { backgroundImage: /* @__PURE__ */ underline("orange") },
    ".cm-lintRange-info": { backgroundImage: /* @__PURE__ */ underline("#999") },
    ".cm-lintRange-hint": { backgroundImage: /* @__PURE__ */ underline("#66d") },
    ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
    ".cm-tooltip-lint": {
      padding: 0,
      margin: 0
    },
    ".cm-lintPoint": {
      position: "relative",
      "&:after": {
        content: '""',
        position: "absolute",
        bottom: 0,
        left: "-2px",
        borderLeft: "3px solid transparent",
        borderRight: "3px solid transparent",
        borderBottom: "4px solid #d11"
      }
    },
    ".cm-lintPoint-warning": {
      "&:after": { borderBottomColor: "orange" }
    },
    ".cm-lintPoint-info": {
      "&:after": { borderBottomColor: "#999" }
    },
    ".cm-lintPoint-hint": {
      "&:after": { borderBottomColor: "#66d" }
    },
    ".cm-panel.cm-panel-lint": {
      position: "relative",
      "& ul": {
        maxHeight: "100px",
        overflowY: "auto",
        "& [aria-selected]": {
          backgroundColor: "#ddd",
          "& u": { textDecoration: "underline" }
        },
        "&:focus [aria-selected]": {
          background_fallback: "#bdf",
          backgroundColor: "Highlight",
          color_fallback: "white",
          color: "HighlightText"
        },
        "& u": { textDecoration: "none" },
        padding: 0,
        margin: 0
      },
      "& [name=close]": {
        position: "absolute",
        top: "0",
        right: "2px",
        background: "inherit",
        border: "none",
        font: "inherit",
        padding: 0,
        margin: 0
      }
    }
  });
  function severityWeight(sev) {
    return sev == "error" ? 4 : sev == "warning" ? 3 : sev == "info" ? 2 : 1;
  }
  function maxSeverity(diagnostics2) {
    let sev = "hint", weight = 1;
    for (let d of diagnostics2) {
      let w = severityWeight(d.severity);
      if (w > weight) {
        weight = w;
        sev = d.severity;
      }
    }
    return sev;
  }
  var lintExtensions = [
    lintState,
    /* @__PURE__ */ EditorView.decorations.compute([lintState], (state) => {
      let { selected, panel } = state.field(lintState);
      return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([
        activeMark.range(selected.from, selected.to)
      ]);
    }),
    /* @__PURE__ */ hoverTooltip(lintTooltip, { hideOn: hideTooltip }),
    baseTheme5
  ];

  // node_modules/codemirror/dist/index.js
  var basicSetup = /* @__PURE__ */ (() => [
    lineNumbers(),
    highlightActiveLineGutter(),
    highlightSpecialChars(),
    history(),
    foldGutter(),
    drawSelection(),
    dropCursor(),
    EditorState.allowMultipleSelections.of(true),
    indentOnInput(),
    syntaxHighlighting(defaultHighlightStyle, { fallback: true }),
    bracketMatching(),
    closeBrackets(),
    autocompletion(),
    rectangularSelection(),
    crosshairCursor(),
    highlightActiveLine(),
    highlightSelectionMatches(),
    keymap.of([
      ...closeBracketsKeymap,
      ...defaultKeymap,
      ...searchKeymap,
      ...historyKeymap,
      ...foldKeymap,
      ...completionKeymap,
      ...lintKeymap
    ])
  ])();

  // node_modules/@lezer/lr/dist/index.js
  var Stack = class _Stack {
    /**
    @internal
    */
    constructor(p, stack2, state, reducePos, pos, score2, buffer2, bufferBase, curContext, lookAhead = 0, parent) {
      this.p = p;
      this.stack = stack2;
      this.state = state;
      this.reducePos = reducePos;
      this.pos = pos;
      this.score = score2;
      this.buffer = buffer2;
      this.bufferBase = bufferBase;
      this.curContext = curContext;
      this.lookAhead = lookAhead;
      this.parent = parent;
    }
    /**
    @internal
    */
    toString() {
      return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
    }
    // Start an empty stack
    /**
    @internal
    */
    static start(p, state, pos = 0) {
      let cx = p.parser.context;
      return new _Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
    }
    /**
    The stack's current [context](#lr.ContextTracker) value, if
    any. Its type will depend on the context tracker's type
    parameter, or it will be `null` if there is no context
    tracker.
    */
    get context() {
      return this.curContext ? this.curContext.context : null;
    }
    // Push a state onto the stack, tracking its start position as well
    // as the buffer base at that point.
    /**
    @internal
    */
    pushState(state, start) {
      this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
      this.state = state;
    }
    // Apply a reduce action
    /**
    @internal
    */
    reduce(action) {
      var _a2;
      let depth2 = action >> 19, type = action & 65535;
      let { parser: parser2 } = this.p;
      let lookaheadRecord = this.reducePos < this.pos - 25;
      if (lookaheadRecord)
        this.setLookAhead(this.pos);
      let dPrec = parser2.dynamicPrecedence(type);
      if (dPrec)
        this.score += dPrec;
      if (depth2 == 0) {
        this.pushState(parser2.getGoto(this.state, type, true), this.reducePos);
        if (type < parser2.minRepeatTerm)
          this.storeNode(type, this.reducePos, this.reducePos, lookaheadRecord ? 8 : 4, true);
        this.reduceContext(type, this.reducePos);
        return;
      }
      let base2 = this.stack.length - (depth2 - 1) * 3 - (action & 262144 ? 6 : 0);
      let start = base2 ? this.stack[base2 - 2] : this.p.ranges[0].from, size = this.reducePos - start;
      if (size >= 2e3 && !((_a2 = this.p.parser.nodeSet.types[type]) === null || _a2 === void 0 ? void 0 : _a2.isAnonymous)) {
        if (start == this.p.lastBigReductionStart) {
          this.p.bigReductionCount++;
          this.p.lastBigReductionSize = size;
        } else if (this.p.lastBigReductionSize < size) {
          this.p.bigReductionCount = 1;
          this.p.lastBigReductionStart = start;
          this.p.lastBigReductionSize = size;
        }
      }
      let bufferBase = base2 ? this.stack[base2 - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;
      if (type < parser2.minRepeatTerm || action & 131072) {
        let pos = parser2.stateFlag(
          this.state,
          1
          /* StateFlag.Skipped */
        ) ? this.pos : this.reducePos;
        this.storeNode(type, start, pos, count + 4, true);
      }
      if (action & 262144) {
        this.state = this.stack[base2];
      } else {
        let baseStateID = this.stack[base2 - 3];
        this.state = parser2.getGoto(baseStateID, type, true);
      }
      while (this.stack.length > base2)
        this.stack.pop();
      this.reduceContext(type, start);
    }
    // Shift a value into the buffer
    /**
    @internal
    */
    storeNode(term, start, end, size = 4, mustSink = false) {
      if (term == 0 && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
        let cur2 = this, top2 = this.buffer.length;
        if (top2 == 0 && cur2.parent) {
          top2 = cur2.bufferBase - cur2.parent.bufferBase;
          cur2 = cur2.parent;
        }
        if (top2 > 0 && cur2.buffer[top2 - 4] == 0 && cur2.buffer[top2 - 1] > -1) {
          if (start == end)
            return;
          if (cur2.buffer[top2 - 2] >= start) {
            cur2.buffer[top2 - 2] = end;
            return;
          }
        }
      }
      if (!mustSink || this.pos == end) {
        this.buffer.push(term, start, end, size);
      } else {
        let index = this.buffer.length;
        if (index > 0 && this.buffer[index - 4] != 0) {
          let mustMove = false;
          for (let scan = index; scan > 0 && this.buffer[scan - 2] > end; scan -= 4) {
            if (this.buffer[scan - 1] >= 0) {
              mustMove = true;
              break;
            }
          }
          if (mustMove)
            while (index > 0 && this.buffer[index - 2] > end) {
              this.buffer[index] = this.buffer[index - 4];
              this.buffer[index + 1] = this.buffer[index - 3];
              this.buffer[index + 2] = this.buffer[index - 2];
              this.buffer[index + 3] = this.buffer[index - 1];
              index -= 4;
              if (size > 4)
                size -= 4;
            }
        }
        this.buffer[index] = term;
        this.buffer[index + 1] = start;
        this.buffer[index + 2] = end;
        this.buffer[index + 3] = size;
      }
    }
    // Apply a shift action
    /**
    @internal
    */
    shift(action, type, start, end) {
      if (action & 131072) {
        this.pushState(action & 65535, this.pos);
      } else if ((action & 262144) == 0) {
        let nextState = action, { parser: parser2 } = this.p;
        if (end > this.pos || type <= parser2.maxNode) {
          this.pos = end;
          if (!parser2.stateFlag(
            nextState,
            1
            /* StateFlag.Skipped */
          ))
            this.reducePos = end;
        }
        this.pushState(nextState, start);
        this.shiftContext(type, start);
        if (type <= parser2.maxNode)
          this.buffer.push(type, start, end, 4);
      } else {
        this.pos = end;
        this.shiftContext(type, start);
        if (type <= this.p.parser.maxNode)
          this.buffer.push(type, start, end, 4);
      }
    }
    // Apply an action
    /**
    @internal
    */
    apply(action, next, nextStart, nextEnd) {
      if (action & 65536)
        this.reduce(action);
      else
        this.shift(action, next, nextStart, nextEnd);
    }
    // Add a prebuilt (reused) node into the buffer.
    /**
    @internal
    */
    useNode(value, next) {
      let index = this.p.reused.length - 1;
      if (index < 0 || this.p.reused[index] != value) {
        this.p.reused.push(value);
        index++;
      }
      let start = this.pos;
      this.reducePos = this.pos = start + value.length;
      this.pushState(next, start);
      this.buffer.push(
        index,
        start,
        this.reducePos,
        -1
        /* size == -1 means this is a reused value */
      );
      if (this.curContext)
        this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
    }
    // Split the stack. Due to the buffer sharing and the fact
    // that `this.stack` tends to stay quite shallow, this isn't very
    // expensive.
    /**
    @internal
    */
    split() {
      let parent = this;
      let off = parent.buffer.length;
      while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
        off -= 4;
      let buffer2 = parent.buffer.slice(off), base2 = parent.bufferBase + off;
      while (parent && base2 == parent.bufferBase)
        parent = parent.parent;
      return new _Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer2, base2, this.curContext, this.lookAhead, parent);
    }
    // Try to recover from an error by 'deleting' (ignoring) one token.
    /**
    @internal
    */
    recoverByDelete(next, nextEnd) {
      let isNode = next <= this.p.parser.maxNode;
      if (isNode)
        this.storeNode(next, this.pos, nextEnd, 4);
      this.storeNode(0, this.pos, nextEnd, isNode ? 8 : 4);
      this.pos = this.reducePos = nextEnd;
      this.score -= 190;
    }
    /**
    Check if the given term would be able to be shifted (optionally
    after some reductions) on this stack. This can be useful for
    external tokenizers that want to make sure they only provide a
    given token when it applies.
    */
    canShift(term) {
      for (let sim = new SimulatedStack(this); ; ) {
        let action = this.p.parser.stateSlot(
          sim.state,
          4
          /* ParseState.DefaultReduce */
        ) || this.p.parser.hasAction(sim.state, term);
        if (action == 0)
          return false;
        if ((action & 65536) == 0)
          return true;
        sim.reduce(action);
      }
    }
    // Apply up to Recover.MaxNext recovery actions that conceptually
    // inserts some missing token or rule.
    /**
    @internal
    */
    recoverByInsert(next) {
      if (this.stack.length >= 300)
        return [];
      let nextStates = this.p.parser.nextStates(this.state);
      if (nextStates.length > 4 << 1 || this.stack.length >= 120) {
        let best = [];
        for (let i = 0, s; i < nextStates.length; i += 2) {
          if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
            best.push(nextStates[i], s);
        }
        if (this.stack.length < 120)
          for (let i = 0; best.length < 4 << 1 && i < nextStates.length; i += 2) {
            let s = nextStates[i + 1];
            if (!best.some((v, i2) => i2 & 1 && v == s))
              best.push(nextStates[i], s);
          }
        nextStates = best;
      }
      let result = [];
      for (let i = 0; i < nextStates.length && result.length < 4; i += 2) {
        let s = nextStates[i + 1];
        if (s == this.state)
          continue;
        let stack2 = this.split();
        stack2.pushState(s, this.pos);
        stack2.storeNode(0, stack2.pos, stack2.pos, 4, true);
        stack2.shiftContext(nextStates[i], this.pos);
        stack2.reducePos = this.pos;
        stack2.score -= 200;
        result.push(stack2);
      }
      return result;
    }
    // Force a reduce, if possible. Return false if that can't
    // be done.
    /**
    @internal
    */
    forceReduce() {
      let { parser: parser2 } = this.p;
      let reduce = parser2.stateSlot(
        this.state,
        5
        /* ParseState.ForcedReduce */
      );
      if ((reduce & 65536) == 0)
        return false;
      if (!parser2.validAction(this.state, reduce)) {
        let depth2 = reduce >> 19, term = reduce & 65535;
        let target = this.stack.length - depth2 * 3;
        if (target < 0 || parser2.getGoto(this.stack[target], term, false) < 0) {
          let backup = this.findForcedReduction();
          if (backup == null)
            return false;
          reduce = backup;
        }
        this.storeNode(0, this.pos, this.pos, 4, true);
        this.score -= 100;
      }
      this.reducePos = this.pos;
      this.reduce(reduce);
      return true;
    }
    /**
    Try to scan through the automaton to find some kind of reduction
    that can be applied. Used when the regular ForcedReduce field
    isn't a valid action. @internal
    */
    findForcedReduction() {
      let { parser: parser2 } = this.p, seen = [];
      let explore = (state, depth2) => {
        if (seen.includes(state))
          return;
        seen.push(state);
        return parser2.allActions(state, (action) => {
          if (action & (262144 | 131072)) ;
          else if (action & 65536) {
            let rDepth = (action >> 19) - depth2;
            if (rDepth > 1) {
              let term = action & 65535, target = this.stack.length - rDepth * 3;
              if (target >= 0 && parser2.getGoto(this.stack[target], term, false) >= 0)
                return rDepth << 19 | 65536 | term;
            }
          } else {
            let found = explore(action, depth2 + 1);
            if (found != null)
              return found;
          }
        });
      };
      return explore(this.state, 0);
    }
    /**
    @internal
    */
    forceAll() {
      while (!this.p.parser.stateFlag(
        this.state,
        2
        /* StateFlag.Accepting */
      )) {
        if (!this.forceReduce()) {
          this.storeNode(0, this.pos, this.pos, 4, true);
          break;
        }
      }
      return this;
    }
    /**
    Check whether this state has no further actions (assumed to be a direct descendant of the
    top state, since any other states must be able to continue
    somehow). @internal
    */
    get deadEnd() {
      if (this.stack.length != 3)
        return false;
      let { parser: parser2 } = this.p;
      return parser2.data[parser2.stateSlot(
        this.state,
        1
        /* ParseState.Actions */
      )] == 65535 && !parser2.stateSlot(
        this.state,
        4
        /* ParseState.DefaultReduce */
      );
    }
    /**
    Restart the stack (put it back in its start state). Only safe
    when this.stack.length == 3 (state is directly below the top
    state). @internal
    */
    restart() {
      this.storeNode(0, this.pos, this.pos, 4, true);
      this.state = this.stack[0];
      this.stack.length = 0;
    }
    /**
    @internal
    */
    sameState(other) {
      if (this.state != other.state || this.stack.length != other.stack.length)
        return false;
      for (let i = 0; i < this.stack.length; i += 3)
        if (this.stack[i] != other.stack[i])
          return false;
      return true;
    }
    /**
    Get the parser used by this stack.
    */
    get parser() {
      return this.p.parser;
    }
    /**
    Test whether a given dialect (by numeric ID, as exported from
    the terms file) is enabled.
    */
    dialectEnabled(dialectID) {
      return this.p.parser.dialect.flags[dialectID];
    }
    shiftContext(term, start) {
      if (this.curContext)
        this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
    }
    reduceContext(term, start) {
      if (this.curContext)
        this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
    }
    /**
    @internal
    */
    emitContext() {
      let last = this.buffer.length - 1;
      if (last < 0 || this.buffer[last] != -3)
        this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
    }
    /**
    @internal
    */
    emitLookAhead() {
      let last = this.buffer.length - 1;
      if (last < 0 || this.buffer[last] != -4)
        this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
    }
    updateContext(context2) {
      if (context2 != this.curContext.context) {
        let newCx = new StackContext(this.curContext.tracker, context2);
        if (newCx.hash != this.curContext.hash)
          this.emitContext();
        this.curContext = newCx;
      }
    }
    /**
    @internal
    */
    setLookAhead(lookAhead) {
      if (lookAhead > this.lookAhead) {
        this.emitLookAhead();
        this.lookAhead = lookAhead;
      }
    }
    /**
    @internal
    */
    close() {
      if (this.curContext && this.curContext.tracker.strict)
        this.emitContext();
      if (this.lookAhead > 0)
        this.emitLookAhead();
    }
  };
  var StackContext = class {
    constructor(tracker, context2) {
      this.tracker = tracker;
      this.context = context2;
      this.hash = tracker.strict ? tracker.hash(context2) : 0;
    }
  };
  var SimulatedStack = class {
    constructor(start) {
      this.start = start;
      this.state = start.state;
      this.stack = start.stack;
      this.base = this.stack.length;
    }
    reduce(action) {
      let term = action & 65535, depth2 = action >> 19;
      if (depth2 == 0) {
        if (this.stack == this.start.stack)
          this.stack = this.stack.slice();
        this.stack.push(this.state, 0, 0);
        this.base += 3;
      } else {
        this.base -= (depth2 - 1) * 3;
      }
      let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
      this.state = goto;
    }
  };
  var StackBufferCursor = class _StackBufferCursor {
    constructor(stack2, pos, index) {
      this.stack = stack2;
      this.pos = pos;
      this.index = index;
      this.buffer = stack2.buffer;
      if (this.index == 0)
        this.maybeNext();
    }
    static create(stack2, pos = stack2.bufferBase + stack2.buffer.length) {
      return new _StackBufferCursor(stack2, pos, pos - stack2.bufferBase);
    }
    maybeNext() {
      let next = this.stack.parent;
      if (next != null) {
        this.index = this.stack.bufferBase - next.bufferBase;
        this.stack = next;
        this.buffer = next.buffer;
      }
    }
    get id() {
      return this.buffer[this.index - 4];
    }
    get start() {
      return this.buffer[this.index - 3];
    }
    get end() {
      return this.buffer[this.index - 2];
    }
    get size() {
      return this.buffer[this.index - 1];
    }
    next() {
      this.index -= 4;
      this.pos -= 4;
      if (this.index == 0)
        this.maybeNext();
    }
    fork() {
      return new _StackBufferCursor(this.stack, this.pos, this.index);
    }
  };
  function decodeArray(input, Type = Uint16Array) {
    if (typeof input != "string")
      return input;
    let array2 = null;
    for (let pos = 0, out = 0; pos < input.length; ) {
      let value = 0;
      for (; ; ) {
        let next = input.charCodeAt(pos++), stop = false;
        if (next == 126) {
          value = 65535;
          break;
        }
        if (next >= 92)
          next--;
        if (next >= 34)
          next--;
        let digit = next - 32;
        if (digit >= 46) {
          digit -= 46;
          stop = true;
        }
        value += digit;
        if (stop)
          break;
        value *= 46;
      }
      if (array2)
        array2[out++] = value;
      else
        array2 = new Type(value);
    }
    return array2;
  }
  var CachedToken = class {
    constructor() {
      this.start = -1;
      this.value = -1;
      this.end = -1;
      this.extended = -1;
      this.lookAhead = 0;
      this.mask = 0;
      this.context = 0;
    }
  };
  var nullToken = new CachedToken();
  var InputStream = class {
    /**
    @internal
    */
    constructor(input, ranges) {
      this.input = input;
      this.ranges = ranges;
      this.chunk = "";
      this.chunkOff = 0;
      this.chunk2 = "";
      this.chunk2Pos = 0;
      this.next = -1;
      this.token = nullToken;
      this.rangeIndex = 0;
      this.pos = this.chunkPos = ranges[0].from;
      this.range = ranges[0];
      this.end = ranges[ranges.length - 1].to;
      this.readNext();
    }
    /**
    @internal
    */
    resolveOffset(offset, assoc) {
      let range = this.range, index = this.rangeIndex;
      let pos = this.pos + offset;
      while (pos < range.from) {
        if (!index)
          return null;
        let next = this.ranges[--index];
        pos -= range.from - next.to;
        range = next;
      }
      while (assoc < 0 ? pos > range.to : pos >= range.to) {
        if (index == this.ranges.length - 1)
          return null;
        let next = this.ranges[++index];
        pos += next.from - range.to;
        range = next;
      }
      return pos;
    }
    /**
    @internal
    */
    clipPos(pos) {
      if (pos >= this.range.from && pos < this.range.to)
        return pos;
      for (let range of this.ranges)
        if (range.to > pos)
          return Math.max(pos, range.from);
      return this.end;
    }
    /**
    Look at a code unit near the stream position. `.peek(0)` equals
    `.next`, `.peek(-1)` gives you the previous character, and so
    on.
    
    Note that looking around during tokenizing creates dependencies
    on potentially far-away content, which may reduce the
    effectiveness incremental parsing—when looking forward—or even
    cause invalid reparses when looking backward more than 25 code
    units, since the library does not track lookbehind.
    */
    peek(offset) {
      let idx = this.chunkOff + offset, pos, result;
      if (idx >= 0 && idx < this.chunk.length) {
        pos = this.pos + offset;
        result = this.chunk.charCodeAt(idx);
      } else {
        let resolved = this.resolveOffset(offset, 1);
        if (resolved == null)
          return -1;
        pos = resolved;
        if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
          result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
        } else {
          let i = this.rangeIndex, range = this.range;
          while (range.to <= pos)
            range = this.ranges[++i];
          this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
          if (pos + this.chunk2.length > range.to)
            this.chunk2 = this.chunk2.slice(0, range.to - pos);
          result = this.chunk2.charCodeAt(0);
        }
      }
      if (pos >= this.token.lookAhead)
        this.token.lookAhead = pos + 1;
      return result;
    }
    /**
    Accept a token. By default, the end of the token is set to the
    current stream position, but you can pass an offset (relative to
    the stream position) to change that.
    */
    acceptToken(token, endOffset = 0) {
      let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
      if (end == null || end < this.token.start)
        throw new RangeError("Token end out of bounds");
      this.token.value = token;
      this.token.end = end;
    }
    /**
    Accept a token ending at a specific given position.
    */
    acceptTokenTo(token, endPos) {
      this.token.value = token;
      this.token.end = endPos;
    }
    getChunk() {
      if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
        let { chunk, chunkPos } = this;
        this.chunk = this.chunk2;
        this.chunkPos = this.chunk2Pos;
        this.chunk2 = chunk;
        this.chunk2Pos = chunkPos;
        this.chunkOff = this.pos - this.chunkPos;
      } else {
        this.chunk2 = this.chunk;
        this.chunk2Pos = this.chunkPos;
        let nextChunk = this.input.chunk(this.pos);
        let end = this.pos + nextChunk.length;
        this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
        this.chunkPos = this.pos;
        this.chunkOff = 0;
      }
    }
    readNext() {
      if (this.chunkOff >= this.chunk.length) {
        this.getChunk();
        if (this.chunkOff == this.chunk.length)
          return this.next = -1;
      }
      return this.next = this.chunk.charCodeAt(this.chunkOff);
    }
    /**
    Move the stream forward N (defaults to 1) code units. Returns
    the new value of [`next`](#lr.InputStream.next).
    */
    advance(n = 1) {
      this.chunkOff += n;
      while (this.pos + n >= this.range.to) {
        if (this.rangeIndex == this.ranges.length - 1)
          return this.setDone();
        n -= this.range.to - this.pos;
        this.range = this.ranges[++this.rangeIndex];
        this.pos = this.range.from;
      }
      this.pos += n;
      if (this.pos >= this.token.lookAhead)
        this.token.lookAhead = this.pos + 1;
      return this.readNext();
    }
    setDone() {
      this.pos = this.chunkPos = this.end;
      this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
      this.chunk = "";
      return this.next = -1;
    }
    /**
    @internal
    */
    reset(pos, token) {
      if (token) {
        this.token = token;
        token.start = pos;
        token.lookAhead = pos + 1;
        token.value = token.extended = -1;
      } else {
        this.token = nullToken;
      }
      if (this.pos != pos) {
        this.pos = pos;
        if (pos == this.end) {
          this.setDone();
          return this;
        }
        while (pos < this.range.from)
          this.range = this.ranges[--this.rangeIndex];
        while (pos >= this.range.to)
          this.range = this.ranges[++this.rangeIndex];
        if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
          this.chunkOff = pos - this.chunkPos;
        } else {
          this.chunk = "";
          this.chunkOff = 0;
        }
        this.readNext();
      }
      return this;
    }
    /**
    @internal
    */
    read(from, to) {
      if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
        return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
      if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
        return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
      if (from >= this.range.from && to <= this.range.to)
        return this.input.read(from, to);
      let result = "";
      for (let r of this.ranges) {
        if (r.from >= to)
          break;
        if (r.to > from)
          result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
      }
      return result;
    }
  };
  var TokenGroup = class {
    constructor(data, id2) {
      this.data = data;
      this.id = id2;
    }
    token(input, stack2) {
      let { parser: parser2 } = stack2.p;
      readToken(this.data, input, stack2, this.id, parser2.data, parser2.tokenPrecTable);
    }
  };
  TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
  var LocalTokenGroup = class {
    constructor(data, precTable, elseToken) {
      this.precTable = precTable;
      this.elseToken = elseToken;
      this.data = typeof data == "string" ? decodeArray(data) : data;
    }
    token(input, stack2) {
      let start = input.pos, skipped = 0;
      for (; ; ) {
        let atEof = input.next < 0, nextPos = input.resolveOffset(1, 1);
        readToken(this.data, input, stack2, 0, this.data, this.precTable);
        if (input.token.value > -1)
          break;
        if (this.elseToken == null)
          return;
        if (!atEof)
          skipped++;
        if (nextPos == null)
          break;
        input.reset(nextPos, input.token);
      }
      if (skipped) {
        input.reset(start, input.token);
        input.acceptToken(this.elseToken, skipped);
      }
    }
  };
  LocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
  var ExternalTokenizer = class {
    /**
    Create a tokenizer. The first argument is the function that,
    given an input stream, scans for the types of tokens it
    recognizes at the stream's position, and calls
    [`acceptToken`](#lr.InputStream.acceptToken) when it finds
    one.
    */
    constructor(token, options = {}) {
      this.token = token;
      this.contextual = !!options.contextual;
      this.fallback = !!options.fallback;
      this.extend = !!options.extend;
    }
  };
  function readToken(data, input, stack2, group, precTable, precOffset) {
    let state = 0, groupMask = 1 << group, { dialect } = stack2.p.parser;
    scan: for (; ; ) {
      if ((groupMask & data[state]) == 0)
        break;
      let accEnd = data[state + 1];
      for (let i = state + 3; i < accEnd; i += 2)
        if ((data[i + 1] & groupMask) > 0) {
          let term = data[i];
          if (dialect.allows(term) && (input.token.value == -1 || input.token.value == term || overrides(term, input.token.value, precTable, precOffset))) {
            input.acceptToken(term);
            break;
          }
        }
      let next = input.next, low = 0, high = data[state + 2];
      if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535) {
        state = data[accEnd + high * 3 - 1];
        continue scan;
      }
      for (; low < high; ) {
        let mid = low + high >> 1;
        let index = accEnd + mid + (mid << 1);
        let from = data[index], to = data[index + 1] || 65536;
        if (next < from)
          high = mid;
        else if (next >= to)
          low = mid + 1;
        else {
          state = data[index + 2];
          input.advance();
          continue scan;
        }
      }
      break;
    }
  }
  function findOffset(data, start, term) {
    for (let i = start, next; (next = data[i]) != 65535; i++)
      if (next == term)
        return i - start;
    return -1;
  }
  function overrides(token, prev, tableData, tableOffset) {
    let iPrev = findOffset(tableData, tableOffset, prev);
    return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;
  }
  var verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
  var stackIDs = null;
  function cutAt(tree, pos, side) {
    let cursor = tree.cursor(IterMode.IncludeAnonymous);
    cursor.moveTo(pos);
    for (; ; ) {
      if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
        for (; ; ) {
          if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
            return side < 0 ? Math.max(0, Math.min(
              cursor.to - 1,
              pos - 25
              /* Lookahead.Margin */
            )) : Math.min(tree.length, Math.max(
              cursor.from + 1,
              pos + 25
              /* Lookahead.Margin */
            ));
          if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
            break;
          if (!cursor.parent())
            return side < 0 ? 0 : tree.length;
        }
    }
  }
  var FragmentCursor = class {
    constructor(fragments, nodeSet) {
      this.fragments = fragments;
      this.nodeSet = nodeSet;
      this.i = 0;
      this.fragment = null;
      this.safeFrom = -1;
      this.safeTo = -1;
      this.trees = [];
      this.start = [];
      this.index = [];
      this.nextFragment();
    }
    nextFragment() {
      let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
      if (fr) {
        this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
        this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
        while (this.trees.length) {
          this.trees.pop();
          this.start.pop();
          this.index.pop();
        }
        this.trees.push(fr.tree);
        this.start.push(-fr.offset);
        this.index.push(0);
        this.nextStart = this.safeFrom;
      } else {
        this.nextStart = 1e9;
      }
    }
    // `pos` must be >= any previously given `pos` for this cursor
    nodeAt(pos) {
      if (pos < this.nextStart)
        return null;
      while (this.fragment && this.safeTo <= pos)
        this.nextFragment();
      if (!this.fragment)
        return null;
      for (; ; ) {
        let last = this.trees.length - 1;
        if (last < 0) {
          this.nextFragment();
          return null;
        }
        let top2 = this.trees[last], index = this.index[last];
        if (index == top2.children.length) {
          this.trees.pop();
          this.start.pop();
          this.index.pop();
          continue;
        }
        let next = top2.children[index];
        let start = this.start[last] + top2.positions[index];
        if (start > pos) {
          this.nextStart = start;
          return null;
        }
        if (next instanceof Tree) {
          if (start == pos) {
            if (start < this.safeFrom)
              return null;
            let end = start + next.length;
            if (end <= this.safeTo) {
              let lookAhead = next.prop(NodeProp.lookAhead);
              if (!lookAhead || end + lookAhead < this.fragment.to)
                return next;
            }
          }
          this.index[last]++;
          if (start + next.length >= Math.max(this.safeFrom, pos)) {
            this.trees.push(next);
            this.start.push(start);
            this.index.push(0);
          }
        } else {
          this.index[last]++;
          this.nextStart = start + next.length;
        }
      }
    }
  };
  var TokenCache = class {
    constructor(parser2, stream) {
      this.stream = stream;
      this.tokens = [];
      this.mainToken = null;
      this.actions = [];
      this.tokens = parser2.tokenizers.map((_) => new CachedToken());
    }
    getActions(stack2) {
      let actionIndex = 0;
      let main = null;
      let { parser: parser2 } = stack2.p, { tokenizers } = parser2;
      let mask = parser2.stateSlot(
        stack2.state,
        3
        /* ParseState.TokenizerMask */
      );
      let context2 = stack2.curContext ? stack2.curContext.hash : 0;
      let lookAhead = 0;
      for (let i = 0; i < tokenizers.length; i++) {
        if ((1 << i & mask) == 0)
          continue;
        let tokenizer = tokenizers[i], token = this.tokens[i];
        if (main && !tokenizer.fallback)
          continue;
        if (tokenizer.contextual || token.start != stack2.pos || token.mask != mask || token.context != context2) {
          this.updateCachedToken(token, tokenizer, stack2);
          token.mask = mask;
          token.context = context2;
        }
        if (token.lookAhead > token.end + 25)
          lookAhead = Math.max(token.lookAhead, lookAhead);
        if (token.value != 0) {
          let startIndex = actionIndex;
          if (token.extended > -1)
            actionIndex = this.addActions(stack2, token.extended, token.end, actionIndex);
          actionIndex = this.addActions(stack2, token.value, token.end, actionIndex);
          if (!tokenizer.extend) {
            main = token;
            if (actionIndex > startIndex)
              break;
          }
        }
      }
      while (this.actions.length > actionIndex)
        this.actions.pop();
      if (lookAhead)
        stack2.setLookAhead(lookAhead);
      if (!main && stack2.pos == this.stream.end) {
        main = new CachedToken();
        main.value = stack2.p.parser.eofTerm;
        main.start = main.end = stack2.pos;
        actionIndex = this.addActions(stack2, main.value, main.end, actionIndex);
      }
      this.mainToken = main;
      return this.actions;
    }
    getMainToken(stack2) {
      if (this.mainToken)
        return this.mainToken;
      let main = new CachedToken(), { pos, p } = stack2;
      main.start = pos;
      main.end = Math.min(pos + 1, p.stream.end);
      main.value = pos == p.stream.end ? p.parser.eofTerm : 0;
      return main;
    }
    updateCachedToken(token, tokenizer, stack2) {
      let start = this.stream.clipPos(stack2.pos);
      tokenizer.token(this.stream.reset(start, token), stack2);
      if (token.value > -1) {
        let { parser: parser2 } = stack2.p;
        for (let i = 0; i < parser2.specialized.length; i++)
          if (parser2.specialized[i] == token.value) {
            let result = parser2.specializers[i](this.stream.read(token.start, token.end), stack2);
            if (result >= 0 && stack2.p.parser.dialect.allows(result >> 1)) {
              if ((result & 1) == 0)
                token.value = result >> 1;
              else
                token.extended = result >> 1;
              break;
            }
          }
      } else {
        token.value = 0;
        token.end = this.stream.clipPos(start + 1);
      }
    }
    putAction(action, token, end, index) {
      for (let i = 0; i < index; i += 3)
        if (this.actions[i] == action)
          return index;
      this.actions[index++] = action;
      this.actions[index++] = token;
      this.actions[index++] = end;
      return index;
    }
    addActions(stack2, token, end, index) {
      let { state } = stack2, { parser: parser2 } = stack2.p, { data } = parser2;
      for (let set = 0; set < 2; set++) {
        for (let i = parser2.stateSlot(
          state,
          set ? 2 : 1
          /* ParseState.Actions */
        ); ; i += 3) {
          if (data[i] == 65535) {
            if (data[i + 1] == 1) {
              i = pair(data, i + 2);
            } else {
              if (index == 0 && data[i + 1] == 2)
                index = this.putAction(pair(data, i + 2), token, end, index);
              break;
            }
          }
          if (data[i] == token)
            index = this.putAction(pair(data, i + 1), token, end, index);
        }
      }
      return index;
    }
  };
  var Parse = class {
    constructor(parser2, input, fragments, ranges) {
      this.parser = parser2;
      this.input = input;
      this.ranges = ranges;
      this.recovering = 0;
      this.nextStackID = 9812;
      this.minStackPos = 0;
      this.reused = [];
      this.stoppedAt = null;
      this.lastBigReductionStart = -1;
      this.lastBigReductionSize = 0;
      this.bigReductionCount = 0;
      this.stream = new InputStream(input, ranges);
      this.tokens = new TokenCache(parser2, this.stream);
      this.topTerm = parser2.top[1];
      let { from } = ranges[0];
      this.stacks = [Stack.start(this, parser2.top[0], from)];
      this.fragments = fragments.length && this.stream.end - from > parser2.bufferLength * 4 ? new FragmentCursor(fragments, parser2.nodeSet) : null;
    }
    get parsedPos() {
      return this.minStackPos;
    }
    // Move the parser forward. This will process all parse stacks at
    // `this.pos` and try to advance them to a further position. If no
    // stack for such a position is found, it'll start error-recovery.
    //
    // When the parse is finished, this will return a syntax tree. When
    // not, it returns `null`.
    advance() {
      let stacks = this.stacks, pos = this.minStackPos;
      let newStacks = this.stacks = [];
      let stopped, stoppedTokens;
      if (this.bigReductionCount > 300 && stacks.length == 1) {
        let [s] = stacks;
        while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) {
        }
        this.bigReductionCount = this.lastBigReductionSize = 0;
      }
      for (let i = 0; i < stacks.length; i++) {
        let stack2 = stacks[i];
        for (; ; ) {
          this.tokens.mainToken = null;
          if (stack2.pos > pos) {
            newStacks.push(stack2);
          } else if (this.advanceStack(stack2, newStacks, stacks)) {
            continue;
          } else {
            if (!stopped) {
              stopped = [];
              stoppedTokens = [];
            }
            stopped.push(stack2);
            let tok = this.tokens.getMainToken(stack2);
            stoppedTokens.push(tok.value, tok.end);
          }
          break;
        }
      }
      if (!newStacks.length) {
        let finished = stopped && findFinished(stopped);
        if (finished) {
          if (verbose)
            console.log("Finish with " + this.stackID(finished));
          return this.stackToTree(finished);
        }
        if (this.parser.strict) {
          if (verbose && stopped)
            console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
          throw new SyntaxError("No parse at " + pos);
        }
        if (!this.recovering)
          this.recovering = 5;
      }
      if (this.recovering && stopped) {
        let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0] : this.runRecovery(stopped, stoppedTokens, newStacks);
        if (finished) {
          if (verbose)
            console.log("Force-finish " + this.stackID(finished));
          return this.stackToTree(finished.forceAll());
        }
      }
      if (this.recovering) {
        let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3;
        if (newStacks.length > maxRemaining) {
          newStacks.sort((a, b) => b.score - a.score);
          while (newStacks.length > maxRemaining)
            newStacks.pop();
        }
        if (newStacks.some((s) => s.reducePos > pos))
          this.recovering--;
      } else if (newStacks.length > 1) {
        outer: for (let i = 0; i < newStacks.length - 1; i++) {
          let stack2 = newStacks[i];
          for (let j = i + 1; j < newStacks.length; j++) {
            let other = newStacks[j];
            if (stack2.sameState(other) || stack2.buffer.length > 500 && other.buffer.length > 500) {
              if ((stack2.score - other.score || stack2.buffer.length - other.buffer.length) > 0) {
                newStacks.splice(j--, 1);
              } else {
                newStacks.splice(i--, 1);
                continue outer;
              }
            }
          }
        }
        if (newStacks.length > 12)
          newStacks.splice(
            12,
            newStacks.length - 12
            /* Rec.MaxStackCount */
          );
      }
      this.minStackPos = newStacks[0].pos;
      for (let i = 1; i < newStacks.length; i++)
        if (newStacks[i].pos < this.minStackPos)
          this.minStackPos = newStacks[i].pos;
      return null;
    }
    stopAt(pos) {
      if (this.stoppedAt != null && this.stoppedAt < pos)
        throw new RangeError("Can't move stoppedAt forward");
      this.stoppedAt = pos;
    }
    // Returns an updated version of the given stack, or null if the
    // stack can't advance normally. When `split` and `stacks` are
    // given, stacks split off by ambiguous operations will be pushed to
    // `split`, or added to `stacks` if they move `pos` forward.
    advanceStack(stack2, stacks, split) {
      let start = stack2.pos, { parser: parser2 } = this;
      let base2 = verbose ? this.stackID(stack2) + " -> " : "";
      if (this.stoppedAt != null && start > this.stoppedAt)
        return stack2.forceReduce() ? stack2 : null;
      if (this.fragments) {
        let strictCx = stack2.curContext && stack2.curContext.tracker.strict, cxHash = strictCx ? stack2.curContext.hash : 0;
        for (let cached = this.fragments.nodeAt(start); cached; ) {
          let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser2.getGoto(stack2.state, cached.type.id) : -1;
          if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
            stack2.useNode(cached, match);
            if (verbose)
              console.log(base2 + this.stackID(stack2) + ` (via reuse of ${parser2.getName(cached.type.id)})`);
            return true;
          }
          if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
            break;
          let inner = cached.children[0];
          if (inner instanceof Tree && cached.positions[0] == 0)
            cached = inner;
          else
            break;
        }
      }
      let defaultReduce = parser2.stateSlot(
        stack2.state,
        4
        /* ParseState.DefaultReduce */
      );
      if (defaultReduce > 0) {
        stack2.reduce(defaultReduce);
        if (verbose)
          console.log(base2 + this.stackID(stack2) + ` (via always-reduce ${parser2.getName(
            defaultReduce & 65535
            /* Action.ValueMask */
          )})`);
        return true;
      }
      if (stack2.stack.length >= 8400) {
        while (stack2.stack.length > 6e3 && stack2.forceReduce()) {
        }
      }
      let actions = this.tokens.getActions(stack2);
      for (let i = 0; i < actions.length; ) {
        let action = actions[i++], term = actions[i++], end = actions[i++];
        let last = i == actions.length || !split;
        let localStack = last ? stack2 : stack2.split();
        let main = this.tokens.mainToken;
        localStack.apply(action, term, main ? main.start : localStack.pos, end);
        if (verbose)
          console.log(base2 + this.stackID(localStack) + ` (via ${(action & 65536) == 0 ? "shift" : `reduce of ${parser2.getName(
            action & 65535
            /* Action.ValueMask */
          )}`} for ${parser2.getName(term)} @ ${start}${localStack == stack2 ? "" : ", split"})`);
        if (last)
          return true;
        else if (localStack.pos > start)
          stacks.push(localStack);
        else
          split.push(localStack);
      }
      return false;
    }
    // Advance a given stack forward as far as it will go. Returns the
    // (possibly updated) stack if it got stuck, or null if it moved
    // forward and was given to `pushStackDedup`.
    advanceFully(stack2, newStacks) {
      let pos = stack2.pos;
      for (; ; ) {
        if (!this.advanceStack(stack2, null, null))
          return false;
        if (stack2.pos > pos) {
          pushStackDedup(stack2, newStacks);
          return true;
        }
      }
    }
    runRecovery(stacks, tokens, newStacks) {
      let finished = null, restarted = false;
      for (let i = 0; i < stacks.length; i++) {
        let stack2 = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
        let base2 = verbose ? this.stackID(stack2) + " -> " : "";
        if (stack2.deadEnd) {
          if (restarted)
            continue;
          restarted = true;
          stack2.restart();
          if (verbose)
            console.log(base2 + this.stackID(stack2) + " (restarted)");
          let done = this.advanceFully(stack2, newStacks);
          if (done)
            continue;
        }
        let force = stack2.split(), forceBase = base2;
        for (let j = 0; force.forceReduce() && j < 10; j++) {
          if (verbose)
            console.log(forceBase + this.stackID(force) + " (via force-reduce)");
          let done = this.advanceFully(force, newStacks);
          if (done)
            break;
          if (verbose)
            forceBase = this.stackID(force) + " -> ";
        }
        for (let insert2 of stack2.recoverByInsert(token)) {
          if (verbose)
            console.log(base2 + this.stackID(insert2) + " (via recover-insert)");
          this.advanceFully(insert2, newStacks);
        }
        if (this.stream.end > stack2.pos) {
          if (tokenEnd == stack2.pos) {
            tokenEnd++;
            token = 0;
          }
          stack2.recoverByDelete(token, tokenEnd);
          if (verbose)
            console.log(base2 + this.stackID(stack2) + ` (via recover-delete ${this.parser.getName(token)})`);
          pushStackDedup(stack2, newStacks);
        } else if (!finished || finished.score < stack2.score) {
          finished = stack2;
        }
      }
      return finished;
    }
    // Convert the stack's buffer to a syntax tree.
    stackToTree(stack2) {
      stack2.close();
      return Tree.build({
        buffer: StackBufferCursor.create(stack2),
        nodeSet: this.parser.nodeSet,
        topID: this.topTerm,
        maxBufferLength: this.parser.bufferLength,
        reused: this.reused,
        start: this.ranges[0].from,
        length: stack2.pos - this.ranges[0].from,
        minRepeatType: this.parser.minRepeatTerm
      });
    }
    stackID(stack2) {
      let id2 = (stackIDs || (stackIDs = /* @__PURE__ */ new WeakMap())).get(stack2);
      if (!id2)
        stackIDs.set(stack2, id2 = String.fromCodePoint(this.nextStackID++));
      return id2 + stack2;
    }
  };
  function pushStackDedup(stack2, newStacks) {
    for (let i = 0; i < newStacks.length; i++) {
      let other = newStacks[i];
      if (other.pos == stack2.pos && other.sameState(stack2)) {
        if (newStacks[i].score < stack2.score)
          newStacks[i] = stack2;
        return;
      }
    }
    newStacks.push(stack2);
  }
  var Dialect = class {
    constructor(source, flags, disabled) {
      this.source = source;
      this.flags = flags;
      this.disabled = disabled;
    }
    allows(term) {
      return !this.disabled || this.disabled[term] == 0;
    }
  };
  var id = (x) => x;
  var ContextTracker = class {
    /**
    Define a context tracker.
    */
    constructor(spec) {
      this.start = spec.start;
      this.shift = spec.shift || id;
      this.reduce = spec.reduce || id;
      this.reuse = spec.reuse || id;
      this.hash = spec.hash || (() => 0);
      this.strict = spec.strict !== false;
    }
  };
  var LRParser = class _LRParser extends Parser {
    /**
    @internal
    */
    constructor(spec) {
      super();
      this.wrappers = [];
      if (spec.version != 14)
        throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14})`);
      let nodeNames = spec.nodeNames.split(" ");
      this.minRepeatTerm = nodeNames.length;
      for (let i = 0; i < spec.repeatNodeCount; i++)
        nodeNames.push("");
      let topTerms = Object.keys(spec.topRules).map((r) => spec.topRules[r][1]);
      let nodeProps = [];
      for (let i = 0; i < nodeNames.length; i++)
        nodeProps.push([]);
      function setProp(nodeID, prop, value) {
        nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
      }
      if (spec.nodeProps)
        for (let propSpec of spec.nodeProps) {
          let prop = propSpec[0];
          if (typeof prop == "string")
            prop = NodeProp[prop];
          for (let i = 1; i < propSpec.length; ) {
            let next = propSpec[i++];
            if (next >= 0) {
              setProp(next, prop, propSpec[i++]);
            } else {
              let value = propSpec[i + -next];
              for (let j = -next; j > 0; j--)
                setProp(propSpec[i++], prop, value);
              i++;
            }
          }
        }
      this.nodeSet = new NodeSet(nodeNames.map((name2, i) => NodeType.define({
        name: i >= this.minRepeatTerm ? void 0 : name2,
        id: i,
        props: nodeProps[i],
        top: topTerms.indexOf(i) > -1,
        error: i == 0,
        skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
      })));
      if (spec.propSources)
        this.nodeSet = this.nodeSet.extend(...spec.propSources);
      this.strict = false;
      this.bufferLength = DefaultBufferLength;
      let tokenArray = decodeArray(spec.tokenData);
      this.context = spec.context;
      this.specializerSpecs = spec.specialized || [];
      this.specialized = new Uint16Array(this.specializerSpecs.length);
      for (let i = 0; i < this.specializerSpecs.length; i++)
        this.specialized[i] = this.specializerSpecs[i].term;
      this.specializers = this.specializerSpecs.map(getSpecializer);
      this.states = decodeArray(spec.states, Uint32Array);
      this.data = decodeArray(spec.stateData);
      this.goto = decodeArray(spec.goto);
      this.maxTerm = spec.maxTerm;
      this.tokenizers = spec.tokenizers.map((value) => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
      this.topRules = spec.topRules;
      this.dialects = spec.dialects || {};
      this.dynamicPrecedences = spec.dynamicPrecedences || null;
      this.tokenPrecTable = spec.tokenPrec;
      this.termNames = spec.termNames || null;
      this.maxNode = this.nodeSet.types.length - 1;
      this.dialect = this.parseDialect();
      this.top = this.topRules[Object.keys(this.topRules)[0]];
    }
    createParse(input, fragments, ranges) {
      let parse2 = new Parse(this, input, fragments, ranges);
      for (let w of this.wrappers)
        parse2 = w(parse2, input, fragments, ranges);
      return parse2;
    }
    /**
    Get a goto table entry @internal
    */
    getGoto(state, term, loose = false) {
      let table = this.goto;
      if (term >= table[0])
        return -1;
      for (let pos = table[term + 1]; ; ) {
        let groupTag = table[pos++], last = groupTag & 1;
        let target = table[pos++];
        if (last && loose)
          return target;
        for (let end = pos + (groupTag >> 1); pos < end; pos++)
          if (table[pos] == state)
            return target;
        if (last)
          return -1;
      }
    }
    /**
    Check if this state has an action for a given terminal @internal
    */
    hasAction(state, terminal) {
      let data = this.data;
      for (let set = 0; set < 2; set++) {
        for (let i = this.stateSlot(
          state,
          set ? 2 : 1
          /* ParseState.Actions */
        ), next; ; i += 3) {
          if ((next = data[i]) == 65535) {
            if (data[i + 1] == 1)
              next = data[i = pair(data, i + 2)];
            else if (data[i + 1] == 2)
              return pair(data, i + 2);
            else
              break;
          }
          if (next == terminal || next == 0)
            return pair(data, i + 1);
        }
      }
      return 0;
    }
    /**
    @internal
    */
    stateSlot(state, slot) {
      return this.states[state * 6 + slot];
    }
    /**
    @internal
    */
    stateFlag(state, flag) {
      return (this.stateSlot(
        state,
        0
        /* ParseState.Flags */
      ) & flag) > 0;
    }
    /**
    @internal
    */
    validAction(state, action) {
      return !!this.allActions(state, (a) => a == action ? true : null);
    }
    /**
    @internal
    */
    allActions(state, action) {
      let deflt = this.stateSlot(
        state,
        4
        /* ParseState.DefaultReduce */
      );
      let result = deflt ? action(deflt) : void 0;
      for (let i = this.stateSlot(
        state,
        1
        /* ParseState.Actions */
      ); result == null; i += 3) {
        if (this.data[i] == 65535) {
          if (this.data[i + 1] == 1)
            i = pair(this.data, i + 2);
          else
            break;
        }
        result = action(pair(this.data, i + 1));
      }
      return result;
    }
    /**
    Get the states that can follow this one through shift actions or
    goto jumps. @internal
    */
    nextStates(state) {
      let result = [];
      for (let i = this.stateSlot(
        state,
        1
        /* ParseState.Actions */
      ); ; i += 3) {
        if (this.data[i] == 65535) {
          if (this.data[i + 1] == 1)
            i = pair(this.data, i + 2);
          else
            break;
        }
        if ((this.data[i + 2] & 65536 >> 16) == 0) {
          let value = this.data[i + 1];
          if (!result.some((v, i2) => i2 & 1 && v == value))
            result.push(this.data[i], value);
        }
      }
      return result;
    }
    /**
    Configure the parser. Returns a new parser instance that has the
    given settings modified. Settings not provided in `config` are
    kept from the original parser.
    */
    configure(config2) {
      let copy = Object.assign(Object.create(_LRParser.prototype), this);
      if (config2.props)
        copy.nodeSet = this.nodeSet.extend(...config2.props);
      if (config2.top) {
        let info = this.topRules[config2.top];
        if (!info)
          throw new RangeError(`Invalid top rule name ${config2.top}`);
        copy.top = info;
      }
      if (config2.tokenizers)
        copy.tokenizers = this.tokenizers.map((t2) => {
          let found = config2.tokenizers.find((r) => r.from == t2);
          return found ? found.to : t2;
        });
      if (config2.specializers) {
        copy.specializers = this.specializers.slice();
        copy.specializerSpecs = this.specializerSpecs.map((s, i) => {
          let found = config2.specializers.find((r) => r.from == s.external);
          if (!found)
            return s;
          let spec = Object.assign(Object.assign({}, s), { external: found.to });
          copy.specializers[i] = getSpecializer(spec);
          return spec;
        });
      }
      if (config2.contextTracker)
        copy.context = config2.contextTracker;
      if (config2.dialect)
        copy.dialect = this.parseDialect(config2.dialect);
      if (config2.strict != null)
        copy.strict = config2.strict;
      if (config2.wrap)
        copy.wrappers = copy.wrappers.concat(config2.wrap);
      if (config2.bufferLength != null)
        copy.bufferLength = config2.bufferLength;
      return copy;
    }
    /**
    Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
    are registered for this parser.
    */
    hasWrappers() {
      return this.wrappers.length > 0;
    }
    /**
    Returns the name associated with a given term. This will only
    work for all terms when the parser was generated with the
    `--names` option. By default, only the names of tagged terms are
    stored.
    */
    getName(term) {
      return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
    }
    /**
    The eof term id is always allocated directly after the node
    types. @internal
    */
    get eofTerm() {
      return this.maxNode + 1;
    }
    /**
    The type of top node produced by the parser.
    */
    get topNode() {
      return this.nodeSet.types[this.top[1]];
    }
    /**
    @internal
    */
    dynamicPrecedence(term) {
      let prec2 = this.dynamicPrecedences;
      return prec2 == null ? 0 : prec2[term] || 0;
    }
    /**
    @internal
    */
    parseDialect(dialect) {
      let values = Object.keys(this.dialects), flags = values.map(() => false);
      if (dialect)
        for (let part of dialect.split(" ")) {
          let id2 = values.indexOf(part);
          if (id2 >= 0)
            flags[id2] = true;
        }
      let disabled = null;
      for (let i = 0; i < values.length; i++)
        if (!flags[i]) {
          for (let j = this.dialects[values[i]], id2; (id2 = this.data[j++]) != 65535; )
            (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id2] = 1;
        }
      return new Dialect(dialect, flags, disabled);
    }
    /**
    Used by the output of the parser generator. Not available to
    user code. @hide
    */
    static deserialize(spec) {
      return new _LRParser(spec);
    }
  };
  function pair(data, off) {
    return data[off] | data[off + 1] << 16;
  }
  function findFinished(stacks) {
    let best = null;
    for (let stack2 of stacks) {
      let stopped = stack2.p.stoppedAt;
      if ((stack2.pos == stack2.p.stream.end || stopped != null && stack2.pos > stopped) && stack2.p.parser.stateFlag(
        stack2.state,
        2
        /* StateFlag.Accepting */
      ) && (!best || best.score < stack2.score))
        best = stack2;
    }
    return best;
  }
  function getSpecializer(spec) {
    if (spec.external) {
      let mask = spec.extend ? 1 : 0;
      return (value, stack2) => spec.external(value, stack2) << 1 | mask;
    }
    return spec.get;
  }

  // node_modules/@lezer/javascript/dist/index.js
  var noSemi = 315;
  var noSemiType = 316;
  var incdec = 1;
  var incdecPrefix = 2;
  var questionDot = 3;
  var JSXStartTag = 4;
  var insertSemi = 317;
  var spaces = 319;
  var newline = 320;
  var LineComment = 5;
  var BlockComment = 6;
  var Dialect_jsx = 0;
  var space = [
    9,
    10,
    11,
    12,
    13,
    32,
    133,
    160,
    5760,
    8192,
    8193,
    8194,
    8195,
    8196,
    8197,
    8198,
    8199,
    8200,
    8201,
    8202,
    8232,
    8233,
    8239,
    8287,
    12288
  ];
  var braceR = 125;
  var semicolon = 59;
  var slash = 47;
  var star = 42;
  var plus = 43;
  var minus = 45;
  var lt = 60;
  var comma = 44;
  var question = 63;
  var dot = 46;
  var bracketL = 91;
  var trackNewline = new ContextTracker({
    start: false,
    shift(context2, term) {
      return term == LineComment || term == BlockComment || term == spaces ? context2 : term == newline;
    },
    strict: false
  });
  var insertSemicolon = new ExternalTokenizer((input, stack2) => {
    let { next } = input;
    if (next == braceR || next == -1 || stack2.context)
      input.acceptToken(insertSemi);
  }, { contextual: true, fallback: true });
  var noSemicolon = new ExternalTokenizer((input, stack2) => {
    let { next } = input, after;
    if (space.indexOf(next) > -1) return;
    if (next == slash && ((after = input.peek(1)) == slash || after == star)) return;
    if (next != braceR && next != semicolon && next != -1 && !stack2.context)
      input.acceptToken(noSemi);
  }, { contextual: true });
  var noSemicolonType = new ExternalTokenizer((input, stack2) => {
    if (input.next == bracketL && !stack2.context) input.acceptToken(noSemiType);
  }, { contextual: true });
  var operatorToken = new ExternalTokenizer((input, stack2) => {
    let { next } = input;
    if (next == plus || next == minus) {
      input.advance();
      if (next == input.next) {
        input.advance();
        let mayPostfix = !stack2.context && stack2.canShift(incdec);
        input.acceptToken(mayPostfix ? incdec : incdecPrefix);
      }
    } else if (next == question && input.peek(1) == dot) {
      input.advance();
      input.advance();
      if (input.next < 48 || input.next > 57)
        input.acceptToken(questionDot);
    }
  }, { contextual: true });
  function identifierChar(ch, start) {
    return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch == 95 || ch >= 192 || !start && ch >= 48 && ch <= 57;
  }
  var jsx = new ExternalTokenizer((input, stack2) => {
    if (input.next != lt || !stack2.dialectEnabled(Dialect_jsx)) return;
    input.advance();
    if (input.next == slash) return;
    let back = 0;
    while (space.indexOf(input.next) > -1) {
      input.advance();
      back++;
    }
    if (identifierChar(input.next, true)) {
      input.advance();
      back++;
      while (identifierChar(input.next, false)) {
        input.advance();
        back++;
      }
      while (space.indexOf(input.next) > -1) {
        input.advance();
        back++;
      }
      if (input.next == comma) return;
      for (let i = 0; ; i++) {
        if (i == 7) {
          if (!identifierChar(input.next, true)) return;
          break;
        }
        if (input.next != "extends".charCodeAt(i)) break;
        input.advance();
        back++;
      }
    }
    input.acceptToken(JSXStartTag, -back);
  });
  var jsHighlight = styleTags({
    "get set async static": tags.modifier,
    "for while do if else switch try catch finally return throw break continue default case": tags.controlKeyword,
    "in of await yield void typeof delete instanceof as satisfies": tags.operatorKeyword,
    "let var const using function class extends": tags.definitionKeyword,
    "import export from": tags.moduleKeyword,
    "with debugger new": tags.keyword,
    TemplateString: tags.special(tags.string),
    super: tags.atom,
    BooleanLiteral: tags.bool,
    this: tags.self,
    null: tags.null,
    Star: tags.modifier,
    VariableName: tags.variableName,
    "CallExpression/VariableName TaggedTemplateExpression/VariableName": tags.function(tags.variableName),
    VariableDefinition: tags.definition(tags.variableName),
    Label: tags.labelName,
    PropertyName: tags.propertyName,
    PrivatePropertyName: tags.special(tags.propertyName),
    "CallExpression/MemberExpression/PropertyName": tags.function(tags.propertyName),
    "FunctionDeclaration/VariableDefinition": tags.function(tags.definition(tags.variableName)),
    "ClassDeclaration/VariableDefinition": tags.definition(tags.className),
    "NewExpression/VariableName": tags.className,
    PropertyDefinition: tags.definition(tags.propertyName),
    PrivatePropertyDefinition: tags.definition(tags.special(tags.propertyName)),
    UpdateOp: tags.updateOperator,
    "LineComment Hashbang": tags.lineComment,
    BlockComment: tags.blockComment,
    Number: tags.number,
    String: tags.string,
    Escape: tags.escape,
    ArithOp: tags.arithmeticOperator,
    LogicOp: tags.logicOperator,
    BitOp: tags.bitwiseOperator,
    CompareOp: tags.compareOperator,
    RegExp: tags.regexp,
    Equals: tags.definitionOperator,
    Arrow: tags.function(tags.punctuation),
    ": Spread": tags.punctuation,
    "( )": tags.paren,
    "[ ]": tags.squareBracket,
    "{ }": tags.brace,
    "InterpolationStart InterpolationEnd": tags.special(tags.brace),
    ".": tags.derefOperator,
    ", ;": tags.separator,
    "@": tags.meta,
    TypeName: tags.typeName,
    TypeDefinition: tags.definition(tags.typeName),
    "type enum interface implements namespace module declare": tags.definitionKeyword,
    "abstract global Privacy readonly override": tags.modifier,
    "is keyof unique infer asserts": tags.operatorKeyword,
    JSXAttributeValue: tags.attributeValue,
    JSXText: tags.content,
    "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": tags.angleBracket,
    "JSXIdentifier JSXNameSpacedName": tags.tagName,
    "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": tags.attributeName,
    "JSXBuiltin/JSXIdentifier": tags.standard(tags.tagName)
  });
  var spec_identifier = { __proto__: null, export: 20, as: 25, from: 33, default: 36, async: 41, function: 42, in: 52, out: 55, const: 56, extends: 60, this: 64, true: 72, false: 72, null: 84, void: 88, typeof: 92, super: 108, new: 142, delete: 154, yield: 163, await: 167, class: 172, public: 235, private: 235, protected: 235, readonly: 237, instanceof: 256, satisfies: 259, import: 292, keyof: 349, unique: 353, infer: 359, asserts: 395, is: 397, abstract: 417, implements: 419, type: 421, let: 424, var: 426, using: 429, interface: 435, enum: 439, namespace: 445, module: 447, declare: 451, global: 455, for: 474, of: 483, while: 486, with: 490, do: 494, if: 498, else: 500, switch: 504, case: 510, try: 516, catch: 520, finally: 524, return: 528, throw: 532, break: 536, continue: 540, debugger: 544 };
  var spec_word = { __proto__: null, async: 129, get: 131, set: 133, declare: 195, public: 197, private: 197, protected: 197, static: 199, abstract: 201, override: 203, readonly: 209, accessor: 211, new: 401 };
  var spec_LessThan = { __proto__: null, "<": 193 };
  var parser = LRParser.deserialize({
    version: 14,
    states: "$EOQ%TQlOOO%[QlOOO'_QpOOP(lO`OOO*zQ!0MxO'#CiO+RO#tO'#CjO+aO&jO'#CjO+oO#@ItO'#DaO.QQlO'#DgO.bQlO'#DrO%[QlO'#DzO0fQlO'#ESOOQ!0Lf'#E['#E[O1PQ`O'#EXOOQO'#Ep'#EpOOQO'#Ik'#IkO1XQ`O'#GsO1dQ`O'#EoO1iQ`O'#EoO3hQ!0MxO'#JqO6[Q!0MxO'#JrO6uQ`O'#F]O6zQ,UO'#FtOOQ!0Lf'#Ff'#FfO7VO7dO'#FfO7eQMhO'#F|O9[Q`O'#F{OOQ!0Lf'#Jr'#JrOOQ!0Lb'#Jq'#JqO9aQ`O'#GwOOQ['#K^'#K^O9lQ`O'#IXO9qQ!0LrO'#IYOOQ['#J_'#J_OOQ['#I^'#I^Q`QlOOQ`QlOOO9yQ!L^O'#DvO:QQlO'#EOO:XQlO'#EQO9gQ`O'#GsO:`QMhO'#CoO:nQ`O'#EnO:yQ`O'#EyO;OQMhO'#FeO;mQ`O'#GsOOQO'#K_'#K_O;rQ`O'#K_O<QQ`O'#G{O<QQ`O'#G|O<QQ`O'#HOO9gQ`O'#HRO<wQ`O'#HUO>`Q`O'#CeO>pQ`O'#HbO>xQ`O'#HhO>xQ`O'#HjO`QlO'#HlO>xQ`O'#HnO>xQ`O'#HqO>}Q`O'#HwO?SQ!0LsO'#H}O%[QlO'#IPO?_Q!0LsO'#IRO?jQ!0LsO'#ITO9qQ!0LrO'#IVO?uQ!0MxO'#CiO@wQpO'#DlQOQ`OOO%[QlO'#EQOA_Q`O'#ETO:`QMhO'#EnOAjQ`O'#EnOAuQ!bO'#FeOOQ['#Cg'#CgOOQ!0Lb'#Dq'#DqOOQ!0Lb'#Ju'#JuO%[QlO'#JuOOQO'#Jx'#JxOOQO'#Ig'#IgOBuQpO'#EgOOQ!0Lb'#Ef'#EfOOQ!0Lb'#J|'#J|OCqQ!0MSO'#EgOC{QpO'#EWOOQO'#Jw'#JwODaQpO'#JxOEnQpO'#EWOC{QpO'#EgPE{O&2DjO'#CbPOOO)CD|)CD|OOOO'#I_'#I_OFWO#tO,59UOOQ!0Lh,59U,59UOOOO'#I`'#I`OFfO&jO,59UOFtQ!L^O'#DcOOOO'#Ib'#IbOF{O#@ItO,59{OOQ!0Lf,59{,59{OGZQlO'#IcOGnQ`O'#JsOImQ!fO'#JsO+}QlO'#JsOItQ`O,5:ROJ[Q`O'#EpOJiQ`O'#KSOJtQ`O'#KROJtQ`O'#KROJ|Q`O,5;^OKRQ`O'#KQOOQ!0Ln,5:^,5:^OKYQlO,5:^OMWQ!0MxO,5:fOMwQ`O,5:nONbQ!0LrO'#KPONiQ`O'#KOO9aQ`O'#KOON}Q`O'#KOO! VQ`O,5;]O! [Q`O'#KOO!#aQ!fO'#JrOOQ!0Lh'#Ci'#CiO%[QlO'#ESO!$PQ!fO,5:sOOQS'#Jy'#JyOOQO-E<i-E<iO9gQ`O,5=_O!$gQ`O,5=_O!$lQlO,5;ZO!&oQMhO'#EkO!(YQ`O,5;ZO!(_QlO'#DyO!(iQpO,5;dO!(qQpO,5;dO%[QlO,5;dOOQ['#FT'#FTOOQ['#FV'#FVO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eOOQ['#FZ'#FZO!)PQlO,5;tOOQ!0Lf,5;y,5;yOOQ!0Lf,5;z,5;zOOQ!0Lf,5;|,5;|O%[QlO'#IoO!+SQ!0LrO,5<iO%[QlO,5;eO!&oQMhO,5;eO!+qQMhO,5;eO!-cQMhO'#E^O%[QlO,5;wOOQ!0Lf,5;{,5;{O!-jQ,UO'#FjO!.gQ,UO'#KWO!.RQ,UO'#KWO!.nQ,UO'#KWOOQO'#KW'#KWO!/SQ,UO,5<SOOOW,5<`,5<`O!/eQlO'#FvOOOW'#In'#InO7VO7dO,5<QO!/lQ,UO'#FxOOQ!0Lf,5<Q,5<QO!0]Q$IUO'#CyOOQ!0Lh'#C}'#C}O!0pO#@ItO'#DRO!1^QMjO,5<eO!1eQ`O,5<hO!3QQ(CWO'#GXO!3_Q`O'#GYO!3dQ`O'#GYO!5SQ(CWO'#G^O!6XQpO'#GbOOQO'#Gn'#GnO!+xQMhO'#GmOOQO'#Gp'#GpO!+xQMhO'#GoO!6zQ$IUO'#JkOOQ!0Lh'#Jk'#JkO!7UQ`O'#JjO!7dQ`O'#JiO!7lQ`O'#CuOOQ!0Lh'#C{'#C{O!7}Q`O'#C}OOQ!0Lh'#DV'#DVOOQ!0Lh'#DX'#DXO1SQ`O'#DZO!+xQMhO'#GPO!+xQMhO'#GRO!8SQ`O'#GTO!8XQ`O'#GUO!3dQ`O'#G[O!+xQMhO'#GaO<QQ`O'#JjO!8^Q`O'#EqO!8{Q`O,5<gOOQ!0Lb'#Cr'#CrO!9TQ`O'#ErO!9}QpO'#EsOOQ!0Lb'#KQ'#KQO!:UQ!0LrO'#K`O9qQ!0LrO,5=cO`QlO,5>sOOQ['#Jg'#JgOOQ[,5>t,5>tOOQ[-E<[-E<[O!<TQ!0MxO,5:bO!9xQpO,5:`O!>nQ!0MxO,5:jO%[QlO,5:jO!AUQ!0MxO,5:lOOQO,5@y,5@yO!AuQMhO,5=_O!BTQ!0LrO'#JhO9[Q`O'#JhO!BfQ!0LrO,59ZO!BqQpO,59ZO!ByQMhO,59ZO:`QMhO,59ZO!CUQ`O,5;ZO!C^Q`O'#HaO!CrQ`O'#KcO%[QlO,5;}O!9xQpO,5<PO!CzQ`O,5=zO!DPQ`O,5=zO!DUQ`O,5=zO9qQ!0LrO,5=zO<QQ`O,5=jOOQO'#Cy'#CyO!DdQpO,5=gO!DlQMhO,5=hO!DwQ`O,5=jO!D|Q!bO,5=mO!EUQ`O'#K_O>}Q`O'#HWO9gQ`O'#HYO!EZQ`O'#HYO:`QMhO'#H[O!E`Q`O'#H[OOQ[,5=p,5=pO!EeQ`O'#H]O!EvQ`O'#CoO!E{Q`O,59PO!FVQ`O,59PO!H[QlO,59POOQ[,59P,59PO!HlQ!0LrO,59PO%[QlO,59PO!JwQlO'#HdOOQ['#He'#HeOOQ['#Hf'#HfO`QlO,5=|O!K_Q`O,5=|O`QlO,5>SO`QlO,5>UO!KdQ`O,5>WO`QlO,5>YO!KiQ`O,5>]O!KnQlO,5>cOOQ[,5>i,5>iO%[QlO,5>iO9qQ!0LrO,5>kOOQ[,5>m,5>mO# xQ`O,5>mOOQ[,5>o,5>oO# xQ`O,5>oOOQ[,5>q,5>qO#!fQpO'#D_O%[QlO'#JuO##XQpO'#JuO##cQpO'#DmO##tQpO'#DmO#&VQlO'#DmO#&^Q`O'#JtO#&fQ`O,5:WO#&kQ`O'#EtO#&yQ`O'#KTO#'RQ`O,5;_O#'WQpO'#DmO#'eQpO'#EVOOQ!0Lf,5:o,5:oO%[QlO,5:oO#'lQ`O,5:oO>}Q`O,5;YO!BqQpO,5;YO!ByQMhO,5;YO:`QMhO,5;YO#'tQ`O,5@aO#'yQ07dO,5:sOOQO-E<e-E<eO#)PQ!0MSO,5;ROC{QpO,5:rO#)ZQpO,5:rOC{QpO,5;RO!BfQ!0LrO,5:rOOQ!0Lb'#Ej'#EjOOQO,5;R,5;RO%[QlO,5;RO#)hQ!0LrO,5;RO#)sQ!0LrO,5;RO!BqQpO,5:rOOQO,5;X,5;XO#*RQ!0LrO,5;RPOOO'#I]'#I]P#*gO&2DjO,58|POOO,58|,58|OOOO-E<]-E<]OOQ!0Lh1G.p1G.pOOOO-E<^-E<^OOOO,59},59}O#*rQ!bO,59}OOOO-E<`-E<`OOQ!0Lf1G/g1G/gO#*wQ!fO,5>}O+}QlO,5>}OOQO,5?T,5?TO#+RQlO'#IcOOQO-E<a-E<aO#+`Q`O,5@_O#+hQ!fO,5@_O#+oQ`O,5@mOOQ!0Lf1G/m1G/mO%[QlO,5@nO#+wQ`O'#IiOOQO-E<g-E<gO#+oQ`O,5@mOOQ!0Lb1G0x1G0xOOQ!0Ln1G/x1G/xOOQ!0Ln1G0Y1G0YO%[QlO,5@kO#,]Q!0LrO,5@kO#,nQ!0LrO,5@kO#,uQ`O,5@jO9aQ`O,5@jO#,}Q`O,5@jO#-]Q`O'#IlO#,uQ`O,5@jOOQ!0Lb1G0w1G0wO!(iQpO,5:uO!(tQpO,5:uOOQS,5:w,5:wO#-}QdO,5:wO#.VQMhO1G2yO9gQ`O1G2yOOQ!0Lf1G0u1G0uO#.eQ!0MxO1G0uO#/jQ!0MvO,5;VOOQ!0Lh'#GW'#GWO#0WQ!0MzO'#JkO!$lQlO1G0uO#2cQ!fO'#JvO%[QlO'#JvO#2mQ`O,5:eOOQ!0Lh'#D_'#D_OOQ!0Lf1G1O1G1OO%[QlO1G1OOOQ!0Lf1G1f1G1fO#2rQ`O1G1OO#5WQ!0MxO1G1PO#5_Q!0MxO1G1PO#7uQ!0MxO1G1PO#7|Q!0MxO1G1PO#:dQ!0MxO1G1PO#<zQ!0MxO1G1PO#=RQ!0MxO1G1PO#=YQ!0MxO1G1PO#?pQ!0MxO1G1PO#?wQ!0MxO1G1PO#BUQ?MtO'#CiO#DPQ?MtO1G1`O#DWQ?MtO'#JrO#DkQ!0MxO,5?ZOOQ!0Lb-E<m-E<mO#FxQ!0MxO1G1PO#GuQ!0MzO1G1POOQ!0Lf1G1P1G1PO#HxQMjO'#J{O#ISQ`O,5:xO#IXQ!0MxO1G1cO#I{Q,UO,5<WO#JTQ,UO,5<XO#J]Q,UO'#FoO#JtQ`O'#FnOOQO'#KX'#KXOOQO'#Im'#ImO#JyQ,UO1G1nOOQ!0Lf1G1n1G1nOOOW1G1y1G1yO#K[Q?MtO'#JqO#KfQ`O,5<bO!)PQlO,5<bOOOW-E<l-E<lOOQ!0Lf1G1l1G1lO#KkQpO'#KWOOQ!0Lf,5<d,5<dO#KsQpO,5<dO#KxQMhO'#DTOOOO'#Ia'#IaO#LPO#@ItO,59mOOQ!0Lh,59m,59mO%[QlO1G2PO!8XQ`O'#IqO#L[Q`O,5<zOOQ!0Lh,5<w,5<wO!+xQMhO'#ItO#LxQMjO,5=XO!+xQMhO'#IvO#MkQMjO,5=ZO!&oQMhO,5=]OOQO1G2S1G2SO#MuQ!dO'#CrO#NYQ(CWO'#ErO$ _QpO'#GbO$ uQ!dO,5<sO$ |Q`O'#KZO9aQ`O'#KZO$![Q`O,5<uO!+xQMhO,5<tO$!aQ`O'#GZO$!rQ`O,5<tO$!wQ!dO'#GWO$#UQ!dO'#K[O$#`Q`O'#K[O!&oQMhO'#K[O$#eQ`O,5<xO$#jQlO'#JuO$#tQpO'#GcO##tQpO'#GcO$$VQ`O'#GgO!3dQ`O'#GkO$$[Q!0LrO'#IsO$$gQpO,5<|OOQ!0Lp,5<|,5<|O$$nQpO'#GcO$${QpO'#GdO$%^QpO'#GdO$%cQMjO,5=XO$%sQMjO,5=ZOOQ!0Lh,5=^,5=^O!+xQMhO,5@UO!+xQMhO,5@UO$&TQ`O'#IxO$&iQ`O,5@TO$&qQ`O,59aOOQ!0Lh,59i,59iO$'hQ$IYO,59uOOQ!0Lh'#Jo'#JoO$(ZQMjO,5<kO$(|QMjO,5<mO@oQ`O,5<oOOQ!0Lh,5<p,5<pO$)WQ`O,5<vO$)]QMjO,5<{O$)mQ`O,5@UO$){Q`O'#KOO!$lQlO1G2RO$*QQ`O1G2RO9aQ`O'#KRO9aQ`O'#EtO%[QlO'#EtO9aQ`O'#IzO$*VQ!0LrO,5@zOOQ[1G2}1G2}OOQ[1G4_1G4_OOQ!0Lf1G/|1G/|OOQ!0Lf1G/z1G/zO$,XQ!0MxO1G0UOOQ[1G2y1G2yO!&oQMhO1G2yO%[QlO1G2yO#.YQ`O1G2yO$.]QMhO'#EkOOQ!0Lb,5@S,5@SO$.jQ!0LrO,5@SOOQ[1G.u1G.uO!BfQ!0LrO1G.uO!BqQpO1G.uO!ByQMhO1G.uO$.{Q`O1G0uO$/QQ`O'#CiO$/]Q`O'#KdO$/eQ`O,5={O$/jQ`O'#KdO$/oQ`O'#KdO$/}Q`O'#JQO$0]Q`O,5@}O$0eQ!fO1G1iOOQ!0Lf1G1k1G1kO9gQ`O1G3fO@oQ`O1G3fO$0lQ`O1G3fO$0qQ`O1G3fOOQ[1G3f1G3fO!DwQ`O1G3UO!&oQMhO1G3RO$0vQ`O1G3ROOQ[1G3S1G3SO!&oQMhO1G3SO$0{Q`O1G3SO$1TQpO'#HQOOQ[1G3U1G3UO!6SQpO'#I|O!D|Q!bO1G3XOOQ[1G3X1G3XOOQ[,5=r,5=rO$1]QMhO,5=tO9gQ`O,5=tO$$VQ`O,5=vO9[Q`O,5=vO!BqQpO,5=vO!ByQMhO,5=vO:`QMhO,5=vO$1kQ`O'#KbO$1vQ`O,5=wOOQ[1G.k1G.kO$1{Q!0LrO1G.kO@oQ`O1G.kO$2WQ`O1G.kO9qQ!0LrO1G.kO$4`Q!fO,5APO$4mQ`O,5APO9aQ`O,5APO$4xQlO,5>OO$5PQ`O,5>OOOQ[1G3h1G3hO`QlO1G3hOOQ[1G3n1G3nOOQ[1G3p1G3pO>xQ`O1G3rO$5UQlO1G3tO$9YQlO'#HsOOQ[1G3w1G3wO$9gQ`O'#HyO>}Q`O'#H{OOQ[1G3}1G3}O$9oQlO1G3}O9qQ!0LrO1G4TOOQ[1G4V1G4VOOQ!0Lb'#G_'#G_O9qQ!0LrO1G4XO9qQ!0LrO1G4ZO$=vQ`O,5@aO!)PQlO,5;`O9aQ`O,5;`O>}Q`O,5:XO!)PQlO,5:XO!BqQpO,5:XO$={Q?MtO,5:XOOQO,5;`,5;`O$>VQpO'#IdO$>mQ`O,5@`OOQ!0Lf1G/r1G/rO$>uQpO'#IjO$?PQ`O,5@oOOQ!0Lb1G0y1G0yO##tQpO,5:XOOQO'#If'#IfO$?XQpO,5:qOOQ!0Ln,5:q,5:qO#'oQ`O1G0ZOOQ!0Lf1G0Z1G0ZO%[QlO1G0ZOOQ!0Lf1G0t1G0tO>}Q`O1G0tO!BqQpO1G0tO!ByQMhO1G0tOOQ!0Lb1G5{1G5{O!BfQ!0LrO1G0^OOQO1G0m1G0mO%[QlO1G0mO$?`Q!0LrO1G0mO$?kQ!0LrO1G0mO!BqQpO1G0^OC{QpO1G0^O$?yQ!0LrO1G0mOOQO1G0^1G0^O$@_Q!0MxO1G0mPOOO-E<Z-E<ZPOOO1G.h1G.hOOOO1G/i1G/iO$@iQ!bO,5<iO$@qQ!fO1G4iOOQO1G4o1G4oO%[QlO,5>}O$@{Q`O1G5yO$ATQ`O1G6XO$A]Q!fO1G6YO9aQ`O,5?TO$AgQ!0MxO1G6VO%[QlO1G6VO$AwQ!0LrO1G6VO$BYQ`O1G6UO$BYQ`O1G6UO9aQ`O1G6UO$BbQ`O,5?WO9aQ`O,5?WOOQO,5?W,5?WO$BvQ`O,5?WO$){Q`O,5?WOOQO-E<j-E<jOOQS1G0a1G0aOOQS1G0c1G0cO#.QQ`O1G0cOOQ[7+(e7+(eO!&oQMhO7+(eO%[QlO7+(eO$CUQ`O7+(eO$CaQMhO7+(eO$CoQ!0MzO,5=XO$EzQ!0MzO,5=ZO$HVQ!0MzO,5=XO$JhQ!0MzO,5=ZO$LyQ!0MzO,59uO% OQ!0MzO,5<kO%#ZQ!0MzO,5<mO%%fQ!0MzO,5<{OOQ!0Lf7+&a7+&aO%'wQ!0MxO7+&aO%(kQlO'#IeO%(xQ`O,5@bO%)QQ!fO,5@bOOQ!0Lf1G0P1G0PO%)[Q`O7+&jOOQ!0Lf7+&j7+&jO%)aQ?MtO,5:fO%[QlO7+&zO%)kQ?MtO,5:bO%)xQ?MtO,5:jO%*SQ?MtO,5:lO%*^QMhO'#IhO%*hQ`O,5@gOOQ!0Lh1G0d1G0dOOQO1G1r1G1rOOQO1G1s1G1sO%*pQ!jO,5<ZO!)PQlO,5<YOOQO-E<k-E<kOOQ!0Lf7+'Y7+'YOOOW7+'e7+'eOOOW1G1|1G1|O%*{Q`O1G1|OOQ!0Lf1G2O1G2OOOOO,59o,59oO%+QQ!dO,59oOOOO-E<_-E<_OOQ!0Lh1G/X1G/XO%+XQ!0MxO7+'kOOQ!0Lh,5?],5?]O%+{QMhO1G2fP%,SQ`O'#IqPOQ!0Lh-E<o-E<oO%,pQMjO,5?`OOQ!0Lh-E<r-E<rO%-cQMjO,5?bOOQ!0Lh-E<t-E<tO%-mQ!dO1G2wO%-tQ!dO'#CrO%.[QMhO'#KRO$#jQlO'#JuOOQ!0Lh1G2_1G2_O%.cQ`O'#IpO%.wQ`O,5@uO%.wQ`O,5@uO%/PQ`O,5@uO%/[Q`O,5@uOOQO1G2a1G2aO%/jQMjO1G2`O!+xQMhO1G2`O%/zQ(CWO'#IrO%0XQ`O,5@vO!&oQMhO,5@vO%0aQ!dO,5@vOOQ!0Lh1G2d1G2dO%2qQ!fO'#CiO%2{Q`O,5=POOQ!0Lb,5<},5<}O%3TQpO,5<}OOQ!0Lb,5=O,5=OOClQ`O,5<}O%3`QpO,5<}OOQ!0Lb,5=R,5=RO$){Q`O,5=VOOQO,5?_,5?_OOQO-E<q-E<qOOQ!0Lp1G2h1G2hO##tQpO,5<}O$#jQlO,5=PO%3nQ`O,5=OO%3yQpO,5=OO!+xQMhO'#ItO%4sQMjO1G2sO!+xQMhO'#IvO%5fQMjO1G2uO%5pQMjO1G5pO%5zQMjO1G5pOOQO,5?d,5?dOOQO-E<v-E<vOOQO1G.{1G.{O!9xQpO,59wO%[QlO,59wOOQ!0Lh,5<j,5<jO%6XQ`O1G2ZO!+xQMhO1G2bO!+xQMhO1G5pO!+xQMhO1G5pO%6^Q!0MxO7+'mOOQ!0Lf7+'m7+'mO!$lQlO7+'mO%7QQ`O,5;`OOQ!0Lb,5?f,5?fOOQ!0Lb-E<x-E<xO%7VQ!dO'#K]O#'oQ`O7+(eO4UQ!fO7+(eO$CXQ`O7+(eO%7aQ!0MvO'#CiO%7tQ!0MvO,5=SO%8fQ`O,5=SO%8nQ`O,5=SOOQ!0Lb1G5n1G5nOOQ[7+$a7+$aO!BfQ!0LrO7+$aO!BqQpO7+$aO!$lQlO7+&aO%8sQ`O'#JPO%9[Q`O,5AOOOQO1G3g1G3gO9gQ`O,5AOO%9[Q`O,5AOO%9dQ`O,5AOOOQO,5?l,5?lOOQO-E=O-E=OOOQ!0Lf7+'T7+'TO%9iQ`O7+)QO9qQ!0LrO7+)QO9gQ`O7+)QO@oQ`O7+)QOOQ[7+(p7+(pO%9nQ!0MvO7+(mO!&oQMhO7+(mO!DrQ`O7+(nOOQ[7+(n7+(nO!&oQMhO7+(nO%9xQ`O'#KaO%:TQ`O,5=lOOQO,5?h,5?hOOQO-E<z-E<zOOQ[7+(s7+(sO%;gQpO'#HZOOQ[1G3`1G3`O!&oQMhO1G3`O%[QlO1G3`O%;nQ`O1G3`O%;yQMhO1G3`O9qQ!0LrO1G3bO$$VQ`O1G3bO9[Q`O1G3bO!BqQpO1G3bO!ByQMhO1G3bO%<XQ`O'#JOO%<mQ`O,5@|O%<uQpO,5@|OOQ!0Lb1G3c1G3cOOQ[7+$V7+$VO@oQ`O7+$VO9qQ!0LrO7+$VO%=QQ`O7+$VO%[QlO1G6kO%[QlO1G6lO%=VQ!0LrO1G6kO%=aQlO1G3jO%=hQ`O1G3jO%=mQlO1G3jOOQ[7+)S7+)SO9qQ!0LrO7+)^O`QlO7+)`OOQ['#Kg'#KgOOQ['#JR'#JRO%=tQlO,5>_OOQ[,5>_,5>_O%[QlO'#HtO%>RQ`O'#HvOOQ[,5>e,5>eO9aQ`O,5>eOOQ[,5>g,5>gOOQ[7+)i7+)iOOQ[7+)o7+)oOOQ[7+)s7+)sOOQ[7+)u7+)uO%>WQpO1G5{O%>rQ?MtO1G0zO%>|Q`O1G0zOOQO1G/s1G/sO%?XQ?MtO1G/sO>}Q`O1G/sO!)PQlO'#DmOOQO,5?O,5?OOOQO-E<b-E<bOOQO,5?U,5?UOOQO-E<h-E<hO!BqQpO1G/sOOQO-E<d-E<dOOQ!0Ln1G0]1G0]OOQ!0Lf7+%u7+%uO#'oQ`O7+%uOOQ!0Lf7+&`7+&`O>}Q`O7+&`O!BqQpO7+&`OOQO7+%x7+%xO$@_Q!0MxO7+&XOOQO7+&X7+&XO%[QlO7+&XO%?cQ!0LrO7+&XO!BfQ!0LrO7+%xO!BqQpO7+%xO%?nQ!0LrO7+&XO%?|Q!0MxO7++qO%[QlO7++qO%@^Q`O7++pO%@^Q`O7++pOOQO1G4r1G4rO9aQ`O1G4rO%@fQ`O1G4rOOQS7+%}7+%}O#'oQ`O<<LPO4UQ!fO<<LPO%@tQ`O<<LPOOQ[<<LP<<LPO!&oQMhO<<LPO%[QlO<<LPO%@|Q`O<<LPO%AXQ!0MzO,5?`O%CdQ!0MzO,5?bO%EoQ!0MzO1G2`O%HQQ!0MzO1G2sO%J]Q!0MzO1G2uO%LhQ!fO,5?PO%[QlO,5?POOQO-E<c-E<cO%LrQ`O1G5|OOQ!0Lf<<JU<<JUO%LzQ?MtO1G0uO& RQ?MtO1G1PO& YQ?MtO1G1PO&#ZQ?MtO1G1PO&#bQ?MtO1G1PO&%cQ?MtO1G1PO&'dQ?MtO1G1PO&'kQ?MtO1G1PO&'rQ?MtO1G1PO&)sQ?MtO1G1PO&)zQ?MtO1G1PO&*RQ!0MxO<<JfO&+yQ?MtO1G1PO&,vQ?MvO1G1PO&-yQ?MvO'#JkO&0PQ?MtO1G1cO&0^Q?MtO1G0UO&0hQMjO,5?SOOQO-E<f-E<fO!)PQlO'#FqOOQO'#KY'#KYOOQO1G1u1G1uO&0rQ`O1G1tO&0wQ?MtO,5?ZOOOW7+'h7+'hOOOO1G/Z1G/ZO&1RQ!dO1G4wOOQ!0Lh7+(Q7+(QP!&oQMhO,5?]O!+xQMhO7+(cO&1YQ`O,5?[O9aQ`O,5?[OOQO-E<n-E<nO&1hQ`O1G6aO&1hQ`O1G6aO&1pQ`O1G6aO&1{QMjO7+'zO&2]Q!dO,5?^O&2gQ`O,5?^O!&oQMhO,5?^OOQO-E<p-E<pO&2lQ!dO1G6bO&2vQ`O1G6bO&3OQ`O1G2kO!&oQMhO1G2kOOQ!0Lb1G2i1G2iOOQ!0Lb1G2j1G2jO%3TQpO1G2iO!BqQpO1G2iOClQ`O1G2iOOQ!0Lb1G2q1G2qO&3TQpO1G2iO&3cQ`O1G2kO$){Q`O1G2jOClQ`O1G2jO$#jQlO1G2kO&3kQ`O1G2jO&4_QMjO,5?`OOQ!0Lh-E<s-E<sO&5QQMjO,5?bOOQ!0Lh-E<u-E<uO!+xQMhO7++[OOQ!0Lh1G/c1G/cO&5[Q`O1G/cOOQ!0Lh7+'u7+'uO&5aQMjO7+'|O&5qQMjO7++[O&5{QMjO7++[O&6YQ!0MxO<<KXOOQ!0Lf<<KX<<KXO&6|Q`O1G0zO!&oQMhO'#IyO&7RQ`O,5@wO&9TQ!fO<<LPO!&oQMhO1G2nO&9[Q!0LrO1G2nOOQ[<<G{<<G{O!BfQ!0LrO<<G{O&9mQ!0MxO<<I{OOQ!0Lf<<I{<<I{OOQO,5?k,5?kO&:aQ`O,5?kO&:fQ`O,5?kOOQO-E<}-E<}O&:tQ`O1G6jO&:tQ`O1G6jO9gQ`O1G6jO@oQ`O<<LlOOQ[<<Ll<<LlO&:|Q`O<<LlO9qQ!0LrO<<LlOOQ[<<LX<<LXO%9nQ!0MvO<<LXOOQ[<<LY<<LYO!DrQ`O<<LYO&;RQpO'#I{O&;^Q`O,5@{O!)PQlO,5@{OOQ[1G3W1G3WOOQO'#I}'#I}O9qQ!0LrO'#I}O&;fQpO,5=uOOQ[,5=u,5=uO&;mQpO'#EgO&;tQpO'#GeO&;yQ`O7+(zO&<OQ`O7+(zOOQ[7+(z7+(zO!&oQMhO7+(zO%[QlO7+(zO&<WQ`O7+(zOOQ[7+(|7+(|O9qQ!0LrO7+(|O$$VQ`O7+(|O9[Q`O7+(|O!BqQpO7+(|O&<cQ`O,5?jOOQO-E<|-E<|OOQO'#H^'#H^O&<nQ`O1G6hO9qQ!0LrO<<GqOOQ[<<Gq<<GqO@oQ`O<<GqO&<vQ`O7+,VO&<{Q`O7+,WO%[QlO7+,VO%[QlO7+,WOOQ[7+)U7+)UO&=QQ`O7+)UO&=VQlO7+)UO&=^Q`O7+)UOOQ[<<Lx<<LxOOQ[<<Lz<<LzOOQ[-E=P-E=POOQ[1G3y1G3yO&=cQ`O,5>`OOQ[,5>b,5>bO&=hQ`O1G4PO9aQ`O7+&fO!)PQlO7+&fOOQO7+%_7+%_O&=mQ?MtO1G6YO>}Q`O7+%_OOQ!0Lf<<Ia<<IaOOQ!0Lf<<Iz<<IzO>}Q`O<<IzOOQO<<Is<<IsO$@_Q!0MxO<<IsO%[QlO<<IsOOQO<<Id<<IdO!BfQ!0LrO<<IdO&=wQ!0LrO<<IsO&>SQ!0MxO<= ]O&>dQ`O<= [OOQO7+*^7+*^O9aQ`O7+*^OOQ[ANAkANAkO&>lQ!fOANAkO!&oQMhOANAkO#'oQ`OANAkO4UQ!fOANAkO&>sQ`OANAkO%[QlOANAkO&>{Q!0MzO7+'zO&A^Q!0MzO,5?`O&CiQ!0MzO,5?bO&EtQ!0MzO7+'|O&HVQ!fO1G4kO&HaQ?MtO7+&aO&JeQ?MvO,5=XO&LlQ?MvO,5=ZO&L|Q?MvO,5=XO&M^Q?MvO,5=ZO&MnQ?MvO,59uO' tQ?MvO,5<kO'#wQ?MvO,5<mO'&]Q?MvO,5<{O'(RQ?MtO7+'kO'(`Q?MtO7+'mO'(mQ`O,5<]OOQO7+'`7+'`OOQ!0Lh7+*c7+*cO'(rQMjO<<K}OOQO1G4v1G4vO'(yQ`O1G4vO')UQ`O1G4vO')dQ`O7++{O')dQ`O7++{O!&oQMhO1G4xO')lQ!dO1G4xO')vQ`O7++|O'*OQ`O7+(VO'*ZQ!dO7+(VOOQ!0Lb7+(T7+(TOOQ!0Lb7+(U7+(UO!BqQpO7+(TOClQ`O7+(TO'*eQ`O7+(VO!&oQMhO7+(VO$){Q`O7+(UO'*jQ`O7+(VOClQ`O7+(UO'*rQMjO<<NvOOQ!0Lh7+$}7+$}O!+xQMhO<<NvO'*|Q!dO,5?eOOQO-E<w-E<wO'+WQ!0MvO7+(YO!&oQMhO7+(YOOQ[AN=gAN=gO9gQ`O1G5VOOQO1G5V1G5VO'+hQ`O1G5VO'+mQ`O7+,UO'+mQ`O7+,UO9qQ!0LrOANBWO@oQ`OANBWOOQ[ANBWANBWOOQ[ANAsANAsOOQ[ANAtANAtO'+uQ`O,5?gOOQO-E<y-E<yO',QQ?MtO1G6gOOQO,5?i,5?iOOQO-E<{-E<{OOQ[1G3a1G3aO',[Q`O,5=POOQ[<<Lf<<LfO!&oQMhO<<LfO&;yQ`O<<LfO',aQ`O<<LfO%[QlO<<LfOOQ[<<Lh<<LhO9qQ!0LrO<<LhO$$VQ`O<<LhO9[Q`O<<LhO',iQpO1G5UO',tQ`O7+,SOOQ[AN=]AN=]O9qQ!0LrOAN=]OOQ[<= q<= qOOQ[<= r<= rO',|Q`O<= qO'-RQ`O<= rOOQ[<<Lp<<LpO'-WQ`O<<LpO'-]QlO<<LpOOQ[1G3z1G3zO>}Q`O7+)kO'-dQ`O<<JQO'-oQ?MtO<<JQOOQO<<Hy<<HyOOQ!0LfAN?fAN?fOOQOAN?_AN?_O$@_Q!0MxOAN?_OOQOAN?OAN?OO%[QlOAN?_OOQO<<Mx<<MxOOQ[G27VG27VO!&oQMhOG27VO#'oQ`OG27VO'-yQ!fOG27VO4UQ!fOG27VO'.QQ`OG27VO'.YQ?MtO<<JfO'.gQ?MvO1G2`O'0]Q?MvO,5?`O'2`Q?MvO,5?bO'4cQ?MvO1G2sO'6fQ?MvO1G2uO'8iQ?MtO<<KXO'8vQ?MtO<<I{OOQO1G1w1G1wO!+xQMhOANAiOOQO7+*b7+*bO'9TQ`O7+*bO'9`Q`O<= gO'9hQ!dO7+*dOOQ!0Lb<<Kq<<KqO$){Q`O<<KqOClQ`O<<KqO'9rQ`O<<KqO!&oQMhO<<KqOOQ!0Lb<<Ko<<KoO!BqQpO<<KoO'9}Q!dO<<KqOOQ!0Lb<<Kp<<KpO':XQ`O<<KqO!&oQMhO<<KqO$){Q`O<<KpO':^QMjOANDbO':hQ!0MvO<<KtOOQO7+*q7+*qO9gQ`O7+*qO':xQ`O<= pOOQ[G27rG27rO9qQ!0LrOG27rO!)PQlO1G5RO';QQ`O7+,RO';YQ`O1G2kO&;yQ`OANBQOOQ[ANBQANBQO!&oQMhOANBQO';_Q`OANBQOOQ[ANBSANBSO9qQ!0LrOANBSO$$VQ`OANBSOOQO'#H_'#H_OOQO7+*p7+*pOOQ[G22wG22wOOQ[ANE]ANE]OOQ[ANE^ANE^OOQ[ANB[ANB[O';gQ`OANB[OOQ[<<MV<<MVO!)PQlOAN?lOOQOG24yG24yO$@_Q!0MxOG24yO#'oQ`OLD,qOOQ[LD,qLD,qO!&oQMhOLD,qO';lQ!fOLD,qO';sQ?MvO7+'zO'=iQ?MvO,5?`O'?lQ?MvO,5?bO'AoQ?MvO7+'|O'CeQMjOG27TOOQO<<M|<<M|OOQ!0LbANA]ANA]O$){Q`OANA]OClQ`OANA]O'CuQ!dOANA]OOQ!0LbANAZANAZO'C|Q`OANA]O!&oQMhOANA]O'DXQ!dOANA]OOQ!0LbANA[ANA[OOQO<<N]<<N]OOQ[LD-^LD-^O'DcQ?MtO7+*mOOQO'#Gf'#GfOOQ[G27lG27lO&;yQ`OG27lO!&oQMhOG27lOOQ[G27nG27nO9qQ!0LrOG27nOOQ[G27vG27vO'DmQ?MtOG25WOOQOLD*eLD*eOOQ[!$(!]!$(!]O#'oQ`O!$(!]O!&oQMhO!$(!]O'DwQ!0MzOG27TOOQ!0LbG26wG26wO$){Q`OG26wO'GYQ`OG26wOClQ`OG26wO'GeQ!dOG26wO!&oQMhOG26wOOQ[LD-WLD-WO&;yQ`OLD-WOOQ[LD-YLD-YOOQ[!)9Ew!)9EwO#'oQ`O!)9EwOOQ!0LbLD,cLD,cO$){Q`OLD,cOClQ`OLD,cO'GlQ`OLD,cO'GwQ!dOLD,cOOQ[!$(!r!$(!rOOQ[!.K;c!.K;cO'HOQ?MvOG27TOOQ!0Lb!$( }!$( }O$){Q`O!$( }OClQ`O!$( }O'ItQ`O!$( }OOQ!0Lb!)9Ei!)9EiO$){Q`O!)9EiOClQ`O!)9EiOOQ!0Lb!.K;T!.K;TO$){Q`O!.K;TOOQ!0Lb!4/0o!4/0oO!)PQlO'#DzO1PQ`O'#EXO'JPQ!fO'#JqO'JWQ!L^O'#DvO'J_QlO'#EOO'JfQ!fO'#CiO'L|Q!fO'#CiO!)PQlO'#EQO'M^QlO,5;ZO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO'#IoO( aQ`O,5<iO!)PQlO,5;eO( iQMhO,5;eO(#SQMhO,5;eO!)PQlO,5;wO!&oQMhO'#GmO( iQMhO'#GmO!&oQMhO'#GoO( iQMhO'#GoO1SQ`O'#DZO1SQ`O'#DZO!&oQMhO'#GPO( iQMhO'#GPO!&oQMhO'#GRO( iQMhO'#GRO!&oQMhO'#GaO( iQMhO'#GaO!)PQlO,5:jO(#ZQpO'#D_O(#eQpO'#JuO!)PQlO,5@nO'M^QlO1G0uO(#oQ?MtO'#CiO!)PQlO1G2PO!&oQMhO'#ItO( iQMhO'#ItO!&oQMhO'#IvO( iQMhO'#IvO(#yQ!dO'#CrO!&oQMhO,5<tO( iQMhO,5<tO'M^QlO1G2RO!)PQlO7+&zO!&oQMhO1G2`O( iQMhO1G2`O!&oQMhO'#ItO( iQMhO'#ItO!&oQMhO'#IvO( iQMhO'#IvO!&oQMhO1G2bO( iQMhO1G2bO'M^QlO7+'mO'M^QlO7+&aO!&oQMhOANAiO( iQMhOANAiO($^Q`O'#EoO($cQ`O'#EoO($kQ`O'#F]O($pQ`O'#EyO($uQ`O'#KSO(%QQ`O'#KQO(%]Q`O,5;ZO(%bQMjO,5<eO(%iQ`O'#GYO(%nQ`O'#GYO(%sQ`O,5<gO(%{Q`O,5;ZO(&TQ?MtO1G1`O(&[Q`O,5<tO(&aQ`O,5<tO(&fQ`O,5<vO(&kQ`O,5<vO(&pQ`O1G2RO(&uQ`O1G0uO(&zQMjO<<K}O('RQMjO<<K}O7eQMhO'#F|O9[Q`O'#F{OAjQ`O'#EnO!)PQlO,5;tO!3dQ`O'#GYO!3dQ`O'#GYO!3dQ`O'#G[O!3dQ`O'#G[O!+xQMhO7+(cO!+xQMhO7+(cO%-mQ!dO1G2wO%-mQ!dO1G2wO!&oQMhO,5=]O!&oQMhO,5=]",
    stateData: "((X~O'{OS'|OSTOS'}RQ~OPYOQYOSfOY!VOaqOdzOeyOl!POpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_XO!iuO!lZO!oYO!pYO!qYO!svO!uwO!xxO!|]O$W|O$niO%h}O%j!QO%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO%y!UO&V!WO&]!XO&_!YO&a!ZO&c![O&f!]O&l!^O&r!_O&t!`O&v!aO&x!bO&z!cO(SSO(UTO(XUO(`VO(n[O~OWtO~P`OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oa!wOs!nO!S!oO!b!yO!c!vO!d!vO!|;wO#T!pO#U!pO#V!xO#W!pO#X!pO#[!zO#]!zO(T!lO(UTO(XUO(d!mO(n!sO~O'}!{O~OP]XR]X[]Xa]Xj]Xr]X!Q]X!S]X!]]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X'y]X(`]X(q]X(x]X(y]X~O!g%RX~P(qO_!}O(U#PO(V!}O(W#PO~O_#QO(W#PO(X#PO(Y#QO~Ox#SO!U#TO(a#TO(b#VO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S;{O(UTO(XUO(`VO(n[O~O![#ZO!]#WO!Y(gP!Y(uP~P+}O!^#cO~P`OPYOQYOSfOd!jOe!iOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(UTO(XUO(`VO(n[O~Op#mO![#iO!|]O#i#lO#j#iO(S;|O!k(rP~P.iO!l#oO(S#nO~O!x#sO!|]O%h#tO~O#k#uO~O!g#vO#k#uO~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!]$_O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~Oa(eX'y(eX'v(eX!k(eX!Y(eX!_(eX%i(eX!g(eX~P1qO#S$dO#`$eO$Q$eOP(fXR(fX[(fXj(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX!_(fX%i(fX~Oa(fX'y(fX'v(fX!Y(fX!k(fXv(fX!g(fX~P4UO#`$eO~O$]$hO$_$gO$f$mO~OSfO!_$nO$i$oO$k$qO~Oh%VOj%cOk%cOl%cOp%WOr%XOs$tOt$tOz%YO|%ZO!O%[O!S${O!_$|O!i%aO!l$xO#j%bO$W%_O$t%]O$v%^O$y%`O(S$sO(UTO(XUO(`$uO(x$}O(y%POg(]P~O!l%dO~O!S%gO!_%hO(S%fO~O!g%lO~Oa%mO'y%mO~O!Q%qO~P%[O(T!lO~P%[O%n%uO~P%[Oh%VO!l%dO(S%fO(T!lO~Oe%|O!l%dO(S%fO~Oj$RO~O!Q&RO!_&OO!l&QO%j&UO(S%fO(T!lO(UTO(XUO`)VP~O!x#sO~O%s&WO!S)RX!_)RX(S)RX~O(S&XO~Ol!PO!u&^O%j!QO%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO~Od&cOe&bO!x&`O%h&aO%{&_O~P<VOd&fOeyOl!PO!_&eO!u&^O!xxO!|]O%h}O%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO%y!UO~Ob&iO#`&lO%j&gO(T!lO~P=[O!l&mO!u&qO~O!l#oO~O!_XO~Oa%mO'w&yO'y%mO~Oa%mO'w&|O'y%mO~Oa%mO'w'OO'y%mO~O'v]X!Y]Xv]X!k]X&Z]X!_]X%i]X!g]X~P(qO!b']O!c'UO!d'UO(T!lO(UTO(XUO~Os'SO!S'RO!['VO(d'QO!^(hP!^(wP~P@cOn'`O!_'^O(S%fO~Oe'eO!l%dO(S%fO~O!Q&RO!l&QO~Os!nO!S!oO!|;wO#T!pO#U!pO#W!pO#X!pO(T!lO(UTO(XUO(d!mO(n!sO~O!b'kO!c'jO!d'jO#V!pO#['lO#]'lO~PA}Oa%mOh%VO!g#vO!l%dO'y%mO(q'nO~O!p'rO#`'pO~PC]Os!nO!S!oO(UTO(XUO(d!mO(n!sO~O!_XOs(lX!S(lX!b(lX!c(lX!d(lX!|(lX#T(lX#U(lX#V(lX#W(lX#X(lX#[(lX#](lX(T(lX(U(lX(X(lX(d(lX(n(lX~O!c'jO!d'jO(T!lO~PC{O(O'vO(P'vO(Q'xO~O_!}O(U'zO(V!}O(W'zO~O_#QO(W'zO(X'zO(Y#QO~Ov'|O~P%[Ox#SO!U#TO(a#TO(b(PO~O![(RO!Y'VX!Y']X!]'VX!]']X~P+}O!](TO!Y(gX~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!](TO!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~O!Y(gX~PGvO!Y(YO~O!Y(tX!](tX!g(tX!k(tX(q(tX~O#`(tX#k#dX!^(tX~PIyO#`(ZO!Y(vX!](vX~O!]([O!Y(uX~O!Y(_O~O#`$eO~PIyO!^(`O~P`OR#zO!Q#yO!S#{O!l#xO(`VOP!na[!naj!nar!na!]!na!p!na#R!na#n!na#o!na#p!na#q!na#r!na#s!na#t!na#u!na#v!na#x!na#z!na#{!na(q!na(x!na(y!na~Oa!na'y!na'v!na!Y!na!k!nav!na!_!na%i!na!g!na~PKaO!k(aO~O!g#vO#`(bO(q'nO!](sXa(sX'y(sX~O!k(sX~PM|O!S%gO!_%hO!|]O#i(gO#j(fO(S%fO~O!](hO!k(rX~O!k(jO~O!S%gO!_%hO#j(fO(S%fO~OP(fXR(fX[(fXj(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX~O!g#vO!k(fX~P! jOR(lO!Q(kO!l#xO#S$dO!|!{a!S!{a~O!x!{a%h!{a!_!{a#i!{a#j!{a(S!{a~P!#kO!x(pO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_XO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~O#k(vO~O![(xO!k(jP~P%[O(d(zO(n[O~O!S(|O!l#xO(d(zO(n[O~OP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_!eO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(S)ZO(UTO(XUO(`VO(n[O~O!]$_Oa$qa'y$qa'v$qa!k$qa!Y$qa!_$qa%i$qa!g$qa~Ol)bO~P!&oOh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O%[O!S${O!_$|O!i%aO!l$xO#j%bO$W%_O$t%]O$v%^O$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~Og(oP~P!+xO!Q)gO!g)fO!_$^X$Z$^X$]$^X$_$^X$f$^X~O!g)fO!_(zX$Z(zX$](zX$_(zX$f(zX~O!Q)gO~P!.RO!Q)gO!_(zX$Z(zX$](zX$_(zX$f(zX~O!_)iO$Z)mO$])hO$_)hO$f)nO~O![)qO~P!)PO$]$hO$_$gO$f)uO~On$zX!Q$zX#S$zX'x$zX(x$zX(y$zX~OgmXg$zXnmX!]mX#`mX~P!/wOx)wO(a)xO(b)zO~On*TO!Q)|O'x)}O(x$}O(y%PO~Og){O~P!0{Og*UO~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S*WO!_*XO!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(UTO(XUO(`$uO(x$}O(y%PO~O![*[O(S*VO!k(}P~P!1jO#k*^O~O!l*_O~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(S*aO(UTO(XUO(`$uO(x$}O(y%PO~O![*dO!Y)OP~P!3iOr*pOs!nO!S*fO!b*nO!c*hO!d*hO!l*_O#[*oO%`*jO(T!lO(UTO(XUO(d!mO~O!^*mO~P!5^O#S$dOn(_X!Q(_X'x(_X(x(_X(y(_X!](_X#`(_X~Og(_X$O(_X~P!6`On*uO#`*tOg(^X!](^X~O!]*vOg(]X~Oj%cOk%cOl%cO(S&XOg(]P~Os*yO~O!l+OO~O(S(tO~Op+TO!S%gO![#iO!_%hO!|]O#i#lO#j#iO(S%fO!k(rP~O!g#vO#k+UO~O!S%gO![+WO!]([O!_%hO(S%fO!Y(uP~Os'YO!S+YO![+XO(UTO(XUO(d(zO~O!^(wP~P!9iO!]+ZOa)SX'y)SX~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~Oa!ja!]!ja'y!ja'v!ja!Y!ja!k!jav!ja!_!ja%i!ja!g!ja~P!:aOR#zO!Q#yO!S#{O!l#xO(`VOP!ra[!raj!rar!ra!]!ra!p!ra#R!ra#n!ra#o!ra#p!ra#q!ra#r!ra#s!ra#t!ra#u!ra#v!ra#x!ra#z!ra#{!ra(q!ra(x!ra(y!ra~Oa!ra'y!ra'v!ra!Y!ra!k!rav!ra!_!ra%i!ra!g!ra~P!<wOR#zO!Q#yO!S#{O!l#xO(`VOP!ta[!taj!tar!ta!]!ta!p!ta#R!ta#n!ta#o!ta#p!ta#q!ta#r!ta#s!ta#t!ta#u!ta#v!ta#x!ta#z!ta#{!ta(q!ta(x!ta(y!ta~Oa!ta'y!ta'v!ta!Y!ta!k!tav!ta!_!ta%i!ta!g!ta~P!?_Oh%VOn+dO!_'^O%i+cO~O!g+fOa([X!_([X'y([X!]([X~Oa%mO!_XO'y%mO~Oh%VO!l%dO~Oh%VO!l%dO(S%fO~O!g#vO#k(vO~Ob+qO%j+rO(S+nO(UTO(XUO!^)WP~O!]+sO`)VX~O[+wO~O`+xO~O!_&OO(S%fO(T!lO`)VP~Oh%VO#`+}O~Oh%VOn,QO!_$|O~O!_,SO~O!Q,UO!_XO~O%n%uO~O!x,ZO~Oe,`O~Ob,aO(S#nO(UTO(XUO!^)UP~Oe%|O~O%j!QO(S&XO~P=[O[,fO`,eO~OPYOQYOSfOdzOeyOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!iuO!lZO!oYO!pYO!qYO!svO!xxO!|]O$niO%h}O(UTO(XUO(`VO(n[O~O!_!eO!u!gO$W!kO(S!dO~P!F_O`,eOa%mO'y%mO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oa,kOl!OO!uwO%l!OO%m!OO%n!OO~P!HwO!l&mO~O&],qO~O!_,sO~O&n,uO&p,vOP&kaQ&kaS&kaY&kaa&kad&kae&kal&kap&kar&kas&kat&kaz&ka|&ka!O&ka!S&ka!W&ka!X&ka!_&ka!i&ka!l&ka!o&ka!p&ka!q&ka!s&ka!u&ka!x&ka!|&ka$W&ka$n&ka%h&ka%j&ka%l&ka%m&ka%n&ka%q&ka%s&ka%v&ka%w&ka%y&ka&V&ka&]&ka&_&ka&a&ka&c&ka&f&ka&l&ka&r&ka&t&ka&v&ka&x&ka&z&ka'v&ka(S&ka(U&ka(X&ka(`&ka(n&ka!^&ka&d&kab&ka&i&ka~O(S,{O~Oh!eX!]!RX!^!RX!g!RX!g!eX!l!eX#`!RX~O!]!eX!^!eX~P# }O!g-QO#`-POh(iX!]#hX!^#hX!g(iX!l(iX~O!](iX!^(iX~P#!pOh%VO!g-SO!l%dO!]!aX!^!aX~Os!nO!S!oO(UTO(XUO(d!mO~OP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_!eO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(UTO(XUO(`VO(n[O~O(S<rO~P#$VO!]-WO!^(hX~O!^-YO~O!g-QO#`-PO!]#hX!^#hX~O!]-ZO!^(wX~O!^-]O~O!c-^O!d-^O(T!lO~P##tO!^-aO~P'_On-dO!_'^O~O!Y-iO~Os!{a!b!{a!c!{a!d!{a#T!{a#U!{a#V!{a#W!{a#X!{a#[!{a#]!{a(T!{a(U!{a(X!{a(d!{a(n!{a~P!#kO!p-nO#`-lO~PC]O!c-pO!d-pO(T!lO~PC{Oa%mO#`-lO'y%mO~Oa%mO!g#vO#`-lO'y%mO~Oa%mO!g#vO!p-nO#`-lO'y%mO(q'nO~O(O'vO(P'vO(Q-uO~Ov-vO~O!Y'Va!]'Va~P!:aO![-zO!Y'VX!]'VX~P%[O!](TO!Y(ga~O!Y(ga~PGvO!]([O!Y(ua~O!S%gO![.OO!_%hO(S%fO!Y']X!]']X~O#`.QO!](sa!k(saa(sa'y(sa~O!g#vO~P#,]O!](hO!k(ra~O!S%gO!_%hO#j.UO(S%fO~Op.ZO!S%gO![.WO!_%hO!|]O#i.YO#j.WO(S%fO!]'`X!k'`X~OR._O!l#xO~Oh%VOn.bO!_'^O%i.aO~Oa#ci!]#ci'y#ci'v#ci!Y#ci!k#civ#ci!_#ci%i#ci!g#ci~P!:aOn=|O!Q)|O'x)}O(x$}O(y%PO~O#k#_aa#_a#`#_a'y#_a!]#_a!k#_a!_#_a!Y#_a~P#/XO#k(_XP(_XR(_X[(_Xa(_Xj(_Xr(_X!S(_X!l(_X!p(_X#R(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#t(_X#u(_X#v(_X#x(_X#z(_X#{(_X'y(_X(`(_X(q(_X!k(_X!Y(_X'v(_Xv(_X!_(_X%i(_X!g(_X~P!6`O!].oO!k(jX~P!:aO!k.rO~O!Y.tO~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O(`VO[#mia#mij#mir#mi!]#mi#R#mi#o#mi#p#mi#q#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#n#mi~P#2wO#n$OO~P#2wOP$[OR#zOr$aO!Q#yO!S#{O!l#xO!p$[O#n$OO#o$PO#p$PO#q$PO(`VO[#mia#mij#mi!]#mi#R#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#r#mi~P#5fO#r$QO~P#5fOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO(`VOa#mi!]#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#v#mi~P#8TOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO(`VO(y#}Oa#mi!]#mi#z#mi#{#mi'y#mi(q#mi(x#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#x$UO~P#:kO#x#mi~P#:kO#v$SO~P#8TOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO(`VO(x#|O(y#}Oa#mi!]#mi#{#mi'y#mi(q#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#z#mi~P#=aO#z$WO~P#=aOP]XR]X[]Xj]Xr]X!Q]X!S]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X!]]X!^]X~O$O]X~P#@OOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO#x<VO#z<XO#{<YO(`VO(q$YO(x#|O(y#}O~O$O.vO~P#B]O#S$dO#`<`O$Q<`O$O(fX!^(fX~P! jOa'ca!]'ca'y'ca'v'ca!k'ca!Y'cav'ca!_'ca%i'ca!g'ca~P!:aO[#mia#mij#mir#mi!]#mi#R#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O#n$OO#o$PO#p$PO#q$PO(`VO(x#mi(y#mi~P#E_On=|O!Q)|O'x)}O(x$}O(y%POP#miR#mi!S#mi!l#mi!p#mi#n#mi#o#mi#p#mi#q#mi(`#mi~P#E_O!].zOg(oX~P!0{Og.|O~Oa$Pi!]$Pi'y$Pi'v$Pi!Y$Pi!k$Piv$Pi!_$Pi%i$Pi!g$Pi~P!:aO$].}O$_.}O~O$]/OO$_/OO~O!g)fO#`/PO!_$cX$Z$cX$]$cX$_$cX$f$cX~O![/QO~O!_)iO$Z/SO$])hO$_)hO$f/TO~O!]<ZO!^(eX~P#B]O!^/UO~O!g)fO$f(zX~O$f/WO~Ov/XO~P!&oOx)wO(a)xO(b/[O~O!S/_O~O(x$}On%aa!Q%aa'x%aa(y%aa!]%aa#`%aa~Og%aa$O%aa~P#LaO(y%POn%ca!Q%ca'x%ca(x%ca!]%ca#`%ca~Og%ca$O%ca~P#MSO!]fX!gfX!kfX!k$zX(qfX~P!/wO![/hO!]([O(S/gO!Y(uP!Y)OP~P!1jOr*pO!b*nO!c*hO!d*hO!l*_O#[*oO%`*jO(T!lO(UTO(XUO~Os<oO!S/iO![+XO!^*mO(d<nO!^(wP~P#NmO!k/jO~P#/XO!]/kO!g#vO(q'nO!k(}X~O!k/pO~O!S%gO![*[O!_%hO(S%fO!k(}P~O#k/rO~O!Y$zX!]$zX!g%RX~P!/wO!]/sO!Y)OX~P#/XO!g/uO~O!Y/wO~OpkO(S/xO~P.iOh%VOr/}O!g#vO!l%dO(q'nO~O!g+fO~Oa%mO!]0RO'y%mO~O!^0TO~P!5^O!c0UO!d0UO(T!lO~P##tOs!nO!S0VO(UTO(XUO(d!mO~O#[0XO~Og%aa!]%aa#`%aa$O%aa~P!0{Og%ca!]%ca#`%ca$O%ca~P!0{Oj%cOk%cOl%cO(S&XOg'lX!]'lX~O!]*vOg(]a~Og0bO~OR0cO!Q0cO!S0dO#S$dOn}a'x}a(x}a(y}a!]}a#`}a~Og}a$O}a~P$&vO!Q)|O'x)}On$sa(x$sa(y$sa!]$sa#`$sa~Og$sa$O$sa~P$'rO!Q)|O'x)}On$ua(x$ua(y$ua!]$ua#`$ua~Og$ua$O$ua~P$(eO#k0gO~Og%Ta!]%Ta#`%Ta$O%Ta~P!0{On0iO#`0hOg(^a!](^a~O!g#vO~O#k0lO~O!]+ZOa)Sa'y)Sa~OR#zO!Q#yO!S#{O!l#xO(`VOP!ri[!rij!rir!ri!]!ri!p!ri#R!ri#n!ri#o!ri#p!ri#q!ri#r!ri#s!ri#t!ri#u!ri#v!ri#x!ri#z!ri#{!ri(q!ri(x!ri(y!ri~Oa!ri'y!ri'v!ri!Y!ri!k!riv!ri!_!ri%i!ri!g!ri~P$*bOh%VOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(UTO(XUO(`$uO(x$}O(y%PO~Op0uO%]0vO(S0tO~P$,xO!g+fOa([a!_([a'y([a!]([a~O#k0|O~O[]X!]fX!^fX~O!]0}O!^)WX~O!^1PO~O[1QO~Ob1SO(S+nO(UTO(XUO~O!_&OO(S%fO`'tX!]'tX~O!]+sO`)Va~O!k1VO~P!:aO[1YO~O`1ZO~O#`1^O~On1aO!_$|O~O(d(zO!^)TP~Oh%VOn1jO!_1gO%i1iO~O[1tO!]1rO!^)UX~O!^1uO~O`1wOa%mO'y%mO~O(S#nO(UTO(XUO~O#S$dO#`$eO$Q$eOP(fXR(fX[(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX~Oj1zO&Z1{Oa(fX~P$2cOj1zO#`$eO&Z1{O~Oa1}O~P%[Oa2PO~O&d2SOP&biQ&biS&biY&bia&bid&bie&bil&bip&bir&bis&bit&biz&bi|&bi!O&bi!S&bi!W&bi!X&bi!_&bi!i&bi!l&bi!o&bi!p&bi!q&bi!s&bi!u&bi!x&bi!|&bi$W&bi$n&bi%h&bi%j&bi%l&bi%m&bi%n&bi%q&bi%s&bi%v&bi%w&bi%y&bi&V&bi&]&bi&_&bi&a&bi&c&bi&f&bi&l&bi&r&bi&t&bi&v&bi&x&bi&z&bi'v&bi(S&bi(U&bi(X&bi(`&bi(n&bi!^&bib&bi&i&bi~Ob2YO!^2WO&i2XO~P`O!_XO!l2[O~O&p,vOP&kiQ&kiS&kiY&kia&kid&kie&kil&kip&kir&kis&kit&kiz&ki|&ki!O&ki!S&ki!W&ki!X&ki!_&ki!i&ki!l&ki!o&ki!p&ki!q&ki!s&ki!u&ki!x&ki!|&ki$W&ki$n&ki%h&ki%j&ki%l&ki%m&ki%n&ki%q&ki%s&ki%v&ki%w&ki%y&ki&V&ki&]&ki&_&ki&a&ki&c&ki&f&ki&l&ki&r&ki&t&ki&v&ki&x&ki&z&ki'v&ki(S&ki(U&ki(X&ki(`&ki(n&ki!^&ki&d&kib&ki&i&ki~O!Y2bO~O!]!aa!^!aa~P#B]Os!nO!S!oO![2hO(d!mO!]'WX!^'WX~P@cO!]-WO!^(ha~O!]'^X!^'^X~P!9iO!]-ZO!^(wa~O!^2oO~P'_Oa%mO#`2xO'y%mO~Oa%mO!g#vO#`2xO'y%mO~Oa%mO!g#vO!p2|O#`2xO'y%mO(q'nO~Oa%mO'y%mO~P!:aO!]$_Ov$qa~O!Y'Vi!]'Vi~P!:aO!](TO!Y(gi~O!]([O!Y(ui~O!Y(vi!](vi~P!:aO!](si!k(sia(si'y(si~P!:aO#`3OO!](si!k(sia(si'y(si~O!](hO!k(ri~O!S%gO!_%hO!|]O#i3TO#j3SO(S%fO~O!S%gO!_%hO#j3SO(S%fO~On3[O!_'^O%i3ZO~Oh%VOn3[O!_'^O%i3ZO~O#k%aaP%aaR%aa[%aaa%aaj%aar%aa!S%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa'y%aa(`%aa(q%aa!k%aa!Y%aa'v%aav%aa!_%aa%i%aa!g%aa~P#LaO#k%caP%caR%ca[%caa%caj%car%ca!S%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca'y%ca(`%ca(q%ca!k%ca!Y%ca'v%cav%ca!_%ca%i%ca!g%ca~P#MSO#k%aaP%aaR%aa[%aaa%aaj%aar%aa!S%aa!]%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa'y%aa(`%aa(q%aa!k%aa!Y%aa'v%aa#`%aav%aa!_%aa%i%aa!g%aa~P#/XO#k%caP%caR%ca[%caa%caj%car%ca!S%ca!]%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca'y%ca(`%ca(q%ca!k%ca!Y%ca'v%ca#`%cav%ca!_%ca%i%ca!g%ca~P#/XO#k}aP}a[}aa}aj}ar}a!l}a!p}a#R}a#n}a#o}a#p}a#q}a#r}a#s}a#t}a#u}a#v}a#x}a#z}a#{}a'y}a(`}a(q}a!k}a!Y}a'v}av}a!_}a%i}a!g}a~P$&vO#k$saP$saR$sa[$saa$saj$sar$sa!S$sa!l$sa!p$sa#R$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#t$sa#u$sa#v$sa#x$sa#z$sa#{$sa'y$sa(`$sa(q$sa!k$sa!Y$sa'v$sav$sa!_$sa%i$sa!g$sa~P$'rO#k$uaP$uaR$ua[$uaa$uaj$uar$ua!S$ua!l$ua!p$ua#R$ua#n$ua#o$ua#p$ua#q$ua#r$ua#s$ua#t$ua#u$ua#v$ua#x$ua#z$ua#{$ua'y$ua(`$ua(q$ua!k$ua!Y$ua'v$uav$ua!_$ua%i$ua!g$ua~P$(eO#k%TaP%TaR%Ta[%Taa%Taj%Tar%Ta!S%Ta!]%Ta!l%Ta!p%Ta#R%Ta#n%Ta#o%Ta#p%Ta#q%Ta#r%Ta#s%Ta#t%Ta#u%Ta#v%Ta#x%Ta#z%Ta#{%Ta'y%Ta(`%Ta(q%Ta!k%Ta!Y%Ta'v%Ta#`%Tav%Ta!_%Ta%i%Ta!g%Ta~P#/XOa#cq!]#cq'y#cq'v#cq!Y#cq!k#cqv#cq!_#cq%i#cq!g#cq~P!:aO![3dO!]'XX!k'XX~P%[O!].oO!k(ja~O!].oO!k(ja~P!:aO!Y3gO~O$O!na!^!na~PKaO$O!ja!]!ja!^!ja~P#B]O$O!ra!^!ra~P!<wO$O!ta!^!ta~P!?_Og'[X!]'[X~P!+xO!].zOg(oa~OSfO!_3{O$d3|O~O!^4QO~Ov4RO~P#/XOa$mq!]$mq'y$mq'v$mq!Y$mq!k$mqv$mq!_$mq%i$mq!g$mq~P!:aO!Y4TO~P!&oO!S4UO~O!Q)|O'x)}O(y%POn'ha(x'ha!]'ha#`'ha~Og'ha$O'ha~P%,XO!Q)|O'x)}On'ja(x'ja(y'ja!]'ja#`'ja~Og'ja$O'ja~P%,zO(q$YO~P#/XO!YfX!Y$zX!]fX!]$zX!g%RX#`fX~P!/wO(S<xO~P!1jO!S%gO![4XO!_%hO(S%fO!]'dX!k'dX~O!]/kO!k(}a~O!]/kO!g#vO!k(}a~O!]/kO!g#vO(q'nO!k(}a~Og$|i!]$|i#`$|i$O$|i~P!0{O![4aO!Y'fX!]'fX~P!3iO!]/sO!Y)Oa~O!]/sO!Y)Oa~P#/XOP]XR]X[]Xj]Xr]X!Q]X!S]X!Y]X!]]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X~Oj%YX!g%YX~P%0kOj4fO!g#vO~Oh%VO!g#vO!l%dO~Oh%VOr4kO!l%dO(q'nO~Or4pO!g#vO(q'nO~Os!nO!S4qO(UTO(XUO(d!mO~O(x$}On%ai!Q%ai'x%ai(y%ai!]%ai#`%ai~Og%ai$O%ai~P%4[O(y%POn%ci!Q%ci'x%ci(x%ci!]%ci#`%ci~Og%ci$O%ci~P%4}Og(^i!](^i~P!0{O#`4wOg(^i!](^i~P!0{O!k4zO~Oa$oq!]$oq'y$oq'v$oq!Y$oq!k$oqv$oq!_$oq%i$oq!g$oq~P!:aO!Y5QO~O!]5RO!_)PX~P#/XOa$zX!_$zX%^]X'y$zX!]$zX~P!/wO%^5UOaoXnoX!QoX!_oX'xoX'yoX(xoX(yoX!]oX~Op5VO(S#nO~O%^5UO~Ob5]O%j5^O(S+nO(UTO(XUO!]'sX!^'sX~O!]0}O!^)Wa~O[5bO~O`5cO~Oa%mO'y%mO~P#/XO!]5kO#`5mO!^)TX~O!^5nO~Or5tOs!nO!S*fO!b!yO!c!vO!d!vO!|;wO#T!pO#U!pO#V!pO#W!pO#X!pO#[5sO#]!zO(T!lO(UTO(XUO(d!mO(n!sO~O!^5rO~P%:YOn5yO!_1gO%i5xO~Oh%VOn5yO!_1gO%i5xO~Ob6QO(S#nO(UTO(XUO!]'rX!^'rX~O!]1rO!^)Ua~O(UTO(XUO(d6SO~O`6WO~Oj6ZO&Z6[O~PM|O!k6]O~P%[Oa6_O~Oa6_O~P%[Ob2YO!^6dO&i2XO~P`O!g6fO~O!g6hOh(ii!](ii!^(ii!g(ii!l(iir(ii(q(ii~O!]#hi!^#hi~P#B]O#`6iO!]#hi!^#hi~O!]!ai!^!ai~P#B]Oa%mO#`6rO'y%mO~Oa%mO!g#vO#`6rO'y%mO~O!](sq!k(sqa(sq'y(sq~P!:aO!](hO!k(rq~O!S%gO!_%hO#j6yO(S%fO~O!_'^O%i6|O~On7QO!_'^O%i6|O~O#k'haP'haR'ha['haa'haj'har'ha!S'ha!l'ha!p'ha#R'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#v'ha#x'ha#z'ha#{'ha'y'ha(`'ha(q'ha!k'ha!Y'ha'v'hav'ha!_'ha%i'ha!g'ha~P%,XO#k'jaP'jaR'ja['jaa'jaj'jar'ja!S'ja!l'ja!p'ja#R'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#v'ja#x'ja#z'ja#{'ja'y'ja(`'ja(q'ja!k'ja!Y'ja'v'jav'ja!_'ja%i'ja!g'ja~P%,zO#k$|iP$|iR$|i[$|ia$|ij$|ir$|i!S$|i!]$|i!l$|i!p$|i#R$|i#n$|i#o$|i#p$|i#q$|i#r$|i#s$|i#t$|i#u$|i#v$|i#x$|i#z$|i#{$|i'y$|i(`$|i(q$|i!k$|i!Y$|i'v$|i#`$|iv$|i!_$|i%i$|i!g$|i~P#/XO#k%aiP%aiR%ai[%aia%aij%air%ai!S%ai!l%ai!p%ai#R%ai#n%ai#o%ai#p%ai#q%ai#r%ai#s%ai#t%ai#u%ai#v%ai#x%ai#z%ai#{%ai'y%ai(`%ai(q%ai!k%ai!Y%ai'v%aiv%ai!_%ai%i%ai!g%ai~P%4[O#k%ciP%ciR%ci[%cia%cij%cir%ci!S%ci!l%ci!p%ci#R%ci#n%ci#o%ci#p%ci#q%ci#r%ci#s%ci#t%ci#u%ci#v%ci#x%ci#z%ci#{%ci'y%ci(`%ci(q%ci!k%ci!Y%ci'v%civ%ci!_%ci%i%ci!g%ci~P%4}O!]'Xa!k'Xa~P!:aO!].oO!k(ji~O$O#ci!]#ci!^#ci~P#B]OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O(`VO[#mij#mir#mi#R#mi#o#mi#p#mi#q#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#n#mi~P%MXO#n<PO~P%MXOP$[OR#zOr<]O!Q#yO!S#{O!l#xO!p$[O#n<PO#o<QO#p<QO#q<QO(`VO[#mij#mi#R#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#r#mi~P& aO#r<RO~P& aOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O(`VO#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#v#mi~P&#iOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO(`VO(y#}O#z#mi#{#mi$O#mi(q#mi(x#mi!]#mi!^#mi~O#x<VO~P&%jO#x#mi~P&%jO#v<TO~P&#iOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO#x<VO(`VO(x#|O(y#}O#{#mi$O#mi(q#mi!]#mi!^#mi~O#z#mi~P&'yO#z<XO~P&'yOa#|y!]#|y'y#|y'v#|y!Y#|y!k#|yv#|y!_#|y%i#|y!g#|y~P!:aO[#mij#mir#mi#R#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi!]#mi!^#mi~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O#n<PO#o<QO#p<QO#q<QO(`VO(x#mi(y#mi~P&*uOn=}O!Q)|O'x)}O(x$}O(y%POP#miR#mi!S#mi!l#mi!p#mi#n#mi#o#mi#p#mi#q#mi(`#mi~P&*uO#S$dOP(_XR(_X[(_Xj(_Xn(_Xr(_X!Q(_X!S(_X!l(_X!p(_X#R(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#t(_X#u(_X#v(_X#x(_X#z(_X#{(_X$O(_X'x(_X(`(_X(q(_X(x(_X(y(_X!](_X!^(_X~O$O$Pi!]$Pi!^$Pi~P#B]O$O!ri!^!ri~P$*bOg'[a!]'[a~P!0{O!^7dO~O!]'ca!^'ca~P#B]O!Y7eO~P#/XO!g#vO(q'nO!]'da!k'da~O!]/kO!k(}i~O!]/kO!g#vO!k(}i~Og$|q!]$|q#`$|q$O$|q~P!0{O!Y'fa!]'fa~P#/XO!g7lO~O!]/sO!Y)Oi~P#/XO!]/sO!Y)Oi~O!Y7oO~Oh%VOr7tO!l%dO(q'nO~Oj7vO!g#vO~Or7yO!g#vO(q'nO~O!Q)|O'x)}O(y%POn'ia(x'ia!]'ia#`'ia~Og'ia$O'ia~P&3vO!Q)|O'x)}On'ka(x'ka(y'ka!]'ka#`'ka~Og'ka$O'ka~P&4iO!Y7{O~Og%Oq!]%Oq#`%Oq$O%Oq~P!0{Og(^q!](^q~P!0{O#`7|Og(^q!](^q~P!0{Oa$oy!]$oy'y$oy'v$oy!Y$oy!k$oyv$oy!_$oy%i$oy!g$oy~P!:aO!g6hO~O!]5RO!_)Pa~O!_'^OP$TaR$Ta[$Taj$Tar$Ta!Q$Ta!S$Ta!]$Ta!l$Ta!p$Ta#R$Ta#n$Ta#o$Ta#p$Ta#q$Ta#r$Ta#s$Ta#t$Ta#u$Ta#v$Ta#x$Ta#z$Ta#{$Ta(`$Ta(q$Ta(x$Ta(y$Ta~O%i6|O~P&7ZO%^8QOa%[i!_%[i'y%[i!]%[i~Oa#cy!]#cy'y#cy'v#cy!Y#cy!k#cyv#cy!_#cy%i#cy!g#cy~P!:aO[8SO~Ob8UO(S+nO(UTO(XUO~O!]0}O!^)Wi~O`8YO~O(d(zO!]'oX!^'oX~O!]5kO!^)Ta~O!^8cO~P%:YO(n!sO~P$${O#[8dO~O!_1gO~O!_1gO%i8fO~On8iO!_1gO%i8fO~O[8nO!]'ra!^'ra~O!]1rO!^)Ui~O!k8rO~O!k8sO~O!k8vO~O!k8vO~P%[Oa8xO~O!g8yO~O!k8zO~O!](vi!^(vi~P#B]Oa%mO#`9SO'y%mO~O!](sy!k(sya(sy'y(sy~P!:aO!](hO!k(ry~O%i9VO~P&7ZO!_'^O%i9VO~O#k$|qP$|qR$|q[$|qa$|qj$|qr$|q!S$|q!]$|q!l$|q!p$|q#R$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#t$|q#u$|q#v$|q#x$|q#z$|q#{$|q'y$|q(`$|q(q$|q!k$|q!Y$|q'v$|q#`$|qv$|q!_$|q%i$|q!g$|q~P#/XO#k'iaP'iaR'ia['iaa'iaj'iar'ia!S'ia!l'ia!p'ia#R'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#v'ia#x'ia#z'ia#{'ia'y'ia(`'ia(q'ia!k'ia!Y'ia'v'iav'ia!_'ia%i'ia!g'ia~P&3vO#k'kaP'kaR'ka['kaa'kaj'kar'ka!S'ka!l'ka!p'ka#R'ka#n'ka#o'ka#p'ka#q'ka#r'ka#s'ka#t'ka#u'ka#v'ka#x'ka#z'ka#{'ka'y'ka(`'ka(q'ka!k'ka!Y'ka'v'kav'ka!_'ka%i'ka!g'ka~P&4iO#k%OqP%OqR%Oq[%Oqa%Oqj%Oqr%Oq!S%Oq!]%Oq!l%Oq!p%Oq#R%Oq#n%Oq#o%Oq#p%Oq#q%Oq#r%Oq#s%Oq#t%Oq#u%Oq#v%Oq#x%Oq#z%Oq#{%Oq'y%Oq(`%Oq(q%Oq!k%Oq!Y%Oq'v%Oq#`%Oqv%Oq!_%Oq%i%Oq!g%Oq~P#/XO!]'Xi!k'Xi~P!:aO$O#cq!]#cq!^#cq~P#B]O(x$}OP%aaR%aa[%aaj%aar%aa!S%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa$O%aa(`%aa(q%aa!]%aa!^%aa~On%aa!Q%aa'x%aa(y%aa~P&HnO(y%POP%caR%ca[%caj%car%ca!S%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca$O%ca(`%ca(q%ca!]%ca!^%ca~On%ca!Q%ca'x%ca(x%ca~P&JuOn=}O!Q)|O'x)}O(y%PO~P&HnOn=}O!Q)|O'x)}O(x$}O~P&JuOR0cO!Q0cO!S0dO#S$dOP}a[}aj}an}ar}a!l}a!p}a#R}a#n}a#o}a#p}a#q}a#r}a#s}a#t}a#u}a#v}a#x}a#z}a#{}a$O}a'x}a(`}a(q}a(x}a(y}a!]}a!^}a~O!Q)|O'x)}OP$saR$sa[$saj$san$sar$sa!S$sa!l$sa!p$sa#R$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#t$sa#u$sa#v$sa#x$sa#z$sa#{$sa$O$sa(`$sa(q$sa(x$sa(y$sa!]$sa!^$sa~O!Q)|O'x)}OP$uaR$ua[$uaj$uan$uar$ua!S$ua!l$ua!p$ua#R$ua#n$ua#o$ua#p$ua#q$ua#r$ua#s$ua#t$ua#u$ua#v$ua#x$ua#z$ua#{$ua$O$ua(`$ua(q$ua(x$ua(y$ua!]$ua!^$ua~On=}O!Q)|O'x)}O(x$}O(y%PO~OP%TaR%Ta[%Taj%Tar%Ta!S%Ta!l%Ta!p%Ta#R%Ta#n%Ta#o%Ta#p%Ta#q%Ta#r%Ta#s%Ta#t%Ta#u%Ta#v%Ta#x%Ta#z%Ta#{%Ta$O%Ta(`%Ta(q%Ta!]%Ta!^%Ta~P'%zO$O$mq!]$mq!^$mq~P#B]O$O$oq!]$oq!^$oq~P#B]O!^9dO~O$O9eO~P!0{O!g#vO!]'di!k'di~O!g#vO(q'nO!]'di!k'di~O!]/kO!k(}q~O!Y'fi!]'fi~P#/XO!]/sO!Y)Oq~Or9lO!g#vO(q'nO~O[9nO!Y9mO~P#/XO!Y9mO~Oj9tO!g#vO~Og(^y!](^y~P!0{O!]'ma!_'ma~P#/XOa%[q!_%[q'y%[q!]%[q~P#/XO[9yO~O!]0}O!^)Wq~O#`9}O!]'oa!^'oa~O!]5kO!^)Ti~P#B]O!S:PO~O!_1gO%i:SO~O(UTO(XUO(d:XO~O!]1rO!^)Uq~O!k:[O~O!k:]O~O!k:^O~O!k:^O~P%[O#`:aO!]#hy!^#hy~O!]#hy!^#hy~P#B]O%i:fO~P&7ZO!_'^O%i:fO~O$O#|y!]#|y!^#|y~P#B]OP$|iR$|i[$|ij$|ir$|i!S$|i!l$|i!p$|i#R$|i#n$|i#o$|i#p$|i#q$|i#r$|i#s$|i#t$|i#u$|i#v$|i#x$|i#z$|i#{$|i$O$|i(`$|i(q$|i!]$|i!^$|i~P'%zO!Q)|O'x)}O(y%POP'haR'ha['haj'han'har'ha!S'ha!l'ha!p'ha#R'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#v'ha#x'ha#z'ha#{'ha$O'ha(`'ha(q'ha(x'ha!]'ha!^'ha~O!Q)|O'x)}OP'jaR'ja['jaj'jan'jar'ja!S'ja!l'ja!p'ja#R'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#v'ja#x'ja#z'ja#{'ja$O'ja(`'ja(q'ja(x'ja(y'ja!]'ja!^'ja~O(x$}OP%aiR%ai[%aij%ain%air%ai!Q%ai!S%ai!l%ai!p%ai#R%ai#n%ai#o%ai#p%ai#q%ai#r%ai#s%ai#t%ai#u%ai#v%ai#x%ai#z%ai#{%ai$O%ai'x%ai(`%ai(q%ai(y%ai!]%ai!^%ai~O(y%POP%ciR%ci[%cij%cin%cir%ci!Q%ci!S%ci!l%ci!p%ci#R%ci#n%ci#o%ci#p%ci#q%ci#r%ci#s%ci#t%ci#u%ci#v%ci#x%ci#z%ci#{%ci$O%ci'x%ci(`%ci(q%ci(x%ci!]%ci!^%ci~O$O$oy!]$oy!^$oy~P#B]O$O#cy!]#cy!^#cy~P#B]O!g#vO!]'dq!k'dq~O!]/kO!k(}y~O!Y'fq!]'fq~P#/XOr:pO!g#vO(q'nO~O[:tO!Y:sO~P#/XO!Y:sO~Og(^!R!](^!R~P!0{Oa%[y!_%[y'y%[y!]%[y~P#/XO!]0}O!^)Wy~O!]5kO!^)Tq~O(S:zO~O!_1gO%i:}O~O!k;QO~O%i;VO~P&7ZOP$|qR$|q[$|qj$|qr$|q!S$|q!l$|q!p$|q#R$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#t$|q#u$|q#v$|q#x$|q#z$|q#{$|q$O$|q(`$|q(q$|q!]$|q!^$|q~P'%zO!Q)|O'x)}O(y%POP'iaR'ia['iaj'ian'iar'ia!S'ia!l'ia!p'ia#R'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#v'ia#x'ia#z'ia#{'ia$O'ia(`'ia(q'ia(x'ia!]'ia!^'ia~O!Q)|O'x)}OP'kaR'ka['kaj'kan'kar'ka!S'ka!l'ka!p'ka#R'ka#n'ka#o'ka#p'ka#q'ka#r'ka#s'ka#t'ka#u'ka#v'ka#x'ka#z'ka#{'ka$O'ka(`'ka(q'ka(x'ka(y'ka!]'ka!^'ka~OP%OqR%Oq[%Oqj%Oqr%Oq!S%Oq!l%Oq!p%Oq#R%Oq#n%Oq#o%Oq#p%Oq#q%Oq#r%Oq#s%Oq#t%Oq#u%Oq#v%Oq#x%Oq#z%Oq#{%Oq$O%Oq(`%Oq(q%Oq!]%Oq!^%Oq~P'%zOg%e!Z!]%e!Z#`%e!Z$O%e!Z~P!0{O!Y;ZO~P#/XOr;[O!g#vO(q'nO~O[;^O!Y;ZO~P#/XO!]'oq!^'oq~P#B]O!]#h!Z!^#h!Z~P#B]O#k%e!ZP%e!ZR%e!Z[%e!Za%e!Zj%e!Zr%e!Z!S%e!Z!]%e!Z!l%e!Z!p%e!Z#R%e!Z#n%e!Z#o%e!Z#p%e!Z#q%e!Z#r%e!Z#s%e!Z#t%e!Z#u%e!Z#v%e!Z#x%e!Z#z%e!Z#{%e!Z'y%e!Z(`%e!Z(q%e!Z!k%e!Z!Y%e!Z'v%e!Z#`%e!Zv%e!Z!_%e!Z%i%e!Z!g%e!Z~P#/XOr;fO!g#vO(q'nO~O!Y;gO~P#/XOr;nO!g#vO(q'nO~O!Y;oO~P#/XOP%e!ZR%e!Z[%e!Zj%e!Zr%e!Z!S%e!Z!l%e!Z!p%e!Z#R%e!Z#n%e!Z#o%e!Z#p%e!Z#q%e!Z#r%e!Z#s%e!Z#t%e!Z#u%e!Z#v%e!Z#x%e!Z#z%e!Z#{%e!Z$O%e!Z(`%e!Z(q%e!Z!]%e!Z!^%e!Z~P'%zOr;rO!g#vO(q'nO~Ov(eX~P1qO!Q%qO~P!)PO(T!lO~P!)PO!YfX!]fX#`fX~P%0kOP]XR]X[]Xj]Xr]X!Q]X!S]X!]]X!]fX!l]X!p]X#R]X#S]X#`]X#`fX#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X~O!gfX!k]X!kfX(qfX~P'JsOP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_XO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(S)ZO(UTO(XUO(`VO(n[O~O!]<ZO!^$qa~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<fO!S${O!_$|O!i=wO!l$xO#j<lO$W%_O$t<hO$v<jO$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~Ol)bO~P( iOr!eX(q!eX~P# }Or(iX(q(iX~P#!pO!^]X!^fX~P'JsO!YfX!Y$zX!]fX!]$zX#`fX~P!/wO#k<OO~O!g#vO#k<OO~O#`<`O~Oj<SO~O#`<pO!](vX!^(vX~O#`<`O!](tX!^(tX~O#k<qO~Og<sO~P!0{O#k<yO~O#k<zO~O!g#vO#k<{O~O!g#vO#k<qO~O$O<|O~P#B]O#k<}O~O#k=OO~O#k=TO~O#k=UO~O#k=VO~O#k=WO~O$O=XO~P!0{O$O=YO~P!0{Ok#S#T#U#W#X#[#i#j#u$n$t$v$y%]%^%h%i%j%q%s%v%w%y%{~'}T#o!X'{(T#ps#n#qr!Q'|$]'|(S$_(d~",
    goto: "$8g)[PPPPPP)]PP)`P)qP+R/WPPPP6bPP6xPP<pPPP@dP@zP@zPPP@zPCSP@zP@zP@zPCWPC]PCzPHtPPPHxPPPPHxK{PPPLRLsPHxPHxPP! RHxPPPHxPHxP!#YHxP!&p!'u!(OP!(r!(v!(r!,TPPPPPPP!,t!'uPP!-U!.vP!2SHxHx!2X!5e!:R!:R!>QPPP!>YHxPPPPPPPPP!AiP!BvPPHx!DXPHxPHxHxHxHxHxPHx!EkP!HuP!K{P!LP!LZ!L_!L_P!HrP!Lc!LcP# iP# mHxPHx# s#$xCW@zP@zP@z@zP#&V@z@z#(i@z#+a@z#-m@z@z#.]#0q#0q#0v#1P#0q#1[PP#0qP@z#1t@z#5s@z@z6bPPP#9xPPP#:c#:cP#:cP#:y#:cPP#;PP#:vP#:v#;d#:v#<O#<U#<X)`#<[)`P#<c#<c#<cP)`P)`P)`P)`PP)`P#<i#<lP#<l)`P#<pP#<sP)`P)`P)`P)`P)`P)`)`PP#<y#=P#=[#=b#=h#=n#=t#>S#>Y#>d#>j#>t#>z#?[#?b#@S#@f#@l#@r#AQ#Ag#C[#Cj#Cq#E]#Ek#G]#Gk#Gq#Gw#G}#HX#H_#He#Ho#IR#IXPPPPPPPPPPP#I_PPPPPPP#JS#MZ#Ns#Nz$ SPPP$&nP$&w$)p$0Z$0^$0a$1`$1c$1j$1rP$1x$1{P$2i$2m$3e$4s$4x$5`PP$5e$5k$5o$5r$5v$5z$6v$7_$7v$7z$7}$8Q$8W$8Z$8_$8cR!|RoqOXst!Z#d%l&p&r&s&u,n,s2S2VY!vQ'^-`1g5qQ%svQ%{yQ&S|Q&h!VS'U!e-WQ'd!iS'j!r!yU*h$|*X*lQ+l%|Q+y&UQ,_&bQ-^']Q-h'eQ-p'kQ0U*nQ1q,`R<m;z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9SS#q];w!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU*{%[<e<fQ+q&OQ,a&eQ,h&mQ0r+dQ0w+fQ1S+rQ1y,fQ3W.bQ5V0vQ5]0}Q6Q1rQ7O3[Q8U5^R9Y7Q'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s!S!nQ!r!v!y!z$|'U']'^'j'k'l*h*l*n*o-W-^-`-p0U0X1g5q5s%[$ti#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q&V|Q'S!eS'Y%h-ZQ+q&OQ,a&eQ0f+OQ1S+rQ1X+xQ1x,eQ1y,fQ5]0}Q5f1ZQ6Q1rQ6T1tQ6U1wQ8U5^Q8X5cQ8q6WQ9|8YQ:Y8nR<o*XrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR,c&i&z^OPXYstuvwz!Z!`!g!j!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=r=s[#]WZ#W#Z'V(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ%vxQ%zyS&P|&UQ&]!TQ'a!hQ'c!iQ(o#sS+k%{%|Q+o&OQ,Y&`Q,^&bS-g'd'eQ.d(pQ0{+lQ1R+rQ1T+sQ1W+wQ1l,ZS1p,_,`Q2t-hQ5[0}Q5`1QQ5e1YQ6P1qQ8T5^Q8W5bQ9x8SR:w9y!U$zi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y!^%xy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pQ+e%vQ,O&YQ,R&ZQ,]&bQ.c(oQ1k,YU1o,^,_,`Q3].dQ5z1lS6O1p1qQ8m6P#f=t#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o=u<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YW%Ti%V*v=pS&Y!Q&gQ&Z!RQ&[!SQ+S%cR+|&W%]%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}T)x$u)yV*{%[<e<fW'Y!e%h*X-ZS({#y#zQ+`%qQ+v&RS.](k(lQ1b,SQ4x0cR8^5k'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s$i$^c#Y#e%p%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.w.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gT#TV#U'RkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ'W!eR2i-W!W!nQ!e!r!v!y!z$|'U']'^'j'k'l*X*h*l*n*o-W-^-`-p0U0X1g5q5sR1d,UnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&w!^Q't!xS(q#u<OQ+i%yQ,W&]Q,X&_Q-e'bQ-r'mS.m(v<qS0k+U<{Q0y+jQ1f,VQ2Z,uQ2],vQ2e-RQ2r-fQ2u-jS5P0l=VQ5W0zS5Z0|=WQ6j2gQ6n2sQ6s2zQ8R5XQ8}6lQ9O6oQ9R6tR:`8z$d$]c#Y#e%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gS(m#p'gQ(}#zS+_%p.wS.^(l(nR3U._'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS#q];wQ&r!XQ&s!YQ&u![Q&v!]R2R,qQ'_!hQ+b%vQ-c'aS.`(o+eQ2p-bW3Y.c.d0q0sQ6m2qW6z3V3X3]5TU9U6{6}7PU:e9W9X9ZS;T:d:gQ;b;UR;j;cU!wQ'^-`T5o1g5q!Q_OXZ`st!V!Z#d#h%d%l&g&i&p&r&s&u(h,n,s.V2S2V]!pQ!r'^-`1g5qT#q];w%^{OPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS({#y#zS.](k(l!s=^$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU$fd)],hS(n#p'gU*s%R(u3vU0e*z.i7]Q5T0rQ6{3WQ9X7OR:g9Ym!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sQ'r!uS(d#g1|S-n'i'uQ/n*ZQ/{*gQ2|-qQ4]/oQ4i/}Q4j0OQ4o0WQ7h4WS7s4k4mS7w4p4rQ9g7iQ9k7oQ9p7tQ9u7yS:o9l9mS;Y:p:sS;e;Z;[S;m;f;gS;q;n;oR;t;rQ#wbQ'q!uS(c#g1|S(e#m+TQ+V%eQ+g%wQ+m%}U-m'i'r'uQ.R(dQ/m*ZQ/|*gQ0P*iQ0x+hQ1m,[S2y-n-qQ3R.ZS4[/n/oQ4e/yS4h/{0WQ4l0QQ5|1nQ6u2|Q7g4WQ7k4]U7r4i4o4rQ7u4nQ8k5}S9f7h7iQ9j7oQ9r7wQ9s7xQ:V8lQ:m9gS:n9k9mQ:v9uQ;P:WS;X:o:sS;d;Y;ZS;l;e;gS;p;m;oQ;s;qQ;u;tQ=a=[Q=l=eR=m=fV!wQ'^-`%^aOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS#wz!j!r=Z$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=a=r%^bOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SQ%ej!^%wy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pS%}z!jQ+h%xQ,[&bW1n,],^,_,`U5}1o1p1qS8l6O6PQ:W8m!r=[$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ=e=qR=f=r%QeOPXYstuvw!Z!`!g!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SY#bWZ#W#Z(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ,i&m!p=]$Z$n)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=`'VU'Z!e%h*XR2k-Z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9S!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ,h&mQ0r+dQ3W.bQ7O3[R9Y7Q!b$Tc#Y%p(Q(W(r(w)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!P<U)[)o-U.w2c2f3h3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!f$Vc#Y%p(Q(W(r(w)U)V)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!T<W)[)o-U.w2c2f3h3n3o3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!^$Zc#Y%p(Q(W(r(w)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;xQ4V/fz=s)[)o-U.w2c2f3h3w4P6k7W7a7b8`8|9[9b9c:y;R=gQ=x=zR=y={'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS$oh$pR3|/P'XgOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$kf$qQ$ifS)h$l)lR)t$qT$jf$qT)j$l)l'XhOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$oh$pQ$rhR)s$p%^jOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9S!s=q$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s#glOPXZst!Z!`!o#S#d#o#{$n%l&i&l&m&p&r&s&u&y'R'`(|)q*f+Y+d,k,n,s-d.b/Q/i0V0d1j1z1{1}2P2S2V2X3[3{4q5y6Z6[6_7Q8i8x!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}Q+P%`Q/^)|o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!U$yi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yQ*`$zU*i$|*X*lQ+Q%aQ0Q*j#f=c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n=d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YQ=h=tQ=i=uQ=j=vR=k=w!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YnoOXst!Z#d%l&p&r&s&u,n,s2S2VS*c${*WQ,|&|Q,}'OR4`/s%[%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q,P&ZQ1`,RQ5i1_R8]5jV*k$|*X*lU*k$|*X*lT5p1g5qS/y*f/iQ4n0VT7x4q:PQ+g%wQ0P*iQ0x+hQ1m,[Q5|1nQ8k5}Q:V8lR;P:W!U%Oi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yx*P$v)c*Q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=oS0Y*q0Z#f<a#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<b<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!d<t(s)a*Y*b.e.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={`<u3u7X7[7`9]:h:k;kS=P.g3aT=Q7Z9`!U%Qi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y|*R$v)c*S*q+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=oS0[*r0]#f<c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!h<v(s)a*Y*b.f.g.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={d<w3u7Y7Z7`9]9^:h:i:k;kS=R.h3bT=S7[9arnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ&d!UR,k&mrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR&d!UQ,T&[R1[+|snOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ1h,YS5w1k1lU8e5u5v5zS:R8g8hS:{:Q:TQ;_:|R;i;`Q&k!VR,d&gR6T1tR:Y8nS&P|&UR1T+sQ&p!WR,n&qR,t&vT2T,s2VR,x&wQ,w&wR2^,xQ'w!{R-t'wSsOtQ#dXT%os#dQ#OTR'y#OQ#RUR'{#RQ)y$uR/Z)yQ#UVR(O#UQ#XWU(U#X(V-{Q(V#YR-{(WQ-X'WR2j-XQ.p(wS3e.p3fR3f.qQ-`'^R2n-`Y!rQ'^-`1g5qR'h!rQ.{)cR3z.{U#_W%g*WU(]#_(^-|Q(^#`R-|(XQ-['ZR2l-[t`OXst!V!Z#d%l&g&i&p&r&s&u,n,s2S2VS#hZ%dU#r`#h.VR.V(hQ(i#jQ.S(eW.[(i.S3P6wQ3P.TR6w3QQ)l$lR/R)lQ$phR)r$pQ$`cU)_$`-w<[Q-w;xR<[)oQ/l*ZW4Y/l4Z7j9hU4Z/m/n/oS7j4[4]R9h7k$e*O$v(s)a)c*Y*b*q*r*|*}+R.g.h.j.k.l/Y/b/d/f/q/v0^0_0p1]3^3_3`3u3y4S4^4_4c4s4u4{4|4}5h7R7S7T7U7Z7[7^7_7`7f7m7p7z7}8P9]9^9_9i9q9v9w:h:i:j:k:l:q:u;W;];h;k=b=n=o=z={Q/t*bU4b/t4d7nQ4d/vR7n4cS*l$|*XR0S*lx*Q$v)c*q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=o!d.e(s)a*Y*b.g.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/c*Q.e7Xa7X3u7Z7[7`9]:h:k;kQ0Z*qQ3a.gU4t0Z3a9`R9`7Z|*S$v)c*q*r+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=o!h.f(s)a*Y*b.g.h.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/e*S.f7Ye7Y3u7Z7[7`9]9^:h:i:k;kQ0]*rQ3b.hU4v0]3b9aR9a7[Q*w%UR0a*wQ5S0pR8O5SQ+[%jR0o+[Q5l1bS8_5l:OR:O8`Q,V&]R1e,VQ5q1gR8b5qQ1s,aS6R1s8oR8o6TQ1O+oW5_1O5a8V9zQ5a1RQ8V5`R9z8WQ+t&PR1U+tQ2V,sR6c2VYrOXst#dQ&t!ZQ+^%lQ,m&pQ,o&rQ,p&sQ,r&uQ2Q,nS2T,s2VR6b2SQ%npQ&x!_Q&{!aQ&}!bQ'P!cQ'o!uQ+]%kQ+i%yQ+{&VQ,c&kQ,z&zW-k'i'q'r'uQ-r'mQ0R*kQ0y+jS1v,d,gQ2_,yQ2`,|Q2a,}Q2u-jW2w-m-n-q-sQ5W0zQ5d1XQ5g1]Q5{1mQ6V1xQ6a2RU6p2v2y2|Q6s2zQ8R5XQ8Z5fQ8[5hQ8a5pQ8j5|Q8p6US9P6q6uQ9R6tQ9{8XQ:U8kQ:Z8qQ:b9QQ:x9|Q;O:VQ;S:cR;a;PQ%yyQ'b!iQ'm!uU+j%z%{%|Q-R'TU-f'c'd'eS-j'i'sQ/z*gS0z+k+lQ2g-TS2s-g-hQ2z-oS4g/{0OQ5X0{Q6l2mQ6o2tQ6t2{U7q4i4j4mQ9o7sR:r9pS$wi=pR*x%VU%Ui%V=pR0`*vQ$viS(s#v+fS)a$b$cQ)c$dQ*Y$xS*b${*WQ*q%OQ*r%QQ*|%]Q*}%^Q+R%bQ.g<aQ.h<cQ.j<gQ.k<iQ.l<kQ/Y)wQ/b*PQ/d*RQ/f*TQ/q*^S/v*d/hQ0^*tQ0_*ul0p+c,Q.a1a1i3Z5x6|8f9V:S:f:};VQ1]+}Q3^<tQ3_<vQ3`<yS3u<^<_Q3y.zS4S/_4UQ4^/rQ4_/sQ4c/uQ4s0YQ4u0[Q4{0gQ4|0hQ4}0iQ5h1^Q7R<}Q7S=PQ7T=RQ7U=TQ7Z<bQ7[<dQ7^<hQ7_<jQ7`<lQ7f4VQ7m4aQ7p4fQ7z4wQ7}5RQ8P5UQ9]<zQ9^<uQ9_<wQ9i7lQ9q7vQ9v7|Q9w8QQ:h=OQ:i=QQ:j=SQ:k=UQ:l9eQ:q9nQ:u9tQ;W=XQ;]:tQ;h;^Q;k=YQ=b=pQ=n=xQ=o=yQ=z=|R={=}Q*z%[Q.i<eR7]<fnpOXst!Z#d%l&p&r&s&u,n,s2S2VQ!fPS#fZ#oQ&z!`W'f!o*f0V4qQ'}#SQ)O#{Q)p$nS,g&i&lQ,l&mQ,y&yS-O'R/iQ-b'`Q.s(|Q/V)qQ0m+YQ0s+dQ2O,kQ2q-dQ3X.bQ4O/QQ4y0dQ5v1jQ6X1zQ6Y1{Q6^1}Q6`2PQ6e2XQ7P3[Q7c3{Q8h5yQ8t6ZQ8u6[Q8w6_Q9Z7QQ:T8iR:_8x#[cOPXZst!Z!`!o#d#o#{%l&i&l&m&p&r&s&u&y'R'`(|*f+Y+d,k,n,s-d.b/i0V0d1j1z1{1}2P2S2V2X3[4q5y6Z6[6_7Q8i8xQ#YWQ#eYQ%puQ%rvS%tw!gS(Q#W(TQ(W#ZQ(r#uQ(w#xQ)P$OQ)Q$PQ)R$QQ)S$RQ)T$SQ)U$TQ)V$UQ)W$VQ)X$WQ)Y$XQ)[$ZQ)^$_Q)`$aQ)e$eW)o$n)q/Q3{Q+a%sQ+u&QS-U'V2hQ-s'pS-x(R-zQ-}(ZQ.P(bQ.n(vQ.q(xQ.u;vQ.w;yQ.x;zQ.y;}Q/]){Q0j+UQ2c-PQ2f-SQ2v-lQ2}.QQ3c.oQ3h<OQ3i<PQ3j<QQ3k<RQ3l<SQ3m<TQ3n<UQ3o<VQ3p<WQ3q<XQ3r<YQ3s.vQ3t<]Q3w<`Q3x<mQ4P<ZQ5O0lQ5Y0|Q6k<pQ6q2xQ6v3OQ7V3dQ7W<qQ7a<sQ7b<{Q8`5mQ8|6iQ9Q6rQ9[<|Q9b=VQ9c=WQ:c9SQ:y9}Q;R:aQ;x#SR=g=sR#[WR'X!el!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sS'T!e-WU*g$|*X*lS-T'U']S0O*h*nQ0W*oQ2m-^Q4m0UR4r0XR(y#xQ!fQT-_'^-`]!qQ!r'^-`1g5qQ#p]R'g;wR)d$dY!uQ'^-`1g5qQ'i!rS's!v!yS'u!z5sS-o'j'kQ-q'lR2{-pT#kZ%dS#jZ%dS%jm,jU(e#h#i#lS.T(f(gQ.X(hQ0n+ZQ3Q.UU3R.V.W.YS6x3S3TR9T6yd#^W#W#Z%g(R([*W+W.O/hr#gZm#h#i#l%d(f(g(h+Z.U.V.W.Y3S3T6yS*Z$x*_Q/o*[Q1|,jQ2d-QQ4W/kQ6g2[Q7i4XQ8{6hT=_'V+XV#aW%g*WU#`W%g*WS(S#W([U(X#Z+W/hS-V'V+XT-y(R.OV'[!e%h*XQ$lfR)v$qT)k$l)lR3}/PT*]$x*_T*e${*WQ0q+cQ1_,QQ3V.aQ5j1aQ5u1iQ6}3ZQ8g5xQ9W6|Q:Q8fQ:d9VQ:|:SQ;U:fQ;`:}R;c;VnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&j!VR,c&gtmOXst!U!V!Z#d%l&g&p&r&s&u,n,s2S2VR,j&mT%km,jR1c,SR,b&eQ&T|R+z&UR+p&OT&n!W&qT&o!W&qT2U,s2V",
    nodeNames: "\u26A0 ArithOp ArithOp ?. JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList in out const TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewTarget new NewExpression ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression TypeArgList CompareOp < declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression InstantiationExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast < ArrowFunction TypeParamList SequenceExpression InstantiationExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate asserts is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",
    maxTerm: 379,
    context: trackNewline,
    nodeProps: [
      ["isolate", -8, 5, 6, 14, 37, 39, 51, 53, 55, ""],
      ["group", -26, 9, 17, 19, 68, 207, 211, 215, 216, 218, 221, 224, 234, 236, 242, 244, 246, 248, 251, 257, 263, 265, 267, 269, 271, 273, 274, "Statement", -34, 13, 14, 32, 35, 36, 42, 51, 54, 55, 57, 62, 70, 72, 76, 80, 82, 84, 85, 110, 111, 120, 121, 136, 139, 141, 142, 143, 144, 145, 147, 148, 167, 169, 171, "Expression", -23, 31, 33, 37, 41, 43, 45, 173, 175, 177, 178, 180, 181, 182, 184, 185, 186, 188, 189, 190, 201, 203, 205, 206, "Type", -3, 88, 103, 109, "ClassItem"],
      ["openedBy", 23, "<", 38, "InterpolationStart", 56, "[", 60, "{", 73, "(", 160, "JSXStartCloseTag"],
      ["closedBy", -2, 24, 168, ">", 40, "InterpolationEnd", 50, "]", 61, "}", 74, ")", 165, "JSXEndTag"]
    ],
    propSources: [jsHighlight],
    skippedNodes: [0, 5, 6, 277],
    repeatNodeCount: 37,
    tokenData: "$Fq07[R!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#:O!R![#<_![!]#I_!]!^#Jk!^!_#Ku!_!`$![!`!a$$v!a!b$*T!b!c$,r!c!}Er!}#O$-|#O#P$/W#P#Q$4o#Q#R$5y#R#SEr#S#T$7W#T#o$8b#o#p$<r#p#q$=h#q#r$>x#r#s$@U#s$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$I|Er$I|$I}$Dk$I}$JO$Dk$JO$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr(n%d_$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$i&j(Y!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(Y!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$i&j(VpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(VpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z07[+rq$i&j(Vp(Y!b'{0/lOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z07[.ST(W#S$i&j'|0/lO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c07[.n_$i&j(Vp(Y!b'|0/lOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)3p/x`$i&j!p),Q(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW1V`#v(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW2d_#v(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At3l_(U':f$i&j(Y!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$i&j(Y!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$i&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$d`$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$d``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$d`$i&j(Y!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(Y!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$d`(Y!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k%9[:hh$i&j(Vp(Y!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__WS$i&j(Vp(Y!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]WS$i&j(Y!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXWS$i&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSWSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWWS(Y!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]WS$i&j(VpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWWS(VpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYWS(Vp(Y!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S%9[C}i$i&j(n%1l(Vp(Y!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr%9[EoP;=`<%lCr07[FRk$i&j(Vp(Y!b$]#t(S,2j(d$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$i&j(Vp(Y!b$]#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv07[JPP;=`<%lEr(KWJ_`$i&j(Vp(Y!b#p(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWKl_$i&j$Q(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,#xLva(y+JY$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWNW`$i&j#z(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At! c_(X';W$i&j(VpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$i&j(VpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$i&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$d`$i&j(VpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(VpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$d`(VpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b/5|!'t_!l/.^$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&U!)O_!k!Lf$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n!*[b$i&j(Vp(Y!b(T%&f#q(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW!+o`$i&j(Vp(Y!b#n(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;x!,|`$i&j(Vp(Y!br+4YOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,$U!.Z_!]+Jf$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!/ec$i&j(Vp(Y!b!Q.2^OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!0ya$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!2Z_![!L^$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!3eg$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!5Vg$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!6wc$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!8_c$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!9uf$i&j(Vp(Y!b#o(ChOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcxz!;Zz{#-}{!P!;Z!P!Q#/d!Q!^!;Z!^!_#(i!_!`#7S!`!a#8i!a!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z?O!;fb$i&j(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z>^!<w`$i&j(Y!b!X7`OY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eq!Q!^!<n!^!_!Gr!_!}!<n!}#O!KS#O#P!Dy#P#o!<n#o#p!Gr#p;'S!<n;'S;=`!L]<%lO!<n<z!>Q^$i&j!X7`OY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@c!_!}!=y!}#O!CW#O#P!Dy#P#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!?Td$i&j!X7`O!^&c!_#W&c#W#X!>|#X#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#k!>|#k#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&c7`!@hX!X7`OY!@cZ!P!@c!P!Q!AT!Q!}!@c!}#O!Ar#O#P!Bq#P;'S!@c;'S;=`!CQ<%lO!@c7`!AYW!X7`#W#X!AT#Z#[!AT#]#^!AT#a#b!AT#g#h!AT#i#j!AT#j#k!AT#m#n!AT7`!AuVOY!ArZ#O!Ar#O#P!B[#P#Q!@c#Q;'S!Ar;'S;=`!Bk<%lO!Ar7`!B_SOY!ArZ;'S!Ar;'S;=`!Bk<%lO!Ar7`!BnP;=`<%l!Ar7`!BtSOY!@cZ;'S!@c;'S;=`!CQ<%lO!@c7`!CTP;=`<%l!@c<z!C][$i&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#O!CW#O#P!DR#P#Q!=y#Q#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DWX$i&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DvP;=`<%l!CW<z!EOX$i&jOY!=yYZ&cZ!^!=y!^!_!@c!_#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!EnP;=`<%l!=y>^!Ezl$i&j(Y!b!X7`OY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#W&}#W#X!Eq#X#Z&}#Z#[!Eq#[#]&}#]#^!Eq#^#a&}#a#b!Eq#b#g&}#g#h!Eq#h#i&}#i#j!Eq#j#k!Eq#k#m&}#m#n!Eq#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}8r!GyZ(Y!b!X7`OY!GrZw!Grwx!@cx!P!Gr!P!Q!Hl!Q!}!Gr!}#O!JU#O#P!Bq#P;'S!Gr;'S;=`!J|<%lO!Gr8r!Hse(Y!b!X7`OY'}Zw'}x#O'}#P#W'}#W#X!Hl#X#Z'}#Z#[!Hl#[#]'}#]#^!Hl#^#a'}#a#b!Hl#b#g'}#g#h!Hl#h#i'}#i#j!Hl#j#k!Hl#k#m'}#m#n!Hl#n;'S'};'S;=`(f<%lO'}8r!JZX(Y!bOY!JUZw!JUwx!Arx#O!JU#O#P!B[#P#Q!Gr#Q;'S!JU;'S;=`!Jv<%lO!JU8r!JyP;=`<%l!JU8r!KPP;=`<%l!Gr>^!KZ^$i&j(Y!bOY!KSYZ&cZw!KSwx!CWx!^!KS!^!_!JU!_#O!KS#O#P!DR#P#Q!<n#Q#o!KS#o#p!JU#p;'S!KS;'S;=`!LV<%lO!KS>^!LYP;=`<%l!KS>^!L`P;=`<%l!<n=l!Ll`$i&j(Vp!X7`OY!LcYZ&cZr!Lcrs!=ys!P!Lc!P!Q!Mn!Q!^!Lc!^!_# o!_!}!Lc!}#O#%P#O#P!Dy#P#o!Lc#o#p# o#p;'S!Lc;'S;=`#&Y<%lO!Lc=l!Mwl$i&j(Vp!X7`OY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#W(r#W#X!Mn#X#Z(r#Z#[!Mn#[#](r#]#^!Mn#^#a(r#a#b!Mn#b#g(r#g#h!Mn#h#i(r#i#j!Mn#j#k!Mn#k#m(r#m#n!Mn#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r8Q# vZ(Vp!X7`OY# oZr# ors!@cs!P# o!P!Q#!i!Q!}# o!}#O#$R#O#P!Bq#P;'S# o;'S;=`#$y<%lO# o8Q#!pe(Vp!X7`OY)rZr)rs#O)r#P#W)r#W#X#!i#X#Z)r#Z#[#!i#[#])r#]#^#!i#^#a)r#a#b#!i#b#g)r#g#h#!i#h#i)r#i#j#!i#j#k#!i#k#m)r#m#n#!i#n;'S)r;'S;=`*Z<%lO)r8Q#$WX(VpOY#$RZr#$Rrs!Ars#O#$R#O#P!B[#P#Q# o#Q;'S#$R;'S;=`#$s<%lO#$R8Q#$vP;=`<%l#$R8Q#$|P;=`<%l# o=l#%W^$i&j(VpOY#%PYZ&cZr#%Prs!CWs!^#%P!^!_#$R!_#O#%P#O#P!DR#P#Q!Lc#Q#o#%P#o#p#$R#p;'S#%P;'S;=`#&S<%lO#%P=l#&VP;=`<%l#%P=l#&]P;=`<%l!Lc?O#&kn$i&j(Vp(Y!b!X7`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#W%Z#W#X#&`#X#Z%Z#Z#[#&`#[#]%Z#]#^#&`#^#a%Z#a#b#&`#b#g%Z#g#h#&`#h#i%Z#i#j#&`#j#k#&`#k#m%Z#m#n#&`#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z9d#(r](Vp(Y!b!X7`OY#(iZr#(irs!Grsw#(iwx# ox!P#(i!P!Q#)k!Q!}#(i!}#O#+`#O#P!Bq#P;'S#(i;'S;=`#,`<%lO#(i9d#)th(Vp(Y!b!X7`OY*gZr*grs'}sw*gwx)rx#O*g#P#W*g#W#X#)k#X#Z*g#Z#[#)k#[#]*g#]#^#)k#^#a*g#a#b#)k#b#g*g#g#h#)k#h#i*g#i#j#)k#j#k#)k#k#m*g#m#n#)k#n;'S*g;'S;=`+Z<%lO*g9d#+gZ(Vp(Y!bOY#+`Zr#+`rs!JUsw#+`wx#$Rx#O#+`#O#P!B[#P#Q#(i#Q;'S#+`;'S;=`#,Y<%lO#+`9d#,]P;=`<%l#+`9d#,cP;=`<%l#(i?O#,o`$i&j(Vp(Y!bOY#,fYZ&cZr#,frs!KSsw#,fwx#%Px!^#,f!^!_#+`!_#O#,f#O#P!DR#P#Q!;Z#Q#o#,f#o#p#+`#p;'S#,f;'S;=`#-q<%lO#,f?O#-tP;=`<%l#,f?O#-zP;=`<%l!;Z07[#.[b$i&j(Vp(Y!b'}0/l!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z07[#/o_$i&j(Vp(Y!bT0/lOY#/dYZ&cZr#/drs#0nsw#/dwx#4Ox!^#/d!^!_#5}!_#O#/d#O#P#1p#P#o#/d#o#p#5}#p;'S#/d;'S;=`#6|<%lO#/d06j#0w]$i&j(Y!bT0/lOY#0nYZ&cZw#0nwx#1px!^#0n!^!_#3R!_#O#0n#O#P#1p#P#o#0n#o#p#3R#p;'S#0n;'S;=`#3x<%lO#0n05W#1wX$i&jT0/lOY#1pYZ&cZ!^#1p!^!_#2d!_#o#1p#o#p#2d#p;'S#1p;'S;=`#2{<%lO#1p0/l#2iST0/lOY#2dZ;'S#2d;'S;=`#2u<%lO#2d0/l#2xP;=`<%l#2d05W#3OP;=`<%l#1p01O#3YW(Y!bT0/lOY#3RZw#3Rwx#2dx#O#3R#O#P#2d#P;'S#3R;'S;=`#3r<%lO#3R01O#3uP;=`<%l#3R06j#3{P;=`<%l#0n05x#4X]$i&j(VpT0/lOY#4OYZ&cZr#4Ors#1ps!^#4O!^!_#5Q!_#O#4O#O#P#1p#P#o#4O#o#p#5Q#p;'S#4O;'S;=`#5w<%lO#4O00^#5XW(VpT0/lOY#5QZr#5Qrs#2ds#O#5Q#O#P#2d#P;'S#5Q;'S;=`#5q<%lO#5Q00^#5tP;=`<%l#5Q05x#5zP;=`<%l#4O01p#6WY(Vp(Y!bT0/lOY#5}Zr#5}rs#3Rsw#5}wx#5Qx#O#5}#O#P#2d#P;'S#5};'S;=`#6v<%lO#5}01p#6yP;=`<%l#5}07[#7PP;=`<%l#/d)3h#7ab$i&j$Q(Ch(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;ZAt#8vb$Z#t$i&j(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z'Ad#:Zp$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#U%Z#U#V#?i#V#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#d#Bq#d#l%Z#l#m#Es#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#<jk$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#>j_$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#?rd$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#A]f$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Bzc$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Dbe$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#E|g$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Gpi$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x#Il_!g$b$i&j$O)Lv(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Jv_al$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f#LS^h#)`#R-<U(Vp(Y!b$n7`OY*gZr*grs'}sw*gwx)rx!P*g!P!Q#MO!Q!^*g!^!_#Mt!_!`$ f!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#MXX$k&j(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El#M}Z#r(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Np!`#O*g#P;'S*g;'S;=`+Z<%lO*g(El#NyX$Q(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El$ oX#s(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g*)x$!ga#`*!Y$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$#l!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(K[$#w_#k(Cl$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x$%Vag!*r#s(Ch$f#|$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$&[!`!a$'f!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$&g_#s(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$'qa#r(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$(v!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$)R`#r(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(Kd$*`a(q(Ct$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!a%Z!a!b$+e!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$+p`$i&j#{(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`$,}_!|$Ip$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f$.X_!S0,v$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/]Z$i&jO!^$0O!^!_$0f!_#i$0O#i#j$0k#j#l$0O#l#m$2^#m#o$0O#o#p$0f#p;'S$0O;'S;=`$4i<%lO$0O(n$0VT_#S$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0kO_#S(n$0p[$i&jO!Q&c!Q![$1f![!^&c!_!c&c!c!i$1f!i#T&c#T#Z$1f#Z#o&c#o#p$3|#p;'S&c;'S;=`&w<%lO&c(n$1kZ$i&jO!Q&c!Q![$2^![!^&c!_!c&c!c!i$2^!i#T&c#T#Z$2^#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2cZ$i&jO!Q&c!Q![$3U![!^&c!_!c&c!c!i$3U!i#T&c#T#Z$3U#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3ZZ$i&jO!Q&c!Q![$0O![!^&c!_!c&c!c!i$0O!i#T&c#T#Z$0O#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$4PR!Q![$4Y!c!i$4Y#T#Z$4Y#S$4]S!Q![$4Y!c!i$4Y#T#Z$4Y#q#r$0f(n$4lP;=`<%l$0O#1[$4z_!Y#)l$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$6U`#x(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;p$7c_$i&j(Vp(Y!b(`+4QOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$8qk$i&j(Vp(Y!b(S,2j$_#t(d$I[OY%ZYZ&cZr%Zrs&}st%Ztu$8buw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$8b![!^%Z!^!_*g!_!c%Z!c!}$8b!}#O%Z#O#P&c#P#R%Z#R#S$8b#S#T%Z#T#o$8b#o#p*g#p$g%Z$g;'S$8b;'S;=`$<l<%lO$8b+d$:qk$i&j(Vp(Y!b$_#tOY%ZYZ&cZr%Zrs&}st%Ztu$:fuw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$:f![!^%Z!^!_*g!_!c%Z!c!}$:f!}#O%Z#O#P&c#P#R%Z#R#S$:f#S#T%Z#T#o$:f#o#p*g#p$g%Z$g;'S$:f;'S;=`$<f<%lO$:f+d$<iP;=`<%l$:f07[$<oP;=`<%l$8b#Jf$<{X!_#Hb(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g,#x$=sa(x+JY$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+e#q;'S%Z;'S;=`+a<%lO%Z)>v$?V_!^(CdvBr$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z?O$@a_!q7`$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$Aq|$i&j(Vp(Y!b'{0/l$]#t(S,2j(d$I[OX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr07[$D|k$i&j(Vp(Y!b'|0/l$]#t(S,2j(d$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr",
    tokenizers: [noSemicolon, noSemicolonType, operatorToken, jsx, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, insertSemicolon, new LocalTokenGroup("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOx~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!U~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(b~~", 141, 339), new LocalTokenGroup("j~RQYZXz{^~^O(P~~aP!P!Qd~iO(Q~~", 25, 322)],
    topRules: { "Script": [0, 7], "SingleExpression": [1, 275], "SingleClassItem": [2, 276] },
    dialects: { jsx: 0, ts: 15098 },
    dynamicPrecedences: { "80": 1, "82": 1, "94": 1, "169": 1, "199": 1 },
    specialized: [{ term: 326, get: (value) => spec_identifier[value] || -1 }, { term: 342, get: (value) => spec_word[value] || -1 }, { term: 95, get: (value) => spec_LessThan[value] || -1 }],
    tokenPrec: 15124
  });

  // node_modules/@codemirror/lang-javascript/dist/index.js
  var snippets = [
    /* @__PURE__ */ snippetCompletion("function ${name}(${params}) {\n	${}\n}", {
      label: "function",
      detail: "definition",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n	${}\n}", {
      label: "for",
      detail: "loop",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("for (let ${name} of ${collection}) {\n	${}\n}", {
      label: "for",
      detail: "of loop",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("do {\n	${}\n} while (${})", {
      label: "do",
      detail: "loop",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("while (${}) {\n	${}\n}", {
      label: "while",
      detail: "loop",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("try {\n	${}\n} catch (${error}) {\n	${}\n}", {
      label: "try",
      detail: "/ catch block",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("if (${}) {\n	${}\n}", {
      label: "if",
      detail: "block",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("if (${}) {\n	${}\n} else {\n	${}\n}", {
      label: "if",
      detail: "/ else block",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("class ${name} {\n	constructor(${params}) {\n		${}\n	}\n}", {
      label: "class",
      detail: "definition",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion('import {${names}} from "${module}"\n${}', {
      label: "import",
      detail: "named",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion('import ${name} from "${module}"\n${}', {
      label: "import",
      detail: "default",
      type: "keyword"
    })
  ];
  var typescriptSnippets = /* @__PURE__ */ snippets.concat([
    /* @__PURE__ */ snippetCompletion("interface ${name} {\n	${}\n}", {
      label: "interface",
      detail: "definition",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("type ${name} = ${type}", {
      label: "type",
      detail: "definition",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("enum ${name} {\n	${}\n}", {
      label: "enum",
      detail: "definition",
      type: "keyword"
    })
  ]);
  var cache = /* @__PURE__ */ new NodeWeakMap();
  var ScopeNodes = /* @__PURE__ */ new Set([
    "Script",
    "Block",
    "FunctionExpression",
    "FunctionDeclaration",
    "ArrowFunction",
    "MethodDeclaration",
    "ForStatement"
  ]);
  function defID(type) {
    return (node, def) => {
      let id2 = node.node.getChild("VariableDefinition");
      if (id2)
        def(id2, type);
      return true;
    };
  }
  var functionContext = ["FunctionDeclaration"];
  var gatherCompletions = {
    FunctionDeclaration: /* @__PURE__ */ defID("function"),
    ClassDeclaration: /* @__PURE__ */ defID("class"),
    ClassExpression: () => true,
    EnumDeclaration: /* @__PURE__ */ defID("constant"),
    TypeAliasDeclaration: /* @__PURE__ */ defID("type"),
    NamespaceDeclaration: /* @__PURE__ */ defID("namespace"),
    VariableDefinition(node, def) {
      if (!node.matchContext(functionContext))
        def(node, "variable");
    },
    TypeDefinition(node, def) {
      def(node, "type");
    },
    __proto__: null
  };
  function getScope(doc2, node) {
    let cached = cache.get(node);
    if (cached)
      return cached;
    let completions = [], top2 = true;
    function def(node2, type) {
      let name2 = doc2.sliceString(node2.from, node2.to);
      completions.push({ label: name2, type });
    }
    node.cursor(IterMode.IncludeAnonymous).iterate((node2) => {
      if (top2) {
        top2 = false;
      } else if (node2.name) {
        let gather = gatherCompletions[node2.name];
        if (gather && gather(node2, def) || ScopeNodes.has(node2.name))
          return false;
      } else if (node2.to - node2.from > 8192) {
        for (let c of getScope(doc2, node2.node))
          completions.push(c);
        return false;
      }
    });
    cache.set(node, completions);
    return completions;
  }
  var Identifier = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/;
  var dontComplete = [
    "TemplateString",
    "String",
    "RegExp",
    "LineComment",
    "BlockComment",
    "VariableDefinition",
    "TypeDefinition",
    "Label",
    "PropertyDefinition",
    "PropertyName",
    "PrivatePropertyDefinition",
    "PrivatePropertyName",
    "JSXText",
    "JSXAttributeValue",
    "JSXOpenTag",
    "JSXCloseTag",
    "JSXSelfClosingTag",
    ".",
    "?."
  ];
  function localCompletionSource(context2) {
    let inner = syntaxTree(context2.state).resolveInner(context2.pos, -1);
    if (dontComplete.indexOf(inner.name) > -1)
      return null;
    let isWord = inner.name == "VariableName" || inner.to - inner.from < 20 && Identifier.test(context2.state.sliceDoc(inner.from, inner.to));
    if (!isWord && !context2.explicit)
      return null;
    let options = [];
    for (let pos = inner; pos; pos = pos.parent) {
      if (ScopeNodes.has(pos.name))
        options = options.concat(getScope(context2.state.doc, pos));
    }
    return {
      options,
      from: isWord ? inner.from : context2.pos,
      validFor: Identifier
    };
  }
  var javascriptLanguage = /* @__PURE__ */ LRLanguage.define({
    name: "javascript",
    parser: /* @__PURE__ */ parser.configure({
      props: [
        /* @__PURE__ */ indentNodeProp.add({
          IfStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|else\b)/ }),
          TryStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|catch\b|finally\b)/ }),
          LabeledStatement: flatIndent,
          SwitchBody: (context2) => {
            let after = context2.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
            return context2.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context2.unit;
          },
          Block: /* @__PURE__ */ delimitedIndent({ closing: "}" }),
          ArrowFunction: (cx) => cx.baseIndent + cx.unit,
          "TemplateString BlockComment": () => null,
          "Statement Property": /* @__PURE__ */ continuedIndent({ except: /^\s*{/ }),
          JSXElement(context2) {
            let closed = /^\s*<\//.test(context2.textAfter);
            return context2.lineIndent(context2.node.from) + (closed ? 0 : context2.unit);
          },
          JSXEscape(context2) {
            let closed = /\s*\}/.test(context2.textAfter);
            return context2.lineIndent(context2.node.from) + (closed ? 0 : context2.unit);
          },
          "JSXOpenTag JSXSelfClosingTag"(context2) {
            return context2.column(context2.node.from) + context2.unit;
          }
        }),
        /* @__PURE__ */ foldNodeProp.add({
          "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType": foldInside,
          BlockComment(tree) {
            return { from: tree.from + 2, to: tree.to - 2 };
          }
        })
      ]
    }),
    languageData: {
      closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
      commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
      indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
      wordChars: "$"
    }
  });
  var jsxSublanguage = {
    test: (node) => /^JSX/.test(node.name),
    facet: /* @__PURE__ */ defineLanguageFacet({ commentTokens: { block: { open: "{/*", close: "*/}" } } })
  };
  var typescriptLanguage = /* @__PURE__ */ javascriptLanguage.configure({ dialect: "ts" }, "typescript");
  var jsxLanguage = /* @__PURE__ */ javascriptLanguage.configure({
    dialect: "jsx",
    props: [/* @__PURE__ */ sublanguageProp.add((n) => n.isTop ? [jsxSublanguage] : void 0)]
  });
  var tsxLanguage = /* @__PURE__ */ javascriptLanguage.configure({
    dialect: "jsx ts",
    props: [/* @__PURE__ */ sublanguageProp.add((n) => n.isTop ? [jsxSublanguage] : void 0)]
  }, "typescript");
  var kwCompletion = (name2) => ({ label: name2, type: "keyword" });
  var keywords = /* @__PURE__ */ "break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(kwCompletion);
  var typescriptKeywords = /* @__PURE__ */ keywords.concat(/* @__PURE__ */ ["declare", "implements", "private", "protected", "public"].map(kwCompletion));
  function javascript(config2 = {}) {
    let lang = config2.jsx ? config2.typescript ? tsxLanguage : jsxLanguage : config2.typescript ? typescriptLanguage : javascriptLanguage;
    let completions = config2.typescript ? typescriptSnippets.concat(typescriptKeywords) : snippets.concat(keywords);
    return new LanguageSupport(lang, [
      javascriptLanguage.data.of({
        autocomplete: ifNotIn(dontComplete, completeFromList(completions))
      }),
      javascriptLanguage.data.of({
        autocomplete: localCompletionSource
      }),
      config2.jsx ? autoCloseTags : []
    ]);
  }
  function findOpenTag(node) {
    for (; ; ) {
      if (node.name == "JSXOpenTag" || node.name == "JSXSelfClosingTag" || node.name == "JSXFragmentTag")
        return node;
      if (node.name == "JSXEscape" || !node.parent)
        return null;
      node = node.parent;
    }
  }
  function elementName(doc2, tree, max = doc2.length) {
    for (let ch = tree === null || tree === void 0 ? void 0 : tree.firstChild; ch; ch = ch.nextSibling) {
      if (ch.name == "JSXIdentifier" || ch.name == "JSXBuiltin" || ch.name == "JSXNamespacedName" || ch.name == "JSXMemberExpression")
        return doc2.sliceString(ch.from, Math.min(ch.to, max));
    }
    return "";
  }
  var android2 = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent);
  var autoCloseTags = /* @__PURE__ */ EditorView.inputHandler.of((view, from, to, text, defaultInsert) => {
    if ((android2 ? view.composing : view.compositionStarted) || view.state.readOnly || from != to || text != ">" && text != "/" || !javascriptLanguage.isActiveAt(view.state, from, -1))
      return false;
    let base2 = defaultInsert(), { state } = base2;
    let closeTags = state.changeByRange((range) => {
      var _a2;
      let { head } = range, around = syntaxTree(state).resolveInner(head - 1, -1), name2;
      if (around.name == "JSXStartTag")
        around = around.parent;
      if (state.doc.sliceString(head - 1, head) != text || around.name == "JSXAttributeValue" && around.to > head) ;
      else if (text == ">" && around.name == "JSXFragmentTag") {
        return { range, changes: { from: head, insert: `</>` } };
      } else if (text == "/" && around.name == "JSXStartCloseTag") {
        let empty2 = around.parent, base3 = empty2.parent;
        if (base3 && empty2.from == head - 2 && ((name2 = elementName(state.doc, base3.firstChild, head)) || ((_a2 = base3.firstChild) === null || _a2 === void 0 ? void 0 : _a2.name) == "JSXFragmentTag")) {
          let insert2 = `${name2}>`;
          return { range: EditorSelection.cursor(head + insert2.length, -1), changes: { from: head, insert: insert2 } };
        }
      } else if (text == ">") {
        let openTag = findOpenTag(around);
        if (openTag && openTag.name == "JSXOpenTag" && !/^\/?>|^<\//.test(state.doc.sliceString(head, head + 2)) && (name2 = elementName(state.doc, openTag, head)))
          return { range, changes: { from: head, insert: `</${name2}>` } };
      }
      return { range };
    });
    if (closeTags.changes.empty)
      return false;
    view.dispatch([
      base2,
      state.update(closeTags, { userEvent: "input.complete", scrollIntoView: true })
    ]);
    return true;
  });

  // src/text_utils.ts
  var findBlockStart = (text, pos) => {
    let start = pos;
    while (start > 0 && !(text[start - 1] === "\n" && text[start] === "\n")) {
      start--;
    }
    if (start === 0) {
      return 0;
    } else {
      return start + 1;
    }
  };
  var findBlockEnd = (text, pos) => {
    let end = pos;
    while (end < text.length && !(text[end] === "\n" && text[end + 1] === "\n")) {
      end++;
    }
    if (end === text.length) {
      return text.length;
    } else {
      return end + 2;
    }
  };
  var getTextBlockAtPosition = (text, pos) => {
    const start = findBlockStart(text, pos);
    const end = findBlockEnd(text, pos);
    return text.substring(start, end).trim();
  };

  // node_modules/three/build/three.core.js
  var REVISION = "177";
  var CullFaceNone = 0;
  var CullFaceBack = 1;
  var CullFaceFront = 2;
  var BasicShadowMap = 0;
  var PCFShadowMap = 1;
  var VSMShadowMap = 3;
  var FrontSide = 0;
  var BackSide = 1;
  var DoubleSide = 2;
  var NoBlending = 0;
  var NormalBlending = 1;
  var AdditiveBlending = 2;
  var SubtractiveBlending = 3;
  var MultiplyBlending = 4;
  var CustomBlending = 5;
  var AddEquation = 100;
  var SubtractEquation = 101;
  var ReverseSubtractEquation = 102;
  var MinEquation = 103;
  var MaxEquation = 104;
  var ZeroFactor = 200;
  var OneFactor = 201;
  var SrcColorFactor = 202;
  var OneMinusSrcColorFactor = 203;
  var SrcAlphaFactor = 204;
  var OneMinusSrcAlphaFactor = 205;
  var DstAlphaFactor = 206;
  var OneMinusDstAlphaFactor = 207;
  var DstColorFactor = 208;
  var OneMinusDstColorFactor = 209;
  var SrcAlphaSaturateFactor = 210;
  var NeverDepth = 0;
  var AlwaysDepth = 1;
  var LessDepth = 2;
  var LessEqualDepth = 3;
  var EqualDepth = 4;
  var GreaterEqualDepth = 5;
  var GreaterDepth = 6;
  var NotEqualDepth = 7;
  var MultiplyOperation = 0;
  var MixOperation = 1;
  var AddOperation = 2;
  var NoToneMapping = 0;
  var LinearToneMapping = 1;
  var ReinhardToneMapping = 2;
  var CineonToneMapping = 3;
  var ACESFilmicToneMapping = 4;
  var AgXToneMapping = 6;
  var NeutralToneMapping = 7;
  var UVMapping = 300;
  var CubeReflectionMapping = 301;
  var CubeRefractionMapping = 302;
  var EquirectangularReflectionMapping = 303;
  var EquirectangularRefractionMapping = 304;
  var CubeUVReflectionMapping = 306;
  var RepeatWrapping = 1e3;
  var ClampToEdgeWrapping = 1001;
  var MirroredRepeatWrapping = 1002;
  var NearestFilter = 1003;
  var NearestMipmapNearestFilter = 1004;
  var NearestMipmapLinearFilter = 1005;
  var LinearFilter = 1006;
  var LinearMipmapNearestFilter = 1007;
  var LinearMipmapLinearFilter = 1008;
  var UnsignedByteType = 1009;
  var ByteType = 1010;
  var ShortType = 1011;
  var UnsignedShortType = 1012;
  var IntType = 1013;
  var UnsignedIntType = 1014;
  var FloatType = 1015;
  var HalfFloatType = 1016;
  var UnsignedShort4444Type = 1017;
  var UnsignedShort5551Type = 1018;
  var UnsignedInt248Type = 1020;
  var UnsignedInt5999Type = 35902;
  var AlphaFormat = 1021;
  var RGBFormat = 1022;
  var RGBAFormat = 1023;
  var DepthFormat = 1026;
  var DepthStencilFormat = 1027;
  var RedFormat = 1028;
  var RedIntegerFormat = 1029;
  var RGFormat = 1030;
  var RGIntegerFormat = 1031;
  var RGBIntegerFormat = 1032;
  var RGBAIntegerFormat = 1033;
  var RGB_S3TC_DXT1_Format = 33776;
  var RGBA_S3TC_DXT1_Format = 33777;
  var RGBA_S3TC_DXT3_Format = 33778;
  var RGBA_S3TC_DXT5_Format = 33779;
  var RGB_PVRTC_4BPPV1_Format = 35840;
  var RGB_PVRTC_2BPPV1_Format = 35841;
  var RGBA_PVRTC_4BPPV1_Format = 35842;
  var RGBA_PVRTC_2BPPV1_Format = 35843;
  var RGB_ETC1_Format = 36196;
  var RGB_ETC2_Format = 37492;
  var RGBA_ETC2_EAC_Format = 37496;
  var RGBA_ASTC_4x4_Format = 37808;
  var RGBA_ASTC_5x4_Format = 37809;
  var RGBA_ASTC_5x5_Format = 37810;
  var RGBA_ASTC_6x5_Format = 37811;
  var RGBA_ASTC_6x6_Format = 37812;
  var RGBA_ASTC_8x5_Format = 37813;
  var RGBA_ASTC_8x6_Format = 37814;
  var RGBA_ASTC_8x8_Format = 37815;
  var RGBA_ASTC_10x5_Format = 37816;
  var RGBA_ASTC_10x6_Format = 37817;
  var RGBA_ASTC_10x8_Format = 37818;
  var RGBA_ASTC_10x10_Format = 37819;
  var RGBA_ASTC_12x10_Format = 37820;
  var RGBA_ASTC_12x12_Format = 37821;
  var RGBA_BPTC_Format = 36492;
  var RED_RGTC1_Format = 36283;
  var SIGNED_RED_RGTC1_Format = 36284;
  var RED_GREEN_RGTC2_Format = 36285;
  var SIGNED_RED_GREEN_RGTC2_Format = 36286;
  var InterpolateDiscrete = 2300;
  var InterpolateLinear = 2301;
  var InterpolateSmooth = 2302;
  var ZeroCurvatureEnding = 2400;
  var ZeroSlopeEnding = 2401;
  var WrapAroundEnding = 2402;
  var TangentSpaceNormalMap = 0;
  var ObjectSpaceNormalMap = 1;
  var NoColorSpace = "";
  var SRGBColorSpace = "srgb";
  var LinearSRGBColorSpace = "srgb-linear";
  var LinearTransfer = "linear";
  var SRGBTransfer = "srgb";
  var ZeroStencilOp = 0;
  var KeepStencilOp = 7680;
  var ReplaceStencilOp = 7681;
  var IncrementStencilOp = 7682;
  var DecrementStencilOp = 7683;
  var IncrementWrapStencilOp = 34055;
  var DecrementWrapStencilOp = 34056;
  var InvertStencilOp = 5386;
  var NeverStencilFunc = 512;
  var LessStencilFunc = 513;
  var EqualStencilFunc = 514;
  var LessEqualStencilFunc = 515;
  var GreaterStencilFunc = 516;
  var NotEqualStencilFunc = 517;
  var GreaterEqualStencilFunc = 518;
  var AlwaysStencilFunc = 519;
  var NeverCompare = 512;
  var LessCompare = 513;
  var EqualCompare = 514;
  var LessEqualCompare = 515;
  var GreaterCompare = 516;
  var NotEqualCompare = 517;
  var GreaterEqualCompare = 518;
  var AlwaysCompare = 519;
  var StaticDrawUsage = 35044;
  var DynamicDrawUsage = 35048;
  var WebGLCoordinateSystem = 2e3;
  var WebGPUCoordinateSystem = 2001;
  var EventDispatcher = class {
    /**
     * Adds the given event listener to the given event type.
     *
     * @param {string} type - The type of event to listen to.
     * @param {Function} listener - The function that gets called when the event is fired.
     */
    addEventListener(type, listener) {
      if (this._listeners === void 0) this._listeners = {};
      const listeners = this._listeners;
      if (listeners[type] === void 0) {
        listeners[type] = [];
      }
      if (listeners[type].indexOf(listener) === -1) {
        listeners[type].push(listener);
      }
    }
    /**
     * Returns `true` if the given event listener has been added to the given event type.
     *
     * @param {string} type - The type of event.
     * @param {Function} listener - The listener to check.
     * @return {boolean} Whether the given event listener has been added to the given event type.
     */
    hasEventListener(type, listener) {
      const listeners = this._listeners;
      if (listeners === void 0) return false;
      return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
    }
    /**
     * Removes the given event listener from the given event type.
     *
     * @param {string} type - The type of event.
     * @param {Function} listener - The listener to remove.
     */
    removeEventListener(type, listener) {
      const listeners = this._listeners;
      if (listeners === void 0) return;
      const listenerArray = listeners[type];
      if (listenerArray !== void 0) {
        const index = listenerArray.indexOf(listener);
        if (index !== -1) {
          listenerArray.splice(index, 1);
        }
      }
    }
    /**
     * Dispatches an event object.
     *
     * @param {Object} event - The event that gets fired.
     */
    dispatchEvent(event) {
      const listeners = this._listeners;
      if (listeners === void 0) return;
      const listenerArray = listeners[event.type];
      if (listenerArray !== void 0) {
        event.target = this;
        const array2 = listenerArray.slice(0);
        for (let i = 0, l = array2.length; i < l; i++) {
          array2[i].call(this, event);
        }
        event.target = null;
      }
    }
  };
  var _lut = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
  var _seed = 1234567;
  var DEG2RAD = Math.PI / 180;
  var RAD2DEG = 180 / Math.PI;
  function generateUUID() {
    const d0 = Math.random() * 4294967295 | 0;
    const d1 = Math.random() * 4294967295 | 0;
    const d2 = Math.random() * 4294967295 | 0;
    const d3 = Math.random() * 4294967295 | 0;
    const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + "-" + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
    return uuid.toLowerCase();
  }
  function clamp(value, min, max) {
    return Math.max(min, Math.min(max, value));
  }
  function euclideanModulo(n, m) {
    return (n % m + m) % m;
  }
  function mapLinear(x, a1, a2, b1, b2) {
    return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
  }
  function inverseLerp(x, y, value) {
    if (x !== y) {
      return (value - x) / (y - x);
    } else {
      return 0;
    }
  }
  function lerp(x, y, t2) {
    return (1 - t2) * x + t2 * y;
  }
  function damp(x, y, lambda, dt) {
    return lerp(x, y, 1 - Math.exp(-lambda * dt));
  }
  function pingpong(x, length2 = 1) {
    return length2 - Math.abs(euclideanModulo(x, length2 * 2) - length2);
  }
  function smoothstep(x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * (3 - 2 * x);
  }
  function smootherstep(x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * x * (x * (x * 6 - 15) + 10);
  }
  function randInt(low, high) {
    return low + Math.floor(Math.random() * (high - low + 1));
  }
  function randFloat(low, high) {
    return low + Math.random() * (high - low);
  }
  function randFloatSpread(range) {
    return range * (0.5 - Math.random());
  }
  function seededRandom(s) {
    if (s !== void 0) _seed = s;
    let t2 = _seed += 1831565813;
    t2 = Math.imul(t2 ^ t2 >>> 15, t2 | 1);
    t2 ^= t2 + Math.imul(t2 ^ t2 >>> 7, t2 | 61);
    return ((t2 ^ t2 >>> 14) >>> 0) / 4294967296;
  }
  function degToRad(degrees2) {
    return degrees2 * DEG2RAD;
  }
  function radToDeg(radians2) {
    return radians2 * RAD2DEG;
  }
  function isPowerOfTwo(value) {
    return (value & value - 1) === 0 && value !== 0;
  }
  function ceilPowerOfTwo(value) {
    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
  }
  function floorPowerOfTwo(value) {
    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
  }
  function setQuaternionFromProperEuler(q, a, b, c, order) {
    const cos2 = Math.cos;
    const sin2 = Math.sin;
    const c2 = cos2(b / 2);
    const s2 = sin2(b / 2);
    const c13 = cos2((a + c) / 2);
    const s13 = sin2((a + c) / 2);
    const c1_3 = cos2((a - c) / 2);
    const s1_3 = sin2((a - c) / 2);
    const c3_1 = cos2((c - a) / 2);
    const s3_1 = sin2((c - a) / 2);
    switch (order) {
      case "XYX":
        q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
        break;
      case "YZY":
        q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
        break;
      case "ZXZ":
        q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
        break;
      case "XZX":
        q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
        break;
      case "YXY":
        q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
        break;
      case "ZYZ":
        q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
        break;
      default:
        console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + order);
    }
  }
  function denormalize(value, array2) {
    switch (array2.constructor) {
      case Float32Array:
        return value;
      case Uint32Array:
        return value / 4294967295;
      case Uint16Array:
        return value / 65535;
      case Uint8Array:
        return value / 255;
      case Int32Array:
        return Math.max(value / 2147483647, -1);
      case Int16Array:
        return Math.max(value / 32767, -1);
      case Int8Array:
        return Math.max(value / 127, -1);
      default:
        throw new Error("Invalid component type.");
    }
  }
  function normalize(value, array2) {
    switch (array2.constructor) {
      case Float32Array:
        return value;
      case Uint32Array:
        return Math.round(value * 4294967295);
      case Uint16Array:
        return Math.round(value * 65535);
      case Uint8Array:
        return Math.round(value * 255);
      case Int32Array:
        return Math.round(value * 2147483647);
      case Int16Array:
        return Math.round(value * 32767);
      case Int8Array:
        return Math.round(value * 127);
      default:
        throw new Error("Invalid component type.");
    }
  }
  var MathUtils = {
    DEG2RAD,
    RAD2DEG,
    /**
     * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}
     * (universally unique identifier).
     *
     * @static
     * @method
     * @return {string} The UUID.
     */
    generateUUID,
    /**
     * Clamps the given value between min and max.
     *
     * @static
     * @method
     * @param {number} value - The value to clamp.
     * @param {number} min - The min value.
     * @param {number} max - The max value.
     * @return {number} The clamped value.
     */
    clamp,
    /**
     * Computes the Euclidean modulo of the given parameters that
     * is `( ( n % m ) + m ) % m`.
     *
     * @static
     * @method
     * @param {number} n - The first parameter.
     * @param {number} m - The second parameter.
     * @return {number} The Euclidean modulo.
     */
    euclideanModulo,
    /**
     * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`
     * for the given value.
     *
     * @static
     * @method
     * @param {number} x - The value to be mapped.
     * @param {number} a1 - Minimum value for range A.
     * @param {number} a2 - Maximum value for range A.
     * @param {number} b1 - Minimum value for range B.
     * @param {number} b2 - Maximum value for range B.
     * @return {number} The mapped value.
     */
    mapLinear,
    /**
     * Returns the percentage in the closed interval `[0, 1]` of the given value
     * between the start and end point.
     *
     * @static
     * @method
     * @param {number} x - The start point
     * @param {number} y - The end point.
     * @param {number} value - A value between start and end.
     * @return {number} The interpolation factor.
     */
    inverseLerp,
    /**
     * Returns a value linearly interpolated from two known points based on the given interval -
     * `t = 0` will return `x` and `t = 1` will return `y`.
     *
     * @static
     * @method
     * @param {number} x - The start point
     * @param {number} y - The end point.
     * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.
     * @return {number} The interpolated value.
     */
    lerp,
    /**
     * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta
     * time to maintain frame rate independent movement. For details, see
     * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.
     *
     * @static
     * @method
     * @param {number} x - The current point.
     * @param {number} y - The target point.
     * @param {number} lambda - A higher lambda value will make the movement more sudden,
     * and a lower value will make the movement more gradual.
     * @param {number} dt - Delta time in seconds.
     * @return {number} The interpolated value.
     */
    damp,
    /**
     * Returns a value that alternates between `0` and the given `length` parameter.
     *
     * @static
     * @method
     * @param {number} x - The value to pingpong.
     * @param {number} [length=1] - The positive value the function will pingpong to.
     * @return {number} The alternated value.
     */
    pingpong,
    /**
     * Returns a value in the range `[0,1]` that represents the percentage that `x` has
     * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to
     * the `min` and `max`.
     *
     * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.
     *
     * @static
     * @method
     * @param {number} x - The value to evaluate based on its position between min and max.
     * @param {number} min - The min value. Any x value below min will be `0`.
     * @param {number} max - The max value. Any x value above max will be `1`.
     * @return {number} The alternated value.
     */
    smoothstep,
    /**
     * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}
     * that has zero 1st and 2nd order derivatives at x=0 and x=1.
     *
     * @static
     * @method
     * @param {number} x - The value to evaluate based on its position between min and max.
     * @param {number} min - The min value. Any x value below min will be `0`.
     * @param {number} max - The max value. Any x value above max will be `1`.
     * @return {number} The alternated value.
     */
    smootherstep,
    /**
     * Returns a random integer from `<low, high>` interval.
     *
     * @static
     * @method
     * @param {number} low - The lower value boundary.
     * @param {number} high - The upper value boundary
     * @return {number} A random integer.
     */
    randInt,
    /**
     * Returns a random float from `<low, high>` interval.
     *
     * @static
     * @method
     * @param {number} low - The lower value boundary.
     * @param {number} high - The upper value boundary
     * @return {number} A random float.
     */
    randFloat,
    /**
     * Returns a random integer from `<-range/2, range/2>` interval.
     *
     * @static
     * @method
     * @param {number} range - Defines the value range.
     * @return {number} A random float.
     */
    randFloatSpread,
    /**
     * Returns a deterministic pseudo-random float in the interval `[0, 1]`.
     *
     * @static
     * @method
     * @param {number} [s] - The integer seed.
     * @return {number} A random float.
     */
    seededRandom,
    /**
     * Converts degrees to radians.
     *
     * @static
     * @method
     * @param {number} degrees - A value in degrees.
     * @return {number} The converted value in radians.
     */
    degToRad,
    /**
     * Converts radians to degrees.
     *
     * @static
     * @method
     * @param {number} radians - A value in radians.
     * @return {number} The converted value in degrees.
     */
    radToDeg,
    /**
     * Returns `true` if the given number is a power of two.
     *
     * @static
     * @method
     * @param {number} value - The value to check.
     * @return {boolean} Whether the given number is a power of two or not.
     */
    isPowerOfTwo,
    /**
     * Returns the smallest power of two that is greater than or equal to the given number.
     *
     * @static
     * @method
     * @param {number} value - The value to find a POT for.
     * @return {number} The smallest power of two that is greater than or equal to the given number.
     */
    ceilPowerOfTwo,
    /**
     * Returns the largest power of two that is less than or equal to the given number.
     *
     * @static
     * @method
     * @param {number} value - The value to find a POT for.
     * @return {number} The largest power of two that is less than or equal to the given number.
     */
    floorPowerOfTwo,
    /**
     * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}
     * defined by the given angles and order.
     *
     * Rotations are applied to the axes in the order specified by order:
     * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.
     *
     * @static
     * @method
     * @param {Quaternion} q - The quaternion to set.
     * @param {number} a - The rotation applied to the first axis, in radians.
     * @param {number} b - The rotation applied to the second axis, in radians.
     * @param {number} c - The rotation applied to the third axis, in radians.
     * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.
     */
    setQuaternionFromProperEuler,
    /**
     * Normalizes the given value according to the given typed array.
     *
     * @static
     * @method
     * @param {number} value - The float value in the range `[0,1]` to normalize.
     * @param {TypedArray} array - The typed array that defines the data type of the value.
     * @return {number} The normalize value.
     */
    normalize,
    /**
     * Denormalizes the given value according to the given typed array.
     *
     * @static
     * @method
     * @param {number} value - The value to denormalize.
     * @param {TypedArray} array - The typed array that defines the data type of the value.
     * @return {number} The denormalize (float) value in the range `[0,1]`.
     */
    denormalize
  };
  var Vector2 = class _Vector2 {
    /**
     * Constructs a new 2D vector.
     *
     * @param {number} [x=0] - The x value of this vector.
     * @param {number} [y=0] - The y value of this vector.
     */
    constructor(x = 0, y = 0) {
      _Vector2.prototype.isVector2 = true;
      this.x = x;
      this.y = y;
    }
    /**
     * Alias for {@link Vector2#x}.
     *
     * @type {number}
     */
    get width() {
      return this.x;
    }
    set width(value) {
      this.x = value;
    }
    /**
     * Alias for {@link Vector2#y}.
     *
     * @type {number}
     */
    get height() {
      return this.y;
    }
    set height(value) {
      this.y = value;
    }
    /**
     * Sets the vector components.
     *
     * @param {number} x - The value of the x component.
     * @param {number} y - The value of the y component.
     * @return {Vector2} A reference to this vector.
     */
    set(x, y) {
      this.x = x;
      this.y = y;
      return this;
    }
    /**
     * Sets the vector components to the same value.
     *
     * @param {number} scalar - The value to set for all vector components.
     * @return {Vector2} A reference to this vector.
     */
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      return this;
    }
    /**
     * Sets the vector's x component to the given value
     *
     * @param {number} x - The value to set.
     * @return {Vector2} A reference to this vector.
     */
    setX(x) {
      this.x = x;
      return this;
    }
    /**
     * Sets the vector's y component to the given value
     *
     * @param {number} y - The value to set.
     * @return {Vector2} A reference to this vector.
     */
    setY(y) {
      this.y = y;
      return this;
    }
    /**
     * Allows to set a vector component with an index.
     *
     * @param {number} index - The component index. `0` equals to x, `1` equals to y.
     * @param {number} value - The value to set.
     * @return {Vector2} A reference to this vector.
     */
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    /**
     * Returns the value of the vector component which matches the given index.
     *
     * @param {number} index - The component index. `0` equals to x, `1` equals to y.
     * @return {number} A vector component value.
     */
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    /**
     * Returns a new vector with copied values from this instance.
     *
     * @return {Vector2} A clone of this instance.
     */
    clone() {
      return new this.constructor(this.x, this.y);
    }
    /**
     * Copies the values of the given vector to this instance.
     *
     * @param {Vector2} v - The vector to copy.
     * @return {Vector2} A reference to this vector.
     */
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      return this;
    }
    /**
     * Adds the given vector to this instance.
     *
     * @param {Vector2} v - The vector to add.
     * @return {Vector2} A reference to this vector.
     */
    add(v) {
      this.x += v.x;
      this.y += v.y;
      return this;
    }
    /**
     * Adds the given scalar value to all components of this instance.
     *
     * @param {number} s - The scalar to add.
     * @return {Vector2} A reference to this vector.
     */
    addScalar(s) {
      this.x += s;
      this.y += s;
      return this;
    }
    /**
     * Adds the given vectors and stores the result in this instance.
     *
     * @param {Vector2} a - The first vector.
     * @param {Vector2} b - The second vector.
     * @return {Vector2} A reference to this vector.
     */
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      return this;
    }
    /**
     * Adds the given vector scaled by the given factor to this instance.
     *
     * @param {Vector2} v - The vector.
     * @param {number} s - The factor that scales `v`.
     * @return {Vector2} A reference to this vector.
     */
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      return this;
    }
    /**
     * Subtracts the given vector from this instance.
     *
     * @param {Vector2} v - The vector to subtract.
     * @return {Vector2} A reference to this vector.
     */
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      return this;
    }
    /**
     * Subtracts the given scalar value from all components of this instance.
     *
     * @param {number} s - The scalar to subtract.
     * @return {Vector2} A reference to this vector.
     */
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      return this;
    }
    /**
     * Subtracts the given vectors and stores the result in this instance.
     *
     * @param {Vector2} a - The first vector.
     * @param {Vector2} b - The second vector.
     * @return {Vector2} A reference to this vector.
     */
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      return this;
    }
    /**
     * Multiplies the given vector with this instance.
     *
     * @param {Vector2} v - The vector to multiply.
     * @return {Vector2} A reference to this vector.
     */
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      return this;
    }
    /**
     * Multiplies the given scalar value with all components of this instance.
     *
     * @param {number} scalar - The scalar to multiply.
     * @return {Vector2} A reference to this vector.
     */
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      return this;
    }
    /**
     * Divides this instance by the given vector.
     *
     * @param {Vector2} v - The vector to divide.
     * @return {Vector2} A reference to this vector.
     */
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      return this;
    }
    /**
     * Divides this vector by the given scalar.
     *
     * @param {number} scalar - The scalar to divide.
     * @return {Vector2} A reference to this vector.
     */
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    /**
     * Multiplies this vector (with an implicit 1 as the 3rd component) by
     * the given 3x3 matrix.
     *
     * @param {Matrix3} m - The matrix to apply.
     * @return {Vector2} A reference to this vector.
     */
    applyMatrix3(m) {
      const x = this.x, y = this.y;
      const e = m.elements;
      this.x = e[0] * x + e[3] * y + e[6];
      this.y = e[1] * x + e[4] * y + e[7];
      return this;
    }
    /**
     * If this vector's x or y value is greater than the given vector's x or y
     * value, replace that value with the corresponding min value.
     *
     * @param {Vector2} v - The vector.
     * @return {Vector2} A reference to this vector.
     */
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      return this;
    }
    /**
     * If this vector's x or y value is less than the given vector's x or y
     * value, replace that value with the corresponding max value.
     *
     * @param {Vector2} v - The vector.
     * @return {Vector2} A reference to this vector.
     */
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      return this;
    }
    /**
     * If this vector's x or y value is greater than the max vector's x or y
     * value, it is replaced by the corresponding value.
     * If this vector's x or y value is less than the min vector's x or y value,
     * it is replaced by the corresponding value.
     *
     * @param {Vector2} min - The minimum x and y values.
     * @param {Vector2} max - The maximum x and y values in the desired range.
     * @return {Vector2} A reference to this vector.
     */
    clamp(min, max) {
      this.x = clamp(this.x, min.x, max.x);
      this.y = clamp(this.y, min.y, max.y);
      return this;
    }
    /**
     * If this vector's x or y values are greater than the max value, they are
     * replaced by the max value.
     * If this vector's x or y values are less than the min value, they are
     * replaced by the min value.
     *
     * @param {number} minVal - The minimum value the components will be clamped to.
     * @param {number} maxVal - The maximum value the components will be clamped to.
     * @return {Vector2} A reference to this vector.
     */
    clampScalar(minVal, maxVal) {
      this.x = clamp(this.x, minVal, maxVal);
      this.y = clamp(this.y, minVal, maxVal);
      return this;
    }
    /**
     * If this vector's length is greater than the max value, it is replaced by
     * the max value.
     * If this vector's length is less than the min value, it is replaced by the
     * min value.
     *
     * @param {number} min - The minimum value the vector length will be clamped to.
     * @param {number} max - The maximum value the vector length will be clamped to.
     * @return {Vector2} A reference to this vector.
     */
    clampLength(min, max) {
      const length2 = this.length();
      return this.divideScalar(length2 || 1).multiplyScalar(clamp(length2, min, max));
    }
    /**
     * The components of this vector are rounded down to the nearest integer value.
     *
     * @return {Vector2} A reference to this vector.
     */
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      return this;
    }
    /**
     * The components of this vector are rounded up to the nearest integer value.
     *
     * @return {Vector2} A reference to this vector.
     */
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      return this;
    }
    /**
     * The components of this vector are rounded to the nearest integer value
     *
     * @return {Vector2} A reference to this vector.
     */
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      return this;
    }
    /**
     * The components of this vector are rounded towards zero (up if negative,
     * down if positive) to an integer value.
     *
     * @return {Vector2} A reference to this vector.
     */
    roundToZero() {
      this.x = Math.trunc(this.x);
      this.y = Math.trunc(this.y);
      return this;
    }
    /**
     * Inverts this vector - i.e. sets x = -x and y = -y.
     *
     * @return {Vector2} A reference to this vector.
     */
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      return this;
    }
    /**
     * Calculates the dot product of the given vector with this instance.
     *
     * @param {Vector2} v - The vector to compute the dot product with.
     * @return {number} The result of the dot product.
     */
    dot(v) {
      return this.x * v.x + this.y * v.y;
    }
    /**
     * Calculates the cross product of the given vector with this instance.
     *
     * @param {Vector2} v - The vector to compute the cross product with.
     * @return {number} The result of the cross product.
     */
    cross(v) {
      return this.x * v.y - this.y * v.x;
    }
    /**
     * Computes the square of the Euclidean length (straight-line length) from
     * (0, 0) to (x, y). If you are comparing the lengths of vectors, you should
     * compare the length squared instead as it is slightly more efficient to calculate.
     *
     * @return {number} The square length of this vector.
     */
    lengthSq() {
      return this.x * this.x + this.y * this.y;
    }
    /**
     * Computes the  Euclidean length (straight-line length) from (0, 0) to (x, y).
     *
     * @return {number} The length of this vector.
     */
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    /**
     * Computes the Manhattan length of this vector.
     *
     * @return {number} The length of this vector.
     */
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y);
    }
    /**
     * Converts this vector to a unit vector - that is, sets it equal to a vector
     * with the same direction as this one, but with a vector length of `1`.
     *
     * @return {Vector2} A reference to this vector.
     */
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    /**
     * Computes the angle in radians of this vector with respect to the positive x-axis.
     *
     * @return {number} The angle in radians.
     */
    angle() {
      const angle = Math.atan2(-this.y, -this.x) + Math.PI;
      return angle;
    }
    /**
     * Returns the angle between the given vector and this instance in radians.
     *
     * @param {Vector2} v - The vector to compute the angle with.
     * @return {number} The angle in radians.
     */
    angleTo(v) {
      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
      if (denominator === 0) return Math.PI / 2;
      const theta = this.dot(v) / denominator;
      return Math.acos(clamp(theta, -1, 1));
    }
    /**
     * Computes the distance from the given vector to this instance.
     *
     * @param {Vector2} v - The vector to compute the distance to.
     * @return {number} The distance.
     */
    distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
    /**
     * Computes the squared distance from the given vector to this instance.
     * If you are just comparing the distance with another distance, you should compare
     * the distance squared instead as it is slightly more efficient to calculate.
     *
     * @param {Vector2} v - The vector to compute the squared distance to.
     * @return {number} The squared distance.
     */
    distanceToSquared(v) {
      const dx = this.x - v.x, dy = this.y - v.y;
      return dx * dx + dy * dy;
    }
    /**
     * Computes the Manhattan distance from the given vector to this instance.
     *
     * @param {Vector2} v - The vector to compute the Manhattan distance to.
     * @return {number} The Manhattan distance.
     */
    manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
    }
    /**
     * Sets this vector to a vector with the same direction as this one, but
     * with the specified length.
     *
     * @param {number} length - The new length of this vector.
     * @return {Vector2} A reference to this vector.
     */
    setLength(length2) {
      return this.normalize().multiplyScalar(length2);
    }
    /**
     * Linearly interpolates between the given vector and this instance, where
     * alpha is the percent distance along the line - alpha = 0 will be this
     * vector, and alpha = 1 will be the given one.
     *
     * @param {Vector2} v - The vector to interpolate towards.
     * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
     * @return {Vector2} A reference to this vector.
     */
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      return this;
    }
    /**
     * Linearly interpolates between the given vectors, where alpha is the percent
     * distance along the line - alpha = 0 will be first vector, and alpha = 1 will
     * be the second one. The result is stored in this instance.
     *
     * @param {Vector2} v1 - The first vector.
     * @param {Vector2} v2 - The second vector.
     * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
     * @return {Vector2} A reference to this vector.
     */
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      return this;
    }
    /**
     * Returns `true` if this vector is equal with the given one.
     *
     * @param {Vector2} v - The vector to test for equality.
     * @return {boolean} Whether this vector is equal with the given one.
     */
    equals(v) {
      return v.x === this.x && v.y === this.y;
    }
    /**
     * Sets this vector's x value to be `array[ offset ]` and y
     * value to be `array[ offset + 1 ]`.
     *
     * @param {Array<number>} array - An array holding the vector component values.
     * @param {number} [offset=0] - The offset into the array.
     * @return {Vector2} A reference to this vector.
     */
    fromArray(array2, offset = 0) {
      this.x = array2[offset];
      this.y = array2[offset + 1];
      return this;
    }
    /**
     * Writes the components of this vector to the given array. If no array is provided,
     * the method returns a new instance.
     *
     * @param {Array<number>} [array=[]] - The target array holding the vector components.
     * @param {number} [offset=0] - Index of the first element in the array.
     * @return {Array<number>} The vector components.
     */
    toArray(array2 = [], offset = 0) {
      array2[offset] = this.x;
      array2[offset + 1] = this.y;
      return array2;
    }
    /**
     * Sets the components of this vector from the given buffer attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute holding vector data.
     * @param {number} index - The index into the attribute.
     * @return {Vector2} A reference to this vector.
     */
    fromBufferAttribute(attribute2, index) {
      this.x = attribute2.getX(index);
      this.y = attribute2.getY(index);
      return this;
    }
    /**
     * Rotates this vector around the given center by the given angle.
     *
     * @param {Vector2} center - The point around which to rotate.
     * @param {number} angle - The angle to rotate, in radians.
     * @return {Vector2} A reference to this vector.
     */
    rotateAround(center, angle) {
      const c = Math.cos(angle), s = Math.sin(angle);
      const x = this.x - center.x;
      const y = this.y - center.y;
      this.x = x * c - y * s + center.x;
      this.y = x * s + y * c + center.y;
      return this;
    }
    /**
     * Sets each component of this vector to a pseudo-random value between `0` and
     * `1`, excluding `1`.
     *
     * @return {Vector2} A reference to this vector.
     */
    random() {
      this.x = Math.random();
      this.y = Math.random();
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
    }
  };
  var Quaternion = class {
    /**
     * Constructs a new quaternion.
     *
     * @param {number} [x=0] - The x value of this quaternion.
     * @param {number} [y=0] - The y value of this quaternion.
     * @param {number} [z=0] - The z value of this quaternion.
     * @param {number} [w=1] - The w value of this quaternion.
     */
    constructor(x = 0, y = 0, z = 0, w = 1) {
      this.isQuaternion = true;
      this._x = x;
      this._y = y;
      this._z = z;
      this._w = w;
    }
    /**
     * Interpolates between two quaternions via SLERP. This implementation assumes the
     * quaternion data are managed  in flat arrays.
     *
     * @param {Array<number>} dst - The destination array.
     * @param {number} dstOffset - An offset into the destination array.
     * @param {Array<number>} src0 - The source array of the first quaternion.
     * @param {number} srcOffset0 - An offset into the first source array.
     * @param {Array<number>} src1 -  The source array of the second quaternion.
     * @param {number} srcOffset1 - An offset into the second source array.
     * @param {number} t - The interpolation factor in the range `[0,1]`.
     * @see {@link Quaternion#slerp}
     */
    static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t2) {
      let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w02 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w12 = src1[srcOffset1 + 3];
      if (t2 === 0) {
        dst[dstOffset + 0] = x0;
        dst[dstOffset + 1] = y0;
        dst[dstOffset + 2] = z0;
        dst[dstOffset + 3] = w02;
        return;
      }
      if (t2 === 1) {
        dst[dstOffset + 0] = x1;
        dst[dstOffset + 1] = y1;
        dst[dstOffset + 2] = z1;
        dst[dstOffset + 3] = w12;
        return;
      }
      if (w02 !== w12 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
        let s = 1 - t2;
        const cos2 = x0 * x1 + y0 * y1 + z0 * z1 + w02 * w12, dir = cos2 >= 0 ? 1 : -1, sqrSin = 1 - cos2 * cos2;
        if (sqrSin > Number.EPSILON) {
          const sin2 = Math.sqrt(sqrSin), len = Math.atan2(sin2, cos2 * dir);
          s = Math.sin(s * len) / sin2;
          t2 = Math.sin(t2 * len) / sin2;
        }
        const tDir = t2 * dir;
        x0 = x0 * s + x1 * tDir;
        y0 = y0 * s + y1 * tDir;
        z0 = z0 * s + z1 * tDir;
        w02 = w02 * s + w12 * tDir;
        if (s === 1 - t2) {
          const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w02 * w02);
          x0 *= f;
          y0 *= f;
          z0 *= f;
          w02 *= f;
        }
      }
      dst[dstOffset] = x0;
      dst[dstOffset + 1] = y0;
      dst[dstOffset + 2] = z0;
      dst[dstOffset + 3] = w02;
    }
    /**
     * Multiplies two quaternions. This implementation assumes the quaternion data are managed
     * in flat arrays.
     *
     * @param {Array<number>} dst - The destination array.
     * @param {number} dstOffset - An offset into the destination array.
     * @param {Array<number>} src0 - The source array of the first quaternion.
     * @param {number} srcOffset0 - An offset into the first source array.
     * @param {Array<number>} src1 -  The source array of the second quaternion.
     * @param {number} srcOffset1 - An offset into the second source array.
     * @return {Array<number>} The destination array.
     * @see {@link Quaternion#multiplyQuaternions}.
     */
    static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
      const x0 = src0[srcOffset0];
      const y0 = src0[srcOffset0 + 1];
      const z0 = src0[srcOffset0 + 2];
      const w02 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1];
      const y1 = src1[srcOffset1 + 1];
      const z1 = src1[srcOffset1 + 2];
      const w12 = src1[srcOffset1 + 3];
      dst[dstOffset] = x0 * w12 + w02 * x1 + y0 * z1 - z0 * y1;
      dst[dstOffset + 1] = y0 * w12 + w02 * y1 + z0 * x1 - x0 * z1;
      dst[dstOffset + 2] = z0 * w12 + w02 * z1 + x0 * y1 - y0 * x1;
      dst[dstOffset + 3] = w02 * w12 - x0 * x1 - y0 * y1 - z0 * z1;
      return dst;
    }
    /**
     * The x value of this quaternion.
     *
     * @type {number}
     * @default 0
     */
    get x() {
      return this._x;
    }
    set x(value) {
      this._x = value;
      this._onChangeCallback();
    }
    /**
     * The y value of this quaternion.
     *
     * @type {number}
     * @default 0
     */
    get y() {
      return this._y;
    }
    set y(value) {
      this._y = value;
      this._onChangeCallback();
    }
    /**
     * The z value of this quaternion.
     *
     * @type {number}
     * @default 0
     */
    get z() {
      return this._z;
    }
    set z(value) {
      this._z = value;
      this._onChangeCallback();
    }
    /**
     * The w value of this quaternion.
     *
     * @type {number}
     * @default 1
     */
    get w() {
      return this._w;
    }
    set w(value) {
      this._w = value;
      this._onChangeCallback();
    }
    /**
     * Sets the quaternion components.
     *
     * @param {number} x - The x value of this quaternion.
     * @param {number} y - The y value of this quaternion.
     * @param {number} z - The z value of this quaternion.
     * @param {number} w - The w value of this quaternion.
     * @return {Quaternion} A reference to this quaternion.
     */
    set(x, y, z, w) {
      this._x = x;
      this._y = y;
      this._z = z;
      this._w = w;
      this._onChangeCallback();
      return this;
    }
    /**
     * Returns a new quaternion with copied values from this instance.
     *
     * @return {Quaternion} A clone of this instance.
     */
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._w);
    }
    /**
     * Copies the values of the given quaternion to this instance.
     *
     * @param {Quaternion} quaternion - The quaternion to copy.
     * @return {Quaternion} A reference to this quaternion.
     */
    copy(quaternion) {
      this._x = quaternion.x;
      this._y = quaternion.y;
      this._z = quaternion.z;
      this._w = quaternion.w;
      this._onChangeCallback();
      return this;
    }
    /**
     * Sets this quaternion from the rotation specified by the given
     * Euler angles.
     *
     * @param {Euler} euler - The Euler angles.
     * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.
     * @return {Quaternion} A reference to this quaternion.
     */
    setFromEuler(euler, update = true) {
      const x = euler._x, y = euler._y, z = euler._z, order = euler._order;
      const cos2 = Math.cos;
      const sin2 = Math.sin;
      const c1 = cos2(x / 2);
      const c2 = cos2(y / 2);
      const c3 = cos2(z / 2);
      const s1 = sin2(x / 2);
      const s2 = sin2(y / 2);
      const s3 = sin2(z / 2);
      switch (order) {
        case "XYZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "YXZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "ZXY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "ZYX":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "YZX":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "XZY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        default:
          console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
      }
      if (update === true) this._onChangeCallback();
      return this;
    }
    /**
     * Sets this quaternion from the given axis and angle.
     *
     * @param {Vector3} axis - The normalized axis.
     * @param {number} angle - The angle in radians.
     * @return {Quaternion} A reference to this quaternion.
     */
    setFromAxisAngle(axis, angle) {
      const halfAngle = angle / 2, s = Math.sin(halfAngle);
      this._x = axis.x * s;
      this._y = axis.y * s;
      this._z = axis.z * s;
      this._w = Math.cos(halfAngle);
      this._onChangeCallback();
      return this;
    }
    /**
     * Sets this quaternion from the given rotation matrix.
     *
     * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).
     * @return {Quaternion} A reference to this quaternion.
     */
    setFromRotationMatrix(m) {
      const te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
      if (trace > 0) {
        const s = 0.5 / Math.sqrt(trace + 1);
        this._w = 0.25 / s;
        this._x = (m32 - m23) * s;
        this._y = (m13 - m31) * s;
        this._z = (m21 - m12) * s;
      } else if (m11 > m22 && m11 > m33) {
        const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
        this._w = (m32 - m23) / s;
        this._x = 0.25 * s;
        this._y = (m12 + m21) / s;
        this._z = (m13 + m31) / s;
      } else if (m22 > m33) {
        const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
        this._w = (m13 - m31) / s;
        this._x = (m12 + m21) / s;
        this._y = 0.25 * s;
        this._z = (m23 + m32) / s;
      } else {
        const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
        this._w = (m21 - m12) / s;
        this._x = (m13 + m31) / s;
        this._y = (m23 + m32) / s;
        this._z = 0.25 * s;
      }
      this._onChangeCallback();
      return this;
    }
    /**
     * Sets this quaternion to the rotation required to rotate the direction vector
     * `vFrom` to the direction vector `vTo`.
     *
     * @param {Vector3} vFrom - The first (normalized) direction vector.
     * @param {Vector3} vTo - The second (normalized) direction vector.
     * @return {Quaternion} A reference to this quaternion.
     */
    setFromUnitVectors(vFrom, vTo) {
      let r = vFrom.dot(vTo) + 1;
      if (r < Number.EPSILON) {
        r = 0;
        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
          this._x = -vFrom.y;
          this._y = vFrom.x;
          this._z = 0;
          this._w = r;
        } else {
          this._x = 0;
          this._y = -vFrom.z;
          this._z = vFrom.y;
          this._w = r;
        }
      } else {
        this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
        this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
        this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
        this._w = r;
      }
      return this.normalize();
    }
    /**
     * Returns the angle between this quaternion and the given one in radians.
     *
     * @param {Quaternion} q - The quaternion to compute the angle with.
     * @return {number} The angle in radians.
     */
    angleTo(q) {
      return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));
    }
    /**
     * Rotates this quaternion by a given angular step to the given quaternion.
     * The method ensures that the final quaternion will not overshoot `q`.
     *
     * @param {Quaternion} q - The target quaternion.
     * @param {number} step - The angular step in radians.
     * @return {Quaternion} A reference to this quaternion.
     */
    rotateTowards(q, step2) {
      const angle = this.angleTo(q);
      if (angle === 0) return this;
      const t2 = Math.min(1, step2 / angle);
      this.slerp(q, t2);
      return this;
    }
    /**
     * Sets this quaternion to the identity quaternion; that is, to the
     * quaternion that represents "no rotation".
     *
     * @return {Quaternion} A reference to this quaternion.
     */
    identity() {
      return this.set(0, 0, 0, 1);
    }
    /**
     * Inverts this quaternion via {@link Quaternion#conjugate}. The
     * quaternion is assumed to have unit length.
     *
     * @return {Quaternion} A reference to this quaternion.
     */
    invert() {
      return this.conjugate();
    }
    /**
     * Returns the rotational conjugate of this quaternion. The conjugate of a
     * quaternion represents the same rotation in the opposite direction about
     * the rotational axis.
     *
     * @return {Quaternion} A reference to this quaternion.
     */
    conjugate() {
      this._x *= -1;
      this._y *= -1;
      this._z *= -1;
      this._onChangeCallback();
      return this;
    }
    /**
     * Calculates the dot product of this quaternion and the given one.
     *
     * @param {Quaternion} v - The quaternion to compute the dot product with.
     * @return {number} The result of the dot product.
     */
    dot(v) {
      return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
    }
    /**
     * Computes the squared Euclidean length (straight-line length) of this quaternion,
     * considered as a 4 dimensional vector. This can be useful if you are comparing the
     * lengths of two quaternions, as this is a slightly more efficient calculation than
     * {@link Quaternion#length}.
     *
     * @return {number} The squared Euclidean length.
     */
    lengthSq() {
      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
    /**
     * Computes the Euclidean length (straight-line length) of this quaternion,
     * considered as a 4 dimensional vector.
     *
     * @return {number} The Euclidean length.
     */
    length() {
      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
    /**
     * Normalizes this quaternion - that is, calculated the quaternion that performs
     * the same rotation as this one, but has a length equal to `1`.
     *
     * @return {Quaternion} A reference to this quaternion.
     */
    normalize() {
      let l = this.length();
      if (l === 0) {
        this._x = 0;
        this._y = 0;
        this._z = 0;
        this._w = 1;
      } else {
        l = 1 / l;
        this._x = this._x * l;
        this._y = this._y * l;
        this._z = this._z * l;
        this._w = this._w * l;
      }
      this._onChangeCallback();
      return this;
    }
    /**
     * Multiplies this quaternion by the given one.
     *
     * @param {Quaternion} q - The quaternion.
     * @return {Quaternion} A reference to this quaternion.
     */
    multiply(q) {
      return this.multiplyQuaternions(this, q);
    }
    /**
     * Pre-multiplies this quaternion by the given one.
     *
     * @param {Quaternion} q - The quaternion.
     * @return {Quaternion} A reference to this quaternion.
     */
    premultiply(q) {
      return this.multiplyQuaternions(q, this);
    }
    /**
     * Multiplies the given quaternions and stores the result in this instance.
     *
     * @param {Quaternion} a - The first quaternion.
     * @param {Quaternion} b - The second quaternion.
     * @return {Quaternion} A reference to this quaternion.
     */
    multiplyQuaternions(a, b) {
      const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
      const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
      this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
      this._onChangeCallback();
      return this;
    }
    /**
     * Performs a spherical linear interpolation between quaternions.
     *
     * @param {Quaternion} qb - The target quaternion.
     * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.
     * @return {Quaternion} A reference to this quaternion.
     */
    slerp(qb, t2) {
      if (t2 === 0) return this;
      if (t2 === 1) return this.copy(qb);
      const x = this._x, y = this._y, z = this._z, w = this._w;
      let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
      if (cosHalfTheta < 0) {
        this._w = -qb._w;
        this._x = -qb._x;
        this._y = -qb._y;
        this._z = -qb._z;
        cosHalfTheta = -cosHalfTheta;
      } else {
        this.copy(qb);
      }
      if (cosHalfTheta >= 1) {
        this._w = w;
        this._x = x;
        this._y = y;
        this._z = z;
        return this;
      }
      const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
      if (sqrSinHalfTheta <= Number.EPSILON) {
        const s = 1 - t2;
        this._w = s * w + t2 * this._w;
        this._x = s * x + t2 * this._x;
        this._y = s * y + t2 * this._y;
        this._z = s * z + t2 * this._z;
        this.normalize();
        return this;
      }
      const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
      const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
      const ratioA = Math.sin((1 - t2) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t2 * halfTheta) / sinHalfTheta;
      this._w = w * ratioA + this._w * ratioB;
      this._x = x * ratioA + this._x * ratioB;
      this._y = y * ratioA + this._y * ratioB;
      this._z = z * ratioA + this._z * ratioB;
      this._onChangeCallback();
      return this;
    }
    /**
     * Performs a spherical linear interpolation between the given quaternions
     * and stores the result in this quaternion.
     *
     * @param {Quaternion} qa - The source quaternion.
     * @param {Quaternion} qb - The target quaternion.
     * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.
     * @return {Quaternion} A reference to this quaternion.
     */
    slerpQuaternions(qa, qb, t2) {
      return this.copy(qa).slerp(qb, t2);
    }
    /**
     * Sets this quaternion to a uniformly random, normalized quaternion.
     *
     * @return {Quaternion} A reference to this quaternion.
     */
    random() {
      const theta1 = 2 * Math.PI * Math.random();
      const theta2 = 2 * Math.PI * Math.random();
      const x0 = Math.random();
      const r1 = Math.sqrt(1 - x0);
      const r2 = Math.sqrt(x0);
      return this.set(
        r1 * Math.sin(theta1),
        r1 * Math.cos(theta1),
        r2 * Math.sin(theta2),
        r2 * Math.cos(theta2)
      );
    }
    /**
     * Returns `true` if this quaternion is equal with the given one.
     *
     * @param {Quaternion} quaternion - The quaternion to test for equality.
     * @return {boolean} Whether this quaternion is equal with the given one.
     */
    equals(quaternion) {
      return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
    }
    /**
     * Sets this quaternion's components from the given array.
     *
     * @param {Array<number>} array - An array holding the quaternion component values.
     * @param {number} [offset=0] - The offset into the array.
     * @return {Quaternion} A reference to this quaternion.
     */
    fromArray(array2, offset = 0) {
      this._x = array2[offset];
      this._y = array2[offset + 1];
      this._z = array2[offset + 2];
      this._w = array2[offset + 3];
      this._onChangeCallback();
      return this;
    }
    /**
     * Writes the components of this quaternion to the given array. If no array is provided,
     * the method returns a new instance.
     *
     * @param {Array<number>} [array=[]] - The target array holding the quaternion components.
     * @param {number} [offset=0] - Index of the first element in the array.
     * @return {Array<number>} The quaternion components.
     */
    toArray(array2 = [], offset = 0) {
      array2[offset] = this._x;
      array2[offset + 1] = this._y;
      array2[offset + 2] = this._z;
      array2[offset + 3] = this._w;
      return array2;
    }
    /**
     * Sets the components of this quaternion from the given buffer attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute holding quaternion data.
     * @param {number} index - The index into the attribute.
     * @return {Quaternion} A reference to this quaternion.
     */
    fromBufferAttribute(attribute2, index) {
      this._x = attribute2.getX(index);
      this._y = attribute2.getY(index);
      this._z = attribute2.getZ(index);
      this._w = attribute2.getW(index);
      this._onChangeCallback();
      return this;
    }
    /**
     * This methods defines the serialization result of this class. Returns the
     * numerical elements of this quaternion in an array of format `[x, y, z, w]`.
     *
     * @return {Array<number>} The serialized quaternion.
     */
    toJSON() {
      return this.toArray();
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
    *[Symbol.iterator]() {
      yield this._x;
      yield this._y;
      yield this._z;
      yield this._w;
    }
  };
  var Vector3 = class _Vector3 {
    /**
     * Constructs a new 3D vector.
     *
     * @param {number} [x=0] - The x value of this vector.
     * @param {number} [y=0] - The y value of this vector.
     * @param {number} [z=0] - The z value of this vector.
     */
    constructor(x = 0, y = 0, z = 0) {
      _Vector3.prototype.isVector3 = true;
      this.x = x;
      this.y = y;
      this.z = z;
    }
    /**
     * Sets the vector components.
     *
     * @param {number} x - The value of the x component.
     * @param {number} y - The value of the y component.
     * @param {number} z - The value of the z component.
     * @return {Vector3} A reference to this vector.
     */
    set(x, y, z) {
      if (z === void 0) z = this.z;
      this.x = x;
      this.y = y;
      this.z = z;
      return this;
    }
    /**
     * Sets the vector components to the same value.
     *
     * @param {number} scalar - The value to set for all vector components.
     * @return {Vector3} A reference to this vector.
     */
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      return this;
    }
    /**
     * Sets the vector's x component to the given value
     *
     * @param {number} x - The value to set.
     * @return {Vector3} A reference to this vector.
     */
    setX(x) {
      this.x = x;
      return this;
    }
    /**
     * Sets the vector's y component to the given value
     *
     * @param {number} y - The value to set.
     * @return {Vector3} A reference to this vector.
     */
    setY(y) {
      this.y = y;
      return this;
    }
    /**
     * Sets the vector's z component to the given value
     *
     * @param {number} z - The value to set.
     * @return {Vector3} A reference to this vector.
     */
    setZ(z) {
      this.z = z;
      return this;
    }
    /**
     * Allows to set a vector component with an index.
     *
     * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.
     * @param {number} value - The value to set.
     * @return {Vector3} A reference to this vector.
     */
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        case 2:
          this.z = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    /**
     * Returns the value of the vector component which matches the given index.
     *
     * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.
     * @return {number} A vector component value.
     */
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    /**
     * Returns a new vector with copied values from this instance.
     *
     * @return {Vector3} A clone of this instance.
     */
    clone() {
      return new this.constructor(this.x, this.y, this.z);
    }
    /**
     * Copies the values of the given vector to this instance.
     *
     * @param {Vector3} v - The vector to copy.
     * @return {Vector3} A reference to this vector.
     */
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      return this;
    }
    /**
     * Adds the given vector to this instance.
     *
     * @param {Vector3} v - The vector to add.
     * @return {Vector3} A reference to this vector.
     */
    add(v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      return this;
    }
    /**
     * Adds the given scalar value to all components of this instance.
     *
     * @param {number} s - The scalar to add.
     * @return {Vector3} A reference to this vector.
     */
    addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      return this;
    }
    /**
     * Adds the given vectors and stores the result in this instance.
     *
     * @param {Vector3} a - The first vector.
     * @param {Vector3} b - The second vector.
     * @return {Vector3} A reference to this vector.
     */
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      return this;
    }
    /**
     * Adds the given vector scaled by the given factor to this instance.
     *
     * @param {Vector3|Vector4} v - The vector.
     * @param {number} s - The factor that scales `v`.
     * @return {Vector3} A reference to this vector.
     */
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      return this;
    }
    /**
     * Subtracts the given vector from this instance.
     *
     * @param {Vector3} v - The vector to subtract.
     * @return {Vector3} A reference to this vector.
     */
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      return this;
    }
    /**
     * Subtracts the given scalar value from all components of this instance.
     *
     * @param {number} s - The scalar to subtract.
     * @return {Vector3} A reference to this vector.
     */
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      return this;
    }
    /**
     * Subtracts the given vectors and stores the result in this instance.
     *
     * @param {Vector3} a - The first vector.
     * @param {Vector3} b - The second vector.
     * @return {Vector3} A reference to this vector.
     */
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      return this;
    }
    /**
     * Multiplies the given vector with this instance.
     *
     * @param {Vector3} v - The vector to multiply.
     * @return {Vector3} A reference to this vector.
     */
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      return this;
    }
    /**
     * Multiplies the given scalar value with all components of this instance.
     *
     * @param {number} scalar - The scalar to multiply.
     * @return {Vector3} A reference to this vector.
     */
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      return this;
    }
    /**
     * Multiplies the given vectors and stores the result in this instance.
     *
     * @param {Vector3} a - The first vector.
     * @param {Vector3} b - The second vector.
     * @return {Vector3} A reference to this vector.
     */
    multiplyVectors(a, b) {
      this.x = a.x * b.x;
      this.y = a.y * b.y;
      this.z = a.z * b.z;
      return this;
    }
    /**
     * Applies the given Euler rotation to this vector.
     *
     * @param {Euler} euler - The Euler angles.
     * @return {Vector3} A reference to this vector.
     */
    applyEuler(euler) {
      return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
    }
    /**
     * Applies a rotation specified by an axis and an angle to this vector.
     *
     * @param {Vector3} axis - A normalized vector representing the rotation axis.
     * @param {number} angle - The angle in radians.
     * @return {Vector3} A reference to this vector.
     */
    applyAxisAngle(axis, angle) {
      return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));
    }
    /**
     * Multiplies this vector with the given 3x3 matrix.
     *
     * @param {Matrix3} m - The 3x3 matrix.
     * @return {Vector3} A reference to this vector.
     */
    applyMatrix3(m) {
      const x = this.x, y = this.y, z = this.z;
      const e = m.elements;
      this.x = e[0] * x + e[3] * y + e[6] * z;
      this.y = e[1] * x + e[4] * y + e[7] * z;
      this.z = e[2] * x + e[5] * y + e[8] * z;
      return this;
    }
    /**
     * Multiplies this vector by the given normal matrix and normalizes
     * the result.
     *
     * @param {Matrix3} m - The normal matrix.
     * @return {Vector3} A reference to this vector.
     */
    applyNormalMatrix(m) {
      return this.applyMatrix3(m).normalize();
    }
    /**
     * Multiplies this vector (with an implicit 1 in the 4th dimension) by m, and
     * divides by perspective.
     *
     * @param {Matrix4} m - The matrix to apply.
     * @return {Vector3} A reference to this vector.
     */
    applyMatrix4(m) {
      const x = this.x, y = this.y, z = this.z;
      const e = m.elements;
      const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
      this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
      this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
      this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
      return this;
    }
    /**
     * Applies the given Quaternion to this vector.
     *
     * @param {Quaternion} q - The Quaternion.
     * @return {Vector3} A reference to this vector.
     */
    applyQuaternion(q) {
      const vx = this.x, vy = this.y, vz = this.z;
      const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
      const tx = 2 * (qy * vz - qz * vy);
      const ty = 2 * (qz * vx - qx * vz);
      const tz = 2 * (qx * vy - qy * vx);
      this.x = vx + qw * tx + qy * tz - qz * ty;
      this.y = vy + qw * ty + qz * tx - qx * tz;
      this.z = vz + qw * tz + qx * ty - qy * tx;
      return this;
    }
    /**
     * Projects this vector from world space into the camera's normalized
     * device coordinate (NDC) space.
     *
     * @param {Camera} camera - The camera.
     * @return {Vector3} A reference to this vector.
     */
    project(camera) {
      return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
    }
    /**
     * Unprojects this vector from the camera's normalized device coordinate (NDC)
     * space into world space.
     *
     * @param {Camera} camera - The camera.
     * @return {Vector3} A reference to this vector.
     */
    unproject(camera) {
      return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
    }
    /**
     * Transforms the direction of this vector by a matrix (the upper left 3 x 3
     * subset of the given 4x4 matrix and then normalizes the result.
     *
     * @param {Matrix4} m - The matrix.
     * @return {Vector3} A reference to this vector.
     */
    transformDirection(m) {
      const x = this.x, y = this.y, z = this.z;
      const e = m.elements;
      this.x = e[0] * x + e[4] * y + e[8] * z;
      this.y = e[1] * x + e[5] * y + e[9] * z;
      this.z = e[2] * x + e[6] * y + e[10] * z;
      return this.normalize();
    }
    /**
     * Divides this instance by the given vector.
     *
     * @param {Vector3} v - The vector to divide.
     * @return {Vector3} A reference to this vector.
     */
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      this.z /= v.z;
      return this;
    }
    /**
     * Divides this vector by the given scalar.
     *
     * @param {number} scalar - The scalar to divide.
     * @return {Vector3} A reference to this vector.
     */
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    /**
     * If this vector's x, y or z value is greater than the given vector's x, y or z
     * value, replace that value with the corresponding min value.
     *
     * @param {Vector3} v - The vector.
     * @return {Vector3} A reference to this vector.
     */
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      return this;
    }
    /**
     * If this vector's x, y or z value is less than the given vector's x, y or z
     * value, replace that value with the corresponding max value.
     *
     * @param {Vector3} v - The vector.
     * @return {Vector3} A reference to this vector.
     */
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      return this;
    }
    /**
     * If this vector's x, y or z value is greater than the max vector's x, y or z
     * value, it is replaced by the corresponding value.
     * If this vector's x, y or z value is less than the min vector's x, y or z value,
     * it is replaced by the corresponding value.
     *
     * @param {Vector3} min - The minimum x, y and z values.
     * @param {Vector3} max - The maximum x, y and z values in the desired range.
     * @return {Vector3} A reference to this vector.
     */
    clamp(min, max) {
      this.x = clamp(this.x, min.x, max.x);
      this.y = clamp(this.y, min.y, max.y);
      this.z = clamp(this.z, min.z, max.z);
      return this;
    }
    /**
     * If this vector's x, y or z values are greater than the max value, they are
     * replaced by the max value.
     * If this vector's x, y or z values are less than the min value, they are
     * replaced by the min value.
     *
     * @param {number} minVal - The minimum value the components will be clamped to.
     * @param {number} maxVal - The maximum value the components will be clamped to.
     * @return {Vector3} A reference to this vector.
     */
    clampScalar(minVal, maxVal) {
      this.x = clamp(this.x, minVal, maxVal);
      this.y = clamp(this.y, minVal, maxVal);
      this.z = clamp(this.z, minVal, maxVal);
      return this;
    }
    /**
     * If this vector's length is greater than the max value, it is replaced by
     * the max value.
     * If this vector's length is less than the min value, it is replaced by the
     * min value.
     *
     * @param {number} min - The minimum value the vector length will be clamped to.
     * @param {number} max - The maximum value the vector length will be clamped to.
     * @return {Vector3} A reference to this vector.
     */
    clampLength(min, max) {
      const length2 = this.length();
      return this.divideScalar(length2 || 1).multiplyScalar(clamp(length2, min, max));
    }
    /**
     * The components of this vector are rounded down to the nearest integer value.
     *
     * @return {Vector3} A reference to this vector.
     */
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      return this;
    }
    /**
     * The components of this vector are rounded up to the nearest integer value.
     *
     * @return {Vector3} A reference to this vector.
     */
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      return this;
    }
    /**
     * The components of this vector are rounded to the nearest integer value
     *
     * @return {Vector3} A reference to this vector.
     */
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      return this;
    }
    /**
     * The components of this vector are rounded towards zero (up if negative,
     * down if positive) to an integer value.
     *
     * @return {Vector3} A reference to this vector.
     */
    roundToZero() {
      this.x = Math.trunc(this.x);
      this.y = Math.trunc(this.y);
      this.z = Math.trunc(this.z);
      return this;
    }
    /**
     * Inverts this vector - i.e. sets x = -x, y = -y and z = -z.
     *
     * @return {Vector3} A reference to this vector.
     */
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      return this;
    }
    /**
     * Calculates the dot product of the given vector with this instance.
     *
     * @param {Vector3} v - The vector to compute the dot product with.
     * @return {number} The result of the dot product.
     */
    dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z;
    }
    // TODO lengthSquared?
    /**
     * Computes the square of the Euclidean length (straight-line length) from
     * (0, 0, 0) to (x, y, z). If you are comparing the lengths of vectors, you should
     * compare the length squared instead as it is slightly more efficient to calculate.
     *
     * @return {number} The square length of this vector.
     */
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    /**
     * Computes the  Euclidean length (straight-line length) from (0, 0, 0) to (x, y, z).
     *
     * @return {number} The length of this vector.
     */
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    /**
     * Computes the Manhattan length of this vector.
     *
     * @return {number} The length of this vector.
     */
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    /**
     * Converts this vector to a unit vector - that is, sets it equal to a vector
     * with the same direction as this one, but with a vector length of `1`.
     *
     * @return {Vector3} A reference to this vector.
     */
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    /**
     * Sets this vector to a vector with the same direction as this one, but
     * with the specified length.
     *
     * @param {number} length - The new length of this vector.
     * @return {Vector3} A reference to this vector.
     */
    setLength(length2) {
      return this.normalize().multiplyScalar(length2);
    }
    /**
     * Linearly interpolates between the given vector and this instance, where
     * alpha is the percent distance along the line - alpha = 0 will be this
     * vector, and alpha = 1 will be the given one.
     *
     * @param {Vector3} v - The vector to interpolate towards.
     * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
     * @return {Vector3} A reference to this vector.
     */
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      return this;
    }
    /**
     * Linearly interpolates between the given vectors, where alpha is the percent
     * distance along the line - alpha = 0 will be first vector, and alpha = 1 will
     * be the second one. The result is stored in this instance.
     *
     * @param {Vector3} v1 - The first vector.
     * @param {Vector3} v2 - The second vector.
     * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
     * @return {Vector3} A reference to this vector.
     */
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      return this;
    }
    /**
     * Calculates the cross product of the given vector with this instance.
     *
     * @param {Vector3} v - The vector to compute the cross product with.
     * @return {Vector3} The result of the cross product.
     */
    cross(v) {
      return this.crossVectors(this, v);
    }
    /**
     * Calculates the cross product of the given vectors and stores the result
     * in this instance.
     *
     * @param {Vector3} a - The first vector.
     * @param {Vector3} b - The second vector.
     * @return {Vector3} A reference to this vector.
     */
    crossVectors(a, b) {
      const ax = a.x, ay = a.y, az = a.z;
      const bx = b.x, by = b.y, bz = b.z;
      this.x = ay * bz - az * by;
      this.y = az * bx - ax * bz;
      this.z = ax * by - ay * bx;
      return this;
    }
    /**
     * Projects this vector onto the given one.
     *
     * @param {Vector3} v - The vector to project to.
     * @return {Vector3} A reference to this vector.
     */
    projectOnVector(v) {
      const denominator = v.lengthSq();
      if (denominator === 0) return this.set(0, 0, 0);
      const scalar = v.dot(this) / denominator;
      return this.copy(v).multiplyScalar(scalar);
    }
    /**
     * Projects this vector onto a plane by subtracting this
     * vector projected onto the plane's normal from this vector.
     *
     * @param {Vector3} planeNormal - The plane normal.
     * @return {Vector3} A reference to this vector.
     */
    projectOnPlane(planeNormal) {
      _vector$c.copy(this).projectOnVector(planeNormal);
      return this.sub(_vector$c);
    }
    /**
     * Reflects this vector off a plane orthogonal to the given normal vector.
     *
     * @param {Vector3} normal - The (normalized) normal vector.
     * @return {Vector3} A reference to this vector.
     */
    reflect(normal2) {
      return this.sub(_vector$c.copy(normal2).multiplyScalar(2 * this.dot(normal2)));
    }
    /**
     * Returns the angle between the given vector and this instance in radians.
     *
     * @param {Vector3} v - The vector to compute the angle with.
     * @return {number} The angle in radians.
     */
    angleTo(v) {
      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
      if (denominator === 0) return Math.PI / 2;
      const theta = this.dot(v) / denominator;
      return Math.acos(clamp(theta, -1, 1));
    }
    /**
     * Computes the distance from the given vector to this instance.
     *
     * @param {Vector3} v - The vector to compute the distance to.
     * @return {number} The distance.
     */
    distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
    /**
     * Computes the squared distance from the given vector to this instance.
     * If you are just comparing the distance with another distance, you should compare
     * the distance squared instead as it is slightly more efficient to calculate.
     *
     * @param {Vector3} v - The vector to compute the squared distance to.
     * @return {number} The squared distance.
     */
    distanceToSquared(v) {
      const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
      return dx * dx + dy * dy + dz * dz;
    }
    /**
     * Computes the Manhattan distance from the given vector to this instance.
     *
     * @param {Vector3} v - The vector to compute the Manhattan distance to.
     * @return {number} The Manhattan distance.
     */
    manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
    }
    /**
     * Sets the vector components from the given spherical coordinates.
     *
     * @param {Spherical} s - The spherical coordinates.
     * @return {Vector3} A reference to this vector.
     */
    setFromSpherical(s) {
      return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
    }
    /**
     * Sets the vector components from the given spherical coordinates.
     *
     * @param {number} radius - The radius.
     * @param {number} phi - The phi angle in radians.
     * @param {number} theta - The theta angle in radians.
     * @return {Vector3} A reference to this vector.
     */
    setFromSphericalCoords(radius, phi, theta) {
      const sinPhiRadius = Math.sin(phi) * radius;
      this.x = sinPhiRadius * Math.sin(theta);
      this.y = Math.cos(phi) * radius;
      this.z = sinPhiRadius * Math.cos(theta);
      return this;
    }
    /**
     * Sets the vector components from the given cylindrical coordinates.
     *
     * @param {Cylindrical} c - The cylindrical coordinates.
     * @return {Vector3} A reference to this vector.
     */
    setFromCylindrical(c) {
      return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
    }
    /**
     * Sets the vector components from the given cylindrical coordinates.
     *
     * @param {number} radius - The radius.
     * @param {number} theta - The theta angle in radians.
     * @param {number} y - The y value.
     * @return {Vector3} A reference to this vector.
     */
    setFromCylindricalCoords(radius, theta, y) {
      this.x = radius * Math.sin(theta);
      this.y = y;
      this.z = radius * Math.cos(theta);
      return this;
    }
    /**
     * Sets the vector components to the position elements of the
     * given transformation matrix.
     *
     * @param {Matrix4} m - The 4x4 matrix.
     * @return {Vector3} A reference to this vector.
     */
    setFromMatrixPosition(m) {
      const e = m.elements;
      this.x = e[12];
      this.y = e[13];
      this.z = e[14];
      return this;
    }
    /**
     * Sets the vector components to the scale elements of the
     * given transformation matrix.
     *
     * @param {Matrix4} m - The 4x4 matrix.
     * @return {Vector3} A reference to this vector.
     */
    setFromMatrixScale(m) {
      const sx = this.setFromMatrixColumn(m, 0).length();
      const sy = this.setFromMatrixColumn(m, 1).length();
      const sz = this.setFromMatrixColumn(m, 2).length();
      this.x = sx;
      this.y = sy;
      this.z = sz;
      return this;
    }
    /**
     * Sets the vector components from the specified matrix column.
     *
     * @param {Matrix4} m - The 4x4 matrix.
     * @param {number} index - The column index.
     * @return {Vector3} A reference to this vector.
     */
    setFromMatrixColumn(m, index) {
      return this.fromArray(m.elements, index * 4);
    }
    /**
     * Sets the vector components from the specified matrix column.
     *
     * @param {Matrix3} m - The 3x3 matrix.
     * @param {number} index - The column index.
     * @return {Vector3} A reference to this vector.
     */
    setFromMatrix3Column(m, index) {
      return this.fromArray(m.elements, index * 3);
    }
    /**
     * Sets the vector components from the given Euler angles.
     *
     * @param {Euler} e - The Euler angles to set.
     * @return {Vector3} A reference to this vector.
     */
    setFromEuler(e) {
      this.x = e._x;
      this.y = e._y;
      this.z = e._z;
      return this;
    }
    /**
     * Sets the vector components from the RGB components of the
     * given color.
     *
     * @param {Color} c - The color to set.
     * @return {Vector3} A reference to this vector.
     */
    setFromColor(c) {
      this.x = c.r;
      this.y = c.g;
      this.z = c.b;
      return this;
    }
    /**
     * Returns `true` if this vector is equal with the given one.
     *
     * @param {Vector3} v - The vector to test for equality.
     * @return {boolean} Whether this vector is equal with the given one.
     */
    equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z;
    }
    /**
     * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`
     * and z value to be `array[ offset + 2 ]`.
     *
     * @param {Array<number>} array - An array holding the vector component values.
     * @param {number} [offset=0] - The offset into the array.
     * @return {Vector3} A reference to this vector.
     */
    fromArray(array2, offset = 0) {
      this.x = array2[offset];
      this.y = array2[offset + 1];
      this.z = array2[offset + 2];
      return this;
    }
    /**
     * Writes the components of this vector to the given array. If no array is provided,
     * the method returns a new instance.
     *
     * @param {Array<number>} [array=[]] - The target array holding the vector components.
     * @param {number} [offset=0] - Index of the first element in the array.
     * @return {Array<number>} The vector components.
     */
    toArray(array2 = [], offset = 0) {
      array2[offset] = this.x;
      array2[offset + 1] = this.y;
      array2[offset + 2] = this.z;
      return array2;
    }
    /**
     * Sets the components of this vector from the given buffer attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute holding vector data.
     * @param {number} index - The index into the attribute.
     * @return {Vector3} A reference to this vector.
     */
    fromBufferAttribute(attribute2, index) {
      this.x = attribute2.getX(index);
      this.y = attribute2.getY(index);
      this.z = attribute2.getZ(index);
      return this;
    }
    /**
     * Sets each component of this vector to a pseudo-random value between `0` and
     * `1`, excluding `1`.
     *
     * @return {Vector3} A reference to this vector.
     */
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      return this;
    }
    /**
     * Sets this vector to a uniformly random point on a unit sphere.
     *
     * @return {Vector3} A reference to this vector.
     */
    randomDirection() {
      const theta = Math.random() * Math.PI * 2;
      const u = Math.random() * 2 - 1;
      const c = Math.sqrt(1 - u * u);
      this.x = c * Math.cos(theta);
      this.y = u;
      this.z = c * Math.sin(theta);
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
      yield this.z;
    }
  };
  var _vector$c = /* @__PURE__ */ new Vector3();
  var _quaternion$4 = /* @__PURE__ */ new Quaternion();
  var Matrix3 = class _Matrix3 {
    /**
     * Constructs a new 3x3 matrix. The arguments are supposed to be
     * in row-major order. If no arguments are provided, the constructor
     * initializes the matrix as an identity matrix.
     *
     * @param {number} [n11] - 1-1 matrix element.
     * @param {number} [n12] - 1-2 matrix element.
     * @param {number} [n13] - 1-3 matrix element.
     * @param {number} [n21] - 2-1 matrix element.
     * @param {number} [n22] - 2-2 matrix element.
     * @param {number} [n23] - 2-3 matrix element.
     * @param {number} [n31] - 3-1 matrix element.
     * @param {number} [n32] - 3-2 matrix element.
     * @param {number} [n33] - 3-3 matrix element.
     */
    constructor(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      _Matrix3.prototype.isMatrix3 = true;
      this.elements = [
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      ];
      if (n11 !== void 0) {
        this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);
      }
    }
    /**
     * Sets the elements of the matrix.The arguments are supposed to be
     * in row-major order.
     *
     * @param {number} [n11] - 1-1 matrix element.
     * @param {number} [n12] - 1-2 matrix element.
     * @param {number} [n13] - 1-3 matrix element.
     * @param {number} [n21] - 2-1 matrix element.
     * @param {number} [n22] - 2-2 matrix element.
     * @param {number} [n23] - 2-3 matrix element.
     * @param {number} [n31] - 3-1 matrix element.
     * @param {number} [n32] - 3-2 matrix element.
     * @param {number} [n33] - 3-3 matrix element.
     * @return {Matrix3} A reference to this matrix.
     */
    set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      const te = this.elements;
      te[0] = n11;
      te[1] = n21;
      te[2] = n31;
      te[3] = n12;
      te[4] = n22;
      te[5] = n32;
      te[6] = n13;
      te[7] = n23;
      te[8] = n33;
      return this;
    }
    /**
     * Sets this matrix to the 3x3 identity matrix.
     *
     * @return {Matrix3} A reference to this matrix.
     */
    identity() {
      this.set(
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      );
      return this;
    }
    /**
     * Copies the values of the given matrix to this instance.
     *
     * @param {Matrix3} m - The matrix to copy.
     * @return {Matrix3} A reference to this matrix.
     */
    copy(m) {
      const te = this.elements;
      const me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      return this;
    }
    /**
     * Extracts the basis of this matrix into the three axis vectors provided.
     *
     * @param {Vector3} xAxis - The basis's x axis.
     * @param {Vector3} yAxis - The basis's y axis.
     * @param {Vector3} zAxis - The basis's z axis.
     * @return {Matrix3} A reference to this matrix.
     */
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrix3Column(this, 0);
      yAxis.setFromMatrix3Column(this, 1);
      zAxis.setFromMatrix3Column(this, 2);
      return this;
    }
    /**
     * Set this matrix to the upper 3x3 matrix of the given 4x4 matrix.
     *
     * @param {Matrix4} m - The 4x4 matrix.
     * @return {Matrix3} A reference to this matrix.
     */
    setFromMatrix4(m) {
      const me = m.elements;
      this.set(
        me[0],
        me[4],
        me[8],
        me[1],
        me[5],
        me[9],
        me[2],
        me[6],
        me[10]
      );
      return this;
    }
    /**
     * Post-multiplies this matrix by the given 3x3 matrix.
     *
     * @param {Matrix3} m - The matrix to multiply with.
     * @return {Matrix3} A reference to this matrix.
     */
    multiply(m) {
      return this.multiplyMatrices(this, m);
    }
    /**
     * Pre-multiplies this matrix by the given 3x3 matrix.
     *
     * @param {Matrix3} m - The matrix to multiply with.
     * @return {Matrix3} A reference to this matrix.
     */
    premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
    /**
     * Multiples the given 3x3 matrices and stores the result
     * in this matrix.
     *
     * @param {Matrix3} a - The first matrix.
     * @param {Matrix3} b - The second matrix.
     * @return {Matrix3} A reference to this matrix.
     */
    multiplyMatrices(a, b) {
      const ae = a.elements;
      const be = b.elements;
      const te = this.elements;
      const a11 = ae[0], a12 = ae[3], a13 = ae[6];
      const a21 = ae[1], a22 = ae[4], a23 = ae[7];
      const a31 = ae[2], a32 = ae[5], a33 = ae[8];
      const b11 = be[0], b12 = be[3], b13 = be[6];
      const b21 = be[1], b22 = be[4], b23 = be[7];
      const b31 = be[2], b32 = be[5], b33 = be[8];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31;
      te[3] = a11 * b12 + a12 * b22 + a13 * b32;
      te[6] = a11 * b13 + a12 * b23 + a13 * b33;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31;
      te[4] = a21 * b12 + a22 * b22 + a23 * b32;
      te[7] = a21 * b13 + a22 * b23 + a23 * b33;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31;
      te[5] = a31 * b12 + a32 * b22 + a33 * b32;
      te[8] = a31 * b13 + a32 * b23 + a33 * b33;
      return this;
    }
    /**
     * Multiplies every component of the matrix by the given scalar.
     *
     * @param {number} s - The scalar.
     * @return {Matrix3} A reference to this matrix.
     */
    multiplyScalar(s) {
      const te = this.elements;
      te[0] *= s;
      te[3] *= s;
      te[6] *= s;
      te[1] *= s;
      te[4] *= s;
      te[7] *= s;
      te[2] *= s;
      te[5] *= s;
      te[8] *= s;
      return this;
    }
    /**
     * Computes and returns the determinant of this matrix.
     *
     * @return {number} The determinant.
     */
    determinant() {
      const te = this.elements;
      const a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i = te[8];
      return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
    }
    /**
     * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.
     * You can not invert with a determinant of zero. If you attempt this, the method produces
     * a zero matrix instead.
     *
     * @return {Matrix3} A reference to this matrix.
     */
    invert() {
      const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
      if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n31 * n23 - n33 * n21) * detInv;
      te[2] = (n32 * n21 - n31 * n22) * detInv;
      te[3] = t12 * detInv;
      te[4] = (n33 * n11 - n31 * n13) * detInv;
      te[5] = (n31 * n12 - n32 * n11) * detInv;
      te[6] = t13 * detInv;
      te[7] = (n21 * n13 - n23 * n11) * detInv;
      te[8] = (n22 * n11 - n21 * n12) * detInv;
      return this;
    }
    /**
     * Transposes this matrix in place.
     *
     * @return {Matrix3} A reference to this matrix.
     */
    transpose() {
      let tmp;
      const m = this.elements;
      tmp = m[1];
      m[1] = m[3];
      m[3] = tmp;
      tmp = m[2];
      m[2] = m[6];
      m[6] = tmp;
      tmp = m[5];
      m[5] = m[7];
      m[7] = tmp;
      return this;
    }
    /**
     * Computes the normal matrix which is the inverse transpose of the upper
     * left 3x3 portion of the given 4x4 matrix.
     *
     * @param {Matrix4} matrix4 - The 4x4 matrix.
     * @return {Matrix3} A reference to this matrix.
     */
    getNormalMatrix(matrix4) {
      return this.setFromMatrix4(matrix4).invert().transpose();
    }
    /**
     * Transposes this matrix into the supplied array, and returns itself unchanged.
     *
     * @param {Array<number>} r - An array to store the transposed matrix elements.
     * @return {Matrix3} A reference to this matrix.
     */
    transposeIntoArray(r) {
      const m = this.elements;
      r[0] = m[0];
      r[1] = m[3];
      r[2] = m[6];
      r[3] = m[1];
      r[4] = m[4];
      r[5] = m[7];
      r[6] = m[2];
      r[7] = m[5];
      r[8] = m[8];
      return this;
    }
    /**
     * Sets the UV transform matrix from offset, repeat, rotation, and center.
     *
     * @param {number} tx - Offset x.
     * @param {number} ty - Offset y.
     * @param {number} sx - Repeat x.
     * @param {number} sy - Repeat y.
     * @param {number} rotation - Rotation, in radians. Positive values rotate counterclockwise.
     * @param {number} cx - Center x of rotation.
     * @param {number} cy - Center y of rotation
     * @return {Matrix3} A reference to this matrix.
     */
    setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
      const c = Math.cos(rotation);
      const s = Math.sin(rotation);
      this.set(
        sx * c,
        sx * s,
        -sx * (c * cx + s * cy) + cx + tx,
        -sy * s,
        sy * c,
        -sy * (-s * cx + c * cy) + cy + ty,
        0,
        0,
        1
      );
      return this;
    }
    /**
     * Scales this matrix with the given scalar values.
     *
     * @param {number} sx - The amount to scale in the X axis.
     * @param {number} sy - The amount to scale in the Y axis.
     * @return {Matrix3} A reference to this matrix.
     */
    scale(sx, sy) {
      this.premultiply(_m3.makeScale(sx, sy));
      return this;
    }
    /**
     * Rotates this matrix by the given angle.
     *
     * @param {number} theta - The rotation in radians.
     * @return {Matrix3} A reference to this matrix.
     */
    rotate(theta) {
      this.premultiply(_m3.makeRotation(-theta));
      return this;
    }
    /**
     * Translates this matrix by the given scalar values.
     *
     * @param {number} tx - The amount to translate in the X axis.
     * @param {number} ty - The amount to translate in the Y axis.
     * @return {Matrix3} A reference to this matrix.
     */
    translate(tx, ty) {
      this.premultiply(_m3.makeTranslation(tx, ty));
      return this;
    }
    // for 2D Transforms
    /**
     * Sets this matrix as a 2D translation transform.
     *
     * @param {number|Vector2} x - The amount to translate in the X axis or alternatively a translation vector.
     * @param {number} y - The amount to translate in the Y axis.
     * @return {Matrix3} A reference to this matrix.
     */
    makeTranslation(x, y) {
      if (x.isVector2) {
        this.set(
          1,
          0,
          x.x,
          0,
          1,
          x.y,
          0,
          0,
          1
        );
      } else {
        this.set(
          1,
          0,
          x,
          0,
          1,
          y,
          0,
          0,
          1
        );
      }
      return this;
    }
    /**
     * Sets this matrix as a 2D rotational transformation.
     *
     * @param {number} theta - The rotation in radians.
     * @return {Matrix3} A reference to this matrix.
     */
    makeRotation(theta) {
      const c = Math.cos(theta);
      const s = Math.sin(theta);
      this.set(
        c,
        -s,
        0,
        s,
        c,
        0,
        0,
        0,
        1
      );
      return this;
    }
    /**
     * Sets this matrix as a 2D scale transform.
     *
     * @param {number} x - The amount to scale in the X axis.
     * @param {number} y - The amount to scale in the Y axis.
     * @return {Matrix3} A reference to this matrix.
     */
    makeScale(x, y) {
      this.set(
        x,
        0,
        0,
        0,
        y,
        0,
        0,
        0,
        1
      );
      return this;
    }
    /**
     * Returns `true` if this matrix is equal with the given one.
     *
     * @param {Matrix3} matrix - The matrix to test for equality.
     * @return {boolean} Whether this matrix is equal with the given one.
     */
    equals(matrix) {
      const te = this.elements;
      const me = matrix.elements;
      for (let i = 0; i < 9; i++) {
        if (te[i] !== me[i]) return false;
      }
      return true;
    }
    /**
     * Sets the elements of the matrix from the given array.
     *
     * @param {Array<number>} array - The matrix elements in column-major order.
     * @param {number} [offset=0] - Index of the first element in the array.
     * @return {Matrix3} A reference to this matrix.
     */
    fromArray(array2, offset = 0) {
      for (let i = 0; i < 9; i++) {
        this.elements[i] = array2[i + offset];
      }
      return this;
    }
    /**
     * Writes the elements of this matrix to the given array. If no array is provided,
     * the method returns a new instance.
     *
     * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.
     * @param {number} [offset=0] - Index of the first element in the array.
     * @return {Array<number>} The matrix elements in column-major order.
     */
    toArray(array2 = [], offset = 0) {
      const te = this.elements;
      array2[offset] = te[0];
      array2[offset + 1] = te[1];
      array2[offset + 2] = te[2];
      array2[offset + 3] = te[3];
      array2[offset + 4] = te[4];
      array2[offset + 5] = te[5];
      array2[offset + 6] = te[6];
      array2[offset + 7] = te[7];
      array2[offset + 8] = te[8];
      return array2;
    }
    /**
     * Returns a matrix with copied values from this instance.
     *
     * @return {Matrix3} A clone of this instance.
     */
    clone() {
      return new this.constructor().fromArray(this.elements);
    }
  };
  var _m3 = /* @__PURE__ */ new Matrix3();
  function arrayNeedsUint32(array2) {
    for (let i = array2.length - 1; i >= 0; --i) {
      if (array2[i] >= 65535) return true;
    }
    return false;
  }
  function createElementNS(name2) {
    return document.createElementNS("http://www.w3.org/1999/xhtml", name2);
  }
  function createCanvasElement() {
    const canvas = createElementNS("canvas");
    canvas.style.display = "block";
    return canvas;
  }
  var _cache = {};
  function warnOnce(message) {
    if (message in _cache) return;
    _cache[message] = true;
    console.warn(message);
  }
  var LINEAR_REC709_TO_XYZ = /* @__PURE__ */ new Matrix3().set(
    0.4123908,
    0.3575843,
    0.1804808,
    0.212639,
    0.7151687,
    0.0721923,
    0.0193308,
    0.1191948,
    0.9505322
  );
  var XYZ_TO_LINEAR_REC709 = /* @__PURE__ */ new Matrix3().set(
    3.2409699,
    -1.5373832,
    -0.4986108,
    -0.9692436,
    1.8759675,
    0.0415551,
    0.0556301,
    -0.203977,
    1.0569715
  );
  function createColorManagement() {
    const ColorManagement2 = {
      enabled: true,
      workingColorSpace: LinearSRGBColorSpace,
      /**
       * Implementations of supported color spaces.
       *
       * Required:
       *	- primaries: chromaticity coordinates [ rx ry gx gy bx by ]
       *	- whitePoint: reference white [ x y ]
       *	- transfer: transfer function (pre-defined)
       *	- toXYZ: Matrix3 RGB to XYZ transform
       *	- fromXYZ: Matrix3 XYZ to RGB transform
       *	- luminanceCoefficients: RGB luminance coefficients
       *
       * Optional:
       *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }
       *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }
       *
       * Reference:
       * - https://www.russellcottrell.com/photo/matrixCalculator.htm
       */
      spaces: {},
      convert: function(color2, sourceColorSpace, targetColorSpace) {
        if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {
          return color2;
        }
        if (this.spaces[sourceColorSpace].transfer === SRGBTransfer) {
          color2.r = SRGBToLinear(color2.r);
          color2.g = SRGBToLinear(color2.g);
          color2.b = SRGBToLinear(color2.b);
        }
        if (this.spaces[sourceColorSpace].primaries !== this.spaces[targetColorSpace].primaries) {
          color2.applyMatrix3(this.spaces[sourceColorSpace].toXYZ);
          color2.applyMatrix3(this.spaces[targetColorSpace].fromXYZ);
        }
        if (this.spaces[targetColorSpace].transfer === SRGBTransfer) {
          color2.r = LinearToSRGB(color2.r);
          color2.g = LinearToSRGB(color2.g);
          color2.b = LinearToSRGB(color2.b);
        }
        return color2;
      },
      workingToColorSpace: function(color2, targetColorSpace) {
        return this.convert(color2, this.workingColorSpace, targetColorSpace);
      },
      colorSpaceToWorking: function(color2, sourceColorSpace) {
        return this.convert(color2, sourceColorSpace, this.workingColorSpace);
      },
      getPrimaries: function(colorSpace) {
        return this.spaces[colorSpace].primaries;
      },
      getTransfer: function(colorSpace) {
        if (colorSpace === NoColorSpace) return LinearTransfer;
        return this.spaces[colorSpace].transfer;
      },
      getLuminanceCoefficients: function(target, colorSpace = this.workingColorSpace) {
        return target.fromArray(this.spaces[colorSpace].luminanceCoefficients);
      },
      define: function(colorSpaces) {
        Object.assign(this.spaces, colorSpaces);
      },
      // Internal APIs
      _getMatrix: function(targetMatrix, sourceColorSpace, targetColorSpace) {
        return targetMatrix.copy(this.spaces[sourceColorSpace].toXYZ).multiply(this.spaces[targetColorSpace].fromXYZ);
      },
      _getDrawingBufferColorSpace: function(colorSpace) {
        return this.spaces[colorSpace].outputColorSpaceConfig.drawingBufferColorSpace;
      },
      _getUnpackColorSpace: function(colorSpace = this.workingColorSpace) {
        return this.spaces[colorSpace].workingColorSpaceConfig.unpackColorSpace;
      },
      // Deprecated
      fromWorkingColorSpace: function(color2, targetColorSpace) {
        warnOnce("THREE.ColorManagement: .fromWorkingColorSpace() has been renamed to .workingToColorSpace().");
        return ColorManagement2.workingToColorSpace(color2, targetColorSpace);
      },
      toWorkingColorSpace: function(color2, sourceColorSpace) {
        warnOnce("THREE.ColorManagement: .toWorkingColorSpace() has been renamed to .colorSpaceToWorking().");
        return ColorManagement2.colorSpaceToWorking(color2, sourceColorSpace);
      }
    };
    const REC709_PRIMARIES = [0.64, 0.33, 0.3, 0.6, 0.15, 0.06];
    const REC709_LUMINANCE_COEFFICIENTS = [0.2126, 0.7152, 0.0722];
    const D65 = [0.3127, 0.329];
    ColorManagement2.define({
      [LinearSRGBColorSpace]: {
        primaries: REC709_PRIMARIES,
        whitePoint: D65,
        transfer: LinearTransfer,
        toXYZ: LINEAR_REC709_TO_XYZ,
        fromXYZ: XYZ_TO_LINEAR_REC709,
        luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
        workingColorSpaceConfig: { unpackColorSpace: SRGBColorSpace },
        outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
      },
      [SRGBColorSpace]: {
        primaries: REC709_PRIMARIES,
        whitePoint: D65,
        transfer: SRGBTransfer,
        toXYZ: LINEAR_REC709_TO_XYZ,
        fromXYZ: XYZ_TO_LINEAR_REC709,
        luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,
        outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }
      }
    });
    return ColorManagement2;
  }
  var ColorManagement = /* @__PURE__ */ createColorManagement();
  function SRGBToLinear(c) {
    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
  }
  function LinearToSRGB(c) {
    return c < 31308e-7 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
  }
  var _canvas;
  var ImageUtils = class {
    /**
     * Returns a data URI containing a representation of the given image.
     *
     * @param {(HTMLImageElement|HTMLCanvasElement)} image - The image object.
     * @param {string} [type='image/png'] - Indicates the image format.
     * @return {string} The data URI.
     */
    static getDataURL(image, type = "image/png") {
      if (/^data:/i.test(image.src)) {
        return image.src;
      }
      if (typeof HTMLCanvasElement === "undefined") {
        return image.src;
      }
      let canvas;
      if (image instanceof HTMLCanvasElement) {
        canvas = image;
      } else {
        if (_canvas === void 0) _canvas = createElementNS("canvas");
        _canvas.width = image.width;
        _canvas.height = image.height;
        const context2 = _canvas.getContext("2d");
        if (image instanceof ImageData) {
          context2.putImageData(image, 0, 0);
        } else {
          context2.drawImage(image, 0, 0, image.width, image.height);
        }
        canvas = _canvas;
      }
      return canvas.toDataURL(type);
    }
    /**
     * Converts the given sRGB image data to linear color space.
     *
     * @param {(HTMLImageElement|HTMLCanvasElement|ImageBitmap|Object)} image - The image object.
     * @return {HTMLCanvasElement|Object} The converted image.
     */
    static sRGBToLinear(image) {
      if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
        const canvas = createElementNS("canvas");
        canvas.width = image.width;
        canvas.height = image.height;
        const context2 = canvas.getContext("2d");
        context2.drawImage(image, 0, 0, image.width, image.height);
        const imageData = context2.getImageData(0, 0, image.width, image.height);
        const data = imageData.data;
        for (let i = 0; i < data.length; i++) {
          data[i] = SRGBToLinear(data[i] / 255) * 255;
        }
        context2.putImageData(imageData, 0, 0);
        return canvas;
      } else if (image.data) {
        const data = image.data.slice(0);
        for (let i = 0; i < data.length; i++) {
          if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
            data[i] = Math.floor(SRGBToLinear(data[i] / 255) * 255);
          } else {
            data[i] = SRGBToLinear(data[i]);
          }
        }
        return {
          data,
          width: image.width,
          height: image.height
        };
      } else {
        console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");
        return image;
      }
    }
  };
  var _sourceId = 0;
  var Source = class {
    /**
     * Constructs a new video texture.
     *
     * @param {any} [data=null] - The data definition of a texture.
     */
    constructor(data = null) {
      this.isSource = true;
      Object.defineProperty(this, "id", { value: _sourceId++ });
      this.uuid = generateUUID();
      this.data = data;
      this.dataReady = true;
      this.version = 0;
    }
    getSize(target) {
      const data = this.data;
      if (data instanceof HTMLVideoElement) {
        target.set(data.videoWidth, data.videoHeight);
      } else if (data !== null) {
        target.set(data.width, data.height, data.depth || 0);
      } else {
        target.set(0, 0, 0);
      }
      return target;
    }
    /**
     * When the property is set to `true`, the engine allocates the memory
     * for the texture (if necessary) and triggers the actual texture upload
     * to the GPU next time the source is used.
     *
     * @type {boolean}
     * @default false
     * @param {boolean} value
     */
    set needsUpdate(value) {
      if (value === true) this.version++;
    }
    /**
     * Serializes the source into JSON.
     *
     * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
     * @return {Object} A JSON object representing the serialized source.
     * @see {@link ObjectLoader#parse}
     */
    toJSON(meta2) {
      const isRootObject = meta2 === void 0 || typeof meta2 === "string";
      if (!isRootObject && meta2.images[this.uuid] !== void 0) {
        return meta2.images[this.uuid];
      }
      const output2 = {
        uuid: this.uuid,
        url: ""
      };
      const data = this.data;
      if (data !== null) {
        let url;
        if (Array.isArray(data)) {
          url = [];
          for (let i = 0, l = data.length; i < l; i++) {
            if (data[i].isDataTexture) {
              url.push(serializeImage(data[i].image));
            } else {
              url.push(serializeImage(data[i]));
            }
          }
        } else {
          url = serializeImage(data);
        }
        output2.url = url;
      }
      if (!isRootObject) {
        meta2.images[this.uuid] = output2;
      }
      return output2;
    }
  };
  function serializeImage(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
      return ImageUtils.getDataURL(image);
    } else {
      if (image.data) {
        return {
          data: Array.from(image.data),
          width: image.width,
          height: image.height,
          type: image.data.constructor.name
        };
      } else {
        console.warn("THREE.Texture: Unable to serialize Texture.");
        return {};
      }
    }
  }
  var _textureId = 0;
  var _tempVec3 = /* @__PURE__ */ new Vector3();
  var Texture = class _Texture extends EventDispatcher {
    /**
     * Constructs a new texture.
     *
     * @param {?Object} [image=Texture.DEFAULT_IMAGE] - The image holding the texture data.
     * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
     * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
     * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
     * @param {number} [magFilter=LinearFilter] - The mag filter value.
     * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.
     * @param {number} [format=RGBAFormat] - The texture format.
     * @param {number} [type=UnsignedByteType] - The texture type.
     * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
     * @param {string} [colorSpace=NoColorSpace] - The color space.
     */
    constructor(image = _Texture.DEFAULT_IMAGE, mapping = _Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy2 = _Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace) {
      super();
      this.isTexture = true;
      Object.defineProperty(this, "id", { value: _textureId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.source = new Source(image);
      this.mipmaps = [];
      this.mapping = mapping;
      this.channel = 0;
      this.wrapS = wrapS;
      this.wrapT = wrapT;
      this.magFilter = magFilter;
      this.minFilter = minFilter;
      this.anisotropy = anisotropy2;
      this.format = format;
      this.internalFormat = null;
      this.type = type;
      this.offset = new Vector2(0, 0);
      this.repeat = new Vector2(1, 1);
      this.center = new Vector2(0, 0);
      this.rotation = 0;
      this.matrixAutoUpdate = true;
      this.matrix = new Matrix3();
      this.generateMipmaps = true;
      this.premultiplyAlpha = false;
      this.flipY = true;
      this.unpackAlignment = 4;
      this.colorSpace = colorSpace;
      this.userData = {};
      this.updateRanges = [];
      this.version = 0;
      this.onUpdate = null;
      this.renderTarget = null;
      this.isRenderTargetTexture = false;
      this.isArrayTexture = image && image.depth && image.depth > 1 ? true : false;
      this.pmremVersion = 0;
    }
    /**
     * The width of the texture in pixels.
     */
    get width() {
      return this.source.getSize(_tempVec3).x;
    }
    /**
     * The height of the texture in pixels.
     */
    get height() {
      return this.source.getSize(_tempVec3).y;
    }
    /**
     * The depth of the texture in pixels.
     */
    get depth() {
      return this.source.getSize(_tempVec3).z;
    }
    /**
     * The image object holding the texture data.
     *
     * @type {?Object}
     */
    get image() {
      return this.source.data;
    }
    set image(value = null) {
      this.source.data = value;
    }
    /**
     * Updates the texture transformation matrix from the from the properties {@link Texture#offset},
     * {@link Texture#repeat}, {@link Texture#rotation}, and {@link Texture#center}.
     */
    updateMatrix() {
      this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    }
    /**
     * Adds a range of data in the data texture to be updated on the GPU.
     *
     * @param {number} start - Position at which to start update.
     * @param {number} count - The number of components to update.
     */
    addUpdateRange(start, count) {
      this.updateRanges.push({ start, count });
    }
    /**
     * Clears the update ranges.
     */
    clearUpdateRanges() {
      this.updateRanges.length = 0;
    }
    /**
     * Returns a new texture with copied values from this instance.
     *
     * @return {Texture} A clone of this instance.
     */
    clone() {
      return new this.constructor().copy(this);
    }
    /**
     * Copies the values of the given texture to this instance.
     *
     * @param {Texture} source - The texture to copy.
     * @return {Texture} A reference to this instance.
     */
    copy(source) {
      this.name = source.name;
      this.source = source.source;
      this.mipmaps = source.mipmaps.slice(0);
      this.mapping = source.mapping;
      this.channel = source.channel;
      this.wrapS = source.wrapS;
      this.wrapT = source.wrapT;
      this.magFilter = source.magFilter;
      this.minFilter = source.minFilter;
      this.anisotropy = source.anisotropy;
      this.format = source.format;
      this.internalFormat = source.internalFormat;
      this.type = source.type;
      this.offset.copy(source.offset);
      this.repeat.copy(source.repeat);
      this.center.copy(source.center);
      this.rotation = source.rotation;
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrix.copy(source.matrix);
      this.generateMipmaps = source.generateMipmaps;
      this.premultiplyAlpha = source.premultiplyAlpha;
      this.flipY = source.flipY;
      this.unpackAlignment = source.unpackAlignment;
      this.colorSpace = source.colorSpace;
      this.renderTarget = source.renderTarget;
      this.isRenderTargetTexture = source.isRenderTargetTexture;
      this.isArrayTexture = source.isArrayTexture;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      this.needsUpdate = true;
      return this;
    }
    /**
     * Sets this texture's properties based on `values`.
     * @param {Object} values - A container with texture parameters.
     */
    setValues(values) {
      for (const key in values) {
        const newValue = values[key];
        if (newValue === void 0) {
          console.warn(`THREE.Texture.setValues(): parameter '${key}' has value of undefined.`);
          continue;
        }
        const currentValue = this[key];
        if (currentValue === void 0) {
          console.warn(`THREE.Texture.setValues(): property '${key}' does not exist.`);
          continue;
        }
        if (currentValue && newValue && (currentValue.isVector2 && newValue.isVector2)) {
          currentValue.copy(newValue);
        } else if (currentValue && newValue && (currentValue.isVector3 && newValue.isVector3)) {
          currentValue.copy(newValue);
        } else if (currentValue && newValue && (currentValue.isMatrix3 && newValue.isMatrix3)) {
          currentValue.copy(newValue);
        } else {
          this[key] = newValue;
        }
      }
    }
    /**
     * Serializes the texture into JSON.
     *
     * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
     * @return {Object} A JSON object representing the serialized texture.
     * @see {@link ObjectLoader#parse}
     */
    toJSON(meta2) {
      const isRootObject = meta2 === void 0 || typeof meta2 === "string";
      if (!isRootObject && meta2.textures[this.uuid] !== void 0) {
        return meta2.textures[this.uuid];
      }
      const output2 = {
        metadata: {
          version: 4.7,
          type: "Texture",
          generator: "Texture.toJSON"
        },
        uuid: this.uuid,
        name: this.name,
        image: this.source.toJSON(meta2).uuid,
        mapping: this.mapping,
        channel: this.channel,
        repeat: [this.repeat.x, this.repeat.y],
        offset: [this.offset.x, this.offset.y],
        center: [this.center.x, this.center.y],
        rotation: this.rotation,
        wrap: [this.wrapS, this.wrapT],
        format: this.format,
        internalFormat: this.internalFormat,
        type: this.type,
        colorSpace: this.colorSpace,
        minFilter: this.minFilter,
        magFilter: this.magFilter,
        anisotropy: this.anisotropy,
        flipY: this.flipY,
        generateMipmaps: this.generateMipmaps,
        premultiplyAlpha: this.premultiplyAlpha,
        unpackAlignment: this.unpackAlignment
      };
      if (Object.keys(this.userData).length > 0) output2.userData = this.userData;
      if (!isRootObject) {
        meta2.textures[this.uuid] = output2;
      }
      return output2;
    }
    /**
     * Frees the GPU-related resources allocated by this instance. Call this
     * method whenever this instance is no longer used in your app.
     *
     * @fires Texture#dispose
     */
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
    /**
     * Transforms the given uv vector with the textures uv transformation matrix.
     *
     * @param {Vector2} uv - The uv vector.
     * @return {Vector2} The transformed uv vector.
     */
    transformUv(uv2) {
      if (this.mapping !== UVMapping) return uv2;
      uv2.applyMatrix3(this.matrix);
      if (uv2.x < 0 || uv2.x > 1) {
        switch (this.wrapS) {
          case RepeatWrapping:
            uv2.x = uv2.x - Math.floor(uv2.x);
            break;
          case ClampToEdgeWrapping:
            uv2.x = uv2.x < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv2.x) % 2) === 1) {
              uv2.x = Math.ceil(uv2.x) - uv2.x;
            } else {
              uv2.x = uv2.x - Math.floor(uv2.x);
            }
            break;
        }
      }
      if (uv2.y < 0 || uv2.y > 1) {
        switch (this.wrapT) {
          case RepeatWrapping:
            uv2.y = uv2.y - Math.floor(uv2.y);
            break;
          case ClampToEdgeWrapping:
            uv2.y = uv2.y < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv2.y) % 2) === 1) {
              uv2.y = Math.ceil(uv2.y) - uv2.y;
            } else {
              uv2.y = uv2.y - Math.floor(uv2.y);
            }
            break;
        }
      }
      if (this.flipY) {
        uv2.y = 1 - uv2.y;
      }
      return uv2;
    }
    /**
     * Setting this property to `true` indicates the engine the texture
     * must be updated in the next render. This triggers a texture upload
     * to the GPU and ensures correct texture parameter configuration.
     *
     * @type {boolean}
     * @default false
     * @param {boolean} value
     */
    set needsUpdate(value) {
      if (value === true) {
        this.version++;
        this.source.needsUpdate = true;
      }
    }
    /**
     * Setting this property to `true` indicates the engine the PMREM
     * must be regenerated.
     *
     * @type {boolean}
     * @default false
     * @param {boolean} value
     */
    set needsPMREMUpdate(value) {
      if (value === true) {
        this.pmremVersion++;
      }
    }
  };
  Texture.DEFAULT_IMAGE = null;
  Texture.DEFAULT_MAPPING = UVMapping;
  Texture.DEFAULT_ANISOTROPY = 1;
  var Vector4 = class _Vector4 {
    /**
     * Constructs a new 4D vector.
     *
     * @param {number} [x=0] - The x value of this vector.
     * @param {number} [y=0] - The y value of this vector.
     * @param {number} [z=0] - The z value of this vector.
     * @param {number} [w=1] - The w value of this vector.
     */
    constructor(x = 0, y = 0, z = 0, w = 1) {
      _Vector4.prototype.isVector4 = true;
      this.x = x;
      this.y = y;
      this.z = z;
      this.w = w;
    }
    /**
     * Alias for {@link Vector4#z}.
     *
     * @type {number}
     */
    get width() {
      return this.z;
    }
    set width(value) {
      this.z = value;
    }
    /**
     * Alias for {@link Vector4#w}.
     *
     * @type {number}
     */
    get height() {
      return this.w;
    }
    set height(value) {
      this.w = value;
    }
    /**
     * Sets the vector components.
     *
     * @param {number} x - The value of the x component.
     * @param {number} y - The value of the y component.
     * @param {number} z - The value of the z component.
     * @param {number} w - The value of the w component.
     * @return {Vector4} A reference to this vector.
     */
    set(x, y, z, w) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.w = w;
      return this;
    }
    /**
     * Sets the vector components to the same value.
     *
     * @param {number} scalar - The value to set for all vector components.
     * @return {Vector4} A reference to this vector.
     */
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      this.w = scalar;
      return this;
    }
    /**
     * Sets the vector's x component to the given value
     *
     * @param {number} x - The value to set.
     * @return {Vector4} A reference to this vector.
     */
    setX(x) {
      this.x = x;
      return this;
    }
    /**
     * Sets the vector's y component to the given value
     *
     * @param {number} y - The value to set.
     * @return {Vector4} A reference to this vector.
     */
    setY(y) {
      this.y = y;
      return this;
    }
    /**
     * Sets the vector's z component to the given value
     *
     * @param {number} z - The value to set.
     * @return {Vector4} A reference to this vector.
     */
    setZ(z) {
      this.z = z;
      return this;
    }
    /**
     * Sets the vector's w component to the given value
     *
     * @param {number} w - The value to set.
     * @return {Vector4} A reference to this vector.
     */
    setW(w) {
      this.w = w;
      return this;
    }
    /**
     * Allows to set a vector component with an index.
     *
     * @param {number} index - The component index. `0` equals to x, `1` equals to y,
     * `2` equals to z, `3` equals to w.
     * @param {number} value - The value to set.
     * @return {Vector4} A reference to this vector.
     */
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        case 2:
          this.z = value;
          break;
        case 3:
          this.w = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    /**
     * Returns the value of the vector component which matches the given index.
     *
     * @param {number} index - The component index. `0` equals to x, `1` equals to y,
     * `2` equals to z, `3` equals to w.
     * @return {number} A vector component value.
     */
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        case 3:
          return this.w;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    /**
     * Returns a new vector with copied values from this instance.
     *
     * @return {Vector4} A clone of this instance.
     */
    clone() {
      return new this.constructor(this.x, this.y, this.z, this.w);
    }
    /**
     * Copies the values of the given vector to this instance.
     *
     * @param {Vector3|Vector4} v - The vector to copy.
     * @return {Vector4} A reference to this vector.
     */
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      this.w = v.w !== void 0 ? v.w : 1;
      return this;
    }
    /**
     * Adds the given vector to this instance.
     *
     * @param {Vector4} v - The vector to add.
     * @return {Vector4} A reference to this vector.
     */
    add(v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      this.w += v.w;
      return this;
    }
    /**
     * Adds the given scalar value to all components of this instance.
     *
     * @param {number} s - The scalar to add.
     * @return {Vector4} A reference to this vector.
     */
    addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      this.w += s;
      return this;
    }
    /**
     * Adds the given vectors and stores the result in this instance.
     *
     * @param {Vector4} a - The first vector.
     * @param {Vector4} b - The second vector.
     * @return {Vector4} A reference to this vector.
     */
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      this.w = a.w + b.w;
      return this;
    }
    /**
     * Adds the given vector scaled by the given factor to this instance.
     *
     * @param {Vector4} v - The vector.
     * @param {number} s - The factor that scales `v`.
     * @return {Vector4} A reference to this vector.
     */
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      this.w += v.w * s;
      return this;
    }
    /**
     * Subtracts the given vector from this instance.
     *
     * @param {Vector4} v - The vector to subtract.
     * @return {Vector4} A reference to this vector.
     */
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      this.w -= v.w;
      return this;
    }
    /**
     * Subtracts the given scalar value from all components of this instance.
     *
     * @param {number} s - The scalar to subtract.
     * @return {Vector4} A reference to this vector.
     */
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      this.w -= s;
      return this;
    }
    /**
     * Subtracts the given vectors and stores the result in this instance.
     *
     * @param {Vector4} a - The first vector.
     * @param {Vector4} b - The second vector.
     * @return {Vector4} A reference to this vector.
     */
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      this.w = a.w - b.w;
      return this;
    }
    /**
     * Multiplies the given vector with this instance.
     *
     * @param {Vector4} v - The vector to multiply.
     * @return {Vector4} A reference to this vector.
     */
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      this.w *= v.w;
      return this;
    }
    /**
     * Multiplies the given scalar value with all components of this instance.
     *
     * @param {number} scalar - The scalar to multiply.
     * @return {Vector4} A reference to this vector.
     */
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      this.w *= scalar;
      return this;
    }
    /**
     * Multiplies this vector with the given 4x4 matrix.
     *
     * @param {Matrix4} m - The 4x4 matrix.
     * @return {Vector4} A reference to this vector.
     */
    applyMatrix4(m) {
      const x = this.x, y = this.y, z = this.z, w = this.w;
      const e = m.elements;
      this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
      this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
      this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
      this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
      return this;
    }
    /**
     * Divides this instance by the given vector.
     *
     * @param {Vector4} v - The vector to divide.
     * @return {Vector4} A reference to this vector.
     */
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      this.z /= v.z;
      this.w /= v.w;
      return this;
    }
    /**
     * Divides this vector by the given scalar.
     *
     * @param {number} scalar - The scalar to divide.
     * @return {Vector4} A reference to this vector.
     */
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    /**
     * Sets the x, y and z components of this
     * vector to the quaternion's axis and w to the angle.
     *
     * @param {Quaternion} q - The Quaternion to set.
     * @return {Vector4} A reference to this vector.
     */
    setAxisAngleFromQuaternion(q) {
      this.w = 2 * Math.acos(q.w);
      const s = Math.sqrt(1 - q.w * q.w);
      if (s < 1e-4) {
        this.x = 1;
        this.y = 0;
        this.z = 0;
      } else {
        this.x = q.x / s;
        this.y = q.y / s;
        this.z = q.z / s;
      }
      return this;
    }
    /**
     * Sets the x, y and z components of this
     * vector to the axis of rotation and w to the angle.
     *
     * @param {Matrix4} m - A 4x4 matrix of which the upper left 3x3 matrix is a pure rotation matrix.
     * @return {Vector4} A reference to this vector.
     */
    setAxisAngleFromRotationMatrix(m) {
      let angle, x, y, z;
      const epsilon = 0.01, epsilon2 = 0.1, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
      if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
        if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
          this.set(1, 0, 0, 0);
          return this;
        }
        angle = Math.PI;
        const xx = (m11 + 1) / 2;
        const yy = (m22 + 1) / 2;
        const zz = (m33 + 1) / 2;
        const xy = (m12 + m21) / 4;
        const xz = (m13 + m31) / 4;
        const yz = (m23 + m32) / 4;
        if (xx > yy && xx > zz) {
          if (xx < epsilon) {
            x = 0;
            y = 0.707106781;
            z = 0.707106781;
          } else {
            x = Math.sqrt(xx);
            y = xy / x;
            z = xz / x;
          }
        } else if (yy > zz) {
          if (yy < epsilon) {
            x = 0.707106781;
            y = 0;
            z = 0.707106781;
          } else {
            y = Math.sqrt(yy);
            x = xy / y;
            z = yz / y;
          }
        } else {
          if (zz < epsilon) {
            x = 0.707106781;
            y = 0.707106781;
            z = 0;
          } else {
            z = Math.sqrt(zz);
            x = xz / z;
            y = yz / z;
          }
        }
        this.set(x, y, z, angle);
        return this;
      }
      let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
      if (Math.abs(s) < 1e-3) s = 1;
      this.x = (m32 - m23) / s;
      this.y = (m13 - m31) / s;
      this.z = (m21 - m12) / s;
      this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
      return this;
    }
    /**
     * Sets the vector components to the position elements of the
     * given transformation matrix.
     *
     * @param {Matrix4} m - The 4x4 matrix.
     * @return {Vector4} A reference to this vector.
     */
    setFromMatrixPosition(m) {
      const e = m.elements;
      this.x = e[12];
      this.y = e[13];
      this.z = e[14];
      this.w = e[15];
      return this;
    }
    /**
     * If this vector's x, y, z or w value is greater than the given vector's x, y, z or w
     * value, replace that value with the corresponding min value.
     *
     * @param {Vector4} v - The vector.
     * @return {Vector4} A reference to this vector.
     */
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      this.w = Math.min(this.w, v.w);
      return this;
    }
    /**
     * If this vector's x, y, z or w value is less than the given vector's x, y, z or w
     * value, replace that value with the corresponding max value.
     *
     * @param {Vector4} v - The vector.
     * @return {Vector4} A reference to this vector.
     */
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      this.w = Math.max(this.w, v.w);
      return this;
    }
    /**
     * If this vector's x, y, z or w value is greater than the max vector's x, y, z or w
     * value, it is replaced by the corresponding value.
     * If this vector's x, y, z or w value is less than the min vector's x, y, z or w value,
     * it is replaced by the corresponding value.
     *
     * @param {Vector4} min - The minimum x, y and z values.
     * @param {Vector4} max - The maximum x, y and z values in the desired range.
     * @return {Vector4} A reference to this vector.
     */
    clamp(min, max) {
      this.x = clamp(this.x, min.x, max.x);
      this.y = clamp(this.y, min.y, max.y);
      this.z = clamp(this.z, min.z, max.z);
      this.w = clamp(this.w, min.w, max.w);
      return this;
    }
    /**
     * If this vector's x, y, z or w values are greater than the max value, they are
     * replaced by the max value.
     * If this vector's x, y, z or w values are less than the min value, they are
     * replaced by the min value.
     *
     * @param {number} minVal - The minimum value the components will be clamped to.
     * @param {number} maxVal - The maximum value the components will be clamped to.
     * @return {Vector4} A reference to this vector.
     */
    clampScalar(minVal, maxVal) {
      this.x = clamp(this.x, minVal, maxVal);
      this.y = clamp(this.y, minVal, maxVal);
      this.z = clamp(this.z, minVal, maxVal);
      this.w = clamp(this.w, minVal, maxVal);
      return this;
    }
    /**
     * If this vector's length is greater than the max value, it is replaced by
     * the max value.
     * If this vector's length is less than the min value, it is replaced by the
     * min value.
     *
     * @param {number} min - The minimum value the vector length will be clamped to.
     * @param {number} max - The maximum value the vector length will be clamped to.
     * @return {Vector4} A reference to this vector.
     */
    clampLength(min, max) {
      const length2 = this.length();
      return this.divideScalar(length2 || 1).multiplyScalar(clamp(length2, min, max));
    }
    /**
     * The components of this vector are rounded down to the nearest integer value.
     *
     * @return {Vector4} A reference to this vector.
     */
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      this.w = Math.floor(this.w);
      return this;
    }
    /**
     * The components of this vector are rounded up to the nearest integer value.
     *
     * @return {Vector4} A reference to this vector.
     */
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      this.w = Math.ceil(this.w);
      return this;
    }
    /**
     * The components of this vector are rounded to the nearest integer value
     *
     * @return {Vector4} A reference to this vector.
     */
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      this.w = Math.round(this.w);
      return this;
    }
    /**
     * The components of this vector are rounded towards zero (up if negative,
     * down if positive) to an integer value.
     *
     * @return {Vector4} A reference to this vector.
     */
    roundToZero() {
      this.x = Math.trunc(this.x);
      this.y = Math.trunc(this.y);
      this.z = Math.trunc(this.z);
      this.w = Math.trunc(this.w);
      return this;
    }
    /**
     * Inverts this vector - i.e. sets x = -x, y = -y, z = -z, w = -w.
     *
     * @return {Vector4} A reference to this vector.
     */
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      this.w = -this.w;
      return this;
    }
    /**
     * Calculates the dot product of the given vector with this instance.
     *
     * @param {Vector4} v - The vector to compute the dot product with.
     * @return {number} The result of the dot product.
     */
    dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
    }
    /**
     * Computes the square of the Euclidean length (straight-line length) from
     * (0, 0, 0, 0) to (x, y, z, w). If you are comparing the lengths of vectors, you should
     * compare the length squared instead as it is slightly more efficient to calculate.
     *
     * @return {number} The square length of this vector.
     */
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }
    /**
     * Computes the  Euclidean length (straight-line length) from (0, 0, 0, 0) to (x, y, z, w).
     *
     * @return {number} The length of this vector.
     */
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }
    /**
     * Computes the Manhattan length of this vector.
     *
     * @return {number} The length of this vector.
     */
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    }
    /**
     * Converts this vector to a unit vector - that is, sets it equal to a vector
     * with the same direction as this one, but with a vector length of `1`.
     *
     * @return {Vector4} A reference to this vector.
     */
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    /**
     * Sets this vector to a vector with the same direction as this one, but
     * with the specified length.
     *
     * @param {number} length - The new length of this vector.
     * @return {Vector4} A reference to this vector.
     */
    setLength(length2) {
      return this.normalize().multiplyScalar(length2);
    }
    /**
     * Linearly interpolates between the given vector and this instance, where
     * alpha is the percent distance along the line - alpha = 0 will be this
     * vector, and alpha = 1 will be the given one.
     *
     * @param {Vector4} v - The vector to interpolate towards.
     * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
     * @return {Vector4} A reference to this vector.
     */
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      this.w += (v.w - this.w) * alpha;
      return this;
    }
    /**
     * Linearly interpolates between the given vectors, where alpha is the percent
     * distance along the line - alpha = 0 will be first vector, and alpha = 1 will
     * be the second one. The result is stored in this instance.
     *
     * @param {Vector4} v1 - The first vector.
     * @param {Vector4} v2 - The second vector.
     * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
     * @return {Vector4} A reference to this vector.
     */
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      this.w = v1.w + (v2.w - v1.w) * alpha;
      return this;
    }
    /**
     * Returns `true` if this vector is equal with the given one.
     *
     * @param {Vector4} v - The vector to test for equality.
     * @return {boolean} Whether this vector is equal with the given one.
     */
    equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
    }
    /**
     * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`,
     * z value to be `array[ offset + 2 ]`, w value to be `array[ offset + 3 ]`.
     *
     * @param {Array<number>} array - An array holding the vector component values.
     * @param {number} [offset=0] - The offset into the array.
     * @return {Vector4} A reference to this vector.
     */
    fromArray(array2, offset = 0) {
      this.x = array2[offset];
      this.y = array2[offset + 1];
      this.z = array2[offset + 2];
      this.w = array2[offset + 3];
      return this;
    }
    /**
     * Writes the components of this vector to the given array. If no array is provided,
     * the method returns a new instance.
     *
     * @param {Array<number>} [array=[]] - The target array holding the vector components.
     * @param {number} [offset=0] - Index of the first element in the array.
     * @return {Array<number>} The vector components.
     */
    toArray(array2 = [], offset = 0) {
      array2[offset] = this.x;
      array2[offset + 1] = this.y;
      array2[offset + 2] = this.z;
      array2[offset + 3] = this.w;
      return array2;
    }
    /**
     * Sets the components of this vector from the given buffer attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute holding vector data.
     * @param {number} index - The index into the attribute.
     * @return {Vector4} A reference to this vector.
     */
    fromBufferAttribute(attribute2, index) {
      this.x = attribute2.getX(index);
      this.y = attribute2.getY(index);
      this.z = attribute2.getZ(index);
      this.w = attribute2.getW(index);
      return this;
    }
    /**
     * Sets each component of this vector to a pseudo-random value between `0` and
     * `1`, excluding `1`.
     *
     * @return {Vector4} A reference to this vector.
     */
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      this.w = Math.random();
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
      yield this.z;
      yield this.w;
    }
  };
  var RenderTarget = class extends EventDispatcher {
    /**
     * Render target options.
     *
     * @typedef {Object} RenderTarget~Options
     * @property {boolean} [generateMipmaps=false] - Whether to generate mipmaps or not.
     * @property {number} [magFilter=LinearFilter] - The mag filter.
     * @property {number} [minFilter=LinearFilter] - The min filter.
     * @property {number} [format=RGBAFormat] - The texture format.
     * @property {number} [type=UnsignedByteType] - The texture type.
     * @property {?string} [internalFormat=null] - The texture's internal format.
     * @property {number} [wrapS=ClampToEdgeWrapping] - The texture's uv wrapping mode.
     * @property {number} [wrapT=ClampToEdgeWrapping] - The texture's uv wrapping mode.
     * @property {number} [anisotropy=1] - The texture's anisotropy value.
     * @property {string} [colorSpace=NoColorSpace] - The texture's color space.
     * @property {boolean} [depthBuffer=true] - Whether to allocate a depth buffer or not.
     * @property {boolean} [stencilBuffer=false] - Whether to allocate a stencil buffer or not.
     * @property {boolean} [resolveDepthBuffer=true] - Whether to resolve the depth buffer or not.
     * @property {boolean} [resolveStencilBuffer=true] - Whether  to resolve the stencil buffer or not.
     * @property {?Texture} [depthTexture=null] - Reference to a depth texture.
     * @property {number} [samples=0] - The MSAA samples count.
     * @property {number} [count=1] - Defines the number of color attachments . Must be at least `1`.
     * @property {number} [depth=1] - The texture depth.
     * @property {boolean} [multiview=false] - Whether this target is used for multiview rendering.
     */
    /**
     * Constructs a new render target.
     *
     * @param {number} [width=1] - The width of the render target.
     * @param {number} [height=1] - The height of the render target.
     * @param {RenderTarget~Options} [options] - The configuration object.
     */
    constructor(width = 1, height = 1, options = {}) {
      super();
      options = Object.assign({
        generateMipmaps: false,
        internalFormat: null,
        minFilter: LinearFilter,
        depthBuffer: true,
        stencilBuffer: false,
        resolveDepthBuffer: true,
        resolveStencilBuffer: true,
        depthTexture: null,
        samples: 0,
        count: 1,
        depth: 1,
        multiview: false
      }, options);
      this.isRenderTarget = true;
      this.width = width;
      this.height = height;
      this.depth = options.depth;
      this.scissor = new Vector4(0, 0, width, height);
      this.scissorTest = false;
      this.viewport = new Vector4(0, 0, width, height);
      const image = { width, height, depth: options.depth };
      const texture2 = new Texture(image);
      this.textures = [];
      const count = options.count;
      for (let i = 0; i < count; i++) {
        this.textures[i] = texture2.clone();
        this.textures[i].isRenderTargetTexture = true;
        this.textures[i].renderTarget = this;
      }
      this._setTextureOptions(options);
      this.depthBuffer = options.depthBuffer;
      this.stencilBuffer = options.stencilBuffer;
      this.resolveDepthBuffer = options.resolveDepthBuffer;
      this.resolveStencilBuffer = options.resolveStencilBuffer;
      this._depthTexture = null;
      this.depthTexture = options.depthTexture;
      this.samples = options.samples;
      this.multiview = options.multiview;
    }
    _setTextureOptions(options = {}) {
      const values = {
        minFilter: LinearFilter,
        generateMipmaps: false,
        flipY: false,
        internalFormat: null
      };
      if (options.mapping !== void 0) values.mapping = options.mapping;
      if (options.wrapS !== void 0) values.wrapS = options.wrapS;
      if (options.wrapT !== void 0) values.wrapT = options.wrapT;
      if (options.wrapR !== void 0) values.wrapR = options.wrapR;
      if (options.magFilter !== void 0) values.magFilter = options.magFilter;
      if (options.minFilter !== void 0) values.minFilter = options.minFilter;
      if (options.format !== void 0) values.format = options.format;
      if (options.type !== void 0) values.type = options.type;
      if (options.anisotropy !== void 0) values.anisotropy = options.anisotropy;
      if (options.colorSpace !== void 0) values.colorSpace = options.colorSpace;
      if (options.flipY !== void 0) values.flipY = options.flipY;
      if (options.generateMipmaps !== void 0) values.generateMipmaps = options.generateMipmaps;
      if (options.internalFormat !== void 0) values.internalFormat = options.internalFormat;
      for (let i = 0; i < this.textures.length; i++) {
        const texture2 = this.textures[i];
        texture2.setValues(values);
      }
    }
    /**
     * The texture representing the default color attachment.
     *
     * @type {Texture}
     */
    get texture() {
      return this.textures[0];
    }
    set texture(value) {
      this.textures[0] = value;
    }
    set depthTexture(current) {
      if (this._depthTexture !== null) this._depthTexture.renderTarget = null;
      if (current !== null) current.renderTarget = this;
      this._depthTexture = current;
    }
    /**
     * Instead of saving the depth in a renderbuffer, a texture
     * can be used instead which is useful for further processing
     * e.g. in context of post-processing.
     *
     * @type {?DepthTexture}
     * @default null
     */
    get depthTexture() {
      return this._depthTexture;
    }
    /**
     * Sets the size of this render target.
     *
     * @param {number} width - The width.
     * @param {number} height - The height.
     * @param {number} [depth=1] - The depth.
     */
    setSize(width, height, depth2 = 1) {
      if (this.width !== width || this.height !== height || this.depth !== depth2) {
        this.width = width;
        this.height = height;
        this.depth = depth2;
        for (let i = 0, il = this.textures.length; i < il; i++) {
          this.textures[i].image.width = width;
          this.textures[i].image.height = height;
          this.textures[i].image.depth = depth2;
          this.textures[i].isArrayTexture = this.textures[i].image.depth > 1;
        }
        this.dispose();
      }
      this.viewport.set(0, 0, width, height);
      this.scissor.set(0, 0, width, height);
    }
    /**
     * Returns a new render target with copied values from this instance.
     *
     * @return {RenderTarget} A clone of this instance.
     */
    clone() {
      return new this.constructor().copy(this);
    }
    /**
     * Copies the settings of the given render target. This is a structural copy so
     * no resources are shared between render targets after the copy. That includes
     * all MRT textures and the depth texture.
     *
     * @param {RenderTarget} source - The render target to copy.
     * @return {RenderTarget} A reference to this instance.
     */
    copy(source) {
      this.width = source.width;
      this.height = source.height;
      this.depth = source.depth;
      this.scissor.copy(source.scissor);
      this.scissorTest = source.scissorTest;
      this.viewport.copy(source.viewport);
      this.textures.length = 0;
      for (let i = 0, il = source.textures.length; i < il; i++) {
        this.textures[i] = source.textures[i].clone();
        this.textures[i].isRenderTargetTexture = true;
        this.textures[i].renderTarget = this;
        const image = Object.assign({}, source.textures[i].image);
        this.textures[i].source = new Source(image);
      }
      this.depthBuffer = source.depthBuffer;
      this.stencilBuffer = source.stencilBuffer;
      this.resolveDepthBuffer = source.resolveDepthBuffer;
      this.resolveStencilBuffer = source.resolveStencilBuffer;
      if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();
      this.samples = source.samples;
      return this;
    }
    /**
     * Frees the GPU-related resources allocated by this instance. Call this
     * method whenever this instance is no longer used in your app.
     *
     * @fires RenderTarget#dispose
     */
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
  };
  var WebGLRenderTarget = class extends RenderTarget {
    /**
     * Constructs a new 3D render target.
     *
     * @param {number} [width=1] - The width of the render target.
     * @param {number} [height=1] - The height of the render target.
     * @param {RenderTarget~Options} [options] - The configuration object.
     */
    constructor(width = 1, height = 1, options = {}) {
      super(width, height, options);
      this.isWebGLRenderTarget = true;
    }
  };
  var DataArrayTexture = class extends Texture {
    /**
     * Constructs a new data array texture.
     *
     * @param {?TypedArray} [data=null] - The buffer data.
     * @param {number} [width=1] - The width of the texture.
     * @param {number} [height=1] - The height of the texture.
     * @param {number} [depth=1] - The depth of the texture.
     */
    constructor(data = null, width = 1, height = 1, depth2 = 1) {
      super(null);
      this.isDataArrayTexture = true;
      this.image = { data, width, height, depth: depth2 };
      this.magFilter = NearestFilter;
      this.minFilter = NearestFilter;
      this.wrapR = ClampToEdgeWrapping;
      this.generateMipmaps = false;
      this.flipY = false;
      this.unpackAlignment = 1;
      this.layerUpdates = /* @__PURE__ */ new Set();
    }
    /**
     * Describes that a specific layer of the texture needs to be updated.
     * Normally when {@link Texture#needsUpdate} is set to `true`, the
     * entire data texture array is sent to the GPU. Marking specific
     * layers will only transmit subsets of all mipmaps associated with a
     * specific depth in the array which is often much more performant.
     *
     * @param {number} layerIndex - The layer index that should be updated.
     */
    addLayerUpdate(layerIndex) {
      this.layerUpdates.add(layerIndex);
    }
    /**
     * Resets the layer updates registry.
     */
    clearLayerUpdates() {
      this.layerUpdates.clear();
    }
  };
  var Box3 = class {
    /**
     * Constructs a new bounding box.
     *
     * @param {Vector3} [min=(Infinity,Infinity,Infinity)] - A vector representing the lower boundary of the box.
     * @param {Vector3} [max=(-Infinity,-Infinity,-Infinity)] - A vector representing the upper boundary of the box.
     */
    constructor(min = new Vector3(Infinity, Infinity, Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {
      this.isBox3 = true;
      this.min = min;
      this.max = max;
    }
    /**
     * Sets the lower and upper boundaries of this box.
     * Please note that this method only copies the values from the given objects.
     *
     * @param {Vector3} min - The lower boundary of the box.
     * @param {Vector3} max - The upper boundary of the box.
     * @return {Box3} A reference to this bounding box.
     */
    set(min, max) {
      this.min.copy(min);
      this.max.copy(max);
      return this;
    }
    /**
     * Sets the upper and lower bounds of this box so it encloses the position data
     * in the given array.
     *
     * @param {Array<number>} array - An array holding 3D position data.
     * @return {Box3} A reference to this bounding box.
     */
    setFromArray(array2) {
      this.makeEmpty();
      for (let i = 0, il = array2.length; i < il; i += 3) {
        this.expandByPoint(_vector$b.fromArray(array2, i));
      }
      return this;
    }
    /**
     * Sets the upper and lower bounds of this box so it encloses the position data
     * in the given buffer attribute.
     *
     * @param {BufferAttribute} attribute - A buffer attribute holding 3D position data.
     * @return {Box3} A reference to this bounding box.
     */
    setFromBufferAttribute(attribute2) {
      this.makeEmpty();
      for (let i = 0, il = attribute2.count; i < il; i++) {
        this.expandByPoint(_vector$b.fromBufferAttribute(attribute2, i));
      }
      return this;
    }
    /**
     * Sets the upper and lower bounds of this box so it encloses the position data
     * in the given array.
     *
     * @param {Array<Vector3>} points - An array holding 3D position data as instances of {@link Vector3}.
     * @return {Box3} A reference to this bounding box.
     */
    setFromPoints(points) {
      this.makeEmpty();
      for (let i = 0, il = points.length; i < il; i++) {
        this.expandByPoint(points[i]);
      }
      return this;
    }
    /**
     * Centers this box on the given center vector and sets this box's width, height and
     * depth to the given size values.
     *
     * @param {Vector3} center - The center of the box.
     * @param {Vector3} size - The x, y and z dimensions of the box.
     * @return {Box3} A reference to this bounding box.
     */
    setFromCenterAndSize(center, size) {
      const halfSize = _vector$b.copy(size).multiplyScalar(0.5);
      this.min.copy(center).sub(halfSize);
      this.max.copy(center).add(halfSize);
      return this;
    }
    /**
     * Computes the world-axis-aligned bounding box for the given 3D object
     * (including its children), accounting for the object's, and children's,
     * world transforms. The function may result in a larger box than strictly necessary.
     *
     * @param {Object3D} object - The 3D object to compute the bounding box for.
     * @param {boolean} [precise=false] - If set to `true`, the method computes the smallest
     * world-axis-aligned bounding box at the expense of more computation.
     * @return {Box3} A reference to this bounding box.
     */
    setFromObject(object, precise = false) {
      this.makeEmpty();
      return this.expandByObject(object, precise);
    }
    /**
     * Returns a new box with copied values from this instance.
     *
     * @return {Box3} A clone of this instance.
     */
    clone() {
      return new this.constructor().copy(this);
    }
    /**
     * Copies the values of the given box to this instance.
     *
     * @param {Box3} box - The box to copy.
     * @return {Box3} A reference to this bounding box.
     */
    copy(box2) {
      this.min.copy(box2.min);
      this.max.copy(box2.max);
      return this;
    }
    /**
     * Makes this box empty which means in encloses a zero space in 3D.
     *
     * @return {Box3} A reference to this bounding box.
     */
    makeEmpty() {
      this.min.x = this.min.y = this.min.z = Infinity;
      this.max.x = this.max.y = this.max.z = -Infinity;
      return this;
    }
    /**
     * Returns true if this box includes zero points within its bounds.
     * Note that a box with equal lower and upper bounds still includes one
     * point, the one both bounds share.
     *
     * @return {boolean} Whether this box is empty or not.
     */
    isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
    /**
     * Returns the center point of this box.
     *
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {Vector3} The center point.
     */
    getCenter(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    /**
     * Returns the dimensions of this box.
     *
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {Vector3} The size.
     */
    getSize(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
    }
    /**
     * Expands the boundaries of this box to include the given point.
     *
     * @param {Vector3} point - The point that should be included by the bounding box.
     * @return {Box3} A reference to this bounding box.
     */
    expandByPoint(point) {
      this.min.min(point);
      this.max.max(point);
      return this;
    }
    /**
     * Expands this box equilaterally by the given vector. The width of this
     * box will be expanded by the x component of the vector in both
     * directions. The height of this box will be expanded by the y component of
     * the vector in both directions. The depth of this box will be
     * expanded by the z component of the vector in both directions.
     *
     * @param {Vector3} vector - The vector that should expand the bounding box.
     * @return {Box3} A reference to this bounding box.
     */
    expandByVector(vector) {
      this.min.sub(vector);
      this.max.add(vector);
      return this;
    }
    /**
     * Expands each dimension of the box by the given scalar. If negative, the
     * dimensions of the box will be contracted.
     *
     * @param {number} scalar - The scalar value that should expand the bounding box.
     * @return {Box3} A reference to this bounding box.
     */
    expandByScalar(scalar) {
      this.min.addScalar(-scalar);
      this.max.addScalar(scalar);
      return this;
    }
    /**
     * Expands the boundaries of this box to include the given 3D object and
     * its children, accounting for the object's, and children's, world
     * transforms. The function may result in a larger box than strictly
     * necessary (unless the precise parameter is set to true).
     *
     * @param {Object3D} object - The 3D object that should expand the bounding box.
     * @param {boolean} precise - If set to `true`, the method expands the bounding box
     * as little as necessary at the expense of more computation.
     * @return {Box3} A reference to this bounding box.
     */
    expandByObject(object, precise = false) {
      object.updateWorldMatrix(false, false);
      const geometry = object.geometry;
      if (geometry !== void 0) {
        const positionAttribute = geometry.getAttribute("position");
        if (precise === true && positionAttribute !== void 0 && object.isInstancedMesh !== true) {
          for (let i = 0, l = positionAttribute.count; i < l; i++) {
            if (object.isMesh === true) {
              object.getVertexPosition(i, _vector$b);
            } else {
              _vector$b.fromBufferAttribute(positionAttribute, i);
            }
            _vector$b.applyMatrix4(object.matrixWorld);
            this.expandByPoint(_vector$b);
          }
        } else {
          if (object.boundingBox !== void 0) {
            if (object.boundingBox === null) {
              object.computeBoundingBox();
            }
            _box$4.copy(object.boundingBox);
          } else {
            if (geometry.boundingBox === null) {
              geometry.computeBoundingBox();
            }
            _box$4.copy(geometry.boundingBox);
          }
          _box$4.applyMatrix4(object.matrixWorld);
          this.union(_box$4);
        }
      }
      const children = object.children;
      for (let i = 0, l = children.length; i < l; i++) {
        this.expandByObject(children[i], precise);
      }
      return this;
    }
    /**
     * Returns `true` if the given point lies within or on the boundaries of this box.
     *
     * @param {Vector3} point - The point to test.
     * @return {boolean} Whether the bounding box contains the given point or not.
     */
    containsPoint(point) {
      return point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && point.y <= this.max.y && point.z >= this.min.z && point.z <= this.max.z;
    }
    /**
     * Returns `true` if this bounding box includes the entirety of the given bounding box.
     * If this box and the given one are identical, this function also returns `true`.
     *
     * @param {Box3} box - The bounding box to test.
     * @return {boolean} Whether the bounding box contains the given bounding box or not.
     */
    containsBox(box2) {
      return this.min.x <= box2.min.x && box2.max.x <= this.max.x && this.min.y <= box2.min.y && box2.max.y <= this.max.y && this.min.z <= box2.min.z && box2.max.z <= this.max.z;
    }
    /**
     * Returns a point as a proportion of this box's width, height and depth.
     *
     * @param {Vector3} point - A point in 3D space.
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {Vector3} A point as a proportion of this box's width, height and depth.
     */
    getParameter(point, target) {
      return target.set(
        (point.x - this.min.x) / (this.max.x - this.min.x),
        (point.y - this.min.y) / (this.max.y - this.min.y),
        (point.z - this.min.z) / (this.max.z - this.min.z)
      );
    }
    /**
     * Returns `true` if the given bounding box intersects with this bounding box.
     *
     * @param {Box3} box - The bounding box to test.
     * @return {boolean} Whether the given bounding box intersects with this bounding box.
     */
    intersectsBox(box2) {
      return box2.max.x >= this.min.x && box2.min.x <= this.max.x && box2.max.y >= this.min.y && box2.min.y <= this.max.y && box2.max.z >= this.min.z && box2.min.z <= this.max.z;
    }
    /**
     * Returns `true` if the given bounding sphere intersects with this bounding box.
     *
     * @param {Sphere} sphere - The bounding sphere to test.
     * @return {boolean} Whether the given bounding sphere intersects with this bounding box.
     */
    intersectsSphere(sphere2) {
      this.clampPoint(sphere2.center, _vector$b);
      return _vector$b.distanceToSquared(sphere2.center) <= sphere2.radius * sphere2.radius;
    }
    /**
     * Returns `true` if the given plane intersects with this bounding box.
     *
     * @param {Plane} plane - The plane to test.
     * @return {boolean} Whether the given plane intersects with this bounding box.
     */
    intersectsPlane(plane) {
      let min, max;
      if (plane.normal.x > 0) {
        min = plane.normal.x * this.min.x;
        max = plane.normal.x * this.max.x;
      } else {
        min = plane.normal.x * this.max.x;
        max = plane.normal.x * this.min.x;
      }
      if (plane.normal.y > 0) {
        min += plane.normal.y * this.min.y;
        max += plane.normal.y * this.max.y;
      } else {
        min += plane.normal.y * this.max.y;
        max += plane.normal.y * this.min.y;
      }
      if (plane.normal.z > 0) {
        min += plane.normal.z * this.min.z;
        max += plane.normal.z * this.max.z;
      } else {
        min += plane.normal.z * this.max.z;
        max += plane.normal.z * this.min.z;
      }
      return min <= -plane.constant && max >= -plane.constant;
    }
    /**
     * Returns `true` if the given triangle intersects with this bounding box.
     *
     * @param {Triangle} triangle - The triangle to test.
     * @return {boolean} Whether the given triangle intersects with this bounding box.
     */
    intersectsTriangle(triangle) {
      if (this.isEmpty()) {
        return false;
      }
      this.getCenter(_center);
      _extents.subVectors(this.max, _center);
      _v0$2.subVectors(triangle.a, _center);
      _v1$7.subVectors(triangle.b, _center);
      _v2$4.subVectors(triangle.c, _center);
      _f0.subVectors(_v1$7, _v0$2);
      _f1.subVectors(_v2$4, _v1$7);
      _f2.subVectors(_v0$2, _v2$4);
      let axes = [
        0,
        -_f0.z,
        _f0.y,
        0,
        -_f1.z,
        _f1.y,
        0,
        -_f2.z,
        _f2.y,
        _f0.z,
        0,
        -_f0.x,
        _f1.z,
        0,
        -_f1.x,
        _f2.z,
        0,
        -_f2.x,
        -_f0.y,
        _f0.x,
        0,
        -_f1.y,
        _f1.x,
        0,
        -_f2.y,
        _f2.x,
        0
      ];
      if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
        return false;
      }
      axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
        return false;
      }
      _triangleNormal.crossVectors(_f0, _f1);
      axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
      return satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents);
    }
    /**
     * Clamps the given point within the bounds of this box.
     *
     * @param {Vector3} point - The point to clamp.
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {Vector3} The clamped point.
     */
    clampPoint(point, target) {
      return target.copy(point).clamp(this.min, this.max);
    }
    /**
     * Returns the euclidean distance from any edge of this box to the specified point. If
     * the given point lies inside of this box, the distance will be `0`.
     *
     * @param {Vector3} point - The point to compute the distance to.
     * @return {number} The euclidean distance.
     */
    distanceToPoint(point) {
      return this.clampPoint(point, _vector$b).distanceTo(point);
    }
    /**
     * Returns a bounding sphere that encloses this bounding box.
     *
     * @param {Sphere} target - The target sphere that is used to store the method's result.
     * @return {Sphere} The bounding sphere that encloses this bounding box.
     */
    getBoundingSphere(target) {
      if (this.isEmpty()) {
        target.makeEmpty();
      } else {
        this.getCenter(target.center);
        target.radius = this.getSize(_vector$b).length() * 0.5;
      }
      return target;
    }
    /**
     * Computes the intersection of this bounding box and the given one, setting the upper
     * bound of this box to the lesser of the two boxes' upper bounds and the
     * lower bound of this box to the greater of the two boxes' lower bounds. If
     * there's no overlap, makes this box empty.
     *
     * @param {Box3} box - The bounding box to intersect with.
     * @return {Box3} A reference to this bounding box.
     */
    intersect(box2) {
      this.min.max(box2.min);
      this.max.min(box2.max);
      if (this.isEmpty()) this.makeEmpty();
      return this;
    }
    /**
     * Computes the union of this box and another and the given one, setting the upper
     * bound of this box to the greater of the two boxes' upper bounds and the
     * lower bound of this box to the lesser of the two boxes' lower bounds.
     *
     * @param {Box3} box - The bounding box that will be unioned with this instance.
     * @return {Box3} A reference to this bounding box.
     */
    union(box2) {
      this.min.min(box2.min);
      this.max.max(box2.max);
      return this;
    }
    /**
     * Transforms this bounding box by the given 4x4 transformation matrix.
     *
     * @param {Matrix4} matrix - The transformation matrix.
     * @return {Box3} A reference to this bounding box.
     */
    applyMatrix4(matrix) {
      if (this.isEmpty()) return this;
      _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
      _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
      this.setFromPoints(_points);
      return this;
    }
    /**
     * Adds the given offset to both the upper and lower bounds of this bounding box,
     * effectively moving it in 3D space.
     *
     * @param {Vector3} offset - The offset that should be used to translate the bounding box.
     * @return {Box3} A reference to this bounding box.
     */
    translate(offset) {
      this.min.add(offset);
      this.max.add(offset);
      return this;
    }
    /**
     * Returns `true` if this bounding box is equal with the given one.
     *
     * @param {Box3} box - The box to test for equality.
     * @return {boolean} Whether this bounding box is equal with the given one.
     */
    equals(box2) {
      return box2.min.equals(this.min) && box2.max.equals(this.max);
    }
    /**
     * Returns a serialized structure of the bounding box.
     *
     * @return {Object} Serialized structure with fields representing the object state.
     */
    toJSON() {
      return {
        min: this.min.toArray(),
        max: this.max.toArray()
      };
    }
    /**
     * Returns a serialized structure of the bounding box.
     *
     * @param {Object} json - The serialized json to set the box from.
     * @return {Box3} A reference to this bounding box.
     */
    fromJSON(json) {
      this.min.fromArray(json.min);
      this.max.fromArray(json.max);
      return this;
    }
  };
  var _points = [
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3()
  ];
  var _vector$b = /* @__PURE__ */ new Vector3();
  var _box$4 = /* @__PURE__ */ new Box3();
  var _v0$2 = /* @__PURE__ */ new Vector3();
  var _v1$7 = /* @__PURE__ */ new Vector3();
  var _v2$4 = /* @__PURE__ */ new Vector3();
  var _f0 = /* @__PURE__ */ new Vector3();
  var _f1 = /* @__PURE__ */ new Vector3();
  var _f2 = /* @__PURE__ */ new Vector3();
  var _center = /* @__PURE__ */ new Vector3();
  var _extents = /* @__PURE__ */ new Vector3();
  var _triangleNormal = /* @__PURE__ */ new Vector3();
  var _testAxis = /* @__PURE__ */ new Vector3();
  function satForAxes(axes, v0, v1, v2, extents) {
    for (let i = 0, j = axes.length - 3; i <= j; i += 3) {
      _testAxis.fromArray(axes, i);
      const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
      const p0 = v0.dot(_testAxis);
      const p1 = v1.dot(_testAxis);
      const p2 = v2.dot(_testAxis);
      if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
        return false;
      }
    }
    return true;
  }
  var _box$3 = /* @__PURE__ */ new Box3();
  var _v1$6 = /* @__PURE__ */ new Vector3();
  var _v2$3 = /* @__PURE__ */ new Vector3();
  var Sphere = class {
    /**
     * Constructs a new sphere.
     *
     * @param {Vector3} [center=(0,0,0)] - The center of the sphere
     * @param {number} [radius=-1] - The radius of the sphere.
     */
    constructor(center = new Vector3(), radius = -1) {
      this.isSphere = true;
      this.center = center;
      this.radius = radius;
    }
    /**
     * Sets the sphere's components by copying the given values.
     *
     * @param {Vector3} center - The center.
     * @param {number} radius - The radius.
     * @return {Sphere} A reference to this sphere.
     */
    set(center, radius) {
      this.center.copy(center);
      this.radius = radius;
      return this;
    }
    /**
     * Computes the minimum bounding sphere for list of points.
     * If the optional center point is given, it is used as the sphere's
     * center. Otherwise, the center of the axis-aligned bounding box
     * encompassing the points is calculated.
     *
     * @param {Array<Vector3>} points - A list of points in 3D space.
     * @param {Vector3} [optionalCenter] - The center of the sphere.
     * @return {Sphere} A reference to this sphere.
     */
    setFromPoints(points, optionalCenter) {
      const center = this.center;
      if (optionalCenter !== void 0) {
        center.copy(optionalCenter);
      } else {
        _box$3.setFromPoints(points).getCenter(center);
      }
      let maxRadiusSq = 0;
      for (let i = 0, il = points.length; i < il; i++) {
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
      }
      this.radius = Math.sqrt(maxRadiusSq);
      return this;
    }
    /**
     * Copies the values of the given sphere to this instance.
     *
     * @param {Sphere} sphere - The sphere to copy.
     * @return {Sphere} A reference to this sphere.
     */
    copy(sphere2) {
      this.center.copy(sphere2.center);
      this.radius = sphere2.radius;
      return this;
    }
    /**
     * Returns `true` if the sphere is empty (the radius set to a negative number).
     *
     * Spheres with a radius of `0` contain only their center point and are not
     * considered to be empty.
     *
     * @return {boolean} Whether this sphere is empty or not.
     */
    isEmpty() {
      return this.radius < 0;
    }
    /**
     * Makes this sphere empty which means in encloses a zero space in 3D.
     *
     * @return {Sphere} A reference to this sphere.
     */
    makeEmpty() {
      this.center.set(0, 0, 0);
      this.radius = -1;
      return this;
    }
    /**
     * Returns `true` if this sphere contains the given point inclusive of
     * the surface of the sphere.
     *
     * @param {Vector3} point - The point to check.
     * @return {boolean} Whether this sphere contains the given point or not.
     */
    containsPoint(point) {
      return point.distanceToSquared(this.center) <= this.radius * this.radius;
    }
    /**
     * Returns the closest distance from the boundary of the sphere to the
     * given point. If the sphere contains the point, the distance will
     * be negative.
     *
     * @param {Vector3} point - The point to compute the distance to.
     * @return {number} The distance to the point.
     */
    distanceToPoint(point) {
      return point.distanceTo(this.center) - this.radius;
    }
    /**
     * Returns `true` if this sphere intersects with the given one.
     *
     * @param {Sphere} sphere - The sphere to test.
     * @return {boolean} Whether this sphere intersects with the given one or not.
     */
    intersectsSphere(sphere2) {
      const radiusSum = this.radius + sphere2.radius;
      return sphere2.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
    }
    /**
     * Returns `true` if this sphere intersects with the given box.
     *
     * @param {Box3} box - The box to test.
     * @return {boolean} Whether this sphere intersects with the given box or not.
     */
    intersectsBox(box2) {
      return box2.intersectsSphere(this);
    }
    /**
     * Returns `true` if this sphere intersects with the given plane.
     *
     * @param {Plane} plane - The plane to test.
     * @return {boolean} Whether this sphere intersects with the given plane or not.
     */
    intersectsPlane(plane) {
      return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
    }
    /**
     * Clamps a point within the sphere. If the point is outside the sphere, it
     * will clamp it to the closest point on the edge of the sphere. Points
     * already inside the sphere will not be affected.
     *
     * @param {Vector3} point - The plane to clamp.
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {Vector3} The clamped point.
     */
    clampPoint(point, target) {
      const deltaLengthSq = this.center.distanceToSquared(point);
      target.copy(point);
      if (deltaLengthSq > this.radius * this.radius) {
        target.sub(this.center).normalize();
        target.multiplyScalar(this.radius).add(this.center);
      }
      return target;
    }
    /**
     * Returns a bounding box that encloses this sphere.
     *
     * @param {Box3} target - The target box that is used to store the method's result.
     * @return {Box3} The bounding box that encloses this sphere.
     */
    getBoundingBox(target) {
      if (this.isEmpty()) {
        target.makeEmpty();
        return target;
      }
      target.set(this.center, this.center);
      target.expandByScalar(this.radius);
      return target;
    }
    /**
     * Transforms this sphere with the given 4x4 transformation matrix.
     *
     * @param {Matrix4} matrix - The transformation matrix.
     * @return {Sphere} A reference to this sphere.
     */
    applyMatrix4(matrix) {
      this.center.applyMatrix4(matrix);
      this.radius = this.radius * matrix.getMaxScaleOnAxis();
      return this;
    }
    /**
     * Translates the sphere's center by the given offset.
     *
     * @param {Vector3} offset - The offset.
     * @return {Sphere} A reference to this sphere.
     */
    translate(offset) {
      this.center.add(offset);
      return this;
    }
    /**
     * Expands the boundaries of this sphere to include the given point.
     *
     * @param {Vector3} point - The point to include.
     * @return {Sphere} A reference to this sphere.
     */
    expandByPoint(point) {
      if (this.isEmpty()) {
        this.center.copy(point);
        this.radius = 0;
        return this;
      }
      _v1$6.subVectors(point, this.center);
      const lengthSq2 = _v1$6.lengthSq();
      if (lengthSq2 > this.radius * this.radius) {
        const length2 = Math.sqrt(lengthSq2);
        const delta = (length2 - this.radius) * 0.5;
        this.center.addScaledVector(_v1$6, delta / length2);
        this.radius += delta;
      }
      return this;
    }
    /**
     * Expands this sphere to enclose both the original sphere and the given sphere.
     *
     * @param {Sphere} sphere - The sphere to include.
     * @return {Sphere} A reference to this sphere.
     */
    union(sphere2) {
      if (sphere2.isEmpty()) {
        return this;
      }
      if (this.isEmpty()) {
        this.copy(sphere2);
        return this;
      }
      if (this.center.equals(sphere2.center) === true) {
        this.radius = Math.max(this.radius, sphere2.radius);
      } else {
        _v2$3.subVectors(sphere2.center, this.center).setLength(sphere2.radius);
        this.expandByPoint(_v1$6.copy(sphere2.center).add(_v2$3));
        this.expandByPoint(_v1$6.copy(sphere2.center).sub(_v2$3));
      }
      return this;
    }
    /**
     * Returns `true` if this sphere is equal with the given one.
     *
     * @param {Sphere} sphere - The sphere to test for equality.
     * @return {boolean} Whether this bounding sphere is equal with the given one.
     */
    equals(sphere2) {
      return sphere2.center.equals(this.center) && sphere2.radius === this.radius;
    }
    /**
     * Returns a new sphere with copied values from this instance.
     *
     * @return {Sphere} A clone of this instance.
     */
    clone() {
      return new this.constructor().copy(this);
    }
    /**
     * Returns a serialized structure of the bounding sphere.
     *
     * @return {Object} Serialized structure with fields representing the object state.
     */
    toJSON() {
      return {
        radius: this.radius,
        center: this.center.toArray()
      };
    }
    /**
     * Returns a serialized structure of the bounding sphere.
     *
     * @param {Object} json - The serialized json to set the sphere from.
     * @return {Box3} A reference to this bounding sphere.
     */
    fromJSON(json) {
      this.radius = json.radius;
      this.center.fromArray(json.center);
      return this;
    }
  };
  var _vector$a = /* @__PURE__ */ new Vector3();
  var _segCenter = /* @__PURE__ */ new Vector3();
  var _segDir = /* @__PURE__ */ new Vector3();
  var _diff = /* @__PURE__ */ new Vector3();
  var _edge1 = /* @__PURE__ */ new Vector3();
  var _edge2 = /* @__PURE__ */ new Vector3();
  var _normal$1 = /* @__PURE__ */ new Vector3();
  var Ray = class {
    /**
     * Constructs a new ray.
     *
     * @param {Vector3} [origin=(0,0,0)] - The origin of the ray.
     * @param {Vector3} [direction=(0,0,-1)] - The (normalized) direction of the ray.
     */
    constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {
      this.origin = origin;
      this.direction = direction;
    }
    /**
     * Sets the ray's components by copying the given values.
     *
     * @param {Vector3} origin - The origin.
     * @param {Vector3} direction - The direction.
     * @return {Ray} A reference to this ray.
     */
    set(origin, direction) {
      this.origin.copy(origin);
      this.direction.copy(direction);
      return this;
    }
    /**
     * Copies the values of the given ray to this instance.
     *
     * @param {Ray} ray - The ray to copy.
     * @return {Ray} A reference to this ray.
     */
    copy(ray) {
      this.origin.copy(ray.origin);
      this.direction.copy(ray.direction);
      return this;
    }
    /**
     * Returns a vector that is located at a given distance along this ray.
     *
     * @param {number} t - The distance along the ray to retrieve a position for.
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {Vector3} A position on the ray.
     */
    at(t2, target) {
      return target.copy(this.origin).addScaledVector(this.direction, t2);
    }
    /**
     * Adjusts the direction of the ray to point at the given vector in world space.
     *
     * @param {Vector3} v - The target position.
     * @return {Ray} A reference to this ray.
     */
    lookAt(v) {
      this.direction.copy(v).sub(this.origin).normalize();
      return this;
    }
    /**
     * Shift the origin of this ray along its direction by the given distance.
     *
     * @param {number} t - The distance along the ray to interpolate.
     * @return {Ray} A reference to this ray.
     */
    recast(t2) {
      this.origin.copy(this.at(t2, _vector$a));
      return this;
    }
    /**
     * Returns the point along this ray that is closest to the given point.
     *
     * @param {Vector3} point - A point in 3D space to get the closet location on the ray for.
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {Vector3} The closest point on this ray.
     */
    closestPointToPoint(point, target) {
      target.subVectors(point, this.origin);
      const directionDistance = target.dot(this.direction);
      if (directionDistance < 0) {
        return target.copy(this.origin);
      }
      return target.copy(this.origin).addScaledVector(this.direction, directionDistance);
    }
    /**
     * Returns the distance of the closest approach between this ray and the given point.
     *
     * @param {Vector3} point - A point in 3D space to compute the distance to.
     * @return {number} The distance.
     */
    distanceToPoint(point) {
      return Math.sqrt(this.distanceSqToPoint(point));
    }
    /**
     * Returns the squared distance of the closest approach between this ray and the given point.
     *
     * @param {Vector3} point - A point in 3D space to compute the distance to.
     * @return {number} The squared distance.
     */
    distanceSqToPoint(point) {
      const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction);
      if (directionDistance < 0) {
        return this.origin.distanceToSquared(point);
      }
      _vector$a.copy(this.origin).addScaledVector(this.direction, directionDistance);
      return _vector$a.distanceToSquared(point);
    }
    /**
     * Returns the squared distance between this ray and the given line segment.
     *
     * @param {Vector3} v0 - The start point of the line segment.
     * @param {Vector3} v1 - The end point of the line segment.
     * @param {Vector3} [optionalPointOnRay] - When provided, it receives the point on this ray that is closest to the segment.
     * @param {Vector3} [optionalPointOnSegment] - When provided, it receives the point on the line segment that is closest to this ray.
     * @return {number} The squared distance.
     */
    distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
      _segCenter.copy(v0).add(v1).multiplyScalar(0.5);
      _segDir.copy(v1).sub(v0).normalize();
      _diff.copy(this.origin).sub(_segCenter);
      const segExtent = v0.distanceTo(v1) * 0.5;
      const a01 = -this.direction.dot(_segDir);
      const b0 = _diff.dot(this.direction);
      const b1 = -_diff.dot(_segDir);
      const c = _diff.lengthSq();
      const det = Math.abs(1 - a01 * a01);
      let s0, s1, sqrDist, extDet;
      if (det > 0) {
        s0 = a01 * b1 - b0;
        s1 = a01 * b0 - b1;
        extDet = segExtent * det;
        if (s0 >= 0) {
          if (s1 >= -extDet) {
            if (s1 <= extDet) {
              const invDet = 1 / det;
              s0 *= invDet;
              s1 *= invDet;
              sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
            } else {
              s1 = segExtent;
              s0 = Math.max(0, -(a01 * s1 + b0));
              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
            }
          } else {
            s1 = -segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        } else {
          if (s1 <= -extDet) {
            s0 = Math.max(0, -(-a01 * segExtent + b0));
            s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          } else if (s1 <= extDet) {
            s0 = 0;
            s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = s1 * (s1 + 2 * b1) + c;
          } else {
            s0 = Math.max(0, -(a01 * segExtent + b0));
            s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        }
      } else {
        s1 = a01 > 0 ? -segExtent : segExtent;
        s0 = Math.max(0, -(a01 * s1 + b0));
        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
      }
      if (optionalPointOnRay) {
        optionalPointOnRay.copy(this.origin).addScaledVector(this.direction, s0);
      }
      if (optionalPointOnSegment) {
        optionalPointOnSegment.copy(_segCenter).addScaledVector(_segDir, s1);
      }
      return sqrDist;
    }
    /**
     * Intersects this ray with the given sphere, returning the intersection
     * point or `null` if there is no intersection.
     *
     * @param {Sphere} sphere - The sphere to intersect.
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {?Vector3} The intersection point.
     */
    intersectSphere(sphere2, target) {
      _vector$a.subVectors(sphere2.center, this.origin);
      const tca = _vector$a.dot(this.direction);
      const d2 = _vector$a.dot(_vector$a) - tca * tca;
      const radius2 = sphere2.radius * sphere2.radius;
      if (d2 > radius2) return null;
      const thc = Math.sqrt(radius2 - d2);
      const t0 = tca - thc;
      const t1 = tca + thc;
      if (t1 < 0) return null;
      if (t0 < 0) return this.at(t1, target);
      return this.at(t0, target);
    }
    /**
     * Returns `true` if this ray intersects with the given sphere.
     *
     * @param {Sphere} sphere - The sphere to intersect.
     * @return {boolean} Whether this ray intersects with the given sphere or not.
     */
    intersectsSphere(sphere2) {
      if (sphere2.radius < 0) return false;
      return this.distanceSqToPoint(sphere2.center) <= sphere2.radius * sphere2.radius;
    }
    /**
     * Computes the distance from the ray's origin to the given plane. Returns `null` if the ray
     * does not intersect with the plane.
     *
     * @param {Plane} plane - The plane to compute the distance to.
     * @return {?number} Whether this ray intersects with the given sphere or not.
     */
    distanceToPlane(plane) {
      const denominator = plane.normal.dot(this.direction);
      if (denominator === 0) {
        if (plane.distanceToPoint(this.origin) === 0) {
          return 0;
        }
        return null;
      }
      const t2 = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
      return t2 >= 0 ? t2 : null;
    }
    /**
     * Intersects this ray with the given plane, returning the intersection
     * point or `null` if there is no intersection.
     *
     * @param {Plane} plane - The plane to intersect.
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {?Vector3} The intersection point.
     */
    intersectPlane(plane, target) {
      const t2 = this.distanceToPlane(plane);
      if (t2 === null) {
        return null;
      }
      return this.at(t2, target);
    }
    /**
     * Returns `true` if this ray intersects with the given plane.
     *
     * @param {Plane} plane - The plane to intersect.
     * @return {boolean} Whether this ray intersects with the given plane or not.
     */
    intersectsPlane(plane) {
      const distToPoint = plane.distanceToPoint(this.origin);
      if (distToPoint === 0) {
        return true;
      }
      const denominator = plane.normal.dot(this.direction);
      if (denominator * distToPoint < 0) {
        return true;
      }
      return false;
    }
    /**
     * Intersects this ray with the given bounding box, returning the intersection
     * point or `null` if there is no intersection.
     *
     * @param {Box3} box - The box to intersect.
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {?Vector3} The intersection point.
     */
    intersectBox(box2, target) {
      let tmin, tmax, tymin, tymax, tzmin, tzmax;
      const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
      const origin = this.origin;
      if (invdirx >= 0) {
        tmin = (box2.min.x - origin.x) * invdirx;
        tmax = (box2.max.x - origin.x) * invdirx;
      } else {
        tmin = (box2.max.x - origin.x) * invdirx;
        tmax = (box2.min.x - origin.x) * invdirx;
      }
      if (invdiry >= 0) {
        tymin = (box2.min.y - origin.y) * invdiry;
        tymax = (box2.max.y - origin.y) * invdiry;
      } else {
        tymin = (box2.max.y - origin.y) * invdiry;
        tymax = (box2.min.y - origin.y) * invdiry;
      }
      if (tmin > tymax || tymin > tmax) return null;
      if (tymin > tmin || isNaN(tmin)) tmin = tymin;
      if (tymax < tmax || isNaN(tmax)) tmax = tymax;
      if (invdirz >= 0) {
        tzmin = (box2.min.z - origin.z) * invdirz;
        tzmax = (box2.max.z - origin.z) * invdirz;
      } else {
        tzmin = (box2.max.z - origin.z) * invdirz;
        tzmax = (box2.min.z - origin.z) * invdirz;
      }
      if (tmin > tzmax || tzmin > tmax) return null;
      if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
      if (tzmax < tmax || tmax !== tmax) tmax = tzmax;
      if (tmax < 0) return null;
      return this.at(tmin >= 0 ? tmin : tmax, target);
    }
    /**
     * Returns `true` if this ray intersects with the given box.
     *
     * @param {Box3} box - The box to intersect.
     * @return {boolean} Whether this ray intersects with the given box or not.
     */
    intersectsBox(box2) {
      return this.intersectBox(box2, _vector$a) !== null;
    }
    /**
     * Intersects this ray with the given triangle, returning the intersection
     * point or `null` if there is no intersection.
     *
     * @param {Vector3} a - The first vertex of the triangle.
     * @param {Vector3} b - The second vertex of the triangle.
     * @param {Vector3} c - The third vertex of the triangle.
     * @param {boolean} backfaceCulling - Whether to use backface culling or not.
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {?Vector3} The intersection point.
     */
    intersectTriangle(a, b, c, backfaceCulling, target) {
      _edge1.subVectors(b, a);
      _edge2.subVectors(c, a);
      _normal$1.crossVectors(_edge1, _edge2);
      let DdN = this.direction.dot(_normal$1);
      let sign2;
      if (DdN > 0) {
        if (backfaceCulling) return null;
        sign2 = 1;
      } else if (DdN < 0) {
        sign2 = -1;
        DdN = -DdN;
      } else {
        return null;
      }
      _diff.subVectors(this.origin, a);
      const DdQxE2 = sign2 * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
      if (DdQxE2 < 0) {
        return null;
      }
      const DdE1xQ = sign2 * this.direction.dot(_edge1.cross(_diff));
      if (DdE1xQ < 0) {
        return null;
      }
      if (DdQxE2 + DdE1xQ > DdN) {
        return null;
      }
      const QdN = -sign2 * _diff.dot(_normal$1);
      if (QdN < 0) {
        return null;
      }
      return this.at(QdN / DdN, target);
    }
    /**
     * Transforms this ray with the given 4x4 transformation matrix.
     *
     * @param {Matrix4} matrix4 - The transformation matrix.
     * @return {Ray} A reference to this ray.
     */
    applyMatrix4(matrix4) {
      this.origin.applyMatrix4(matrix4);
      this.direction.transformDirection(matrix4);
      return this;
    }
    /**
     * Returns `true` if this ray is equal with the given one.
     *
     * @param {Ray} ray - The ray to test for equality.
     * @return {boolean} Whether this ray is equal with the given one.
     */
    equals(ray) {
      return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
    }
    /**
     * Returns a new ray with copied values from this instance.
     *
     * @return {Ray} A clone of this instance.
     */
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var Matrix4 = class _Matrix4 {
    /**
     * Constructs a new 4x4 matrix. The arguments are supposed to be
     * in row-major order. If no arguments are provided, the constructor
     * initializes the matrix as an identity matrix.
     *
     * @param {number} [n11] - 1-1 matrix element.
     * @param {number} [n12] - 1-2 matrix element.
     * @param {number} [n13] - 1-3 matrix element.
     * @param {number} [n14] - 1-4 matrix element.
     * @param {number} [n21] - 2-1 matrix element.
     * @param {number} [n22] - 2-2 matrix element.
     * @param {number} [n23] - 2-3 matrix element.
     * @param {number} [n24] - 2-4 matrix element.
     * @param {number} [n31] - 3-1 matrix element.
     * @param {number} [n32] - 3-2 matrix element.
     * @param {number} [n33] - 3-3 matrix element.
     * @param {number} [n34] - 3-4 matrix element.
     * @param {number} [n41] - 4-1 matrix element.
     * @param {number} [n42] - 4-2 matrix element.
     * @param {number} [n43] - 4-3 matrix element.
     * @param {number} [n44] - 4-4 matrix element.
     */
    constructor(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      _Matrix4.prototype.isMatrix4 = true;
      this.elements = [
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      ];
      if (n11 !== void 0) {
        this.set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
      }
    }
    /**
     * Sets the elements of the matrix.The arguments are supposed to be
     * in row-major order.
     *
     * @param {number} [n11] - 1-1 matrix element.
     * @param {number} [n12] - 1-2 matrix element.
     * @param {number} [n13] - 1-3 matrix element.
     * @param {number} [n14] - 1-4 matrix element.
     * @param {number} [n21] - 2-1 matrix element.
     * @param {number} [n22] - 2-2 matrix element.
     * @param {number} [n23] - 2-3 matrix element.
     * @param {number} [n24] - 2-4 matrix element.
     * @param {number} [n31] - 3-1 matrix element.
     * @param {number} [n32] - 3-2 matrix element.
     * @param {number} [n33] - 3-3 matrix element.
     * @param {number} [n34] - 3-4 matrix element.
     * @param {number} [n41] - 4-1 matrix element.
     * @param {number} [n42] - 4-2 matrix element.
     * @param {number} [n43] - 4-3 matrix element.
     * @param {number} [n44] - 4-4 matrix element.
     * @return {Matrix4} A reference to this matrix.
     */
    set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      const te = this.elements;
      te[0] = n11;
      te[4] = n12;
      te[8] = n13;
      te[12] = n14;
      te[1] = n21;
      te[5] = n22;
      te[9] = n23;
      te[13] = n24;
      te[2] = n31;
      te[6] = n32;
      te[10] = n33;
      te[14] = n34;
      te[3] = n41;
      te[7] = n42;
      te[11] = n43;
      te[15] = n44;
      return this;
    }
    /**
     * Sets this matrix to the 4x4 identity matrix.
     *
     * @return {Matrix4} A reference to this matrix.
     */
    identity() {
      this.set(
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    /**
     * Returns a matrix with copied values from this instance.
     *
     * @return {Matrix4} A clone of this instance.
     */
    clone() {
      return new _Matrix4().fromArray(this.elements);
    }
    /**
     * Copies the values of the given matrix to this instance.
     *
     * @param {Matrix4} m - The matrix to copy.
     * @return {Matrix4} A reference to this matrix.
     */
    copy(m) {
      const te = this.elements;
      const me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      te[9] = me[9];
      te[10] = me[10];
      te[11] = me[11];
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      te[15] = me[15];
      return this;
    }
    /**
     * Copies the translation component of the given matrix
     * into this matrix's translation component.
     *
     * @param {Matrix4} m - The matrix to copy the translation component.
     * @return {Matrix4} A reference to this matrix.
     */
    copyPosition(m) {
      const te = this.elements, me = m.elements;
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      return this;
    }
    /**
     * Set the upper 3x3 elements of this matrix to the values of given 3x3 matrix.
     *
     * @param {Matrix3} m - The 3x3 matrix.
     * @return {Matrix4} A reference to this matrix.
     */
    setFromMatrix3(m) {
      const me = m.elements;
      this.set(
        me[0],
        me[3],
        me[6],
        0,
        me[1],
        me[4],
        me[7],
        0,
        me[2],
        me[5],
        me[8],
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    /**
     * Extracts the basis of this matrix into the three axis vectors provided.
     *
     * @param {Vector3} xAxis - The basis's x axis.
     * @param {Vector3} yAxis - The basis's y axis.
     * @param {Vector3} zAxis - The basis's z axis.
     * @return {Matrix4} A reference to this matrix.
     */
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrixColumn(this, 0);
      yAxis.setFromMatrixColumn(this, 1);
      zAxis.setFromMatrixColumn(this, 2);
      return this;
    }
    /**
     * Sets the given basis vectors to this matrix.
     *
     * @param {Vector3} xAxis - The basis's x axis.
     * @param {Vector3} yAxis - The basis's y axis.
     * @param {Vector3} zAxis - The basis's z axis.
     * @return {Matrix4} A reference to this matrix.
     */
    makeBasis(xAxis, yAxis, zAxis) {
      this.set(
        xAxis.x,
        yAxis.x,
        zAxis.x,
        0,
        xAxis.y,
        yAxis.y,
        zAxis.y,
        0,
        xAxis.z,
        yAxis.z,
        zAxis.z,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    /**
     * Extracts the rotation component of the given matrix
     * into this matrix's rotation component.
     *
     * Note: This method does not support reflection matrices.
     *
     * @param {Matrix4} m - The matrix.
     * @return {Matrix4} A reference to this matrix.
     */
    extractRotation(m) {
      const te = this.elements;
      const me = m.elements;
      const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();
      const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();
      const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();
      te[0] = me[0] * scaleX;
      te[1] = me[1] * scaleX;
      te[2] = me[2] * scaleX;
      te[3] = 0;
      te[4] = me[4] * scaleY;
      te[5] = me[5] * scaleY;
      te[6] = me[6] * scaleY;
      te[7] = 0;
      te[8] = me[8] * scaleZ;
      te[9] = me[9] * scaleZ;
      te[10] = me[10] * scaleZ;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
    /**
     * Sets the rotation component (the upper left 3x3 matrix) of this matrix to
     * the rotation specified by the given Euler angles. The rest of
     * the matrix is set to the identity. Depending on the {@link Euler#order},
     * there are six possible outcomes. See [this page]{@link https://en.wikipedia.org/wiki/Euler_angles#Rotation_matrix}
     * for a complete list.
     *
     * @param {Euler} euler - The Euler angles.
     * @return {Matrix4} A reference to this matrix.
     */
    makeRotationFromEuler(euler) {
      const te = this.elements;
      const x = euler.x, y = euler.y, z = euler.z;
      const a = Math.cos(x), b = Math.sin(x);
      const c = Math.cos(y), d = Math.sin(y);
      const e = Math.cos(z), f = Math.sin(z);
      if (euler.order === "XYZ") {
        const ae = a * e, af = a * f, be = b * e, bf = b * f;
        te[0] = c * e;
        te[4] = -c * f;
        te[8] = d;
        te[1] = af + be * d;
        te[5] = ae - bf * d;
        te[9] = -b * c;
        te[2] = bf - ae * d;
        te[6] = be + af * d;
        te[10] = a * c;
      } else if (euler.order === "YXZ") {
        const ce = c * e, cf = c * f, de = d * e, df = d * f;
        te[0] = ce + df * b;
        te[4] = de * b - cf;
        te[8] = a * d;
        te[1] = a * f;
        te[5] = a * e;
        te[9] = -b;
        te[2] = cf * b - de;
        te[6] = df + ce * b;
        te[10] = a * c;
      } else if (euler.order === "ZXY") {
        const ce = c * e, cf = c * f, de = d * e, df = d * f;
        te[0] = ce - df * b;
        te[4] = -a * f;
        te[8] = de + cf * b;
        te[1] = cf + de * b;
        te[5] = a * e;
        te[9] = df - ce * b;
        te[2] = -a * d;
        te[6] = b;
        te[10] = a * c;
      } else if (euler.order === "ZYX") {
        const ae = a * e, af = a * f, be = b * e, bf = b * f;
        te[0] = c * e;
        te[4] = be * d - af;
        te[8] = ae * d + bf;
        te[1] = c * f;
        te[5] = bf * d + ae;
        te[9] = af * d - be;
        te[2] = -d;
        te[6] = b * c;
        te[10] = a * c;
      } else if (euler.order === "YZX") {
        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
        te[0] = c * e;
        te[4] = bd - ac * f;
        te[8] = bc * f + ad;
        te[1] = f;
        te[5] = a * e;
        te[9] = -b * e;
        te[2] = -d * e;
        te[6] = ad * f + bc;
        te[10] = ac - bd * f;
      } else if (euler.order === "XZY") {
        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
        te[0] = c * e;
        te[4] = -f;
        te[8] = d * e;
        te[1] = ac * f + bd;
        te[5] = a * e;
        te[9] = ad * f - bc;
        te[2] = bc * f - ad;
        te[6] = b * e;
        te[10] = bd * f + ac;
      }
      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
    /**
     * Sets the rotation component of this matrix to the rotation specified by
     * the given Quaternion as outlined [here]{@link https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion}
     * The rest of the matrix is set to the identity.
     *
     * @param {Quaternion} q - The Quaternion.
     * @return {Matrix4} A reference to this matrix.
     */
    makeRotationFromQuaternion(q) {
      return this.compose(_zero, q, _one);
    }
    /**
     * Sets the rotation component of the transformation matrix, looking from `eye` towards
     * `target`, and oriented by the up-direction.
     *
     * @param {Vector3} eye - The eye vector.
     * @param {Vector3} target - The target vector.
     * @param {Vector3} up - The up vector.
     * @return {Matrix4} A reference to this matrix.
     */
    lookAt(eye, target, up) {
      const te = this.elements;
      _z.subVectors(eye, target);
      if (_z.lengthSq() === 0) {
        _z.z = 1;
      }
      _z.normalize();
      _x.crossVectors(up, _z);
      if (_x.lengthSq() === 0) {
        if (Math.abs(up.z) === 1) {
          _z.x += 1e-4;
        } else {
          _z.z += 1e-4;
        }
        _z.normalize();
        _x.crossVectors(up, _z);
      }
      _x.normalize();
      _y.crossVectors(_z, _x);
      te[0] = _x.x;
      te[4] = _y.x;
      te[8] = _z.x;
      te[1] = _x.y;
      te[5] = _y.y;
      te[9] = _z.y;
      te[2] = _x.z;
      te[6] = _y.z;
      te[10] = _z.z;
      return this;
    }
    /**
     * Post-multiplies this matrix by the given 4x4 matrix.
     *
     * @param {Matrix4} m - The matrix to multiply with.
     * @return {Matrix4} A reference to this matrix.
     */
    multiply(m) {
      return this.multiplyMatrices(this, m);
    }
    /**
     * Pre-multiplies this matrix by the given 4x4 matrix.
     *
     * @param {Matrix4} m - The matrix to multiply with.
     * @return {Matrix4} A reference to this matrix.
     */
    premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
    /**
     * Multiples the given 4x4 matrices and stores the result
     * in this matrix.
     *
     * @param {Matrix4} a - The first matrix.
     * @param {Matrix4} b - The second matrix.
     * @return {Matrix4} A reference to this matrix.
     */
    multiplyMatrices(a, b) {
      const ae = a.elements;
      const be = b.elements;
      const te = this.elements;
      const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
      const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
      const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
      const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
      const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
      const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
      const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
      const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
      te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
      te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
      te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
      te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
      te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
      te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
      te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
      te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
      te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
      te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
      te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
      te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
      te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
      return this;
    }
    /**
     * Multiplies every component of the matrix by the given scalar.
     *
     * @param {number} s - The scalar.
     * @return {Matrix4} A reference to this matrix.
     */
    multiplyScalar(s) {
      const te = this.elements;
      te[0] *= s;
      te[4] *= s;
      te[8] *= s;
      te[12] *= s;
      te[1] *= s;
      te[5] *= s;
      te[9] *= s;
      te[13] *= s;
      te[2] *= s;
      te[6] *= s;
      te[10] *= s;
      te[14] *= s;
      te[3] *= s;
      te[7] *= s;
      te[11] *= s;
      te[15] *= s;
      return this;
    }
    /**
     * Computes and returns the determinant of this matrix.
     *
     * Based on the method outlined [here]{@link http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.html}.
     *
     * @return {number} The determinant.
     */
    determinant() {
      const te = this.elements;
      const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
      const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
      const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
      const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
      return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
    }
    /**
     * Transposes this matrix in place.
     *
     * @return {Matrix4} A reference to this matrix.
     */
    transpose() {
      const te = this.elements;
      let tmp;
      tmp = te[1];
      te[1] = te[4];
      te[4] = tmp;
      tmp = te[2];
      te[2] = te[8];
      te[8] = tmp;
      tmp = te[6];
      te[6] = te[9];
      te[9] = tmp;
      tmp = te[3];
      te[3] = te[12];
      te[12] = tmp;
      tmp = te[7];
      te[7] = te[13];
      te[13] = tmp;
      tmp = te[11];
      te[11] = te[14];
      te[14] = tmp;
      return this;
    }
    /**
     * Sets the position component for this matrix from the given vector,
     * without affecting the rest of the matrix.
     *
     * @param {number|Vector3} x - The x component of the vector or alternatively the vector object.
     * @param {number} y - The y component of the vector.
     * @param {number} z - The z component of the vector.
     * @return {Matrix4} A reference to this matrix.
     */
    setPosition(x, y, z) {
      const te = this.elements;
      if (x.isVector3) {
        te[12] = x.x;
        te[13] = x.y;
        te[14] = x.z;
      } else {
        te[12] = x;
        te[13] = y;
        te[14] = z;
      }
      return this;
    }
    /**
     * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.
     * You can not invert with a determinant of zero. If you attempt this, the method produces
     * a zero matrix instead.
     *
     * @return {Matrix4} A reference to this matrix.
     */
    invert() {
      const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
      const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
      if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
      te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
      te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
      te[4] = t12 * detInv;
      te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
      te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
      te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
      te[8] = t13 * detInv;
      te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
      te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
      te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
      te[12] = t14 * detInv;
      te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
      te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
      te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
      return this;
    }
    /**
     * Multiplies the columns of this matrix by the given vector.
     *
     * @param {Vector3} v - The scale vector.
     * @return {Matrix4} A reference to this matrix.
     */
    scale(v) {
      const te = this.elements;
      const x = v.x, y = v.y, z = v.z;
      te[0] *= x;
      te[4] *= y;
      te[8] *= z;
      te[1] *= x;
      te[5] *= y;
      te[9] *= z;
      te[2] *= x;
      te[6] *= y;
      te[10] *= z;
      te[3] *= x;
      te[7] *= y;
      te[11] *= z;
      return this;
    }
    /**
     * Gets the maximum scale value of the three axes.
     *
     * @return {number} The maximum scale.
     */
    getMaxScaleOnAxis() {
      const te = this.elements;
      const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
      const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
      const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
      return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
    }
    /**
     * Sets this matrix as a translation transform from the given vector.
     *
     * @param {number|Vector3} x - The amount to translate in the X axis or alternatively a translation vector.
     * @param {number} y - The amount to translate in the Y axis.
     * @param {number} z - The amount to translate in the z axis.
     * @return {Matrix4} A reference to this matrix.
     */
    makeTranslation(x, y, z) {
      if (x.isVector3) {
        this.set(
          1,
          0,
          0,
          x.x,
          0,
          1,
          0,
          x.y,
          0,
          0,
          1,
          x.z,
          0,
          0,
          0,
          1
        );
      } else {
        this.set(
          1,
          0,
          0,
          x,
          0,
          1,
          0,
          y,
          0,
          0,
          1,
          z,
          0,
          0,
          0,
          1
        );
      }
      return this;
    }
    /**
     * Sets this matrix as a rotational transformation around the X axis by
     * the given angle.
     *
     * @param {number} theta - The rotation in radians.
     * @return {Matrix4} A reference to this matrix.
     */
    makeRotationX(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        1,
        0,
        0,
        0,
        0,
        c,
        -s,
        0,
        0,
        s,
        c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    /**
     * Sets this matrix as a rotational transformation around the Y axis by
     * the given angle.
     *
     * @param {number} theta - The rotation in radians.
     * @return {Matrix4} A reference to this matrix.
     */
    makeRotationY(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        c,
        0,
        s,
        0,
        0,
        1,
        0,
        0,
        -s,
        0,
        c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    /**
     * Sets this matrix as a rotational transformation around the Z axis by
     * the given angle.
     *
     * @param {number} theta - The rotation in radians.
     * @return {Matrix4} A reference to this matrix.
     */
    makeRotationZ(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        c,
        -s,
        0,
        0,
        s,
        c,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    /**
     * Sets this matrix as a rotational transformation around the given axis by
     * the given angle.
     *
     * This is a somewhat controversial but mathematically sound alternative to
     * rotating via Quaternions. See the discussion [here]{@link https://www.gamedev.net/articles/programming/math-and-physics/do-we-really-need-quaternions-r1199}.
     *
     * @param {Vector3} axis - The normalized rotation axis.
     * @param {number} angle - The rotation in radians.
     * @return {Matrix4} A reference to this matrix.
     */
    makeRotationAxis(axis, angle) {
      const c = Math.cos(angle);
      const s = Math.sin(angle);
      const t2 = 1 - c;
      const x = axis.x, y = axis.y, z = axis.z;
      const tx = t2 * x, ty = t2 * y;
      this.set(
        tx * x + c,
        tx * y - s * z,
        tx * z + s * y,
        0,
        tx * y + s * z,
        ty * y + c,
        ty * z - s * x,
        0,
        tx * z - s * y,
        ty * z + s * x,
        t2 * z * z + c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    /**
     * Sets this matrix as a scale transformation.
     *
     * @param {number} x - The amount to scale in the X axis.
     * @param {number} y - The amount to scale in the Y axis.
     * @param {number} z - The amount to scale in the Z axis.
     * @return {Matrix4} A reference to this matrix.
     */
    makeScale(x, y, z) {
      this.set(
        x,
        0,
        0,
        0,
        0,
        y,
        0,
        0,
        0,
        0,
        z,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    /**
     * Sets this matrix as a shear transformation.
     *
     * @param {number} xy - The amount to shear X by Y.
     * @param {number} xz - The amount to shear X by Z.
     * @param {number} yx - The amount to shear Y by X.
     * @param {number} yz - The amount to shear Y by Z.
     * @param {number} zx - The amount to shear Z by X.
     * @param {number} zy - The amount to shear Z by Y.
     * @return {Matrix4} A reference to this matrix.
     */
    makeShear(xy, xz, yx, yz, zx, zy) {
      this.set(
        1,
        yx,
        zx,
        0,
        xy,
        1,
        zy,
        0,
        xz,
        yz,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    /**
     * Sets this matrix to the transformation composed of the given position,
     * rotation (Quaternion) and scale.
     *
     * @param {Vector3} position - The position vector.
     * @param {Quaternion} quaternion - The rotation as a Quaternion.
     * @param {Vector3} scale - The scale vector.
     * @return {Matrix4} A reference to this matrix.
     */
    compose(position, quaternion, scale) {
      const te = this.elements;
      const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
      const x2 = x + x, y2 = y + y, z2 = z + z;
      const xx = x * x2, xy = x * y2, xz = x * z2;
      const yy = y * y2, yz = y * z2, zz = z * z2;
      const wx = w * x2, wy = w * y2, wz = w * z2;
      const sx = scale.x, sy = scale.y, sz = scale.z;
      te[0] = (1 - (yy + zz)) * sx;
      te[1] = (xy + wz) * sx;
      te[2] = (xz - wy) * sx;
      te[3] = 0;
      te[4] = (xy - wz) * sy;
      te[5] = (1 - (xx + zz)) * sy;
      te[6] = (yz + wx) * sy;
      te[7] = 0;
      te[8] = (xz + wy) * sz;
      te[9] = (yz - wx) * sz;
      te[10] = (1 - (xx + yy)) * sz;
      te[11] = 0;
      te[12] = position.x;
      te[13] = position.y;
      te[14] = position.z;
      te[15] = 1;
      return this;
    }
    /**
     * Decomposes this matrix into its position, rotation and scale components
     * and provides the result in the given objects.
     *
     * Note: Not all matrices are decomposable in this way. For example, if an
     * object has a non-uniformly scaled parent, then the object's world matrix
     * may not be decomposable, and this method may not be appropriate.
     *
     * @param {Vector3} position - The position vector.
     * @param {Quaternion} quaternion - The rotation as a Quaternion.
     * @param {Vector3} scale - The scale vector.
     * @return {Matrix4} A reference to this matrix.
     */
    decompose(position, quaternion, scale) {
      const te = this.elements;
      let sx = _v1$5.set(te[0], te[1], te[2]).length();
      const sy = _v1$5.set(te[4], te[5], te[6]).length();
      const sz = _v1$5.set(te[8], te[9], te[10]).length();
      const det = this.determinant();
      if (det < 0) sx = -sx;
      position.x = te[12];
      position.y = te[13];
      position.z = te[14];
      _m1$2.copy(this);
      const invSX = 1 / sx;
      const invSY = 1 / sy;
      const invSZ = 1 / sz;
      _m1$2.elements[0] *= invSX;
      _m1$2.elements[1] *= invSX;
      _m1$2.elements[2] *= invSX;
      _m1$2.elements[4] *= invSY;
      _m1$2.elements[5] *= invSY;
      _m1$2.elements[6] *= invSY;
      _m1$2.elements[8] *= invSZ;
      _m1$2.elements[9] *= invSZ;
      _m1$2.elements[10] *= invSZ;
      quaternion.setFromRotationMatrix(_m1$2);
      scale.x = sx;
      scale.y = sy;
      scale.z = sz;
      return this;
    }
    /**
    	 * Creates a perspective projection matrix. This is used internally by
    	 * {@link PerspectiveCamera#updateProjectionMatrix}.
    
    	 * @param {number} left - Left boundary of the viewing frustum at the near plane.
    	 * @param {number} right - Right boundary of the viewing frustum at the near plane.
    	 * @param {number} top - Top boundary of the viewing frustum at the near plane.
    	 * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.
    	 * @param {number} near - The distance from the camera to the near plane.
    	 * @param {number} far - The distance from the camera to the far plane.
    	 * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    makePerspective(left, right, top2, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
      const te = this.elements;
      const x = 2 * near / (right - left);
      const y = 2 * near / (top2 - bottom);
      const a = (right + left) / (right - left);
      const b = (top2 + bottom) / (top2 - bottom);
      let c, d;
      if (coordinateSystem === WebGLCoordinateSystem) {
        c = -(far + near) / (far - near);
        d = -2 * far * near / (far - near);
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        c = -far / (far - near);
        d = -far * near / (far - near);
      } else {
        throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + coordinateSystem);
      }
      te[0] = x;
      te[4] = 0;
      te[8] = a;
      te[12] = 0;
      te[1] = 0;
      te[5] = y;
      te[9] = b;
      te[13] = 0;
      te[2] = 0;
      te[6] = 0;
      te[10] = c;
      te[14] = d;
      te[3] = 0;
      te[7] = 0;
      te[11] = -1;
      te[15] = 0;
      return this;
    }
    /**
    	 * Creates a orthographic projection matrix. This is used internally by
    	 * {@link OrthographicCamera#updateProjectionMatrix}.
    
    	 * @param {number} left - Left boundary of the viewing frustum at the near plane.
    	 * @param {number} right - Right boundary of the viewing frustum at the near plane.
    	 * @param {number} top - Top boundary of the viewing frustum at the near plane.
    	 * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.
    	 * @param {number} near - The distance from the camera to the near plane.
    	 * @param {number} far - The distance from the camera to the far plane.
    	 * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.
    	 * @return {Matrix4} A reference to this matrix.
    	 */
    makeOrthographic(left, right, top2, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
      const te = this.elements;
      const w = 1 / (right - left);
      const h = 1 / (top2 - bottom);
      const p = 1 / (far - near);
      const x = (right + left) * w;
      const y = (top2 + bottom) * h;
      let z, zInv;
      if (coordinateSystem === WebGLCoordinateSystem) {
        z = (far + near) * p;
        zInv = -2 * p;
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        z = near * p;
        zInv = -1 * p;
      } else {
        throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + coordinateSystem);
      }
      te[0] = 2 * w;
      te[4] = 0;
      te[8] = 0;
      te[12] = -x;
      te[1] = 0;
      te[5] = 2 * h;
      te[9] = 0;
      te[13] = -y;
      te[2] = 0;
      te[6] = 0;
      te[10] = zInv;
      te[14] = -z;
      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[15] = 1;
      return this;
    }
    /**
     * Returns `true` if this matrix is equal with the given one.
     *
     * @param {Matrix4} matrix - The matrix to test for equality.
     * @return {boolean} Whether this matrix is equal with the given one.
     */
    equals(matrix) {
      const te = this.elements;
      const me = matrix.elements;
      for (let i = 0; i < 16; i++) {
        if (te[i] !== me[i]) return false;
      }
      return true;
    }
    /**
     * Sets the elements of the matrix from the given array.
     *
     * @param {Array<number>} array - The matrix elements in column-major order.
     * @param {number} [offset=0] - Index of the first element in the array.
     * @return {Matrix4} A reference to this matrix.
     */
    fromArray(array2, offset = 0) {
      for (let i = 0; i < 16; i++) {
        this.elements[i] = array2[i + offset];
      }
      return this;
    }
    /**
     * Writes the elements of this matrix to the given array. If no array is provided,
     * the method returns a new instance.
     *
     * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.
     * @param {number} [offset=0] - Index of the first element in the array.
     * @return {Array<number>} The matrix elements in column-major order.
     */
    toArray(array2 = [], offset = 0) {
      const te = this.elements;
      array2[offset] = te[0];
      array2[offset + 1] = te[1];
      array2[offset + 2] = te[2];
      array2[offset + 3] = te[3];
      array2[offset + 4] = te[4];
      array2[offset + 5] = te[5];
      array2[offset + 6] = te[6];
      array2[offset + 7] = te[7];
      array2[offset + 8] = te[8];
      array2[offset + 9] = te[9];
      array2[offset + 10] = te[10];
      array2[offset + 11] = te[11];
      array2[offset + 12] = te[12];
      array2[offset + 13] = te[13];
      array2[offset + 14] = te[14];
      array2[offset + 15] = te[15];
      return array2;
    }
  };
  var _v1$5 = /* @__PURE__ */ new Vector3();
  var _m1$2 = /* @__PURE__ */ new Matrix4();
  var _zero = /* @__PURE__ */ new Vector3(0, 0, 0);
  var _one = /* @__PURE__ */ new Vector3(1, 1, 1);
  var _x = /* @__PURE__ */ new Vector3();
  var _y = /* @__PURE__ */ new Vector3();
  var _z = /* @__PURE__ */ new Vector3();
  var _matrix$2 = /* @__PURE__ */ new Matrix4();
  var _quaternion$3 = /* @__PURE__ */ new Quaternion();
  var Euler = class _Euler {
    /**
     * Constructs a new euler instance.
     *
     * @param {number} [x=0] - The angle of the x axis in radians.
     * @param {number} [y=0] - The angle of the y axis in radians.
     * @param {number} [z=0] - The angle of the z axis in radians.
     * @param {string} [order=Euler.DEFAULT_ORDER] - A string representing the order that the rotations are applied.
     */
    constructor(x = 0, y = 0, z = 0, order = _Euler.DEFAULT_ORDER) {
      this.isEuler = true;
      this._x = x;
      this._y = y;
      this._z = z;
      this._order = order;
    }
    /**
     * The angle of the x axis in radians.
     *
     * @type {number}
     * @default 0
     */
    get x() {
      return this._x;
    }
    set x(value) {
      this._x = value;
      this._onChangeCallback();
    }
    /**
     * The angle of the y axis in radians.
     *
     * @type {number}
     * @default 0
     */
    get y() {
      return this._y;
    }
    set y(value) {
      this._y = value;
      this._onChangeCallback();
    }
    /**
     * The angle of the z axis in radians.
     *
     * @type {number}
     * @default 0
     */
    get z() {
      return this._z;
    }
    set z(value) {
      this._z = value;
      this._onChangeCallback();
    }
    /**
     * A string representing the order that the rotations are applied.
     *
     * @type {string}
     * @default 'XYZ'
     */
    get order() {
      return this._order;
    }
    set order(value) {
      this._order = value;
      this._onChangeCallback();
    }
    /**
     * Sets the Euler components.
     *
     * @param {number} x - The angle of the x axis in radians.
     * @param {number} y - The angle of the y axis in radians.
     * @param {number} z - The angle of the z axis in radians.
     * @param {string} [order] - A string representing the order that the rotations are applied.
     * @return {Euler} A reference to this Euler instance.
     */
    set(x, y, z, order = this._order) {
      this._x = x;
      this._y = y;
      this._z = z;
      this._order = order;
      this._onChangeCallback();
      return this;
    }
    /**
     * Returns a new Euler instance with copied values from this instance.
     *
     * @return {Euler} A clone of this instance.
     */
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._order);
    }
    /**
     * Copies the values of the given Euler instance to this instance.
     *
     * @param {Euler} euler - The Euler instance to copy.
     * @return {Euler} A reference to this Euler instance.
     */
    copy(euler) {
      this._x = euler._x;
      this._y = euler._y;
      this._z = euler._z;
      this._order = euler._order;
      this._onChangeCallback();
      return this;
    }
    /**
     * Sets the angles of this Euler instance from a pure rotation matrix.
     *
     * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).
     * @param {string} [order] - A string representing the order that the rotations are applied.
     * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.
     * @return {Euler} A reference to this Euler instance.
     */
    setFromRotationMatrix(m, order = this._order, update = true) {
      const te = m.elements;
      const m11 = te[0], m12 = te[4], m13 = te[8];
      const m21 = te[1], m22 = te[5], m23 = te[9];
      const m31 = te[2], m32 = te[6], m33 = te[10];
      switch (order) {
        case "XYZ":
          this._y = Math.asin(clamp(m13, -1, 1));
          if (Math.abs(m13) < 0.9999999) {
            this._x = Math.atan2(-m23, m33);
            this._z = Math.atan2(-m12, m11);
          } else {
            this._x = Math.atan2(m32, m22);
            this._z = 0;
          }
          break;
        case "YXZ":
          this._x = Math.asin(-clamp(m23, -1, 1));
          if (Math.abs(m23) < 0.9999999) {
            this._y = Math.atan2(m13, m33);
            this._z = Math.atan2(m21, m22);
          } else {
            this._y = Math.atan2(-m31, m11);
            this._z = 0;
          }
          break;
        case "ZXY":
          this._x = Math.asin(clamp(m32, -1, 1));
          if (Math.abs(m32) < 0.9999999) {
            this._y = Math.atan2(-m31, m33);
            this._z = Math.atan2(-m12, m22);
          } else {
            this._y = 0;
            this._z = Math.atan2(m21, m11);
          }
          break;
        case "ZYX":
          this._y = Math.asin(-clamp(m31, -1, 1));
          if (Math.abs(m31) < 0.9999999) {
            this._x = Math.atan2(m32, m33);
            this._z = Math.atan2(m21, m11);
          } else {
            this._x = 0;
            this._z = Math.atan2(-m12, m22);
          }
          break;
        case "YZX":
          this._z = Math.asin(clamp(m21, -1, 1));
          if (Math.abs(m21) < 0.9999999) {
            this._x = Math.atan2(-m23, m22);
            this._y = Math.atan2(-m31, m11);
          } else {
            this._x = 0;
            this._y = Math.atan2(m13, m33);
          }
          break;
        case "XZY":
          this._z = Math.asin(-clamp(m12, -1, 1));
          if (Math.abs(m12) < 0.9999999) {
            this._x = Math.atan2(m32, m22);
            this._y = Math.atan2(m13, m11);
          } else {
            this._x = Math.atan2(-m23, m33);
            this._y = 0;
          }
          break;
        default:
          console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
      }
      this._order = order;
      if (update === true) this._onChangeCallback();
      return this;
    }
    /**
     * Sets the angles of this Euler instance from a normalized quaternion.
     *
     * @param {Quaternion} q - A normalized Quaternion.
     * @param {string} [order] - A string representing the order that the rotations are applied.
     * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.
     * @return {Euler} A reference to this Euler instance.
     */
    setFromQuaternion(q, order, update) {
      _matrix$2.makeRotationFromQuaternion(q);
      return this.setFromRotationMatrix(_matrix$2, order, update);
    }
    /**
     * Sets the angles of this Euler instance from the given vector.
     *
     * @param {Vector3} v - The vector.
     * @param {string} [order] - A string representing the order that the rotations are applied.
     * @return {Euler} A reference to this Euler instance.
     */
    setFromVector3(v, order = this._order) {
      return this.set(v.x, v.y, v.z, order);
    }
    /**
     * Resets the euler angle with a new order by creating a quaternion from this
     * euler angle and then setting this euler angle with the quaternion and the
     * new order.
     *
     * Warning: This discards revolution information.
     *
     * @param {string} [newOrder] - A string representing the new order that the rotations are applied.
     * @return {Euler} A reference to this Euler instance.
     */
    reorder(newOrder) {
      _quaternion$3.setFromEuler(this);
      return this.setFromQuaternion(_quaternion$3, newOrder);
    }
    /**
     * Returns `true` if this Euler instance is equal with the given one.
     *
     * @param {Euler} euler - The Euler instance to test for equality.
     * @return {boolean} Whether this Euler instance is equal with the given one.
     */
    equals(euler) {
      return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
    }
    /**
     * Sets this Euler instance's components to values from the given array. The first three
     * entries of the array are assign to the x,y and z components. An optional fourth entry
     * defines the Euler order.
     *
     * @param {Array<number,number,number,?string>} array - An array holding the Euler component values.
     * @return {Euler} A reference to this Euler instance.
     */
    fromArray(array2) {
      this._x = array2[0];
      this._y = array2[1];
      this._z = array2[2];
      if (array2[3] !== void 0) this._order = array2[3];
      this._onChangeCallback();
      return this;
    }
    /**
     * Writes the components of this Euler instance to the given array. If no array is provided,
     * the method returns a new instance.
     *
     * @param {Array<number,number,number,string>} [array=[]] - The target array holding the Euler components.
     * @param {number} [offset=0] - Index of the first element in the array.
     * @return {Array<number,number,number,string>} The Euler components.
     */
    toArray(array2 = [], offset = 0) {
      array2[offset] = this._x;
      array2[offset + 1] = this._y;
      array2[offset + 2] = this._z;
      array2[offset + 3] = this._order;
      return array2;
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
    *[Symbol.iterator]() {
      yield this._x;
      yield this._y;
      yield this._z;
      yield this._order;
    }
  };
  Euler.DEFAULT_ORDER = "XYZ";
  var Layers = class {
    /**
     * Constructs a new layers instance, with membership
     * initially set to layer `0`.
     */
    constructor() {
      this.mask = 1 | 0;
    }
    /**
     * Sets membership to the given layer, and remove membership all other layers.
     *
     * @param {number} layer - The layer to set.
     */
    set(layer2) {
      this.mask = (1 << layer2 | 0) >>> 0;
    }
    /**
     * Adds membership of the given layer.
     *
     * @param {number} layer - The layer to enable.
     */
    enable(layer2) {
      this.mask |= 1 << layer2 | 0;
    }
    /**
     * Adds membership to all layers.
     */
    enableAll() {
      this.mask = 4294967295 | 0;
    }
    /**
     * Toggles the membership of the given layer.
     *
     * @param {number} layer - The layer to toggle.
     */
    toggle(layer2) {
      this.mask ^= 1 << layer2 | 0;
    }
    /**
     * Removes membership of the given layer.
     *
     * @param {number} layer - The layer to enable.
     */
    disable(layer2) {
      this.mask &= ~(1 << layer2 | 0);
    }
    /**
     * Removes the membership from all layers.
     */
    disableAll() {
      this.mask = 0;
    }
    /**
     * Returns `true` if this and the given layers object have at least one
     * layer in common.
     *
     * @param {Layers} layers - The layers to test.
     * @return {boolean } Whether this and the given layers object have at least one layer in common or not.
     */
    test(layers) {
      return (this.mask & layers.mask) !== 0;
    }
    /**
     * Returns `true` if the given layer is enabled.
     *
     * @param {number} layer - The layer to test.
     * @return {boolean } Whether the given layer is enabled or not.
     */
    isEnabled(layer2) {
      return (this.mask & (1 << layer2 | 0)) !== 0;
    }
  };
  var _object3DId = 0;
  var _v1$4 = /* @__PURE__ */ new Vector3();
  var _q1 = /* @__PURE__ */ new Quaternion();
  var _m1$1 = /* @__PURE__ */ new Matrix4();
  var _target = /* @__PURE__ */ new Vector3();
  var _position$3 = /* @__PURE__ */ new Vector3();
  var _scale$2 = /* @__PURE__ */ new Vector3();
  var _quaternion$2 = /* @__PURE__ */ new Quaternion();
  var _xAxis = /* @__PURE__ */ new Vector3(1, 0, 0);
  var _yAxis = /* @__PURE__ */ new Vector3(0, 1, 0);
  var _zAxis = /* @__PURE__ */ new Vector3(0, 0, 1);
  var _addedEvent = { type: "added" };
  var _removedEvent = { type: "removed" };
  var _childaddedEvent = { type: "childadded", child: null };
  var _childremovedEvent = { type: "childremoved", child: null };
  var Object3D = class _Object3D extends EventDispatcher {
    /**
     * Constructs a new 3D object.
     */
    constructor() {
      super();
      this.isObject3D = true;
      Object.defineProperty(this, "id", { value: _object3DId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "Object3D";
      this.parent = null;
      this.children = [];
      this.up = _Object3D.DEFAULT_UP.clone();
      const position = new Vector3();
      const rotation = new Euler();
      const quaternion = new Quaternion();
      const scale = new Vector3(1, 1, 1);
      function onRotationChange() {
        quaternion.setFromEuler(rotation, false);
      }
      function onQuaternionChange() {
        rotation.setFromQuaternion(quaternion, void 0, false);
      }
      rotation._onChange(onRotationChange);
      quaternion._onChange(onQuaternionChange);
      Object.defineProperties(this, {
        /**
         * Represents the object's local position.
         *
         * @name Object3D#position
         * @type {Vector3}
         * @default (0,0,0)
         */
        position: {
          configurable: true,
          enumerable: true,
          value: position
        },
        /**
         * Represents the object's local rotation as Euler angles, in radians.
         *
         * @name Object3D#rotation
         * @type {Euler}
         * @default (0,0,0)
         */
        rotation: {
          configurable: true,
          enumerable: true,
          value: rotation
        },
        /**
         * Represents the object's local rotation as Quaternions.
         *
         * @name Object3D#quaternion
         * @type {Quaternion}
         */
        quaternion: {
          configurable: true,
          enumerable: true,
          value: quaternion
        },
        /**
         * Represents the object's local scale.
         *
         * @name Object3D#scale
         * @type {Vector3}
         * @default (1,1,1)
         */
        scale: {
          configurable: true,
          enumerable: true,
          value: scale
        },
        /**
         * Represents the object's model-view matrix.
         *
         * @name Object3D#modelViewMatrix
         * @type {Matrix4}
         */
        modelViewMatrix: {
          value: new Matrix4()
        },
        /**
         * Represents the object's normal matrix.
         *
         * @name Object3D#normalMatrix
         * @type {Matrix3}
         */
        normalMatrix: {
          value: new Matrix3()
        }
      });
      this.matrix = new Matrix4();
      this.matrixWorld = new Matrix4();
      this.matrixAutoUpdate = _Object3D.DEFAULT_MATRIX_AUTO_UPDATE;
      this.matrixWorldAutoUpdate = _Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;
      this.matrixWorldNeedsUpdate = false;
      this.layers = new Layers();
      this.visible = true;
      this.castShadow = false;
      this.receiveShadow = false;
      this.frustumCulled = true;
      this.renderOrder = 0;
      this.animations = [];
      this.customDepthMaterial = void 0;
      this.customDistanceMaterial = void 0;
      this.userData = {};
    }
    /**
     * A callback that is executed immediately before a 3D object is rendered to a shadow map.
     *
     * @param {Renderer|WebGLRenderer} renderer - The renderer.
     * @param {Object3D} object - The 3D object.
     * @param {Camera} camera - The camera that is used to render the scene.
     * @param {Camera} shadowCamera - The shadow camera.
     * @param {BufferGeometry} geometry - The 3D object's geometry.
     * @param {Material} depthMaterial - The depth material.
     * @param {Object} group - The geometry group data.
     */
    onBeforeShadow() {
    }
    /**
     * A callback that is executed immediately after a 3D object is rendered to a shadow map.
     *
     * @param {Renderer|WebGLRenderer} renderer - The renderer.
     * @param {Object3D} object - The 3D object.
     * @param {Camera} camera - The camera that is used to render the scene.
     * @param {Camera} shadowCamera - The shadow camera.
     * @param {BufferGeometry} geometry - The 3D object's geometry.
     * @param {Material} depthMaterial - The depth material.
     * @param {Object} group - The geometry group data.
     */
    onAfterShadow() {
    }
    /**
     * A callback that is executed immediately before a 3D object is rendered.
     *
     * @param {Renderer|WebGLRenderer} renderer - The renderer.
     * @param {Object3D} object - The 3D object.
     * @param {Camera} camera - The camera that is used to render the scene.
     * @param {BufferGeometry} geometry - The 3D object's geometry.
     * @param {Material} material - The 3D object's material.
     * @param {Object} group - The geometry group data.
     */
    onBeforeRender() {
    }
    /**
     * A callback that is executed immediately after a 3D object is rendered.
     *
     * @param {Renderer|WebGLRenderer} renderer - The renderer.
     * @param {Object3D} object - The 3D object.
     * @param {Camera} camera - The camera that is used to render the scene.
     * @param {BufferGeometry} geometry - The 3D object's geometry.
     * @param {Material} material - The 3D object's material.
     * @param {Object} group - The geometry group data.
     */
    onAfterRender() {
    }
    /**
     * Applies the given transformation matrix to the object and updates the object's position,
     * rotation and scale.
     *
     * @param {Matrix4} matrix - The transformation matrix.
     */
    applyMatrix4(matrix) {
      if (this.matrixAutoUpdate) this.updateMatrix();
      this.matrix.premultiply(matrix);
      this.matrix.decompose(this.position, this.quaternion, this.scale);
    }
    /**
     * Applies a rotation represented by given the quaternion to the 3D object.
     *
     * @param {Quaternion} q - The quaternion.
     * @return {Object3D} A reference to this instance.
     */
    applyQuaternion(q) {
      this.quaternion.premultiply(q);
      return this;
    }
    /**
     * Sets the given rotation represented as an axis/angle couple to the 3D object.
     *
     * @param {Vector3} axis - The (normalized) axis vector.
     * @param {number} angle - The angle in radians.
     */
    setRotationFromAxisAngle(axis, angle) {
      this.quaternion.setFromAxisAngle(axis, angle);
    }
    /**
     * Sets the given rotation represented as Euler angles to the 3D object.
     *
     * @param {Euler} euler - The Euler angles.
     */
    setRotationFromEuler(euler) {
      this.quaternion.setFromEuler(euler, true);
    }
    /**
     * Sets the given rotation represented as rotation matrix to the 3D object.
     *
     * @param {Matrix4} m - Although a 4x4 matrix is expected, the upper 3x3 portion must be
     * a pure rotation matrix (i.e, unscaled).
     */
    setRotationFromMatrix(m) {
      this.quaternion.setFromRotationMatrix(m);
    }
    /**
     * Sets the given rotation represented as a Quaternion to the 3D object.
     *
     * @param {Quaternion} q - The Quaternion
     */
    setRotationFromQuaternion(q) {
      this.quaternion.copy(q);
    }
    /**
     * Rotates the 3D object along an axis in local space.
     *
     * @param {Vector3} axis - The (normalized) axis vector.
     * @param {number} angle - The angle in radians.
     * @return {Object3D} A reference to this instance.
     */
    rotateOnAxis(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.multiply(_q1);
      return this;
    }
    /**
     * Rotates the 3D object along an axis in world space.
     *
     * @param {Vector3} axis - The (normalized) axis vector.
     * @param {number} angle - The angle in radians.
     * @return {Object3D} A reference to this instance.
     */
    rotateOnWorldAxis(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.premultiply(_q1);
      return this;
    }
    /**
     * Rotates the 3D object around its X axis in local space.
     *
     * @param {number} angle - The angle in radians.
     * @return {Object3D} A reference to this instance.
     */
    rotateX(angle) {
      return this.rotateOnAxis(_xAxis, angle);
    }
    /**
     * Rotates the 3D object around its Y axis in local space.
     *
     * @param {number} angle - The angle in radians.
     * @return {Object3D} A reference to this instance.
     */
    rotateY(angle) {
      return this.rotateOnAxis(_yAxis, angle);
    }
    /**
     * Rotates the 3D object around its Z axis in local space.
     *
     * @param {number} angle - The angle in radians.
     * @return {Object3D} A reference to this instance.
     */
    rotateZ(angle) {
      return this.rotateOnAxis(_zAxis, angle);
    }
    /**
     * Translate the 3D object by a distance along the given axis in local space.
     *
     * @param {Vector3} axis - The (normalized) axis vector.
     * @param {number} distance - The distance in world units.
     * @return {Object3D} A reference to this instance.
     */
    translateOnAxis(axis, distance2) {
      _v1$4.copy(axis).applyQuaternion(this.quaternion);
      this.position.add(_v1$4.multiplyScalar(distance2));
      return this;
    }
    /**
     * Translate the 3D object by a distance along its X-axis in local space.
     *
     * @param {number} distance - The distance in world units.
     * @return {Object3D} A reference to this instance.
     */
    translateX(distance2) {
      return this.translateOnAxis(_xAxis, distance2);
    }
    /**
     * Translate the 3D object by a distance along its Y-axis in local space.
     *
     * @param {number} distance - The distance in world units.
     * @return {Object3D} A reference to this instance.
     */
    translateY(distance2) {
      return this.translateOnAxis(_yAxis, distance2);
    }
    /**
     * Translate the 3D object by a distance along its Z-axis in local space.
     *
     * @param {number} distance - The distance in world units.
     * @return {Object3D} A reference to this instance.
     */
    translateZ(distance2) {
      return this.translateOnAxis(_zAxis, distance2);
    }
    /**
     * Converts the given vector from this 3D object's local space to world space.
     *
     * @param {Vector3} vector - The vector to convert.
     * @return {Vector3} The converted vector.
     */
    localToWorld(vector) {
      this.updateWorldMatrix(true, false);
      return vector.applyMatrix4(this.matrixWorld);
    }
    /**
     * Converts the given vector from this 3D object's word space to local space.
     *
     * @param {Vector3} vector - The vector to convert.
     * @return {Vector3} The converted vector.
     */
    worldToLocal(vector) {
      this.updateWorldMatrix(true, false);
      return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
    }
    /**
     * Rotates the object to face a point in world space.
     *
     * This method does not support objects having non-uniformly-scaled parent(s).
     *
     * @param {number|Vector3} x - The x coordinate in world space. Alternatively, a vector representing a position in world space
     * @param {number} [y] - The y coordinate in world space.
     * @param {number} [z] - The z coordinate in world space.
     */
    lookAt(x, y, z) {
      if (x.isVector3) {
        _target.copy(x);
      } else {
        _target.set(x, y, z);
      }
      const parent = this.parent;
      this.updateWorldMatrix(true, false);
      _position$3.setFromMatrixPosition(this.matrixWorld);
      if (this.isCamera || this.isLight) {
        _m1$1.lookAt(_position$3, _target, this.up);
      } else {
        _m1$1.lookAt(_target, _position$3, this.up);
      }
      this.quaternion.setFromRotationMatrix(_m1$1);
      if (parent) {
        _m1$1.extractRotation(parent.matrixWorld);
        _q1.setFromRotationMatrix(_m1$1);
        this.quaternion.premultiply(_q1.invert());
      }
    }
    /**
     * Adds the given 3D object as a child to this 3D object. An arbitrary number of
     * objects may be added. Any current parent on an object passed in here will be
     * removed, since an object can have at most one parent.
     *
     * @fires Object3D#added
     * @fires Object3D#childadded
     * @param {Object3D} object - The 3D object to add.
     * @return {Object3D} A reference to this instance.
     */
    add(object) {
      if (arguments.length > 1) {
        for (let i = 0; i < arguments.length; i++) {
          this.add(arguments[i]);
        }
        return this;
      }
      if (object === this) {
        console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
        return this;
      }
      if (object && object.isObject3D) {
        object.removeFromParent();
        object.parent = this;
        this.children.push(object);
        object.dispatchEvent(_addedEvent);
        _childaddedEvent.child = object;
        this.dispatchEvent(_childaddedEvent);
        _childaddedEvent.child = null;
      } else {
        console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
      }
      return this;
    }
    /**
     * Removes the given 3D object as child from this 3D object.
     * An arbitrary number of objects may be removed.
     *
     * @fires Object3D#removed
     * @fires Object3D#childremoved
     * @param {Object3D} object - The 3D object to remove.
     * @return {Object3D} A reference to this instance.
     */
    remove(object) {
      if (arguments.length > 1) {
        for (let i = 0; i < arguments.length; i++) {
          this.remove(arguments[i]);
        }
        return this;
      }
      const index = this.children.indexOf(object);
      if (index !== -1) {
        object.parent = null;
        this.children.splice(index, 1);
        object.dispatchEvent(_removedEvent);
        _childremovedEvent.child = object;
        this.dispatchEvent(_childremovedEvent);
        _childremovedEvent.child = null;
      }
      return this;
    }
    /**
     * Removes this 3D object from its current parent.
     *
     * @fires Object3D#removed
     * @fires Object3D#childremoved
     * @return {Object3D} A reference to this instance.
     */
    removeFromParent() {
      const parent = this.parent;
      if (parent !== null) {
        parent.remove(this);
      }
      return this;
    }
    /**
     * Removes all child objects.
     *
     * @fires Object3D#removed
     * @fires Object3D#childremoved
     * @return {Object3D} A reference to this instance.
     */
    clear() {
      return this.remove(...this.children);
    }
    /**
     * Adds the given 3D object as a child of this 3D object, while maintaining the object's world
     * transform. This method does not support scene graphs having non-uniformly-scaled nodes(s).
     *
     * @fires Object3D#added
     * @fires Object3D#childadded
     * @param {Object3D} object - The 3D object to attach.
     * @return {Object3D} A reference to this instance.
     */
    attach(object) {
      this.updateWorldMatrix(true, false);
      _m1$1.copy(this.matrixWorld).invert();
      if (object.parent !== null) {
        object.parent.updateWorldMatrix(true, false);
        _m1$1.multiply(object.parent.matrixWorld);
      }
      object.applyMatrix4(_m1$1);
      object.removeFromParent();
      object.parent = this;
      this.children.push(object);
      object.updateWorldMatrix(false, true);
      object.dispatchEvent(_addedEvent);
      _childaddedEvent.child = object;
      this.dispatchEvent(_childaddedEvent);
      _childaddedEvent.child = null;
      return this;
    }
    /**
     * Searches through the 3D object and its children, starting with the 3D object
     * itself, and returns the first with a matching ID.
     *
     * @param {number} id - The id.
     * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.
     */
    getObjectById(id2) {
      return this.getObjectByProperty("id", id2);
    }
    /**
     * Searches through the 3D object and its children, starting with the 3D object
     * itself, and returns the first with a matching name.
     *
     * @param {string} name - The name.
     * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.
     */
    getObjectByName(name2) {
      return this.getObjectByProperty("name", name2);
    }
    /**
     * Searches through the 3D object and its children, starting with the 3D object
     * itself, and returns the first with a matching property value.
     *
     * @param {string} name - The name of the property.
     * @param {any} value - The value.
     * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.
     */
    getObjectByProperty(name2, value) {
      if (this[name2] === value) return this;
      for (let i = 0, l = this.children.length; i < l; i++) {
        const child = this.children[i];
        const object = child.getObjectByProperty(name2, value);
        if (object !== void 0) {
          return object;
        }
      }
      return void 0;
    }
    /**
     * Searches through the 3D object and its children, starting with the 3D object
     * itself, and returns all 3D objects with a matching property value.
     *
     * @param {string} name - The name of the property.
     * @param {any} value - The value.
     * @param {Array<Object3D>} result - The method stores the result in this array.
     * @return {Array<Object3D>} The found 3D objects.
     */
    getObjectsByProperty(name2, value, result = []) {
      if (this[name2] === value) result.push(this);
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].getObjectsByProperty(name2, value, result);
      }
      return result;
    }
    /**
     * Returns a vector representing the position of the 3D object in world space.
     *
     * @param {Vector3} target - The target vector the result is stored to.
     * @return {Vector3} The 3D object's position in world space.
     */
    getWorldPosition(target) {
      this.updateWorldMatrix(true, false);
      return target.setFromMatrixPosition(this.matrixWorld);
    }
    /**
     * Returns a Quaternion representing the position of the 3D object in world space.
     *
     * @param {Quaternion} target - The target Quaternion the result is stored to.
     * @return {Quaternion} The 3D object's rotation in world space.
     */
    getWorldQuaternion(target) {
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position$3, target, _scale$2);
      return target;
    }
    /**
     * Returns a vector representing the scale of the 3D object in world space.
     *
     * @param {Vector3} target - The target vector the result is stored to.
     * @return {Vector3} The 3D object's scale in world space.
     */
    getWorldScale(target) {
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position$3, _quaternion$2, target);
      return target;
    }
    /**
     * Returns a vector representing the ("look") direction of the 3D object in world space.
     *
     * @param {Vector3} target - The target vector the result is stored to.
     * @return {Vector3} The 3D object's direction in world space.
     */
    getWorldDirection(target) {
      this.updateWorldMatrix(true, false);
      const e = this.matrixWorld.elements;
      return target.set(e[8], e[9], e[10]).normalize();
    }
    /**
     * Abstract method to get intersections between a casted ray and this
     * 3D object. Renderable 3D objects such as {@link Mesh}, {@link Line} or {@link Points}
     * implement this method in order to use raycasting.
     *
     * @abstract
     * @param {Raycaster} raycaster - The raycaster.
     * @param {Array<Object>} intersects - An array holding the result of the method.
     */
    raycast() {
    }
    /**
     * Executes the callback on this 3D object and all descendants.
     *
     * Note: Modifying the scene graph inside the callback is discouraged.
     *
     * @param {Function} callback - A callback function that allows to process the current 3D object.
     */
    traverse(callback) {
      callback(this);
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].traverse(callback);
      }
    }
    /**
     * Like {@link Object3D#traverse}, but the callback will only be executed for visible 3D objects.
     * Descendants of invisible 3D objects are not traversed.
     *
     * Note: Modifying the scene graph inside the callback is discouraged.
     *
     * @param {Function} callback - A callback function that allows to process the current 3D object.
     */
    traverseVisible(callback) {
      if (this.visible === false) return;
      callback(this);
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].traverseVisible(callback);
      }
    }
    /**
     * Like {@link Object3D#traverse}, but the callback will only be executed for all ancestors.
     *
     * Note: Modifying the scene graph inside the callback is discouraged.
     *
     * @param {Function} callback - A callback function that allows to process the current 3D object.
     */
    traverseAncestors(callback) {
      const parent = this.parent;
      if (parent !== null) {
        callback(parent);
        parent.traverseAncestors(callback);
      }
    }
    /**
     * Updates the transformation matrix in local space by computing it from the current
     * position, rotation and scale values.
     */
    updateMatrix() {
      this.matrix.compose(this.position, this.quaternion, this.scale);
      this.matrixWorldNeedsUpdate = true;
    }
    /**
     * Updates the transformation matrix in world space of this 3D objects and its descendants.
     *
     * To ensure correct results, this method also recomputes the 3D object's transformation matrix in
     * local space. The computation of the local and world matrix can be controlled with the
     * {@link Object3D#matrixAutoUpdate} and {@link Object3D#matrixWorldAutoUpdate} flags which are both
     * `true` by default.  Set these flags to `false` if you need more control over the update matrix process.
     *
     * @param {boolean} [force=false] - When set to `true`, a recomputation of world matrices is forced even
     * when {@link Object3D#matrixWorldAutoUpdate} is set to `false`.
     */
    updateMatrixWorld(force) {
      if (this.matrixAutoUpdate) this.updateMatrix();
      if (this.matrixWorldNeedsUpdate || force) {
        if (this.matrixWorldAutoUpdate === true) {
          if (this.parent === null) {
            this.matrixWorld.copy(this.matrix);
          } else {
            this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
          }
        }
        this.matrixWorldNeedsUpdate = false;
        force = true;
      }
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        const child = children[i];
        child.updateMatrixWorld(force);
      }
    }
    /**
     * An alternative version of {@link Object3D#updateMatrixWorld} with more control over the
     * update of ancestor and descendant nodes.
     *
     * @param {boolean} [updateParents=false] Whether ancestor nodes should be updated or not.
     * @param {boolean} [updateChildren=false] Whether descendant nodes should be updated or not.
     */
    updateWorldMatrix(updateParents, updateChildren) {
      const parent = this.parent;
      if (updateParents === true && parent !== null) {
        parent.updateWorldMatrix(true, false);
      }
      if (this.matrixAutoUpdate) this.updateMatrix();
      if (this.matrixWorldAutoUpdate === true) {
        if (this.parent === null) {
          this.matrixWorld.copy(this.matrix);
        } else {
          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        }
      }
      if (updateChildren === true) {
        const children = this.children;
        for (let i = 0, l = children.length; i < l; i++) {
          const child = children[i];
          child.updateWorldMatrix(false, true);
        }
      }
    }
    /**
     * Serializes the 3D object into JSON.
     *
     * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
     * @return {Object} A JSON object representing the serialized 3D object.
     * @see {@link ObjectLoader#parse}
     */
    toJSON(meta2) {
      const isRootObject = meta2 === void 0 || typeof meta2 === "string";
      const output2 = {};
      if (isRootObject) {
        meta2 = {
          geometries: {},
          materials: {},
          textures: {},
          images: {},
          shapes: {},
          skeletons: {},
          animations: {},
          nodes: {}
        };
        output2.metadata = {
          version: 4.7,
          type: "Object",
          generator: "Object3D.toJSON"
        };
      }
      const object = {};
      object.uuid = this.uuid;
      object.type = this.type;
      if (this.name !== "") object.name = this.name;
      if (this.castShadow === true) object.castShadow = true;
      if (this.receiveShadow === true) object.receiveShadow = true;
      if (this.visible === false) object.visible = false;
      if (this.frustumCulled === false) object.frustumCulled = false;
      if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;
      if (Object.keys(this.userData).length > 0) object.userData = this.userData;
      object.layers = this.layers.mask;
      object.matrix = this.matrix.toArray();
      object.up = this.up.toArray();
      if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;
      if (this.isInstancedMesh) {
        object.type = "InstancedMesh";
        object.count = this.count;
        object.instanceMatrix = this.instanceMatrix.toJSON();
        if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();
      }
      if (this.isBatchedMesh) {
        object.type = "BatchedMesh";
        object.perObjectFrustumCulled = this.perObjectFrustumCulled;
        object.sortObjects = this.sortObjects;
        object.drawRanges = this._drawRanges;
        object.reservedRanges = this._reservedRanges;
        object.geometryInfo = this._geometryInfo.map((info) => ({
          ...info,
          boundingBox: info.boundingBox ? info.boundingBox.toJSON() : void 0,
          boundingSphere: info.boundingSphere ? info.boundingSphere.toJSON() : void 0
        }));
        object.instanceInfo = this._instanceInfo.map((info) => ({ ...info }));
        object.availableInstanceIds = this._availableInstanceIds.slice();
        object.availableGeometryIds = this._availableGeometryIds.slice();
        object.nextIndexStart = this._nextIndexStart;
        object.nextVertexStart = this._nextVertexStart;
        object.geometryCount = this._geometryCount;
        object.maxInstanceCount = this._maxInstanceCount;
        object.maxVertexCount = this._maxVertexCount;
        object.maxIndexCount = this._maxIndexCount;
        object.geometryInitialized = this._geometryInitialized;
        object.matricesTexture = this._matricesTexture.toJSON(meta2);
        object.indirectTexture = this._indirectTexture.toJSON(meta2);
        if (this._colorsTexture !== null) {
          object.colorsTexture = this._colorsTexture.toJSON(meta2);
        }
        if (this.boundingSphere !== null) {
          object.boundingSphere = this.boundingSphere.toJSON();
        }
        if (this.boundingBox !== null) {
          object.boundingBox = this.boundingBox.toJSON();
        }
      }
      function serialize(library, element2) {
        if (library[element2.uuid] === void 0) {
          library[element2.uuid] = element2.toJSON(meta2);
        }
        return element2.uuid;
      }
      if (this.isScene) {
        if (this.background) {
          if (this.background.isColor) {
            object.background = this.background.toJSON();
          } else if (this.background.isTexture) {
            object.background = this.background.toJSON(meta2).uuid;
          }
        }
        if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {
          object.environment = this.environment.toJSON(meta2).uuid;
        }
      } else if (this.isMesh || this.isLine || this.isPoints) {
        object.geometry = serialize(meta2.geometries, this.geometry);
        const parameters = this.geometry.parameters;
        if (parameters !== void 0 && parameters.shapes !== void 0) {
          const shapes = parameters.shapes;
          if (Array.isArray(shapes)) {
            for (let i = 0, l = shapes.length; i < l; i++) {
              const shape = shapes[i];
              serialize(meta2.shapes, shape);
            }
          } else {
            serialize(meta2.shapes, shapes);
          }
        }
      }
      if (this.isSkinnedMesh) {
        object.bindMode = this.bindMode;
        object.bindMatrix = this.bindMatrix.toArray();
        if (this.skeleton !== void 0) {
          serialize(meta2.skeletons, this.skeleton);
          object.skeleton = this.skeleton.uuid;
        }
      }
      if (this.material !== void 0) {
        if (Array.isArray(this.material)) {
          const uuids = [];
          for (let i = 0, l = this.material.length; i < l; i++) {
            uuids.push(serialize(meta2.materials, this.material[i]));
          }
          object.material = uuids;
        } else {
          object.material = serialize(meta2.materials, this.material);
        }
      }
      if (this.children.length > 0) {
        object.children = [];
        for (let i = 0; i < this.children.length; i++) {
          object.children.push(this.children[i].toJSON(meta2).object);
        }
      }
      if (this.animations.length > 0) {
        object.animations = [];
        for (let i = 0; i < this.animations.length; i++) {
          const animation = this.animations[i];
          object.animations.push(serialize(meta2.animations, animation));
        }
      }
      if (isRootObject) {
        const geometries = extractFromCache(meta2.geometries);
        const materials = extractFromCache(meta2.materials);
        const textures = extractFromCache(meta2.textures);
        const images = extractFromCache(meta2.images);
        const shapes = extractFromCache(meta2.shapes);
        const skeletons = extractFromCache(meta2.skeletons);
        const animations = extractFromCache(meta2.animations);
        const nodes = extractFromCache(meta2.nodes);
        if (geometries.length > 0) output2.geometries = geometries;
        if (materials.length > 0) output2.materials = materials;
        if (textures.length > 0) output2.textures = textures;
        if (images.length > 0) output2.images = images;
        if (shapes.length > 0) output2.shapes = shapes;
        if (skeletons.length > 0) output2.skeletons = skeletons;
        if (animations.length > 0) output2.animations = animations;
        if (nodes.length > 0) output2.nodes = nodes;
      }
      output2.object = object;
      return output2;
      function extractFromCache(cache3) {
        const values = [];
        for (const key in cache3) {
          const data = cache3[key];
          delete data.metadata;
          values.push(data);
        }
        return values;
      }
    }
    /**
     * Returns a new 3D object with copied values from this instance.
     *
     * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are also cloned.
     * @return {Object3D} A clone of this instance.
     */
    clone(recursive) {
      return new this.constructor().copy(this, recursive);
    }
    /**
     * Copies the values of the given 3D object to this instance.
     *
     * @param {Object3D} source - The 3D object to copy.
     * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are cloned.
     * @return {Object3D} A reference to this instance.
     */
    copy(source, recursive = true) {
      this.name = source.name;
      this.up.copy(source.up);
      this.position.copy(source.position);
      this.rotation.order = source.rotation.order;
      this.quaternion.copy(source.quaternion);
      this.scale.copy(source.scale);
      this.matrix.copy(source.matrix);
      this.matrixWorld.copy(source.matrixWorld);
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
      this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
      this.layers.mask = source.layers.mask;
      this.visible = source.visible;
      this.castShadow = source.castShadow;
      this.receiveShadow = source.receiveShadow;
      this.frustumCulled = source.frustumCulled;
      this.renderOrder = source.renderOrder;
      this.animations = source.animations.slice();
      this.userData = JSON.parse(JSON.stringify(source.userData));
      if (recursive === true) {
        for (let i = 0; i < source.children.length; i++) {
          const child = source.children[i];
          this.add(child.clone());
        }
      }
      return this;
    }
  };
  Object3D.DEFAULT_UP = /* @__PURE__ */ new Vector3(0, 1, 0);
  Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;
  Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
  var _v0$1 = /* @__PURE__ */ new Vector3();
  var _v1$3 = /* @__PURE__ */ new Vector3();
  var _v2$2 = /* @__PURE__ */ new Vector3();
  var _v3$2 = /* @__PURE__ */ new Vector3();
  var _vab = /* @__PURE__ */ new Vector3();
  var _vac = /* @__PURE__ */ new Vector3();
  var _vbc = /* @__PURE__ */ new Vector3();
  var _vap = /* @__PURE__ */ new Vector3();
  var _vbp = /* @__PURE__ */ new Vector3();
  var _vcp = /* @__PURE__ */ new Vector3();
  var _v40 = /* @__PURE__ */ new Vector4();
  var _v41 = /* @__PURE__ */ new Vector4();
  var _v42 = /* @__PURE__ */ new Vector4();
  var Triangle = class _Triangle {
    /**
     * Constructs a new triangle.
     *
     * @param {Vector3} [a=(0,0,0)] - The first corner of the triangle.
     * @param {Vector3} [b=(0,0,0)] - The second corner of the triangle.
     * @param {Vector3} [c=(0,0,0)] - The third corner of the triangle.
     */
    constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {
      this.a = a;
      this.b = b;
      this.c = c;
    }
    /**
     * Computes the normal vector of a triangle.
     *
     * @param {Vector3} a - The first corner of the triangle.
     * @param {Vector3} b - The second corner of the triangle.
     * @param {Vector3} c - The third corner of the triangle.
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {Vector3} The triangle's normal.
     */
    static getNormal(a, b, c, target) {
      target.subVectors(c, b);
      _v0$1.subVectors(a, b);
      target.cross(_v0$1);
      const targetLengthSq = target.lengthSq();
      if (targetLengthSq > 0) {
        return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
      }
      return target.set(0, 0, 0);
    }
    /**
     * Computes a barycentric coordinates from the given vector.
     * Returns `null` if the triangle is degenerate.
     *
     * @param {Vector3} point - A point in 3D space.
     * @param {Vector3} a - The first corner of the triangle.
     * @param {Vector3} b - The second corner of the triangle.
     * @param {Vector3} c - The third corner of the triangle.
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {?Vector3} The barycentric coordinates for the given point
     */
    static getBarycoord(point, a, b, c, target) {
      _v0$1.subVectors(c, a);
      _v1$3.subVectors(b, a);
      _v2$2.subVectors(point, a);
      const dot00 = _v0$1.dot(_v0$1);
      const dot01 = _v0$1.dot(_v1$3);
      const dot02 = _v0$1.dot(_v2$2);
      const dot11 = _v1$3.dot(_v1$3);
      const dot12 = _v1$3.dot(_v2$2);
      const denom = dot00 * dot11 - dot01 * dot01;
      if (denom === 0) {
        target.set(0, 0, 0);
        return null;
      }
      const invDenom = 1 / denom;
      const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
      const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
      return target.set(1 - u - v, v, u);
    }
    /**
     * Returns `true` if the given point, when projected onto the plane of the
     * triangle, lies within the triangle.
     *
     * @param {Vector3} point - The point in 3D space to test.
     * @param {Vector3} a - The first corner of the triangle.
     * @param {Vector3} b - The second corner of the triangle.
     * @param {Vector3} c - The third corner of the triangle.
     * @return {boolean} Whether the given point, when projected onto the plane of the
     * triangle, lies within the triangle or not.
     */
    static containsPoint(point, a, b, c) {
      if (this.getBarycoord(point, a, b, c, _v3$2) === null) {
        return false;
      }
      return _v3$2.x >= 0 && _v3$2.y >= 0 && _v3$2.x + _v3$2.y <= 1;
    }
    /**
     * Computes the value barycentrically interpolated for the given point on the
     * triangle. Returns `null` if the triangle is degenerate.
     *
     * @param {Vector3} point - Position of interpolated point.
     * @param {Vector3} p1 - The first corner of the triangle.
     * @param {Vector3} p2 - The second corner of the triangle.
     * @param {Vector3} p3 - The third corner of the triangle.
     * @param {Vector3} v1 - Value to interpolate of first vertex.
     * @param {Vector3} v2 - Value to interpolate of second vertex.
     * @param {Vector3} v3 - Value to interpolate of third vertex.
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {?Vector3} The interpolated value.
     */
    static getInterpolation(point, p1, p2, p3, v1, v2, v3, target) {
      if (this.getBarycoord(point, p1, p2, p3, _v3$2) === null) {
        target.x = 0;
        target.y = 0;
        if ("z" in target) target.z = 0;
        if ("w" in target) target.w = 0;
        return null;
      }
      target.setScalar(0);
      target.addScaledVector(v1, _v3$2.x);
      target.addScaledVector(v2, _v3$2.y);
      target.addScaledVector(v3, _v3$2.z);
      return target;
    }
    /**
     * Computes the value barycentrically interpolated for the given attribute and indices.
     *
     * @param {BufferAttribute} attr - The attribute to interpolate.
     * @param {number} i1 - Index of first vertex.
     * @param {number} i2 - Index of second vertex.
     * @param {number} i3 - Index of third vertex.
     * @param {Vector3} barycoord - The barycoordinate value to use to interpolate.
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {Vector3} The interpolated attribute value.
     */
    static getInterpolatedAttribute(attr, i1, i2, i3, barycoord, target) {
      _v40.setScalar(0);
      _v41.setScalar(0);
      _v42.setScalar(0);
      _v40.fromBufferAttribute(attr, i1);
      _v41.fromBufferAttribute(attr, i2);
      _v42.fromBufferAttribute(attr, i3);
      target.setScalar(0);
      target.addScaledVector(_v40, barycoord.x);
      target.addScaledVector(_v41, barycoord.y);
      target.addScaledVector(_v42, barycoord.z);
      return target;
    }
    /**
     * Returns `true` if the triangle is oriented towards the given direction.
     *
     * @param {Vector3} a - The first corner of the triangle.
     * @param {Vector3} b - The second corner of the triangle.
     * @param {Vector3} c - The third corner of the triangle.
     * @param {Vector3} direction - The (normalized) direction vector.
     * @return {boolean} Whether the triangle is oriented towards the given direction or not.
     */
    static isFrontFacing(a, b, c, direction) {
      _v0$1.subVectors(c, b);
      _v1$3.subVectors(a, b);
      return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
    }
    /**
     * Sets the triangle's vertices by copying the given values.
     *
     * @param {Vector3} a - The first corner of the triangle.
     * @param {Vector3} b - The second corner of the triangle.
     * @param {Vector3} c - The third corner of the triangle.
     * @return {Triangle} A reference to this triangle.
     */
    set(a, b, c) {
      this.a.copy(a);
      this.b.copy(b);
      this.c.copy(c);
      return this;
    }
    /**
     * Sets the triangle's vertices by copying the given array values.
     *
     * @param {Array<Vector3>} points - An array with 3D points.
     * @param {number} i0 - The array index representing the first corner of the triangle.
     * @param {number} i1 - The array index representing the second corner of the triangle.
     * @param {number} i2 - The array index representing the third corner of the triangle.
     * @return {Triangle} A reference to this triangle.
     */
    setFromPointsAndIndices(points, i0, i1, i2) {
      this.a.copy(points[i0]);
      this.b.copy(points[i1]);
      this.c.copy(points[i2]);
      return this;
    }
    /**
     * Sets the triangle's vertices by copying the given attribute values.
     *
     * @param {BufferAttribute} attribute - A buffer attribute with 3D points data.
     * @param {number} i0 - The attribute index representing the first corner of the triangle.
     * @param {number} i1 - The attribute index representing the second corner of the triangle.
     * @param {number} i2 - The attribute index representing the third corner of the triangle.
     * @return {Triangle} A reference to this triangle.
     */
    setFromAttributeAndIndices(attribute2, i0, i1, i2) {
      this.a.fromBufferAttribute(attribute2, i0);
      this.b.fromBufferAttribute(attribute2, i1);
      this.c.fromBufferAttribute(attribute2, i2);
      return this;
    }
    /**
     * Returns a new triangle with copied values from this instance.
     *
     * @return {Triangle} A clone of this instance.
     */
    clone() {
      return new this.constructor().copy(this);
    }
    /**
     * Copies the values of the given triangle to this instance.
     *
     * @param {Triangle} triangle - The triangle to copy.
     * @return {Triangle} A reference to this triangle.
     */
    copy(triangle) {
      this.a.copy(triangle.a);
      this.b.copy(triangle.b);
      this.c.copy(triangle.c);
      return this;
    }
    /**
     * Computes the area of the triangle.
     *
     * @return {number} The triangle's area.
     */
    getArea() {
      _v0$1.subVectors(this.c, this.b);
      _v1$3.subVectors(this.a, this.b);
      return _v0$1.cross(_v1$3).length() * 0.5;
    }
    /**
     * Computes the midpoint of the triangle.
     *
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {Vector3} The triangle's midpoint.
     */
    getMidpoint(target) {
      return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }
    /**
     * Computes the normal of the triangle.
     *
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {Vector3} The triangle's normal.
     */
    getNormal(target) {
      return _Triangle.getNormal(this.a, this.b, this.c, target);
    }
    /**
     * Computes a plane the triangle lies within.
     *
     * @param {Plane} target - The target vector that is used to store the method's result.
     * @return {Plane} The plane the triangle lies within.
     */
    getPlane(target) {
      return target.setFromCoplanarPoints(this.a, this.b, this.c);
    }
    /**
     * Computes a barycentric coordinates from the given vector.
     * Returns `null` if the triangle is degenerate.
     *
     * @param {Vector3} point - A point in 3D space.
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {?Vector3} The barycentric coordinates for the given point
     */
    getBarycoord(point, target) {
      return _Triangle.getBarycoord(point, this.a, this.b, this.c, target);
    }
    /**
     * Computes the value barycentrically interpolated for the given point on the
     * triangle. Returns `null` if the triangle is degenerate.
     *
     * @param {Vector3} point - Position of interpolated point.
     * @param {Vector3} v1 - Value to interpolate of first vertex.
     * @param {Vector3} v2 - Value to interpolate of second vertex.
     * @param {Vector3} v3 - Value to interpolate of third vertex.
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {?Vector3} The interpolated value.
     */
    getInterpolation(point, v1, v2, v3, target) {
      return _Triangle.getInterpolation(point, this.a, this.b, this.c, v1, v2, v3, target);
    }
    /**
     * Returns `true` if the given point, when projected onto the plane of the
     * triangle, lies within the triangle.
     *
     * @param {Vector3} point - The point in 3D space to test.
     * @return {boolean} Whether the given point, when projected onto the plane of the
     * triangle, lies within the triangle or not.
     */
    containsPoint(point) {
      return _Triangle.containsPoint(point, this.a, this.b, this.c);
    }
    /**
     * Returns `true` if the triangle is oriented towards the given direction.
     *
     * @param {Vector3} direction - The (normalized) direction vector.
     * @return {boolean} Whether the triangle is oriented towards the given direction or not.
     */
    isFrontFacing(direction) {
      return _Triangle.isFrontFacing(this.a, this.b, this.c, direction);
    }
    /**
     * Returns `true` if this triangle intersects with the given box.
     *
     * @param {Box3} box - The box to intersect.
     * @return {boolean} Whether this triangle intersects with the given box or not.
     */
    intersectsBox(box2) {
      return box2.intersectsTriangle(this);
    }
    /**
     * Returns the closest point on the triangle to the given point.
     *
     * @param {Vector3} p - The point to compute the closest point for.
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {Vector3} The closest point on the triangle.
     */
    closestPointToPoint(p, target) {
      const a = this.a, b = this.b, c = this.c;
      let v, w;
      _vab.subVectors(b, a);
      _vac.subVectors(c, a);
      _vap.subVectors(p, a);
      const d1 = _vab.dot(_vap);
      const d2 = _vac.dot(_vap);
      if (d1 <= 0 && d2 <= 0) {
        return target.copy(a);
      }
      _vbp.subVectors(p, b);
      const d3 = _vab.dot(_vbp);
      const d4 = _vac.dot(_vbp);
      if (d3 >= 0 && d4 <= d3) {
        return target.copy(b);
      }
      const vc = d1 * d4 - d3 * d2;
      if (vc <= 0 && d1 >= 0 && d3 <= 0) {
        v = d1 / (d1 - d3);
        return target.copy(a).addScaledVector(_vab, v);
      }
      _vcp.subVectors(p, c);
      const d5 = _vab.dot(_vcp);
      const d6 = _vac.dot(_vcp);
      if (d6 >= 0 && d5 <= d6) {
        return target.copy(c);
      }
      const vb = d5 * d2 - d1 * d6;
      if (vb <= 0 && d2 >= 0 && d6 <= 0) {
        w = d2 / (d2 - d6);
        return target.copy(a).addScaledVector(_vac, w);
      }
      const va = d3 * d6 - d5 * d4;
      if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
        _vbc.subVectors(c, b);
        w = (d4 - d3) / (d4 - d3 + (d5 - d6));
        return target.copy(b).addScaledVector(_vbc, w);
      }
      const denom = 1 / (va + vb + vc);
      v = vb * denom;
      w = vc * denom;
      return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
    }
    /**
     * Returns `true` if this triangle is equal with the given one.
     *
     * @param {Triangle} triangle - The triangle to test for equality.
     * @return {boolean} Whether this triangle is equal with the given one.
     */
    equals(triangle) {
      return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
    }
  };
  var _colorKeywords = {
    "aliceblue": 15792383,
    "antiquewhite": 16444375,
    "aqua": 65535,
    "aquamarine": 8388564,
    "azure": 15794175,
    "beige": 16119260,
    "bisque": 16770244,
    "black": 0,
    "blanchedalmond": 16772045,
    "blue": 255,
    "blueviolet": 9055202,
    "brown": 10824234,
    "burlywood": 14596231,
    "cadetblue": 6266528,
    "chartreuse": 8388352,
    "chocolate": 13789470,
    "coral": 16744272,
    "cornflowerblue": 6591981,
    "cornsilk": 16775388,
    "crimson": 14423100,
    "cyan": 65535,
    "darkblue": 139,
    "darkcyan": 35723,
    "darkgoldenrod": 12092939,
    "darkgray": 11119017,
    "darkgreen": 25600,
    "darkgrey": 11119017,
    "darkkhaki": 12433259,
    "darkmagenta": 9109643,
    "darkolivegreen": 5597999,
    "darkorange": 16747520,
    "darkorchid": 10040012,
    "darkred": 9109504,
    "darksalmon": 15308410,
    "darkseagreen": 9419919,
    "darkslateblue": 4734347,
    "darkslategray": 3100495,
    "darkslategrey": 3100495,
    "darkturquoise": 52945,
    "darkviolet": 9699539,
    "deeppink": 16716947,
    "deepskyblue": 49151,
    "dimgray": 6908265,
    "dimgrey": 6908265,
    "dodgerblue": 2003199,
    "firebrick": 11674146,
    "floralwhite": 16775920,
    "forestgreen": 2263842,
    "fuchsia": 16711935,
    "gainsboro": 14474460,
    "ghostwhite": 16316671,
    "gold": 16766720,
    "goldenrod": 14329120,
    "gray": 8421504,
    "green": 32768,
    "greenyellow": 11403055,
    "grey": 8421504,
    "honeydew": 15794160,
    "hotpink": 16738740,
    "indianred": 13458524,
    "indigo": 4915330,
    "ivory": 16777200,
    "khaki": 15787660,
    "lavender": 15132410,
    "lavenderblush": 16773365,
    "lawngreen": 8190976,
    "lemonchiffon": 16775885,
    "lightblue": 11393254,
    "lightcoral": 15761536,
    "lightcyan": 14745599,
    "lightgoldenrodyellow": 16448210,
    "lightgray": 13882323,
    "lightgreen": 9498256,
    "lightgrey": 13882323,
    "lightpink": 16758465,
    "lightsalmon": 16752762,
    "lightseagreen": 2142890,
    "lightskyblue": 8900346,
    "lightslategray": 7833753,
    "lightslategrey": 7833753,
    "lightsteelblue": 11584734,
    "lightyellow": 16777184,
    "lime": 65280,
    "limegreen": 3329330,
    "linen": 16445670,
    "magenta": 16711935,
    "maroon": 8388608,
    "mediumaquamarine": 6737322,
    "mediumblue": 205,
    "mediumorchid": 12211667,
    "mediumpurple": 9662683,
    "mediumseagreen": 3978097,
    "mediumslateblue": 8087790,
    "mediumspringgreen": 64154,
    "mediumturquoise": 4772300,
    "mediumvioletred": 13047173,
    "midnightblue": 1644912,
    "mintcream": 16121850,
    "mistyrose": 16770273,
    "moccasin": 16770229,
    "navajowhite": 16768685,
    "navy": 128,
    "oldlace": 16643558,
    "olive": 8421376,
    "olivedrab": 7048739,
    "orange": 16753920,
    "orangered": 16729344,
    "orchid": 14315734,
    "palegoldenrod": 15657130,
    "palegreen": 10025880,
    "paleturquoise": 11529966,
    "palevioletred": 14381203,
    "papayawhip": 16773077,
    "peachpuff": 16767673,
    "peru": 13468991,
    "pink": 16761035,
    "plum": 14524637,
    "powderblue": 11591910,
    "purple": 8388736,
    "rebeccapurple": 6697881,
    "red": 16711680,
    "rosybrown": 12357519,
    "royalblue": 4286945,
    "saddlebrown": 9127187,
    "salmon": 16416882,
    "sandybrown": 16032864,
    "seagreen": 3050327,
    "seashell": 16774638,
    "sienna": 10506797,
    "silver": 12632256,
    "skyblue": 8900331,
    "slateblue": 6970061,
    "slategray": 7372944,
    "slategrey": 7372944,
    "snow": 16775930,
    "springgreen": 65407,
    "steelblue": 4620980,
    "tan": 13808780,
    "teal": 32896,
    "thistle": 14204888,
    "tomato": 16737095,
    "turquoise": 4251856,
    "violet": 15631086,
    "wheat": 16113331,
    "white": 16777215,
    "whitesmoke": 16119285,
    "yellow": 16776960,
    "yellowgreen": 10145074
  };
  var _hslA = { h: 0, s: 0, l: 0 };
  var _hslB = { h: 0, s: 0, l: 0 };
  function hue2rgb(p, q, t2) {
    if (t2 < 0) t2 += 1;
    if (t2 > 1) t2 -= 1;
    if (t2 < 1 / 6) return p + (q - p) * 6 * t2;
    if (t2 < 1 / 2) return q;
    if (t2 < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t2);
    return p;
  }
  var Color = class {
    /**
     * Constructs a new color.
     *
     * Note that standard method of specifying color in three.js is with a hexadecimal triplet,
     * and that method is used throughout the rest of the documentation.
     *
     * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are
     * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.
     * @param {number} [g] - The green component.
     * @param {number} [b] - The blue component.
     */
    constructor(r, g, b) {
      this.isColor = true;
      this.r = 1;
      this.g = 1;
      this.b = 1;
      return this.set(r, g, b);
    }
    /**
     * Sets the colors's components from the given values.
     *
     * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are
     * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.
     * @param {number} [g] - The green component.
     * @param {number} [b] - The blue component.
     * @return {Color} A reference to this color.
     */
    set(r, g, b) {
      if (g === void 0 && b === void 0) {
        const value = r;
        if (value && value.isColor) {
          this.copy(value);
        } else if (typeof value === "number") {
          this.setHex(value);
        } else if (typeof value === "string") {
          this.setStyle(value);
        }
      } else {
        this.setRGB(r, g, b);
      }
      return this;
    }
    /**
     * Sets the colors's components to the given scalar value.
     *
     * @param {number} scalar - The scalar value.
     * @return {Color} A reference to this color.
     */
    setScalar(scalar) {
      this.r = scalar;
      this.g = scalar;
      this.b = scalar;
      return this;
    }
    /**
     * Sets this color from a hexadecimal value.
     *
     * @param {number} hex - The hexadecimal value.
     * @param {string} [colorSpace=SRGBColorSpace] - The color space.
     * @return {Color} A reference to this color.
     */
    setHex(hex, colorSpace = SRGBColorSpace) {
      hex = Math.floor(hex);
      this.r = (hex >> 16 & 255) / 255;
      this.g = (hex >> 8 & 255) / 255;
      this.b = (hex & 255) / 255;
      ColorManagement.colorSpaceToWorking(this, colorSpace);
      return this;
    }
    /**
     * Sets this color from RGB values.
     *
     * @param {number} r - Red channel value between `0.0` and `1.0`.
     * @param {number} g - Green channel value between `0.0` and `1.0`.
     * @param {number} b - Blue channel value between `0.0` and `1.0`.
     * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
     * @return {Color} A reference to this color.
     */
    setRGB(r, g, b, colorSpace = ColorManagement.workingColorSpace) {
      this.r = r;
      this.g = g;
      this.b = b;
      ColorManagement.colorSpaceToWorking(this, colorSpace);
      return this;
    }
    /**
     * Sets this color from RGB values.
     *
     * @param {number} h - Hue value between `0.0` and `1.0`.
     * @param {number} s - Saturation value between `0.0` and `1.0`.
     * @param {number} l - Lightness value between `0.0` and `1.0`.
     * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
     * @return {Color} A reference to this color.
     */
    setHSL(h, s, l, colorSpace = ColorManagement.workingColorSpace) {
      h = euclideanModulo(h, 1);
      s = clamp(s, 0, 1);
      l = clamp(l, 0, 1);
      if (s === 0) {
        this.r = this.g = this.b = l;
      } else {
        const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
        const q = 2 * l - p;
        this.r = hue2rgb(q, p, h + 1 / 3);
        this.g = hue2rgb(q, p, h);
        this.b = hue2rgb(q, p, h - 1 / 3);
      }
      ColorManagement.colorSpaceToWorking(this, colorSpace);
      return this;
    }
    /**
     * Sets this color from a CSS-style string. For example, `rgb(250, 0,0)`,
     * `rgb(100%, 0%, 0%)`, `hsl(0, 100%, 50%)`, `#ff0000`, `#f00`, or `red` ( or
     * any [X11 color name]{@link https://en.wikipedia.org/wiki/X11_color_names#Color_name_chart} -
     * all 140 color names are supported).
     *
     * @param {string} style - Color as a CSS-style string.
     * @param {string} [colorSpace=SRGBColorSpace] - The color space.
     * @return {Color} A reference to this color.
     */
    setStyle(style, colorSpace = SRGBColorSpace) {
      function handleAlpha(string2) {
        if (string2 === void 0) return;
        if (parseFloat(string2) < 1) {
          console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
        }
      }
      let m;
      if (m = /^(\w+)\(([^\)]*)\)/.exec(style)) {
        let color2;
        const name2 = m[1];
        const components = m[2];
        switch (name2) {
          case "rgb":
          case "rgba":
            if (color2 = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
              handleAlpha(color2[4]);
              return this.setRGB(
                Math.min(255, parseInt(color2[1], 10)) / 255,
                Math.min(255, parseInt(color2[2], 10)) / 255,
                Math.min(255, parseInt(color2[3], 10)) / 255,
                colorSpace
              );
            }
            if (color2 = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
              handleAlpha(color2[4]);
              return this.setRGB(
                Math.min(100, parseInt(color2[1], 10)) / 100,
                Math.min(100, parseInt(color2[2], 10)) / 100,
                Math.min(100, parseInt(color2[3], 10)) / 100,
                colorSpace
              );
            }
            break;
          case "hsl":
          case "hsla":
            if (color2 = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
              handleAlpha(color2[4]);
              return this.setHSL(
                parseFloat(color2[1]) / 360,
                parseFloat(color2[2]) / 100,
                parseFloat(color2[3]) / 100,
                colorSpace
              );
            }
            break;
          default:
            console.warn("THREE.Color: Unknown color model " + style);
        }
      } else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
        const hex = m[1];
        const size = hex.length;
        if (size === 3) {
          return this.setRGB(
            parseInt(hex.charAt(0), 16) / 15,
            parseInt(hex.charAt(1), 16) / 15,
            parseInt(hex.charAt(2), 16) / 15,
            colorSpace
          );
        } else if (size === 6) {
          return this.setHex(parseInt(hex, 16), colorSpace);
        } else {
          console.warn("THREE.Color: Invalid hex color " + style);
        }
      } else if (style && style.length > 0) {
        return this.setColorName(style, colorSpace);
      }
      return this;
    }
    /**
     * Sets this color from a color name. Faster than {@link Color#setStyle} if
     * you don't need the other CSS-style formats.
     *
     * For convenience, the list of names is exposed in `Color.NAMES` as a hash.
     * ```js
     * Color.NAMES.aliceblue // returns 0xF0F8FF
     * ```
     *
     * @param {string} style - The color name.
     * @param {string} [colorSpace=SRGBColorSpace] - The color space.
     * @return {Color} A reference to this color.
     */
    setColorName(style, colorSpace = SRGBColorSpace) {
      const hex = _colorKeywords[style.toLowerCase()];
      if (hex !== void 0) {
        this.setHex(hex, colorSpace);
      } else {
        console.warn("THREE.Color: Unknown color " + style);
      }
      return this;
    }
    /**
     * Returns a new color with copied values from this instance.
     *
     * @return {Color} A clone of this instance.
     */
    clone() {
      return new this.constructor(this.r, this.g, this.b);
    }
    /**
     * Copies the values of the given color to this instance.
     *
     * @param {Color} color - The color to copy.
     * @return {Color} A reference to this color.
     */
    copy(color2) {
      this.r = color2.r;
      this.g = color2.g;
      this.b = color2.b;
      return this;
    }
    /**
     * Copies the given color into this color, and then converts this color from
     * `SRGBColorSpace` to `LinearSRGBColorSpace`.
     *
     * @param {Color} color - The color to copy/convert.
     * @return {Color} A reference to this color.
     */
    copySRGBToLinear(color2) {
      this.r = SRGBToLinear(color2.r);
      this.g = SRGBToLinear(color2.g);
      this.b = SRGBToLinear(color2.b);
      return this;
    }
    /**
     * Copies the given color into this color, and then converts this color from
     * `LinearSRGBColorSpace` to `SRGBColorSpace`.
     *
     * @param {Color} color - The color to copy/convert.
     * @return {Color} A reference to this color.
     */
    copyLinearToSRGB(color2) {
      this.r = LinearToSRGB(color2.r);
      this.g = LinearToSRGB(color2.g);
      this.b = LinearToSRGB(color2.b);
      return this;
    }
    /**
     * Converts this color from `SRGBColorSpace` to `LinearSRGBColorSpace`.
     *
     * @return {Color} A reference to this color.
     */
    convertSRGBToLinear() {
      this.copySRGBToLinear(this);
      return this;
    }
    /**
     * Converts this color from `LinearSRGBColorSpace` to `SRGBColorSpace`.
     *
     * @return {Color} A reference to this color.
     */
    convertLinearToSRGB() {
      this.copyLinearToSRGB(this);
      return this;
    }
    /**
     * Returns the hexadecimal value of this color.
     *
     * @param {string} [colorSpace=SRGBColorSpace] - The color space.
     * @return {number} The hexadecimal value.
     */
    getHex(colorSpace = SRGBColorSpace) {
      ColorManagement.workingToColorSpace(_color.copy(this), colorSpace);
      return Math.round(clamp(_color.r * 255, 0, 255)) * 65536 + Math.round(clamp(_color.g * 255, 0, 255)) * 256 + Math.round(clamp(_color.b * 255, 0, 255));
    }
    /**
     * Returns the hexadecimal value of this color as a string (for example, 'FFFFFF').
     *
     * @param {string} [colorSpace=SRGBColorSpace] - The color space.
     * @return {string} The hexadecimal value as a string.
     */
    getHexString(colorSpace = SRGBColorSpace) {
      return ("000000" + this.getHex(colorSpace).toString(16)).slice(-6);
    }
    /**
     * Converts the colors RGB values into the HSL format and stores them into the
     * given target object.
     *
     * @param {{h:number,s:number,l:number}} target - The target object that is used to store the method's result.
     * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
     * @return {{h:number,s:number,l:number}} The HSL representation of this color.
     */
    getHSL(target, colorSpace = ColorManagement.workingColorSpace) {
      ColorManagement.workingToColorSpace(_color.copy(this), colorSpace);
      const r = _color.r, g = _color.g, b = _color.b;
      const max = Math.max(r, g, b);
      const min = Math.min(r, g, b);
      let hue, saturation;
      const lightness = (min + max) / 2;
      if (min === max) {
        hue = 0;
        saturation = 0;
      } else {
        const delta = max - min;
        saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
        switch (max) {
          case r:
            hue = (g - b) / delta + (g < b ? 6 : 0);
            break;
          case g:
            hue = (b - r) / delta + 2;
            break;
          case b:
            hue = (r - g) / delta + 4;
            break;
        }
        hue /= 6;
      }
      target.h = hue;
      target.s = saturation;
      target.l = lightness;
      return target;
    }
    /**
     * Returns the RGB values of this color and stores them into the given target object.
     *
     * @param {Color} target - The target color that is used to store the method's result.
     * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
     * @return {Color} The RGB representation of this color.
     */
    getRGB(target, colorSpace = ColorManagement.workingColorSpace) {
      ColorManagement.workingToColorSpace(_color.copy(this), colorSpace);
      target.r = _color.r;
      target.g = _color.g;
      target.b = _color.b;
      return target;
    }
    /**
     * Returns the value of this color as a CSS style string. Example: `rgb(255,0,0)`.
     *
     * @param {string} [colorSpace=SRGBColorSpace] - The color space.
     * @return {string} The CSS representation of this color.
     */
    getStyle(colorSpace = SRGBColorSpace) {
      ColorManagement.workingToColorSpace(_color.copy(this), colorSpace);
      const r = _color.r, g = _color.g, b = _color.b;
      if (colorSpace !== SRGBColorSpace) {
        return `color(${colorSpace} ${r.toFixed(3)} ${g.toFixed(3)} ${b.toFixed(3)})`;
      }
      return `rgb(${Math.round(r * 255)},${Math.round(g * 255)},${Math.round(b * 255)})`;
    }
    /**
     * Adds the given HSL values to this color's values.
     * Internally, this converts the color's RGB values to HSL, adds HSL
     * and then converts the color back to RGB.
     *
     * @param {number} h - Hue value between `0.0` and `1.0`.
     * @param {number} s - Saturation value between `0.0` and `1.0`.
     * @param {number} l - Lightness value between `0.0` and `1.0`.
     * @return {Color} A reference to this color.
     */
    offsetHSL(h, s, l) {
      this.getHSL(_hslA);
      return this.setHSL(_hslA.h + h, _hslA.s + s, _hslA.l + l);
    }
    /**
     * Adds the RGB values of the given color to the RGB values of this color.
     *
     * @param {Color} color - The color to add.
     * @return {Color} A reference to this color.
     */
    add(color2) {
      this.r += color2.r;
      this.g += color2.g;
      this.b += color2.b;
      return this;
    }
    /**
     * Adds the RGB values of the given colors and stores the result in this instance.
     *
     * @param {Color} color1 - The first color.
     * @param {Color} color2 - The second color.
     * @return {Color} A reference to this color.
     */
    addColors(color1, color2) {
      this.r = color1.r + color2.r;
      this.g = color1.g + color2.g;
      this.b = color1.b + color2.b;
      return this;
    }
    /**
     * Adds the given scalar value to the RGB values of this color.
     *
     * @param {number} s - The scalar to add.
     * @return {Color} A reference to this color.
     */
    addScalar(s) {
      this.r += s;
      this.g += s;
      this.b += s;
      return this;
    }
    /**
     * Subtracts the RGB values of the given color from the RGB values of this color.
     *
     * @param {Color} color - The color to subtract.
     * @return {Color} A reference to this color.
     */
    sub(color2) {
      this.r = Math.max(0, this.r - color2.r);
      this.g = Math.max(0, this.g - color2.g);
      this.b = Math.max(0, this.b - color2.b);
      return this;
    }
    /**
     * Multiplies the RGB values of the given color with the RGB values of this color.
     *
     * @param {Color} color - The color to multiply.
     * @return {Color} A reference to this color.
     */
    multiply(color2) {
      this.r *= color2.r;
      this.g *= color2.g;
      this.b *= color2.b;
      return this;
    }
    /**
     * Multiplies the given scalar value with the RGB values of this color.
     *
     * @param {number} s - The scalar to multiply.
     * @return {Color} A reference to this color.
     */
    multiplyScalar(s) {
      this.r *= s;
      this.g *= s;
      this.b *= s;
      return this;
    }
    /**
     * Linearly interpolates this color's RGB values toward the RGB values of the
     * given color. The alpha argument can be thought of as the ratio between
     * the two colors, where `0.0` is this color and `1.0` is the first argument.
     *
     * @param {Color} color - The color to converge on.
     * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.
     * @return {Color} A reference to this color.
     */
    lerp(color2, alpha) {
      this.r += (color2.r - this.r) * alpha;
      this.g += (color2.g - this.g) * alpha;
      this.b += (color2.b - this.b) * alpha;
      return this;
    }
    /**
     * Linearly interpolates between the given colors and stores the result in this instance.
     * The alpha argument can be thought of as the ratio between the two colors, where `0.0`
     * is the first and `1.0` is the second color.
     *
     * @param {Color} color1 - The first color.
     * @param {Color} color2 - The second color.
     * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.
     * @return {Color} A reference to this color.
     */
    lerpColors(color1, color2, alpha) {
      this.r = color1.r + (color2.r - color1.r) * alpha;
      this.g = color1.g + (color2.g - color1.g) * alpha;
      this.b = color1.b + (color2.b - color1.b) * alpha;
      return this;
    }
    /**
     * Linearly interpolates this color's HSL values toward the HSL values of the
     * given color. It differs from {@link Color#lerp} by not interpolating straight
     * from one color to the other, but instead going through all the hues in between
     * those two colors. The alpha argument can be thought of as the ratio between
     * the two colors, where 0.0 is this color and 1.0 is the first argument.
     *
     * @param {Color} color - The color to converge on.
     * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.
     * @return {Color} A reference to this color.
     */
    lerpHSL(color2, alpha) {
      this.getHSL(_hslA);
      color2.getHSL(_hslB);
      const h = lerp(_hslA.h, _hslB.h, alpha);
      const s = lerp(_hslA.s, _hslB.s, alpha);
      const l = lerp(_hslA.l, _hslB.l, alpha);
      this.setHSL(h, s, l);
      return this;
    }
    /**
     * Sets the color's RGB components from the given 3D vector.
     *
     * @param {Vector3} v - The vector to set.
     * @return {Color} A reference to this color.
     */
    setFromVector3(v) {
      this.r = v.x;
      this.g = v.y;
      this.b = v.z;
      return this;
    }
    /**
     * Transforms this color with the given 3x3 matrix.
     *
     * @param {Matrix3} m - The matrix.
     * @return {Color} A reference to this color.
     */
    applyMatrix3(m) {
      const r = this.r, g = this.g, b = this.b;
      const e = m.elements;
      this.r = e[0] * r + e[3] * g + e[6] * b;
      this.g = e[1] * r + e[4] * g + e[7] * b;
      this.b = e[2] * r + e[5] * g + e[8] * b;
      return this;
    }
    /**
     * Returns `true` if this color is equal with the given one.
     *
     * @param {Color} c - The color to test for equality.
     * @return {boolean} Whether this bounding color is equal with the given one.
     */
    equals(c) {
      return c.r === this.r && c.g === this.g && c.b === this.b;
    }
    /**
     * Sets this color's RGB components from the given array.
     *
     * @param {Array<number>} array - An array holding the RGB values.
     * @param {number} [offset=0] - The offset into the array.
     * @return {Color} A reference to this color.
     */
    fromArray(array2, offset = 0) {
      this.r = array2[offset];
      this.g = array2[offset + 1];
      this.b = array2[offset + 2];
      return this;
    }
    /**
     * Writes the RGB components of this color to the given array. If no array is provided,
     * the method returns a new instance.
     *
     * @param {Array<number>} [array=[]] - The target array holding the color components.
     * @param {number} [offset=0] - Index of the first element in the array.
     * @return {Array<number>} The color components.
     */
    toArray(array2 = [], offset = 0) {
      array2[offset] = this.r;
      array2[offset + 1] = this.g;
      array2[offset + 2] = this.b;
      return array2;
    }
    /**
     * Sets the components of this color from the given buffer attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute holding color data.
     * @param {number} index - The index into the attribute.
     * @return {Color} A reference to this color.
     */
    fromBufferAttribute(attribute2, index) {
      this.r = attribute2.getX(index);
      this.g = attribute2.getY(index);
      this.b = attribute2.getZ(index);
      return this;
    }
    /**
     * This methods defines the serialization result of this class. Returns the color
     * as a hexadecimal value.
     *
     * @return {number} The hexadecimal value.
     */
    toJSON() {
      return this.getHex();
    }
    *[Symbol.iterator]() {
      yield this.r;
      yield this.g;
      yield this.b;
    }
  };
  var _color = /* @__PURE__ */ new Color();
  Color.NAMES = _colorKeywords;
  var _materialId = 0;
  var Material = class extends EventDispatcher {
    /**
     * Constructs a new material.
     */
    constructor() {
      super();
      this.isMaterial = true;
      Object.defineProperty(this, "id", { value: _materialId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "Material";
      this.blending = NormalBlending;
      this.side = FrontSide;
      this.vertexColors = false;
      this.opacity = 1;
      this.transparent = false;
      this.alphaHash = false;
      this.blendSrc = SrcAlphaFactor;
      this.blendDst = OneMinusSrcAlphaFactor;
      this.blendEquation = AddEquation;
      this.blendSrcAlpha = null;
      this.blendDstAlpha = null;
      this.blendEquationAlpha = null;
      this.blendColor = new Color(0, 0, 0);
      this.blendAlpha = 0;
      this.depthFunc = LessEqualDepth;
      this.depthTest = true;
      this.depthWrite = true;
      this.stencilWriteMask = 255;
      this.stencilFunc = AlwaysStencilFunc;
      this.stencilRef = 0;
      this.stencilFuncMask = 255;
      this.stencilFail = KeepStencilOp;
      this.stencilZFail = KeepStencilOp;
      this.stencilZPass = KeepStencilOp;
      this.stencilWrite = false;
      this.clippingPlanes = null;
      this.clipIntersection = false;
      this.clipShadows = false;
      this.shadowSide = null;
      this.colorWrite = true;
      this.precision = null;
      this.polygonOffset = false;
      this.polygonOffsetFactor = 0;
      this.polygonOffsetUnits = 0;
      this.dithering = false;
      this.alphaToCoverage = false;
      this.premultipliedAlpha = false;
      this.forceSinglePass = false;
      this.allowOverride = true;
      this.visible = true;
      this.toneMapped = true;
      this.userData = {};
      this.version = 0;
      this._alphaTest = 0;
    }
    /**
     * Sets the alpha value to be used when running an alpha test. The material
     * will not be rendered if the opacity is lower than this value.
     *
     * @type {number}
     * @readonly
     * @default 0
     */
    get alphaTest() {
      return this._alphaTest;
    }
    set alphaTest(value) {
      if (this._alphaTest > 0 !== value > 0) {
        this.version++;
      }
      this._alphaTest = value;
    }
    /**
     * An optional callback that is executed immediately before the material is used to render a 3D object.
     *
     * This method can only be used when rendering with {@link WebGLRenderer}.
     *
     * @param {WebGLRenderer} renderer - The renderer.
     * @param {Scene} scene - The scene.
     * @param {Camera} camera - The camera that is used to render the scene.
     * @param {BufferGeometry} geometry - The 3D object's geometry.
     * @param {Object3D} object - The 3D object.
     * @param {Object} group - The geometry group data.
     */
    onBeforeRender() {
    }
    /**
     * An optional callback that is executed immediately before the shader
     * program is compiled. This function is called with the shader source code
     * as a parameter. Useful for the modification of built-in materials.
     *
     * This method can only be used when rendering with {@link WebGLRenderer}. The
     * recommended approach when customizing materials is to use `WebGPURenderer` with the new
     * Node Material system and [TSL]{@link https://github.com/mrdoob/three.js/wiki/Three.js-Shading-Language}.
     *
     * @param {{vertexShader:string,fragmentShader:string,uniforms:Object}} shaderobject - The object holds the uniforms and the vertex and fragment shader source.
     * @param {WebGLRenderer} renderer - A reference to the renderer.
     */
    onBeforeCompile() {
    }
    /**
     * In case {@link Material#onBeforeCompile} is used, this callback can be used to identify
     * values of settings used in `onBeforeCompile()`, so three.js can reuse a cached
     * shader or recompile the shader for this material as needed.
     *
     * This method can only be used when rendering with {@link WebGLRenderer}.
     *
     * @return {string} The custom program cache key.
     */
    customProgramCacheKey() {
      return this.onBeforeCompile.toString();
    }
    /**
     * This method can be used to set default values from parameter objects.
     * It is a generic implementation so it can be used with different types
     * of materials.
     *
     * @param {Object} [values] - The material values to set.
     */
    setValues(values) {
      if (values === void 0) return;
      for (const key in values) {
        const newValue = values[key];
        if (newValue === void 0) {
          console.warn(`THREE.Material: parameter '${key}' has value of undefined.`);
          continue;
        }
        const currentValue = this[key];
        if (currentValue === void 0) {
          console.warn(`THREE.Material: '${key}' is not a property of THREE.${this.type}.`);
          continue;
        }
        if (currentValue && currentValue.isColor) {
          currentValue.set(newValue);
        } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
          currentValue.copy(newValue);
        } else {
          this[key] = newValue;
        }
      }
    }
    /**
     * Serializes the material into JSON.
     *
     * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
     * @return {Object} A JSON object representing the serialized material.
     * @see {@link ObjectLoader#parse}
     */
    toJSON(meta2) {
      const isRootObject = meta2 === void 0 || typeof meta2 === "string";
      if (isRootObject) {
        meta2 = {
          textures: {},
          images: {}
        };
      }
      const data = {
        metadata: {
          version: 4.7,
          type: "Material",
          generator: "Material.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "") data.name = this.name;
      if (this.color && this.color.isColor) data.color = this.color.getHex();
      if (this.roughness !== void 0) data.roughness = this.roughness;
      if (this.metalness !== void 0) data.metalness = this.metalness;
      if (this.sheen !== void 0) data.sheen = this.sheen;
      if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();
      if (this.sheenRoughness !== void 0) data.sheenRoughness = this.sheenRoughness;
      if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();
      if (this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;
      if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();
      if (this.specularIntensity !== void 0) data.specularIntensity = this.specularIntensity;
      if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();
      if (this.shininess !== void 0) data.shininess = this.shininess;
      if (this.clearcoat !== void 0) data.clearcoat = this.clearcoat;
      if (this.clearcoatRoughness !== void 0) data.clearcoatRoughness = this.clearcoatRoughness;
      if (this.clearcoatMap && this.clearcoatMap.isTexture) {
        data.clearcoatMap = this.clearcoatMap.toJSON(meta2).uuid;
      }
      if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
        data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta2).uuid;
      }
      if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
        data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta2).uuid;
        data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
      }
      if (this.dispersion !== void 0) data.dispersion = this.dispersion;
      if (this.iridescence !== void 0) data.iridescence = this.iridescence;
      if (this.iridescenceIOR !== void 0) data.iridescenceIOR = this.iridescenceIOR;
      if (this.iridescenceThicknessRange !== void 0) data.iridescenceThicknessRange = this.iridescenceThicknessRange;
      if (this.iridescenceMap && this.iridescenceMap.isTexture) {
        data.iridescenceMap = this.iridescenceMap.toJSON(meta2).uuid;
      }
      if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {
        data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta2).uuid;
      }
      if (this.anisotropy !== void 0) data.anisotropy = this.anisotropy;
      if (this.anisotropyRotation !== void 0) data.anisotropyRotation = this.anisotropyRotation;
      if (this.anisotropyMap && this.anisotropyMap.isTexture) {
        data.anisotropyMap = this.anisotropyMap.toJSON(meta2).uuid;
      }
      if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta2).uuid;
      if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta2).uuid;
      if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta2).uuid;
      if (this.lightMap && this.lightMap.isTexture) {
        data.lightMap = this.lightMap.toJSON(meta2).uuid;
        data.lightMapIntensity = this.lightMapIntensity;
      }
      if (this.aoMap && this.aoMap.isTexture) {
        data.aoMap = this.aoMap.toJSON(meta2).uuid;
        data.aoMapIntensity = this.aoMapIntensity;
      }
      if (this.bumpMap && this.bumpMap.isTexture) {
        data.bumpMap = this.bumpMap.toJSON(meta2).uuid;
        data.bumpScale = this.bumpScale;
      }
      if (this.normalMap && this.normalMap.isTexture) {
        data.normalMap = this.normalMap.toJSON(meta2).uuid;
        data.normalMapType = this.normalMapType;
        data.normalScale = this.normalScale.toArray();
      }
      if (this.displacementMap && this.displacementMap.isTexture) {
        data.displacementMap = this.displacementMap.toJSON(meta2).uuid;
        data.displacementScale = this.displacementScale;
        data.displacementBias = this.displacementBias;
      }
      if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta2).uuid;
      if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta2).uuid;
      if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta2).uuid;
      if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta2).uuid;
      if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta2).uuid;
      if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta2).uuid;
      if (this.envMap && this.envMap.isTexture) {
        data.envMap = this.envMap.toJSON(meta2).uuid;
        if (this.combine !== void 0) data.combine = this.combine;
      }
      if (this.envMapRotation !== void 0) data.envMapRotation = this.envMapRotation.toArray();
      if (this.envMapIntensity !== void 0) data.envMapIntensity = this.envMapIntensity;
      if (this.reflectivity !== void 0) data.reflectivity = this.reflectivity;
      if (this.refractionRatio !== void 0) data.refractionRatio = this.refractionRatio;
      if (this.gradientMap && this.gradientMap.isTexture) {
        data.gradientMap = this.gradientMap.toJSON(meta2).uuid;
      }
      if (this.transmission !== void 0) data.transmission = this.transmission;
      if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta2).uuid;
      if (this.thickness !== void 0) data.thickness = this.thickness;
      if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta2).uuid;
      if (this.attenuationDistance !== void 0 && this.attenuationDistance !== Infinity) data.attenuationDistance = this.attenuationDistance;
      if (this.attenuationColor !== void 0) data.attenuationColor = this.attenuationColor.getHex();
      if (this.size !== void 0) data.size = this.size;
      if (this.shadowSide !== null) data.shadowSide = this.shadowSide;
      if (this.sizeAttenuation !== void 0) data.sizeAttenuation = this.sizeAttenuation;
      if (this.blending !== NormalBlending) data.blending = this.blending;
      if (this.side !== FrontSide) data.side = this.side;
      if (this.vertexColors === true) data.vertexColors = true;
      if (this.opacity < 1) data.opacity = this.opacity;
      if (this.transparent === true) data.transparent = true;
      if (this.blendSrc !== SrcAlphaFactor) data.blendSrc = this.blendSrc;
      if (this.blendDst !== OneMinusSrcAlphaFactor) data.blendDst = this.blendDst;
      if (this.blendEquation !== AddEquation) data.blendEquation = this.blendEquation;
      if (this.blendSrcAlpha !== null) data.blendSrcAlpha = this.blendSrcAlpha;
      if (this.blendDstAlpha !== null) data.blendDstAlpha = this.blendDstAlpha;
      if (this.blendEquationAlpha !== null) data.blendEquationAlpha = this.blendEquationAlpha;
      if (this.blendColor && this.blendColor.isColor) data.blendColor = this.blendColor.getHex();
      if (this.blendAlpha !== 0) data.blendAlpha = this.blendAlpha;
      if (this.depthFunc !== LessEqualDepth) data.depthFunc = this.depthFunc;
      if (this.depthTest === false) data.depthTest = this.depthTest;
      if (this.depthWrite === false) data.depthWrite = this.depthWrite;
      if (this.colorWrite === false) data.colorWrite = this.colorWrite;
      if (this.stencilWriteMask !== 255) data.stencilWriteMask = this.stencilWriteMask;
      if (this.stencilFunc !== AlwaysStencilFunc) data.stencilFunc = this.stencilFunc;
      if (this.stencilRef !== 0) data.stencilRef = this.stencilRef;
      if (this.stencilFuncMask !== 255) data.stencilFuncMask = this.stencilFuncMask;
      if (this.stencilFail !== KeepStencilOp) data.stencilFail = this.stencilFail;
      if (this.stencilZFail !== KeepStencilOp) data.stencilZFail = this.stencilZFail;
      if (this.stencilZPass !== KeepStencilOp) data.stencilZPass = this.stencilZPass;
      if (this.stencilWrite === true) data.stencilWrite = this.stencilWrite;
      if (this.rotation !== void 0 && this.rotation !== 0) data.rotation = this.rotation;
      if (this.polygonOffset === true) data.polygonOffset = true;
      if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
      if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;
      if (this.linewidth !== void 0 && this.linewidth !== 1) data.linewidth = this.linewidth;
      if (this.dashSize !== void 0) data.dashSize = this.dashSize;
      if (this.gapSize !== void 0) data.gapSize = this.gapSize;
      if (this.scale !== void 0) data.scale = this.scale;
      if (this.dithering === true) data.dithering = true;
      if (this.alphaTest > 0) data.alphaTest = this.alphaTest;
      if (this.alphaHash === true) data.alphaHash = true;
      if (this.alphaToCoverage === true) data.alphaToCoverage = true;
      if (this.premultipliedAlpha === true) data.premultipliedAlpha = true;
      if (this.forceSinglePass === true) data.forceSinglePass = true;
      if (this.wireframe === true) data.wireframe = true;
      if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;
      if (this.wireframeLinecap !== "round") data.wireframeLinecap = this.wireframeLinecap;
      if (this.wireframeLinejoin !== "round") data.wireframeLinejoin = this.wireframeLinejoin;
      if (this.flatShading === true) data.flatShading = true;
      if (this.visible === false) data.visible = false;
      if (this.toneMapped === false) data.toneMapped = false;
      if (this.fog === false) data.fog = false;
      if (Object.keys(this.userData).length > 0) data.userData = this.userData;
      function extractFromCache(cache3) {
        const values = [];
        for (const key in cache3) {
          const data2 = cache3[key];
          delete data2.metadata;
          values.push(data2);
        }
        return values;
      }
      if (isRootObject) {
        const textures = extractFromCache(meta2.textures);
        const images = extractFromCache(meta2.images);
        if (textures.length > 0) data.textures = textures;
        if (images.length > 0) data.images = images;
      }
      return data;
    }
    /**
     * Returns a new material with copied values from this instance.
     *
     * @return {Material} A clone of this instance.
     */
    clone() {
      return new this.constructor().copy(this);
    }
    /**
     * Copies the values of the given material to this instance.
     *
     * @param {Material} source - The material to copy.
     * @return {Material} A reference to this instance.
     */
    copy(source) {
      this.name = source.name;
      this.blending = source.blending;
      this.side = source.side;
      this.vertexColors = source.vertexColors;
      this.opacity = source.opacity;
      this.transparent = source.transparent;
      this.blendSrc = source.blendSrc;
      this.blendDst = source.blendDst;
      this.blendEquation = source.blendEquation;
      this.blendSrcAlpha = source.blendSrcAlpha;
      this.blendDstAlpha = source.blendDstAlpha;
      this.blendEquationAlpha = source.blendEquationAlpha;
      this.blendColor.copy(source.blendColor);
      this.blendAlpha = source.blendAlpha;
      this.depthFunc = source.depthFunc;
      this.depthTest = source.depthTest;
      this.depthWrite = source.depthWrite;
      this.stencilWriteMask = source.stencilWriteMask;
      this.stencilFunc = source.stencilFunc;
      this.stencilRef = source.stencilRef;
      this.stencilFuncMask = source.stencilFuncMask;
      this.stencilFail = source.stencilFail;
      this.stencilZFail = source.stencilZFail;
      this.stencilZPass = source.stencilZPass;
      this.stencilWrite = source.stencilWrite;
      const srcPlanes = source.clippingPlanes;
      let dstPlanes = null;
      if (srcPlanes !== null) {
        const n = srcPlanes.length;
        dstPlanes = new Array(n);
        for (let i = 0; i !== n; ++i) {
          dstPlanes[i] = srcPlanes[i].clone();
        }
      }
      this.clippingPlanes = dstPlanes;
      this.clipIntersection = source.clipIntersection;
      this.clipShadows = source.clipShadows;
      this.shadowSide = source.shadowSide;
      this.colorWrite = source.colorWrite;
      this.precision = source.precision;
      this.polygonOffset = source.polygonOffset;
      this.polygonOffsetFactor = source.polygonOffsetFactor;
      this.polygonOffsetUnits = source.polygonOffsetUnits;
      this.dithering = source.dithering;
      this.alphaTest = source.alphaTest;
      this.alphaHash = source.alphaHash;
      this.alphaToCoverage = source.alphaToCoverage;
      this.premultipliedAlpha = source.premultipliedAlpha;
      this.forceSinglePass = source.forceSinglePass;
      this.visible = source.visible;
      this.toneMapped = source.toneMapped;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      return this;
    }
    /**
     * Frees the GPU-related resources allocated by this instance. Call this
     * method whenever this instance is no longer used in your app.
     *
     * @fires Material#dispose
     */
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
    /**
     * Setting this property to `true` indicates the engine the material
     * needs to be recompiled.
     *
     * @type {boolean}
     * @default false
     * @param {boolean} value
     */
    set needsUpdate(value) {
      if (value === true) this.version++;
    }
  };
  var MeshBasicMaterial = class extends Material {
    /**
     * Constructs a new mesh basic material.
     *
     * @param {Object} [parameters] - An object with one or more properties
     * defining the material's appearance. Any property of the material
     * (including any property from inherited materials) can be passed
     * in here. Color values can be passed any type of value accepted
     * by {@link Color#set}.
     */
    constructor(parameters) {
      super();
      this.isMeshBasicMaterial = true;
      this.type = "MeshBasicMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.lightMap = null;
      this.lightMapIntensity = 1;
      this.aoMap = null;
      this.aoMapIntensity = 1;
      this.specularMap = null;
      this.alphaMap = null;
      this.envMap = null;
      this.envMapRotation = new Euler();
      this.combine = MultiplyOperation;
      this.reflectivity = 1;
      this.refractionRatio = 0.98;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.wireframeLinecap = "round";
      this.wireframeLinejoin = "round";
      this.fog = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.specularMap = source.specularMap;
      this.alphaMap = source.alphaMap;
      this.envMap = source.envMap;
      this.envMapRotation.copy(source.envMapRotation);
      this.combine = source.combine;
      this.reflectivity = source.reflectivity;
      this.refractionRatio = source.refractionRatio;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      this.fog = source.fog;
      return this;
    }
  };
  var _tables = /* @__PURE__ */ _generateTables();
  function _generateTables() {
    const buffer2 = new ArrayBuffer(4);
    const floatView = new Float32Array(buffer2);
    const uint32View = new Uint32Array(buffer2);
    const baseTable = new Uint32Array(512);
    const shiftTable = new Uint32Array(512);
    for (let i = 0; i < 256; ++i) {
      const e = i - 127;
      if (e < -27) {
        baseTable[i] = 0;
        baseTable[i | 256] = 32768;
        shiftTable[i] = 24;
        shiftTable[i | 256] = 24;
      } else if (e < -14) {
        baseTable[i] = 1024 >> -e - 14;
        baseTable[i | 256] = 1024 >> -e - 14 | 32768;
        shiftTable[i] = -e - 1;
        shiftTable[i | 256] = -e - 1;
      } else if (e <= 15) {
        baseTable[i] = e + 15 << 10;
        baseTable[i | 256] = e + 15 << 10 | 32768;
        shiftTable[i] = 13;
        shiftTable[i | 256] = 13;
      } else if (e < 128) {
        baseTable[i] = 31744;
        baseTable[i | 256] = 64512;
        shiftTable[i] = 24;
        shiftTable[i | 256] = 24;
      } else {
        baseTable[i] = 31744;
        baseTable[i | 256] = 64512;
        shiftTable[i] = 13;
        shiftTable[i | 256] = 13;
      }
    }
    const mantissaTable = new Uint32Array(2048);
    const exponentTable = new Uint32Array(64);
    const offsetTable = new Uint32Array(64);
    for (let i = 1; i < 1024; ++i) {
      let m = i << 13;
      let e = 0;
      while ((m & 8388608) === 0) {
        m <<= 1;
        e -= 8388608;
      }
      m &= -8388609;
      e += 947912704;
      mantissaTable[i] = m | e;
    }
    for (let i = 1024; i < 2048; ++i) {
      mantissaTable[i] = 939524096 + (i - 1024 << 13);
    }
    for (let i = 1; i < 31; ++i) {
      exponentTable[i] = i << 23;
    }
    exponentTable[31] = 1199570944;
    exponentTable[32] = 2147483648;
    for (let i = 33; i < 63; ++i) {
      exponentTable[i] = 2147483648 + (i - 32 << 23);
    }
    exponentTable[63] = 3347054592;
    for (let i = 1; i < 64; ++i) {
      if (i !== 32) {
        offsetTable[i] = 1024;
      }
    }
    return {
      floatView,
      uint32View,
      baseTable,
      shiftTable,
      mantissaTable,
      exponentTable,
      offsetTable
    };
  }
  function toHalfFloat(val) {
    if (Math.abs(val) > 65504) console.warn("THREE.DataUtils.toHalfFloat(): Value out of range.");
    val = clamp(val, -65504, 65504);
    _tables.floatView[0] = val;
    const f = _tables.uint32View[0];
    const e = f >> 23 & 511;
    return _tables.baseTable[e] + ((f & 8388607) >> _tables.shiftTable[e]);
  }
  function fromHalfFloat(val) {
    const m = val >> 10;
    _tables.uint32View[0] = _tables.mantissaTable[_tables.offsetTable[m] + (val & 1023)] + _tables.exponentTable[m];
    return _tables.floatView[0];
  }
  var _vector$9 = /* @__PURE__ */ new Vector3();
  var _vector2$1 = /* @__PURE__ */ new Vector2();
  var _id$2 = 0;
  var BufferAttribute = class {
    /**
     * Constructs a new buffer attribute.
     *
     * @param {TypedArray} array - The array holding the attribute data.
     * @param {number} itemSize - The item size.
     * @param {boolean} [normalized=false] - Whether the data are normalized or not.
     */
    constructor(array2, itemSize, normalized = false) {
      if (Array.isArray(array2)) {
        throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
      }
      this.isBufferAttribute = true;
      Object.defineProperty(this, "id", { value: _id$2++ });
      this.name = "";
      this.array = array2;
      this.itemSize = itemSize;
      this.count = array2 !== void 0 ? array2.length / itemSize : 0;
      this.normalized = normalized;
      this.usage = StaticDrawUsage;
      this.updateRanges = [];
      this.gpuType = FloatType;
      this.version = 0;
    }
    /**
     * A callback function that is executed after the renderer has transferred the attribute
     * array data to the GPU.
     */
    onUploadCallback() {
    }
    /**
     * Flag to indicate that this attribute has changed and should be re-sent to
     * the GPU. Set this to `true` when you modify the value of the array.
     *
     * @type {number}
     * @default false
     * @param {boolean} value
     */
    set needsUpdate(value) {
      if (value === true) this.version++;
    }
    /**
     * Sets the usage of this buffer attribute.
     *
     * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.
     * @return {BufferAttribute} A reference to this buffer attribute.
     */
    setUsage(value) {
      this.usage = value;
      return this;
    }
    /**
     * Adds a range of data in the data array to be updated on the GPU.
     *
     * @param {number} start - Position at which to start update.
     * @param {number} count - The number of components to update.
     */
    addUpdateRange(start, count) {
      this.updateRanges.push({ start, count });
    }
    /**
     * Clears the update ranges.
     */
    clearUpdateRanges() {
      this.updateRanges.length = 0;
    }
    /**
     * Copies the values of the given buffer attribute to this instance.
     *
     * @param {BufferAttribute} source - The buffer attribute to copy.
     * @return {BufferAttribute} A reference to this instance.
     */
    copy(source) {
      this.name = source.name;
      this.array = new source.array.constructor(source.array);
      this.itemSize = source.itemSize;
      this.count = source.count;
      this.normalized = source.normalized;
      this.usage = source.usage;
      this.gpuType = source.gpuType;
      return this;
    }
    /**
     * Copies a vector from the given buffer attribute to this one. The start
     * and destination position in the attribute buffers are represented by the
     * given indices.
     *
     * @param {number} index1 - The destination index into this buffer attribute.
     * @param {BufferAttribute} attribute - The buffer attribute to copy from.
     * @param {number} index2 - The source index into the given buffer attribute.
     * @return {BufferAttribute} A reference to this instance.
     */
    copyAt(index1, attribute2, index2) {
      index1 *= this.itemSize;
      index2 *= attribute2.itemSize;
      for (let i = 0, l = this.itemSize; i < l; i++) {
        this.array[index1 + i] = attribute2.array[index2 + i];
      }
      return this;
    }
    /**
     * Copies the given array data into this buffer attribute.
     *
     * @param {(TypedArray|Array)} array - The array to copy.
     * @return {BufferAttribute} A reference to this instance.
     */
    copyArray(array2) {
      this.array.set(array2);
      return this;
    }
    /**
     * Applies the given 3x3 matrix to the given attribute. Works with
     * item size `2` and `3`.
     *
     * @param {Matrix3} m - The matrix to apply.
     * @return {BufferAttribute} A reference to this instance.
     */
    applyMatrix3(m) {
      if (this.itemSize === 2) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector2$1.fromBufferAttribute(this, i);
          _vector2$1.applyMatrix3(m);
          this.setXY(i, _vector2$1.x, _vector2$1.y);
        }
      } else if (this.itemSize === 3) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector$9.fromBufferAttribute(this, i);
          _vector$9.applyMatrix3(m);
          this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
        }
      }
      return this;
    }
    /**
     * Applies the given 4x4 matrix to the given attribute. Only works with
     * item size `3`.
     *
     * @param {Matrix4} m - The matrix to apply.
     * @return {BufferAttribute} A reference to this instance.
     */
    applyMatrix4(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$9.fromBufferAttribute(this, i);
        _vector$9.applyMatrix4(m);
        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    /**
     * Applies the given 3x3 normal matrix to the given attribute. Only works with
     * item size `3`.
     *
     * @param {Matrix3} m - The normal matrix to apply.
     * @return {BufferAttribute} A reference to this instance.
     */
    applyNormalMatrix(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$9.fromBufferAttribute(this, i);
        _vector$9.applyNormalMatrix(m);
        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    /**
     * Applies the given 4x4 matrix to the given attribute. Only works with
     * item size `3` and with direction vectors.
     *
     * @param {Matrix4} m - The matrix to apply.
     * @return {BufferAttribute} A reference to this instance.
     */
    transformDirection(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$9.fromBufferAttribute(this, i);
        _vector$9.transformDirection(m);
        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
      }
      return this;
    }
    /**
     * Sets the given array data in the buffer attribute.
     *
     * @param {(TypedArray|Array)} value - The array data to set.
     * @param {number} [offset=0] - The offset in this buffer attribute's array.
     * @return {BufferAttribute} A reference to this instance.
     */
    set(value, offset = 0) {
      this.array.set(value, offset);
      return this;
    }
    /**
     * Returns the given component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @param {number} component - The component index.
     * @return {number} The returned value.
     */
    getComponent(index, component) {
      let value = this.array[index * this.itemSize + component];
      if (this.normalized) value = denormalize(value, this.array);
      return value;
    }
    /**
     * Sets the given value to the given component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @param {number} component - The component index.
     * @param {number} value - The value to set.
     * @return {BufferAttribute} A reference to this instance.
     */
    setComponent(index, component, value) {
      if (this.normalized) value = normalize(value, this.array);
      this.array[index * this.itemSize + component] = value;
      return this;
    }
    /**
     * Returns the x component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @return {number} The x component.
     */
    getX(index) {
      let x = this.array[index * this.itemSize];
      if (this.normalized) x = denormalize(x, this.array);
      return x;
    }
    /**
     * Sets the x component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @param {number} x - The value to set.
     * @return {BufferAttribute} A reference to this instance.
     */
    setX(index, x) {
      if (this.normalized) x = normalize(x, this.array);
      this.array[index * this.itemSize] = x;
      return this;
    }
    /**
     * Returns the y component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @return {number} The y component.
     */
    getY(index) {
      let y = this.array[index * this.itemSize + 1];
      if (this.normalized) y = denormalize(y, this.array);
      return y;
    }
    /**
     * Sets the y component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @param {number} y - The value to set.
     * @return {BufferAttribute} A reference to this instance.
     */
    setY(index, y) {
      if (this.normalized) y = normalize(y, this.array);
      this.array[index * this.itemSize + 1] = y;
      return this;
    }
    /**
     * Returns the z component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @return {number} The z component.
     */
    getZ(index) {
      let z = this.array[index * this.itemSize + 2];
      if (this.normalized) z = denormalize(z, this.array);
      return z;
    }
    /**
     * Sets the z component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @param {number} z - The value to set.
     * @return {BufferAttribute} A reference to this instance.
     */
    setZ(index, z) {
      if (this.normalized) z = normalize(z, this.array);
      this.array[index * this.itemSize + 2] = z;
      return this;
    }
    /**
     * Returns the w component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @return {number} The w component.
     */
    getW(index) {
      let w = this.array[index * this.itemSize + 3];
      if (this.normalized) w = denormalize(w, this.array);
      return w;
    }
    /**
     * Sets the w component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @param {number} w - The value to set.
     * @return {BufferAttribute} A reference to this instance.
     */
    setW(index, w) {
      if (this.normalized) w = normalize(w, this.array);
      this.array[index * this.itemSize + 3] = w;
      return this;
    }
    /**
     * Sets the x and y component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @param {number} x - The value for the x component to set.
     * @param {number} y - The value for the y component to set.
     * @return {BufferAttribute} A reference to this instance.
     */
    setXY(index, x, y) {
      index *= this.itemSize;
      if (this.normalized) {
        x = normalize(x, this.array);
        y = normalize(y, this.array);
      }
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      return this;
    }
    /**
     * Sets the x, y and z component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @param {number} x - The value for the x component to set.
     * @param {number} y - The value for the y component to set.
     * @param {number} z - The value for the z component to set.
     * @return {BufferAttribute} A reference to this instance.
     */
    setXYZ(index, x, y, z) {
      index *= this.itemSize;
      if (this.normalized) {
        x = normalize(x, this.array);
        y = normalize(y, this.array);
        z = normalize(z, this.array);
      }
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      this.array[index + 2] = z;
      return this;
    }
    /**
     * Sets the x, y, z and w component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @param {number} x - The value for the x component to set.
     * @param {number} y - The value for the y component to set.
     * @param {number} z - The value for the z component to set.
     * @param {number} w - The value for the w component to set.
     * @return {BufferAttribute} A reference to this instance.
     */
    setXYZW(index, x, y, z, w) {
      index *= this.itemSize;
      if (this.normalized) {
        x = normalize(x, this.array);
        y = normalize(y, this.array);
        z = normalize(z, this.array);
        w = normalize(w, this.array);
      }
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      this.array[index + 2] = z;
      this.array[index + 3] = w;
      return this;
    }
    /**
     * Sets the given callback function that is executed after the Renderer has transferred
     * the attribute array data to the GPU. Can be used to perform clean-up operations after
     * the upload when attribute data are not needed anymore on the CPU side.
     *
     * @param {Function} callback - The `onUpload()` callback.
     * @return {BufferAttribute} A reference to this instance.
     */
    onUpload(callback) {
      this.onUploadCallback = callback;
      return this;
    }
    /**
     * Returns a new buffer attribute with copied values from this instance.
     *
     * @return {BufferAttribute} A clone of this instance.
     */
    clone() {
      return new this.constructor(this.array, this.itemSize).copy(this);
    }
    /**
     * Serializes the buffer attribute into JSON.
     *
     * @return {Object} A JSON object representing the serialized buffer attribute.
     */
    toJSON() {
      const data = {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: Array.from(this.array),
        normalized: this.normalized
      };
      if (this.name !== "") data.name = this.name;
      if (this.usage !== StaticDrawUsage) data.usage = this.usage;
      return data;
    }
  };
  var Uint16BufferAttribute = class extends BufferAttribute {
    /**
     * Constructs a new buffer attribute.
     *
     * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.
     * @param {number} itemSize - The item size.
     * @param {boolean} [normalized=false] - Whether the data are normalized or not.
     */
    constructor(array2, itemSize, normalized) {
      super(new Uint16Array(array2), itemSize, normalized);
    }
  };
  var Uint32BufferAttribute = class extends BufferAttribute {
    /**
     * Constructs a new buffer attribute.
     *
     * @param {(Array<number>|Uint32Array)} array - The array holding the attribute data.
     * @param {number} itemSize - The item size.
     * @param {boolean} [normalized=false] - Whether the data are normalized or not.
     */
    constructor(array2, itemSize, normalized) {
      super(new Uint32Array(array2), itemSize, normalized);
    }
  };
  var Float16BufferAttribute = class extends BufferAttribute {
    /**
     * Constructs a new buffer attribute.
     *
     * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.
     * @param {number} itemSize - The item size.
     * @param {boolean} [normalized=false] - Whether the data are normalized or not.
     */
    constructor(array2, itemSize, normalized) {
      super(new Uint16Array(array2), itemSize, normalized);
      this.isFloat16BufferAttribute = true;
    }
    getX(index) {
      let x = fromHalfFloat(this.array[index * this.itemSize]);
      if (this.normalized) x = denormalize(x, this.array);
      return x;
    }
    setX(index, x) {
      if (this.normalized) x = normalize(x, this.array);
      this.array[index * this.itemSize] = toHalfFloat(x);
      return this;
    }
    getY(index) {
      let y = fromHalfFloat(this.array[index * this.itemSize + 1]);
      if (this.normalized) y = denormalize(y, this.array);
      return y;
    }
    setY(index, y) {
      if (this.normalized) y = normalize(y, this.array);
      this.array[index * this.itemSize + 1] = toHalfFloat(y);
      return this;
    }
    getZ(index) {
      let z = fromHalfFloat(this.array[index * this.itemSize + 2]);
      if (this.normalized) z = denormalize(z, this.array);
      return z;
    }
    setZ(index, z) {
      if (this.normalized) z = normalize(z, this.array);
      this.array[index * this.itemSize + 2] = toHalfFloat(z);
      return this;
    }
    getW(index) {
      let w = fromHalfFloat(this.array[index * this.itemSize + 3]);
      if (this.normalized) w = denormalize(w, this.array);
      return w;
    }
    setW(index, w) {
      if (this.normalized) w = normalize(w, this.array);
      this.array[index * this.itemSize + 3] = toHalfFloat(w);
      return this;
    }
    setXY(index, x, y) {
      index *= this.itemSize;
      if (this.normalized) {
        x = normalize(x, this.array);
        y = normalize(y, this.array);
      }
      this.array[index + 0] = toHalfFloat(x);
      this.array[index + 1] = toHalfFloat(y);
      return this;
    }
    setXYZ(index, x, y, z) {
      index *= this.itemSize;
      if (this.normalized) {
        x = normalize(x, this.array);
        y = normalize(y, this.array);
        z = normalize(z, this.array);
      }
      this.array[index + 0] = toHalfFloat(x);
      this.array[index + 1] = toHalfFloat(y);
      this.array[index + 2] = toHalfFloat(z);
      return this;
    }
    setXYZW(index, x, y, z, w) {
      index *= this.itemSize;
      if (this.normalized) {
        x = normalize(x, this.array);
        y = normalize(y, this.array);
        z = normalize(z, this.array);
        w = normalize(w, this.array);
      }
      this.array[index + 0] = toHalfFloat(x);
      this.array[index + 1] = toHalfFloat(y);
      this.array[index + 2] = toHalfFloat(z);
      this.array[index + 3] = toHalfFloat(w);
      return this;
    }
  };
  var Float32BufferAttribute = class extends BufferAttribute {
    /**
     * Constructs a new buffer attribute.
     *
     * @param {(Array<number>|Float32Array)} array - The array holding the attribute data.
     * @param {number} itemSize - The item size.
     * @param {boolean} [normalized=false] - Whether the data are normalized or not.
     */
    constructor(array2, itemSize, normalized) {
      super(new Float32Array(array2), itemSize, normalized);
    }
  };
  var _id$1 = 0;
  var _m1 = /* @__PURE__ */ new Matrix4();
  var _obj = /* @__PURE__ */ new Object3D();
  var _offset = /* @__PURE__ */ new Vector3();
  var _box$2 = /* @__PURE__ */ new Box3();
  var _boxMorphTargets = /* @__PURE__ */ new Box3();
  var _vector$8 = /* @__PURE__ */ new Vector3();
  var BufferGeometry = class _BufferGeometry extends EventDispatcher {
    /**
     * Constructs a new geometry.
     */
    constructor() {
      super();
      this.isBufferGeometry = true;
      Object.defineProperty(this, "id", { value: _id$1++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "BufferGeometry";
      this.index = null;
      this.indirect = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.morphTargetsRelative = false;
      this.groups = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      this.drawRange = { start: 0, count: Infinity };
      this.userData = {};
    }
    /**
     * Returns the index of this geometry.
     *
     * @return {?BufferAttribute} The index. Returns `null` if no index is defined.
     */
    getIndex() {
      return this.index;
    }
    /**
     * Sets the given index to this geometry.
     *
     * @param {Array<number>|BufferAttribute} index - The index to set.
     * @return {BufferGeometry} A reference to this instance.
     */
    setIndex(index) {
      if (Array.isArray(index)) {
        this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
      } else {
        this.index = index;
      }
      return this;
    }
    /**
     * Sets the given indirect attribute to this geometry.
     *
     * @param {BufferAttribute} indirect - The attribute holding indirect draw calls.
     * @return {BufferGeometry} A reference to this instance.
     */
    setIndirect(indirect) {
      this.indirect = indirect;
      return this;
    }
    /**
     * Returns the indirect attribute of this geometry.
     *
     * @return {?BufferAttribute} The indirect attribute. Returns `null` if no indirect attribute is defined.
     */
    getIndirect() {
      return this.indirect;
    }
    /**
     * Returns the buffer attribute for the given name.
     *
     * @param {string} name - The attribute name.
     * @return {BufferAttribute|InterleavedBufferAttribute|undefined} The buffer attribute.
     * Returns `undefined` if not attribute has been found.
     */
    getAttribute(name2) {
      return this.attributes[name2];
    }
    /**
     * Sets the given attribute for the given name.
     *
     * @param {string} name - The attribute name.
     * @param {BufferAttribute|InterleavedBufferAttribute} attribute - The attribute to set.
     * @return {BufferGeometry} A reference to this instance.
     */
    setAttribute(name2, attribute2) {
      this.attributes[name2] = attribute2;
      return this;
    }
    /**
     * Deletes the attribute for the given name.
     *
     * @param {string} name - The attribute name to delete.
     * @return {BufferGeometry} A reference to this instance.
     */
    deleteAttribute(name2) {
      delete this.attributes[name2];
      return this;
    }
    /**
     * Returns `true` if this geometry has an attribute for the given name.
     *
     * @param {string} name - The attribute name.
     * @return {boolean} Whether this geometry has an attribute for the given name or not.
     */
    hasAttribute(name2) {
      return this.attributes[name2] !== void 0;
    }
    /**
     * Adds a group to this geometry.
     *
     * @param {number} start - The first element in this draw call. That is the first
     * vertex for non-indexed geometry, otherwise the first triangle index.
     * @param {number} count - Specifies how many vertices (or indices) are part of this group.
     * @param {number} [materialIndex=0] - The material array index to use.
     */
    addGroup(start, count, materialIndex = 0) {
      this.groups.push({
        start,
        count,
        materialIndex
      });
    }
    /**
     * Clears all groups.
     */
    clearGroups() {
      this.groups = [];
    }
    /**
     * Sets the draw range for this geometry.
     *
     * @param {number} start - The first vertex for non-indexed geometry, otherwise the first triangle index.
     * @param {number} count - For non-indexed BufferGeometry, `count` is the number of vertices to render.
     * For indexed BufferGeometry, `count` is the number of indices to render.
     */
    setDrawRange(start, count) {
      this.drawRange.start = start;
      this.drawRange.count = count;
    }
    /**
     * Applies the given 4x4 transformation matrix to the geometry.
     *
     * @param {Matrix4} matrix - The matrix to apply.
     * @return {BufferGeometry} A reference to this instance.
     */
    applyMatrix4(matrix) {
      const position = this.attributes.position;
      if (position !== void 0) {
        position.applyMatrix4(matrix);
        position.needsUpdate = true;
      }
      const normal2 = this.attributes.normal;
      if (normal2 !== void 0) {
        const normalMatrix = new Matrix3().getNormalMatrix(matrix);
        normal2.applyNormalMatrix(normalMatrix);
        normal2.needsUpdate = true;
      }
      const tangent = this.attributes.tangent;
      if (tangent !== void 0) {
        tangent.transformDirection(matrix);
        tangent.needsUpdate = true;
      }
      if (this.boundingBox !== null) {
        this.computeBoundingBox();
      }
      if (this.boundingSphere !== null) {
        this.computeBoundingSphere();
      }
      return this;
    }
    /**
     * Applies the rotation represented by the Quaternion to the geometry.
     *
     * @param {Quaternion} q - The Quaternion to apply.
     * @return {BufferGeometry} A reference to this instance.
     */
    applyQuaternion(q) {
      _m1.makeRotationFromQuaternion(q);
      this.applyMatrix4(_m1);
      return this;
    }
    /**
     * Rotates the geometry about the X axis. This is typically done as a one time
     * operation, and not during a loop. Use {@link Object3D#rotation} for typical
     * real-time mesh rotation.
     *
     * @param {number} angle - The angle in radians.
     * @return {BufferGeometry} A reference to this instance.
     */
    rotateX(angle) {
      _m1.makeRotationX(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    /**
     * Rotates the geometry about the Y axis. This is typically done as a one time
     * operation, and not during a loop. Use {@link Object3D#rotation} for typical
     * real-time mesh rotation.
     *
     * @param {number} angle - The angle in radians.
     * @return {BufferGeometry} A reference to this instance.
     */
    rotateY(angle) {
      _m1.makeRotationY(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    /**
     * Rotates the geometry about the Z axis. This is typically done as a one time
     * operation, and not during a loop. Use {@link Object3D#rotation} for typical
     * real-time mesh rotation.
     *
     * @param {number} angle - The angle in radians.
     * @return {BufferGeometry} A reference to this instance.
     */
    rotateZ(angle) {
      _m1.makeRotationZ(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    /**
     * Translates the geometry. This is typically done as a one time
     * operation, and not during a loop. Use {@link Object3D#position} for typical
     * real-time mesh rotation.
     *
     * @param {number} x - The x offset.
     * @param {number} y - The y offset.
     * @param {number} z - The z offset.
     * @return {BufferGeometry} A reference to this instance.
     */
    translate(x, y, z) {
      _m1.makeTranslation(x, y, z);
      this.applyMatrix4(_m1);
      return this;
    }
    /**
     * Scales the geometry. This is typically done as a one time
     * operation, and not during a loop. Use {@link Object3D#scale} for typical
     * real-time mesh rotation.
     *
     * @param {number} x - The x scale.
     * @param {number} y - The y scale.
     * @param {number} z - The z scale.
     * @return {BufferGeometry} A reference to this instance.
     */
    scale(x, y, z) {
      _m1.makeScale(x, y, z);
      this.applyMatrix4(_m1);
      return this;
    }
    /**
     * Rotates the geometry to face a point in 3D space. This is typically done as a one time
     * operation, and not during a loop. Use {@link Object3D#lookAt} for typical
     * real-time mesh rotation.
     *
     * @param {Vector3} vector - The target point.
     * @return {BufferGeometry} A reference to this instance.
     */
    lookAt(vector) {
      _obj.lookAt(vector);
      _obj.updateMatrix();
      this.applyMatrix4(_obj.matrix);
      return this;
    }
    /**
     * Center the geometry based on its bounding box.
     *
     * @return {BufferGeometry} A reference to this instance.
     */
    center() {
      this.computeBoundingBox();
      this.boundingBox.getCenter(_offset).negate();
      this.translate(_offset.x, _offset.y, _offset.z);
      return this;
    }
    /**
     * Defines a geometry by creating a `position` attribute based on the given array of points. The array
     * can hold 2D or 3D vectors. When using two-dimensional data, the `z` coordinate for all vertices is
     * set to `0`.
     *
     * If the method is used with an existing `position` attribute, the vertex data are overwritten with the
     * data from the array. The length of the array must match the vertex count.
     *
     * @param {Array<Vector2>|Array<Vector3>} points - The points.
     * @return {BufferGeometry} A reference to this instance.
     */
    setFromPoints(points) {
      const positionAttribute = this.getAttribute("position");
      if (positionAttribute === void 0) {
        const position = [];
        for (let i = 0, l = points.length; i < l; i++) {
          const point = points[i];
          position.push(point.x, point.y, point.z || 0);
        }
        this.setAttribute("position", new Float32BufferAttribute(position, 3));
      } else {
        const l = Math.min(points.length, positionAttribute.count);
        for (let i = 0; i < l; i++) {
          const point = points[i];
          positionAttribute.setXYZ(i, point.x, point.y, point.z || 0);
        }
        if (points.length > positionAttribute.count) {
          console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry.");
        }
        positionAttribute.needsUpdate = true;
      }
      return this;
    }
    /**
     * Computes the bounding box of the geometry, and updates the `boundingBox` member.
     * The bounding box is not computed by the engine; it must be computed by your app.
     * You may need to recompute the bounding box if the geometry vertices are modified.
     */
    computeBoundingBox() {
      if (this.boundingBox === null) {
        this.boundingBox = new Box3();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this);
        this.boundingBox.set(
          new Vector3(-Infinity, -Infinity, -Infinity),
          new Vector3(Infinity, Infinity, Infinity)
        );
        return;
      }
      if (position !== void 0) {
        this.boundingBox.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
            const morphAttribute = morphAttributesPosition[i];
            _box$2.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$8.addVectors(this.boundingBox.min, _box$2.min);
              this.boundingBox.expandByPoint(_vector$8);
              _vector$8.addVectors(this.boundingBox.max, _box$2.max);
              this.boundingBox.expandByPoint(_vector$8);
            } else {
              this.boundingBox.expandByPoint(_box$2.min);
              this.boundingBox.expandByPoint(_box$2.max);
            }
          }
        }
      } else {
        this.boundingBox.makeEmpty();
      }
      if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
        console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
      }
    }
    /**
     * Computes the bounding sphere of the geometry, and updates the `boundingSphere` member.
     * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.
     * You may need to recompute the bounding sphere if the geometry vertices are modified.
     */
    computeBoundingSphere() {
      if (this.boundingSphere === null) {
        this.boundingSphere = new Sphere();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this);
        this.boundingSphere.set(new Vector3(), Infinity);
        return;
      }
      if (position) {
        const center = this.boundingSphere.center;
        _box$2.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
            const morphAttribute = morphAttributesPosition[i];
            _boxMorphTargets.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$8.addVectors(_box$2.min, _boxMorphTargets.min);
              _box$2.expandByPoint(_vector$8);
              _vector$8.addVectors(_box$2.max, _boxMorphTargets.max);
              _box$2.expandByPoint(_vector$8);
            } else {
              _box$2.expandByPoint(_boxMorphTargets.min);
              _box$2.expandByPoint(_boxMorphTargets.max);
            }
          }
        }
        _box$2.getCenter(center);
        let maxRadiusSq = 0;
        for (let i = 0, il = position.count; i < il; i++) {
          _vector$8.fromBufferAttribute(position, i);
          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
        }
        if (morphAttributesPosition) {
          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
            const morphAttribute = morphAttributesPosition[i];
            const morphTargetsRelative = this.morphTargetsRelative;
            for (let j = 0, jl = morphAttribute.count; j < jl; j++) {
              _vector$8.fromBufferAttribute(morphAttribute, j);
              if (morphTargetsRelative) {
                _offset.fromBufferAttribute(position, j);
                _vector$8.add(_offset);
              }
              maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
            }
          }
        }
        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
        if (isNaN(this.boundingSphere.radius)) {
          console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
      }
    }
    /**
     * Calculates and adds a tangent attribute to this geometry.
     *
     * The computation is only supported for indexed geometries and if position, normal, and uv attributes
     * are defined. When using a tangent space normal map, prefer the MikkTSpace algorithm provided by
     * {@link BufferGeometryUtils#computeMikkTSpaceTangents} instead.
     */
    computeTangents() {
      const index = this.index;
      const attributes = this.attributes;
      if (index === null || attributes.position === void 0 || attributes.normal === void 0 || attributes.uv === void 0) {
        console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
        return;
      }
      const positionAttribute = attributes.position;
      const normalAttribute = attributes.normal;
      const uvAttribute = attributes.uv;
      if (this.hasAttribute("tangent") === false) {
        this.setAttribute("tangent", new BufferAttribute(new Float32Array(4 * positionAttribute.count), 4));
      }
      const tangentAttribute = this.getAttribute("tangent");
      const tan1 = [], tan2 = [];
      for (let i = 0; i < positionAttribute.count; i++) {
        tan1[i] = new Vector3();
        tan2[i] = new Vector3();
      }
      const vA = new Vector3(), vB = new Vector3(), vC = new Vector3(), uvA = new Vector2(), uvB = new Vector2(), uvC = new Vector2(), sdir = new Vector3(), tdir = new Vector3();
      function handleTriangle(a, b, c) {
        vA.fromBufferAttribute(positionAttribute, a);
        vB.fromBufferAttribute(positionAttribute, b);
        vC.fromBufferAttribute(positionAttribute, c);
        uvA.fromBufferAttribute(uvAttribute, a);
        uvB.fromBufferAttribute(uvAttribute, b);
        uvC.fromBufferAttribute(uvAttribute, c);
        vB.sub(vA);
        vC.sub(vA);
        uvB.sub(uvA);
        uvC.sub(uvA);
        const r = 1 / (uvB.x * uvC.y - uvC.x * uvB.y);
        if (!isFinite(r)) return;
        sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
        tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
        tan1[a].add(sdir);
        tan1[b].add(sdir);
        tan1[c].add(sdir);
        tan2[a].add(tdir);
        tan2[b].add(tdir);
        tan2[c].add(tdir);
      }
      let groups = this.groups;
      if (groups.length === 0) {
        groups = [{
          start: 0,
          count: index.count
        }];
      }
      for (let i = 0, il = groups.length; i < il; ++i) {
        const group = groups[i];
        const start = group.start;
        const count = group.count;
        for (let j = start, jl = start + count; j < jl; j += 3) {
          handleTriangle(
            index.getX(j + 0),
            index.getX(j + 1),
            index.getX(j + 2)
          );
        }
      }
      const tmp = new Vector3(), tmp2 = new Vector3();
      const n = new Vector3(), n2 = new Vector3();
      function handleVertex(v) {
        n.fromBufferAttribute(normalAttribute, v);
        n2.copy(n);
        const t2 = tan1[v];
        tmp.copy(t2);
        tmp.sub(n.multiplyScalar(n.dot(t2))).normalize();
        tmp2.crossVectors(n2, t2);
        const test = tmp2.dot(tan2[v]);
        const w = test < 0 ? -1 : 1;
        tangentAttribute.setXYZW(v, tmp.x, tmp.y, tmp.z, w);
      }
      for (let i = 0, il = groups.length; i < il; ++i) {
        const group = groups[i];
        const start = group.start;
        const count = group.count;
        for (let j = start, jl = start + count; j < jl; j += 3) {
          handleVertex(index.getX(j + 0));
          handleVertex(index.getX(j + 1));
          handleVertex(index.getX(j + 2));
        }
      }
    }
    /**
     * Computes vertex normals for the given vertex data. For indexed geometries, the method sets
     * each vertex normal to be the average of the face normals of the faces that share that vertex.
     * For non-indexed geometries, vertices are not shared, and the method sets each vertex normal
     * to be the same as the face normal.
     */
    computeVertexNormals() {
      const index = this.index;
      const positionAttribute = this.getAttribute("position");
      if (positionAttribute !== void 0) {
        let normalAttribute = this.getAttribute("normal");
        if (normalAttribute === void 0) {
          normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
          this.setAttribute("normal", normalAttribute);
        } else {
          for (let i = 0, il = normalAttribute.count; i < il; i++) {
            normalAttribute.setXYZ(i, 0, 0, 0);
          }
        }
        const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
        const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
        const cb = new Vector3(), ab = new Vector3();
        if (index) {
          for (let i = 0, il = index.count; i < il; i += 3) {
            const vA = index.getX(i + 0);
            const vB = index.getX(i + 1);
            const vC = index.getX(i + 2);
            pA.fromBufferAttribute(positionAttribute, vA);
            pB.fromBufferAttribute(positionAttribute, vB);
            pC.fromBufferAttribute(positionAttribute, vC);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            nA.fromBufferAttribute(normalAttribute, vA);
            nB.fromBufferAttribute(normalAttribute, vB);
            nC.fromBufferAttribute(normalAttribute, vC);
            nA.add(cb);
            nB.add(cb);
            nC.add(cb);
            normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
            normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
            normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
          }
        } else {
          for (let i = 0, il = positionAttribute.count; i < il; i += 3) {
            pA.fromBufferAttribute(positionAttribute, i + 0);
            pB.fromBufferAttribute(positionAttribute, i + 1);
            pC.fromBufferAttribute(positionAttribute, i + 2);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);
          }
        }
        this.normalizeNormals();
        normalAttribute.needsUpdate = true;
      }
    }
    /**
     * Ensures every normal vector in a geometry will have a magnitude of `1`. This will
     * correct lighting on the geometry surfaces.
     */
    normalizeNormals() {
      const normals = this.attributes.normal;
      for (let i = 0, il = normals.count; i < il; i++) {
        _vector$8.fromBufferAttribute(normals, i);
        _vector$8.normalize();
        normals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
      }
    }
    /**
     * Return a new non-index version of this indexed geometry. If the geometry
     * is already non-indexed, the method is a NOOP.
     *
     * @return {BufferGeometry} The non-indexed version of this indexed geometry.
     */
    toNonIndexed() {
      function convertBufferAttribute(attribute2, indices2) {
        const array2 = attribute2.array;
        const itemSize = attribute2.itemSize;
        const normalized = attribute2.normalized;
        const array22 = new array2.constructor(indices2.length * itemSize);
        let index = 0, index2 = 0;
        for (let i = 0, l = indices2.length; i < l; i++) {
          if (attribute2.isInterleavedBufferAttribute) {
            index = indices2[i] * attribute2.data.stride + attribute2.offset;
          } else {
            index = indices2[i] * itemSize;
          }
          for (let j = 0; j < itemSize; j++) {
            array22[index2++] = array2[index++];
          }
        }
        return new BufferAttribute(array22, itemSize, normalized);
      }
      if (this.index === null) {
        console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
        return this;
      }
      const geometry2 = new _BufferGeometry();
      const indices = this.index.array;
      const attributes = this.attributes;
      for (const name2 in attributes) {
        const attribute2 = attributes[name2];
        const newAttribute = convertBufferAttribute(attribute2, indices);
        geometry2.setAttribute(name2, newAttribute);
      }
      const morphAttributes = this.morphAttributes;
      for (const name2 in morphAttributes) {
        const morphArray = [];
        const morphAttribute = morphAttributes[name2];
        for (let i = 0, il = morphAttribute.length; i < il; i++) {
          const attribute2 = morphAttribute[i];
          const newAttribute = convertBufferAttribute(attribute2, indices);
          morphArray.push(newAttribute);
        }
        geometry2.morphAttributes[name2] = morphArray;
      }
      geometry2.morphTargetsRelative = this.morphTargetsRelative;
      const groups = this.groups;
      for (let i = 0, l = groups.length; i < l; i++) {
        const group = groups[i];
        geometry2.addGroup(group.start, group.count, group.materialIndex);
      }
      return geometry2;
    }
    /**
     * Serializes the geometry into JSON.
     *
     * @return {Object} A JSON object representing the serialized geometry.
     */
    toJSON() {
      const data = {
        metadata: {
          version: 4.7,
          type: "BufferGeometry",
          generator: "BufferGeometry.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "") data.name = this.name;
      if (Object.keys(this.userData).length > 0) data.userData = this.userData;
      if (this.parameters !== void 0) {
        const parameters = this.parameters;
        for (const key in parameters) {
          if (parameters[key] !== void 0) data[key] = parameters[key];
        }
        return data;
      }
      data.data = { attributes: {} };
      const index = this.index;
      if (index !== null) {
        data.data.index = {
          type: index.array.constructor.name,
          array: Array.prototype.slice.call(index.array)
        };
      }
      const attributes = this.attributes;
      for (const key in attributes) {
        const attribute2 = attributes[key];
        data.data.attributes[key] = attribute2.toJSON(data.data);
      }
      const morphAttributes = {};
      let hasMorphAttributes = false;
      for (const key in this.morphAttributes) {
        const attributeArray = this.morphAttributes[key];
        const array2 = [];
        for (let i = 0, il = attributeArray.length; i < il; i++) {
          const attribute2 = attributeArray[i];
          array2.push(attribute2.toJSON(data.data));
        }
        if (array2.length > 0) {
          morphAttributes[key] = array2;
          hasMorphAttributes = true;
        }
      }
      if (hasMorphAttributes) {
        data.data.morphAttributes = morphAttributes;
        data.data.morphTargetsRelative = this.morphTargetsRelative;
      }
      const groups = this.groups;
      if (groups.length > 0) {
        data.data.groups = JSON.parse(JSON.stringify(groups));
      }
      const boundingSphere = this.boundingSphere;
      if (boundingSphere !== null) {
        data.data.boundingSphere = boundingSphere.toJSON();
      }
      return data;
    }
    /**
     * Returns a new geometry with copied values from this instance.
     *
     * @return {BufferGeometry} A clone of this instance.
     */
    clone() {
      return new this.constructor().copy(this);
    }
    /**
     * Copies the values of the given geometry to this instance.
     *
     * @param {BufferGeometry} source - The geometry to copy.
     * @return {BufferGeometry} A reference to this instance.
     */
    copy(source) {
      this.index = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.groups = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      const data = {};
      this.name = source.name;
      const index = source.index;
      if (index !== null) {
        this.setIndex(index.clone());
      }
      const attributes = source.attributes;
      for (const name2 in attributes) {
        const attribute2 = attributes[name2];
        this.setAttribute(name2, attribute2.clone(data));
      }
      const morphAttributes = source.morphAttributes;
      for (const name2 in morphAttributes) {
        const array2 = [];
        const morphAttribute = morphAttributes[name2];
        for (let i = 0, l = morphAttribute.length; i < l; i++) {
          array2.push(morphAttribute[i].clone(data));
        }
        this.morphAttributes[name2] = array2;
      }
      this.morphTargetsRelative = source.morphTargetsRelative;
      const groups = source.groups;
      for (let i = 0, l = groups.length; i < l; i++) {
        const group = groups[i];
        this.addGroup(group.start, group.count, group.materialIndex);
      }
      const boundingBox = source.boundingBox;
      if (boundingBox !== null) {
        this.boundingBox = boundingBox.clone();
      }
      const boundingSphere = source.boundingSphere;
      if (boundingSphere !== null) {
        this.boundingSphere = boundingSphere.clone();
      }
      this.drawRange.start = source.drawRange.start;
      this.drawRange.count = source.drawRange.count;
      this.userData = source.userData;
      return this;
    }
    /**
     * Frees the GPU-related resources allocated by this instance. Call this
     * method whenever this instance is no longer used in your app.
     *
     * @fires BufferGeometry#dispose
     */
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
  };
  var _inverseMatrix$3 = /* @__PURE__ */ new Matrix4();
  var _ray$3 = /* @__PURE__ */ new Ray();
  var _sphere$6 = /* @__PURE__ */ new Sphere();
  var _sphereHitAt = /* @__PURE__ */ new Vector3();
  var _vA$1 = /* @__PURE__ */ new Vector3();
  var _vB$1 = /* @__PURE__ */ new Vector3();
  var _vC$1 = /* @__PURE__ */ new Vector3();
  var _tempA = /* @__PURE__ */ new Vector3();
  var _morphA = /* @__PURE__ */ new Vector3();
  var _intersectionPoint = /* @__PURE__ */ new Vector3();
  var _intersectionPointWorld = /* @__PURE__ */ new Vector3();
  var Mesh = class extends Object3D {
    /**
     * Constructs a new mesh.
     *
     * @param {BufferGeometry} [geometry] - The mesh geometry.
     * @param {Material|Array<Material>} [material] - The mesh material.
     */
    constructor(geometry = new BufferGeometry(), material2 = new MeshBasicMaterial()) {
      super();
      this.isMesh = true;
      this.type = "Mesh";
      this.geometry = geometry;
      this.material = material2;
      this.morphTargetDictionary = void 0;
      this.morphTargetInfluences = void 0;
      this.count = 1;
      this.updateMorphTargets();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      if (source.morphTargetInfluences !== void 0) {
        this.morphTargetInfluences = source.morphTargetInfluences.slice();
      }
      if (source.morphTargetDictionary !== void 0) {
        this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
      }
      this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
      this.geometry = source.geometry;
      return this;
    }
    /**
     * Sets the values of {@link Mesh#morphTargetDictionary} and {@link Mesh#morphTargetInfluences}
     * to make sure existing morph targets can influence this 3D object.
     */
    updateMorphTargets() {
      const geometry = this.geometry;
      const morphAttributes = geometry.morphAttributes;
      const keys2 = Object.keys(morphAttributes);
      if (keys2.length > 0) {
        const morphAttribute = morphAttributes[keys2[0]];
        if (morphAttribute !== void 0) {
          this.morphTargetInfluences = [];
          this.morphTargetDictionary = {};
          for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
            const name2 = morphAttribute[m].name || String(m);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[name2] = m;
          }
        }
      }
    }
    /**
     * Returns the local-space position of the vertex at the given index, taking into
     * account the current animation state of both morph targets and skinning.
     *
     * @param {number} index - The vertex index.
     * @param {Vector3} target - The target object that is used to store the method's result.
     * @return {Vector3} The vertex position in local space.
     */
    getVertexPosition(index, target) {
      const geometry = this.geometry;
      const position = geometry.attributes.position;
      const morphPosition = geometry.morphAttributes.position;
      const morphTargetsRelative = geometry.morphTargetsRelative;
      target.fromBufferAttribute(position, index);
      const morphInfluences = this.morphTargetInfluences;
      if (morphPosition && morphInfluences) {
        _morphA.set(0, 0, 0);
        for (let i = 0, il = morphPosition.length; i < il; i++) {
          const influence = morphInfluences[i];
          const morphAttribute = morphPosition[i];
          if (influence === 0) continue;
          _tempA.fromBufferAttribute(morphAttribute, index);
          if (morphTargetsRelative) {
            _morphA.addScaledVector(_tempA, influence);
          } else {
            _morphA.addScaledVector(_tempA.sub(target), influence);
          }
        }
        target.add(_morphA);
      }
      return target;
    }
    /**
     * Computes intersection points between a casted ray and this line.
     *
     * @param {Raycaster} raycaster - The raycaster.
     * @param {Array<Object>} intersects - The target array that holds the intersection points.
     */
    raycast(raycaster, intersects) {
      const geometry = this.geometry;
      const material2 = this.material;
      const matrixWorld = this.matrixWorld;
      if (material2 === void 0) return;
      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
      _sphere$6.copy(geometry.boundingSphere);
      _sphere$6.applyMatrix4(matrixWorld);
      _ray$3.copy(raycaster.ray).recast(raycaster.near);
      if (_sphere$6.containsPoint(_ray$3.origin) === false) {
        if (_ray$3.intersectSphere(_sphere$6, _sphereHitAt) === null) return;
        if (_ray$3.origin.distanceToSquared(_sphereHitAt) > (raycaster.far - raycaster.near) ** 2) return;
      }
      _inverseMatrix$3.copy(matrixWorld).invert();
      _ray$3.copy(raycaster.ray).applyMatrix4(_inverseMatrix$3);
      if (geometry.boundingBox !== null) {
        if (_ray$3.intersectsBox(geometry.boundingBox) === false) return;
      }
      this._computeIntersections(raycaster, intersects, _ray$3);
    }
    _computeIntersections(raycaster, intersects, rayLocalSpace) {
      let intersection;
      const geometry = this.geometry;
      const material2 = this.material;
      const index = geometry.index;
      const position = geometry.attributes.position;
      const uv2 = geometry.attributes.uv;
      const uv1 = geometry.attributes.uv1;
      const normal2 = geometry.attributes.normal;
      const groups = geometry.groups;
      const drawRange = geometry.drawRange;
      if (index !== null) {
        if (Array.isArray(material2)) {
          for (let i = 0, il = groups.length; i < il; i++) {
            const group = groups[i];
            const groupMaterial = material2[group.materialIndex];
            const start = Math.max(group.start, drawRange.start);
            const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
            for (let j = start, jl = end; j < jl; j += 3) {
              const a = index.getX(j);
              const b = index.getX(j + 1);
              const c = index.getX(j + 2);
              intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv2, uv1, normal2, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(j / 3);
                intersection.face.materialIndex = group.materialIndex;
                intersects.push(intersection);
              }
            }
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(index.count, drawRange.start + drawRange.count);
          for (let i = start, il = end; i < il; i += 3) {
            const a = index.getX(i);
            const b = index.getX(i + 1);
            const c = index.getX(i + 2);
            intersection = checkGeometryIntersection(this, material2, raycaster, rayLocalSpace, uv2, uv1, normal2, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(i / 3);
              intersects.push(intersection);
            }
          }
        }
      } else if (position !== void 0) {
        if (Array.isArray(material2)) {
          for (let i = 0, il = groups.length; i < il; i++) {
            const group = groups[i];
            const groupMaterial = material2[group.materialIndex];
            const start = Math.max(group.start, drawRange.start);
            const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
            for (let j = start, jl = end; j < jl; j += 3) {
              const a = j;
              const b = j + 1;
              const c = j + 2;
              intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv2, uv1, normal2, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(j / 3);
                intersection.face.materialIndex = group.materialIndex;
                intersects.push(intersection);
              }
            }
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(position.count, drawRange.start + drawRange.count);
          for (let i = start, il = end; i < il; i += 3) {
            const a = i;
            const b = i + 1;
            const c = i + 2;
            intersection = checkGeometryIntersection(this, material2, raycaster, rayLocalSpace, uv2, uv1, normal2, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(i / 3);
              intersects.push(intersection);
            }
          }
        }
      }
    }
  };
  function checkIntersection$1(object, material2, raycaster, ray, pA, pB, pC, point) {
    let intersect;
    if (material2.side === BackSide) {
      intersect = ray.intersectTriangle(pC, pB, pA, true, point);
    } else {
      intersect = ray.intersectTriangle(pA, pB, pC, material2.side === FrontSide, point);
    }
    if (intersect === null) return null;
    _intersectionPointWorld.copy(point);
    _intersectionPointWorld.applyMatrix4(object.matrixWorld);
    const distance2 = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
    if (distance2 < raycaster.near || distance2 > raycaster.far) return null;
    return {
      distance: distance2,
      point: _intersectionPointWorld.clone(),
      object
    };
  }
  function checkGeometryIntersection(object, material2, raycaster, ray, uv2, uv1, normal2, a, b, c) {
    object.getVertexPosition(a, _vA$1);
    object.getVertexPosition(b, _vB$1);
    object.getVertexPosition(c, _vC$1);
    const intersection = checkIntersection$1(object, material2, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);
    if (intersection) {
      const barycoord = new Vector3();
      Triangle.getBarycoord(_intersectionPoint, _vA$1, _vB$1, _vC$1, barycoord);
      if (uv2) {
        intersection.uv = Triangle.getInterpolatedAttribute(uv2, a, b, c, barycoord, new Vector2());
      }
      if (uv1) {
        intersection.uv1 = Triangle.getInterpolatedAttribute(uv1, a, b, c, barycoord, new Vector2());
      }
      if (normal2) {
        intersection.normal = Triangle.getInterpolatedAttribute(normal2, a, b, c, barycoord, new Vector3());
        if (intersection.normal.dot(ray.direction) > 0) {
          intersection.normal.multiplyScalar(-1);
        }
      }
      const face = {
        a,
        b,
        c,
        normal: new Vector3(),
        materialIndex: 0
      };
      Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
      intersection.face = face;
      intersection.barycoord = barycoord;
    }
    return intersection;
  }
  var BoxGeometry = class _BoxGeometry extends BufferGeometry {
    /**
     * Constructs a new box geometry.
     *
     * @param {number} [width=1] - The width. That is, the length of the edges parallel to the X axis.
     * @param {number} [height=1] - The height. That is, the length of the edges parallel to the Y axis.
     * @param {number} [depth=1] - The depth. That is, the length of the edges parallel to the Z axis.
     * @param {number} [widthSegments=1] - Number of segmented rectangular faces along the width of the sides.
     * @param {number} [heightSegments=1] - Number of segmented rectangular faces along the height of the sides.
     * @param {number} [depthSegments=1] - Number of segmented rectangular faces along the depth of the sides.
     */
    constructor(width = 1, height = 1, depth2 = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {
      super();
      this.type = "BoxGeometry";
      this.parameters = {
        width,
        height,
        depth: depth2,
        widthSegments,
        heightSegments,
        depthSegments
      };
      const scope = this;
      widthSegments = Math.floor(widthSegments);
      heightSegments = Math.floor(heightSegments);
      depthSegments = Math.floor(depthSegments);
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      let numberOfVertices = 0;
      let groupStart = 0;
      buildPlane("z", "y", "x", -1, -1, depth2, height, width, depthSegments, heightSegments, 0);
      buildPlane("z", "y", "x", 1, -1, depth2, height, -width, depthSegments, heightSegments, 1);
      buildPlane("x", "z", "y", 1, 1, width, depth2, height, widthSegments, depthSegments, 2);
      buildPlane("x", "z", "y", 1, -1, width, depth2, -height, widthSegments, depthSegments, 3);
      buildPlane("x", "y", "z", 1, -1, width, height, depth2, widthSegments, heightSegments, 4);
      buildPlane("x", "y", "z", -1, -1, width, height, -depth2, widthSegments, heightSegments, 5);
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
      function buildPlane(u, v, w, udir, vdir, width2, height2, depth3, gridX, gridY, materialIndex) {
        const segmentWidth = width2 / gridX;
        const segmentHeight = height2 / gridY;
        const widthHalf = width2 / 2;
        const heightHalf = height2 / 2;
        const depthHalf = depth3 / 2;
        const gridX1 = gridX + 1;
        const gridY1 = gridY + 1;
        let vertexCounter = 0;
        let groupCount = 0;
        const vector = new Vector3();
        for (let iy = 0; iy < gridY1; iy++) {
          const y = iy * segmentHeight - heightHalf;
          for (let ix = 0; ix < gridX1; ix++) {
            const x = ix * segmentWidth - widthHalf;
            vector[u] = x * udir;
            vector[v] = y * vdir;
            vector[w] = depthHalf;
            vertices.push(vector.x, vector.y, vector.z);
            vector[u] = 0;
            vector[v] = 0;
            vector[w] = depth3 > 0 ? 1 : -1;
            normals.push(vector.x, vector.y, vector.z);
            uvs.push(ix / gridX);
            uvs.push(1 - iy / gridY);
            vertexCounter += 1;
          }
        }
        for (let iy = 0; iy < gridY; iy++) {
          for (let ix = 0; ix < gridX; ix++) {
            const a = numberOfVertices + ix + gridX1 * iy;
            const b = numberOfVertices + ix + gridX1 * (iy + 1);
            const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
            const d = numberOfVertices + (ix + 1) + gridX1 * iy;
            indices.push(a, b, d);
            indices.push(b, c, d);
            groupCount += 6;
          }
        }
        scope.addGroup(groupStart, groupCount, materialIndex);
        groupStart += groupCount;
        numberOfVertices += vertexCounter;
      }
    }
    copy(source) {
      super.copy(source);
      this.parameters = Object.assign({}, source.parameters);
      return this;
    }
    /**
     * Factory method for creating an instance of this class from the given
     * JSON object.
     *
     * @param {Object} data - A JSON object representing the serialized geometry.
     * @return {BoxGeometry} A new instance.
     */
    static fromJSON(data) {
      return new _BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
    }
  };
  function cloneUniforms(src) {
    const dst = {};
    for (const u in src) {
      dst[u] = {};
      for (const p in src[u]) {
        const property2 = src[u][p];
        if (property2 && (property2.isColor || property2.isMatrix3 || property2.isMatrix4 || property2.isVector2 || property2.isVector3 || property2.isVector4 || property2.isTexture || property2.isQuaternion)) {
          if (property2.isRenderTargetTexture) {
            console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");
            dst[u][p] = null;
          } else {
            dst[u][p] = property2.clone();
          }
        } else if (Array.isArray(property2)) {
          dst[u][p] = property2.slice();
        } else {
          dst[u][p] = property2;
        }
      }
    }
    return dst;
  }
  function mergeUniforms(uniforms) {
    const merged = {};
    for (let u = 0; u < uniforms.length; u++) {
      const tmp = cloneUniforms(uniforms[u]);
      for (const p in tmp) {
        merged[p] = tmp[p];
      }
    }
    return merged;
  }
  function cloneUniformsGroups(src) {
    const dst = [];
    for (let u = 0; u < src.length; u++) {
      dst.push(src[u].clone());
    }
    return dst;
  }
  var default_vertex = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
  var default_fragment = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
  var ShaderMaterial = class extends Material {
    /**
     * Constructs a new shader material.
     *
     * @param {Object} [parameters] - An object with one or more properties
     * defining the material's appearance. Any property of the material
     * (including any property from inherited materials) can be passed
     * in here. Color values can be passed any type of value accepted
     * by {@link Color#set}.
     */
    constructor(parameters) {
      super();
      this.isShaderMaterial = true;
      this.type = "ShaderMaterial";
      this.defines = {};
      this.uniforms = {};
      this.uniformsGroups = [];
      this.vertexShader = default_vertex;
      this.fragmentShader = default_fragment;
      this.linewidth = 1;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.fog = false;
      this.lights = false;
      this.clipping = false;
      this.forceSinglePass = true;
      this.extensions = {
        clipCullDistance: false,
        // set to use vertex shader clipping
        multiDraw: false
        // set to use vertex shader multi_draw / enable gl_DrawID
      };
      this.defaultAttributeValues = {
        "color": [1, 1, 1],
        "uv": [0, 0],
        "uv1": [0, 0]
      };
      this.index0AttributeName = void 0;
      this.uniformsNeedUpdate = false;
      this.glslVersion = null;
      if (parameters !== void 0) {
        this.setValues(parameters);
      }
    }
    copy(source) {
      super.copy(source);
      this.fragmentShader = source.fragmentShader;
      this.vertexShader = source.vertexShader;
      this.uniforms = cloneUniforms(source.uniforms);
      this.uniformsGroups = cloneUniformsGroups(source.uniformsGroups);
      this.defines = Object.assign({}, source.defines);
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.fog = source.fog;
      this.lights = source.lights;
      this.clipping = source.clipping;
      this.extensions = Object.assign({}, source.extensions);
      this.glslVersion = source.glslVersion;
      return this;
    }
    toJSON(meta2) {
      const data = super.toJSON(meta2);
      data.glslVersion = this.glslVersion;
      data.uniforms = {};
      for (const name2 in this.uniforms) {
        const uniform2 = this.uniforms[name2];
        const value = uniform2.value;
        if (value && value.isTexture) {
          data.uniforms[name2] = {
            type: "t",
            value: value.toJSON(meta2).uuid
          };
        } else if (value && value.isColor) {
          data.uniforms[name2] = {
            type: "c",
            value: value.getHex()
          };
        } else if (value && value.isVector2) {
          data.uniforms[name2] = {
            type: "v2",
            value: value.toArray()
          };
        } else if (value && value.isVector3) {
          data.uniforms[name2] = {
            type: "v3",
            value: value.toArray()
          };
        } else if (value && value.isVector4) {
          data.uniforms[name2] = {
            type: "v4",
            value: value.toArray()
          };
        } else if (value && value.isMatrix3) {
          data.uniforms[name2] = {
            type: "m3",
            value: value.toArray()
          };
        } else if (value && value.isMatrix4) {
          data.uniforms[name2] = {
            type: "m4",
            value: value.toArray()
          };
        } else {
          data.uniforms[name2] = {
            value
          };
        }
      }
      if (Object.keys(this.defines).length > 0) data.defines = this.defines;
      data.vertexShader = this.vertexShader;
      data.fragmentShader = this.fragmentShader;
      data.lights = this.lights;
      data.clipping = this.clipping;
      const extensions = {};
      for (const key in this.extensions) {
        if (this.extensions[key] === true) extensions[key] = true;
      }
      if (Object.keys(extensions).length > 0) data.extensions = extensions;
      return data;
    }
  };
  var Camera = class extends Object3D {
    /**
     * Constructs a new camera.
     */
    constructor() {
      super();
      this.isCamera = true;
      this.type = "Camera";
      this.matrixWorldInverse = new Matrix4();
      this.projectionMatrix = new Matrix4();
      this.projectionMatrixInverse = new Matrix4();
      this.coordinateSystem = WebGLCoordinateSystem;
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.matrixWorldInverse.copy(source.matrixWorldInverse);
      this.projectionMatrix.copy(source.projectionMatrix);
      this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
      this.coordinateSystem = source.coordinateSystem;
      return this;
    }
    /**
     * Returns a vector representing the ("look") direction of the 3D object in world space.
     *
     * This method is overwritten since cameras have a different forward vector compared to other
     * 3D objects. A camera looks down its local, negative z-axis by default.
     *
     * @param {Vector3} target - The target vector the result is stored to.
     * @return {Vector3} The 3D object's direction in world space.
     */
    getWorldDirection(target) {
      return super.getWorldDirection(target).negate();
    }
    updateMatrixWorld(force) {
      super.updateMatrixWorld(force);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    updateWorldMatrix(updateParents, updateChildren) {
      super.updateWorldMatrix(updateParents, updateChildren);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var _v3$1 = /* @__PURE__ */ new Vector3();
  var _minTarget = /* @__PURE__ */ new Vector2();
  var _maxTarget = /* @__PURE__ */ new Vector2();
  var PerspectiveCamera = class extends Camera {
    /**
     * Constructs a new perspective camera.
     *
     * @param {number} [fov=50] - The vertical field of view.
     * @param {number} [aspect=1] - The aspect ratio.
     * @param {number} [near=0.1] - The camera's near plane.
     * @param {number} [far=2000] - The camera's far plane.
     */
    constructor(fov2 = 50, aspect2 = 1, near = 0.1, far = 2e3) {
      super();
      this.isPerspectiveCamera = true;
      this.type = "PerspectiveCamera";
      this.fov = fov2;
      this.zoom = 1;
      this.near = near;
      this.far = far;
      this.focus = 10;
      this.aspect = aspect2;
      this.view = null;
      this.filmGauge = 35;
      this.filmOffset = 0;
      this.updateProjectionMatrix();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.fov = source.fov;
      this.zoom = source.zoom;
      this.near = source.near;
      this.far = source.far;
      this.focus = source.focus;
      this.aspect = source.aspect;
      this.view = source.view === null ? null : Object.assign({}, source.view);
      this.filmGauge = source.filmGauge;
      this.filmOffset = source.filmOffset;
      return this;
    }
    /**
     * Sets the FOV by focal length in respect to the current {@link PerspectiveCamera#filmGauge}.
     *
     * The default film gauge is 35, so that the focal length can be specified for
     * a 35mm (full frame) camera.
     *
     * @param {number} focalLength - Values for focal length and film gauge must have the same unit.
     */
    setFocalLength(focalLength) {
      const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
      this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);
      this.updateProjectionMatrix();
    }
    /**
     * Returns the focal length from the current {@link PerspectiveCamera#fov} and
     * {@link PerspectiveCamera#filmGauge}.
     *
     * @return {number} The computed focal length.
     */
    getFocalLength() {
      const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);
      return 0.5 * this.getFilmHeight() / vExtentSlope;
    }
    /**
     * Returns the current vertical field of view angle in degrees considering {@link PerspectiveCamera#zoom}.
     *
     * @return {number} The effective FOV.
     */
    getEffectiveFOV() {
      return RAD2DEG * 2 * Math.atan(
        Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom
      );
    }
    /**
     * Returns the width of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or
     * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.
     *
     * @return {number} The film width.
     */
    getFilmWidth() {
      return this.filmGauge * Math.min(this.aspect, 1);
    }
    /**
     * Returns the height of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or
     * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.
     *
     * @return {number} The film width.
     */
    getFilmHeight() {
      return this.filmGauge / Math.max(this.aspect, 1);
    }
    /**
     * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.
     * Sets `minTarget` and `maxTarget` to the coordinates of the lower-left and upper-right corners of the view rectangle.
     *
     * @param {number} distance - The viewing distance.
     * @param {Vector2} minTarget - The lower-left corner of the view rectangle is written into this vector.
     * @param {Vector2} maxTarget - The upper-right corner of the view rectangle is written into this vector.
     */
    getViewBounds(distance2, minTarget, maxTarget) {
      _v3$1.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse);
      minTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance2 / _v3$1.z);
      _v3$1.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse);
      maxTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance2 / _v3$1.z);
    }
    /**
     * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.
     *
     * @param {number} distance - The viewing distance.
     * @param {Vector2} target - The target vector that is used to store result where x is width and y is height.
     * @returns {Vector2} The view size.
     */
    getViewSize(distance2, target) {
      this.getViewBounds(distance2, _minTarget, _maxTarget);
      return target.subVectors(_maxTarget, _minTarget);
    }
    /**
     * Sets an offset in a larger frustum. This is useful for multi-window or
     * multi-monitor/multi-machine setups.
     *
     * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
     * the monitors are in grid like this
     *```
     *   +---+---+---+
     *   | A | B | C |
     *   +---+---+---+
     *   | D | E | F |
     *   +---+---+---+
     *```
     * then for each monitor you would call it like this:
     *```js
     * const w = 1920;
     * const h = 1080;
     * const fullWidth = w * 3;
     * const fullHeight = h * 2;
     *
     * // --A--
     * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
     * // --B--
     * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
     * // --C--
     * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
     * // --D--
     * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
     * // --E--
     * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
     * // --F--
     * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
     * ```
     *
     * Note there is no reason monitors have to be the same size or in a grid.
     *
     * @param {number} fullWidth - The full width of multiview setup.
     * @param {number} fullHeight - The full height of multiview setup.
     * @param {number} x - The horizontal offset of the subcamera.
     * @param {number} y - The vertical offset of the subcamera.
     * @param {number} width - The width of subcamera.
     * @param {number} height - The height of subcamera.
     */
    setViewOffset(fullWidth, fullHeight, x, y, width, height) {
      this.aspect = fullWidth / fullHeight;
      if (this.view === null) {
        this.view = {
          enabled: true,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1
        };
      }
      this.view.enabled = true;
      this.view.fullWidth = fullWidth;
      this.view.fullHeight = fullHeight;
      this.view.offsetX = x;
      this.view.offsetY = y;
      this.view.width = width;
      this.view.height = height;
      this.updateProjectionMatrix();
    }
    /**
     * Removes the view offset from the projection matrix.
     */
    clearViewOffset() {
      if (this.view !== null) {
        this.view.enabled = false;
      }
      this.updateProjectionMatrix();
    }
    /**
     * Updates the camera's projection matrix. Must be called after any change of
     * camera properties.
     */
    updateProjectionMatrix() {
      const near = this.near;
      let top2 = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;
      let height = 2 * top2;
      let width = this.aspect * height;
      let left = -0.5 * width;
      const view = this.view;
      if (this.view !== null && this.view.enabled) {
        const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
        left += view.offsetX * width / fullWidth;
        top2 -= view.offsetY * height / fullHeight;
        width *= view.width / fullWidth;
        height *= view.height / fullHeight;
      }
      const skew = this.filmOffset;
      if (skew !== 0) left += near * skew / this.getFilmWidth();
      this.projectionMatrix.makePerspective(left, left + width, top2, top2 - height, near, this.far, this.coordinateSystem);
      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(meta2) {
      const data = super.toJSON(meta2);
      data.object.fov = this.fov;
      data.object.zoom = this.zoom;
      data.object.near = this.near;
      data.object.far = this.far;
      data.object.focus = this.focus;
      data.object.aspect = this.aspect;
      if (this.view !== null) data.object.view = Object.assign({}, this.view);
      data.object.filmGauge = this.filmGauge;
      data.object.filmOffset = this.filmOffset;
      return data;
    }
  };
  var fov = -90;
  var aspect = 1;
  var CubeCamera = class extends Object3D {
    /**
     * Constructs a new cube camera.
     *
     * @param {number} near - The camera's near plane.
     * @param {number} far - The camera's far plane.
     * @param {WebGLCubeRenderTarget} renderTarget - The cube render target.
     */
    constructor(near, far, renderTarget) {
      super();
      this.type = "CubeCamera";
      this.renderTarget = renderTarget;
      this.coordinateSystem = null;
      this.activeMipmapLevel = 0;
      const cameraPX = new PerspectiveCamera(fov, aspect, near, far);
      cameraPX.layers = this.layers;
      this.add(cameraPX);
      const cameraNX = new PerspectiveCamera(fov, aspect, near, far);
      cameraNX.layers = this.layers;
      this.add(cameraNX);
      const cameraPY = new PerspectiveCamera(fov, aspect, near, far);
      cameraPY.layers = this.layers;
      this.add(cameraPY);
      const cameraNY = new PerspectiveCamera(fov, aspect, near, far);
      cameraNY.layers = this.layers;
      this.add(cameraNY);
      const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
      cameraPZ.layers = this.layers;
      this.add(cameraPZ);
      const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
      cameraNZ.layers = this.layers;
      this.add(cameraNZ);
    }
    /**
     * Must be called when the coordinate system of the cube camera is changed.
     */
    updateCoordinateSystem() {
      const coordinateSystem = this.coordinateSystem;
      const cameras = this.children.concat();
      const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = cameras;
      for (const camera of cameras) this.remove(camera);
      if (coordinateSystem === WebGLCoordinateSystem) {
        cameraPX.up.set(0, 1, 0);
        cameraPX.lookAt(1, 0, 0);
        cameraNX.up.set(0, 1, 0);
        cameraNX.lookAt(-1, 0, 0);
        cameraPY.up.set(0, 0, -1);
        cameraPY.lookAt(0, 1, 0);
        cameraNY.up.set(0, 0, 1);
        cameraNY.lookAt(0, -1, 0);
        cameraPZ.up.set(0, 1, 0);
        cameraPZ.lookAt(0, 0, 1);
        cameraNZ.up.set(0, 1, 0);
        cameraNZ.lookAt(0, 0, -1);
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        cameraPX.up.set(0, -1, 0);
        cameraPX.lookAt(-1, 0, 0);
        cameraNX.up.set(0, -1, 0);
        cameraNX.lookAt(1, 0, 0);
        cameraPY.up.set(0, 0, 1);
        cameraPY.lookAt(0, 1, 0);
        cameraNY.up.set(0, 0, -1);
        cameraNY.lookAt(0, -1, 0);
        cameraPZ.up.set(0, -1, 0);
        cameraPZ.lookAt(0, 0, 1);
        cameraNZ.up.set(0, -1, 0);
        cameraNZ.lookAt(0, 0, -1);
      } else {
        throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + coordinateSystem);
      }
      for (const camera of cameras) {
        this.add(camera);
        camera.updateMatrixWorld();
      }
    }
    /**
     * Calling this method will render the given scene with the given renderer
     * into the cube render target of the camera.
     *
     * @param {(Renderer|WebGLRenderer)} renderer - The renderer.
     * @param {Scene} scene - The scene to render.
     */
    update(renderer, scene) {
      if (this.parent === null) this.updateMatrixWorld();
      const { renderTarget, activeMipmapLevel } = this;
      if (this.coordinateSystem !== renderer.coordinateSystem) {
        this.coordinateSystem = renderer.coordinateSystem;
        this.updateCoordinateSystem();
      }
      const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;
      const currentRenderTarget = renderer.getRenderTarget();
      const currentActiveCubeFace = renderer.getActiveCubeFace();
      const currentActiveMipmapLevel = renderer.getActiveMipmapLevel();
      const currentXrEnabled = renderer.xr.enabled;
      renderer.xr.enabled = false;
      const generateMipmaps = renderTarget.texture.generateMipmaps;
      renderTarget.texture.generateMipmaps = false;
      renderer.setRenderTarget(renderTarget, 0, activeMipmapLevel);
      renderer.render(scene, cameraPX);
      renderer.setRenderTarget(renderTarget, 1, activeMipmapLevel);
      renderer.render(scene, cameraNX);
      renderer.setRenderTarget(renderTarget, 2, activeMipmapLevel);
      renderer.render(scene, cameraPY);
      renderer.setRenderTarget(renderTarget, 3, activeMipmapLevel);
      renderer.render(scene, cameraNY);
      renderer.setRenderTarget(renderTarget, 4, activeMipmapLevel);
      renderer.render(scene, cameraPZ);
      renderTarget.texture.generateMipmaps = generateMipmaps;
      renderer.setRenderTarget(renderTarget, 5, activeMipmapLevel);
      renderer.render(scene, cameraNZ);
      renderer.setRenderTarget(currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel);
      renderer.xr.enabled = currentXrEnabled;
      renderTarget.texture.needsPMREMUpdate = true;
    }
  };
  var CubeTexture = class extends Texture {
    /**
     * Constructs a new cube texture.
     *
     * @param {Array<Image>} [images=[]] - An array holding a image for each side of a cube.
     * @param {number} [mapping=CubeReflectionMapping] - The texture mapping.
     * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
     * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
     * @param {number} [magFilter=LinearFilter] - The mag filter value.
     * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.
     * @param {number} [format=RGBAFormat] - The texture format.
     * @param {number} [type=UnsignedByteType] - The texture type.
     * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
     * @param {string} [colorSpace=NoColorSpace] - The color space value.
     */
    constructor(images = [], mapping = CubeReflectionMapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy2, colorSpace) {
      super(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy2, colorSpace);
      this.isCubeTexture = true;
      this.flipY = false;
    }
    /**
     * Alias for {@link CubeTexture#image}.
     *
     * @type {Array<Image>}
     */
    get images() {
      return this.image;
    }
    set images(value) {
      this.image = value;
    }
  };
  var WebGLCubeRenderTarget = class extends WebGLRenderTarget {
    /**
     * Constructs a new cube render target.
     *
     * @param {number} [size=1] - The size of the render target.
     * @param {RenderTarget~Options} [options] - The configuration object.
     */
    constructor(size = 1, options = {}) {
      super(size, size, options);
      this.isWebGLCubeRenderTarget = true;
      const image = { width: size, height: size, depth: 1 };
      const images = [image, image, image, image, image, image];
      this.texture = new CubeTexture(images);
      this._setTextureOptions(options);
      this.texture.isRenderTargetTexture = true;
    }
    /**
     * Converts the given equirectangular texture to a cube map.
     *
     * @param {WebGLRenderer} renderer - The renderer.
     * @param {Texture} texture - The equirectangular texture.
     * @return {WebGLCubeRenderTarget} A reference to this cube render target.
     */
    fromEquirectangularTexture(renderer, texture2) {
      this.texture.type = texture2.type;
      this.texture.colorSpace = texture2.colorSpace;
      this.texture.generateMipmaps = texture2.generateMipmaps;
      this.texture.minFilter = texture2.minFilter;
      this.texture.magFilter = texture2.magFilter;
      const shader = {
        uniforms: {
          tEquirect: { value: null }
        },
        vertexShader: (
          /* glsl */
          `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
        ),
        fragmentShader: (
          /* glsl */
          `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
        )
      };
      const geometry = new BoxGeometry(5, 5, 5);
      const material2 = new ShaderMaterial({
        name: "CubemapFromEquirect",
        uniforms: cloneUniforms(shader.uniforms),
        vertexShader: shader.vertexShader,
        fragmentShader: shader.fragmentShader,
        side: BackSide,
        blending: NoBlending
      });
      material2.uniforms.tEquirect.value = texture2;
      const mesh = new Mesh(geometry, material2);
      const currentMinFilter = texture2.minFilter;
      if (texture2.minFilter === LinearMipmapLinearFilter) texture2.minFilter = LinearFilter;
      const camera = new CubeCamera(1, 10, this);
      camera.update(renderer, mesh);
      texture2.minFilter = currentMinFilter;
      mesh.geometry.dispose();
      mesh.material.dispose();
      return this;
    }
    /**
     * Clears this cube render target.
     *
     * @param {WebGLRenderer} renderer - The renderer.
     * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.
     * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.
     * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.
     */
    clear(renderer, color2 = true, depth2 = true, stencil = true) {
      const currentRenderTarget = renderer.getRenderTarget();
      for (let i = 0; i < 6; i++) {
        renderer.setRenderTarget(this, i);
        renderer.clear(color2, depth2, stencil);
      }
      renderer.setRenderTarget(currentRenderTarget);
    }
  };
  var Group = class extends Object3D {
    constructor() {
      super();
      this.isGroup = true;
      this.type = "Group";
    }
  };
  var _moveEvent = { type: "move" };
  var WebXRController = class {
    /**
     * Constructs a new XR controller.
     */
    constructor() {
      this._targetRay = null;
      this._grip = null;
      this._hand = null;
    }
    /**
     * Returns a group representing the hand space of the XR controller.
     *
     * @return {Group} A group representing the hand space of the XR controller.
     */
    getHandSpace() {
      if (this._hand === null) {
        this._hand = new Group();
        this._hand.matrixAutoUpdate = false;
        this._hand.visible = false;
        this._hand.joints = {};
        this._hand.inputState = { pinching: false };
      }
      return this._hand;
    }
    /**
     * Returns a group representing the target ray space of the XR controller.
     *
     * @return {Group} A group representing the target ray space of the XR controller.
     */
    getTargetRaySpace() {
      if (this._targetRay === null) {
        this._targetRay = new Group();
        this._targetRay.matrixAutoUpdate = false;
        this._targetRay.visible = false;
        this._targetRay.hasLinearVelocity = false;
        this._targetRay.linearVelocity = new Vector3();
        this._targetRay.hasAngularVelocity = false;
        this._targetRay.angularVelocity = new Vector3();
      }
      return this._targetRay;
    }
    /**
     * Returns a group representing the grip space of the XR controller.
     *
     * @return {Group} A group representing the grip space of the XR controller.
     */
    getGripSpace() {
      if (this._grip === null) {
        this._grip = new Group();
        this._grip.matrixAutoUpdate = false;
        this._grip.visible = false;
        this._grip.hasLinearVelocity = false;
        this._grip.linearVelocity = new Vector3();
        this._grip.hasAngularVelocity = false;
        this._grip.angularVelocity = new Vector3();
      }
      return this._grip;
    }
    /**
     * Dispatches the given event to the groups representing
     * the different coordinate spaces of the XR controller.
     *
     * @param {Object} event - The event to dispatch.
     * @return {WebXRController} A reference to this instance.
     */
    dispatchEvent(event) {
      if (this._targetRay !== null) {
        this._targetRay.dispatchEvent(event);
      }
      if (this._grip !== null) {
        this._grip.dispatchEvent(event);
      }
      if (this._hand !== null) {
        this._hand.dispatchEvent(event);
      }
      return this;
    }
    /**
     * Connects the controller with the given XR input source.
     *
     * @param {XRInputSource} inputSource - The input source.
     * @return {WebXRController} A reference to this instance.
     */
    connect(inputSource) {
      if (inputSource && inputSource.hand) {
        const hand = this._hand;
        if (hand) {
          for (const inputjoint of inputSource.hand.values()) {
            this._getHandJoint(hand, inputjoint);
          }
        }
      }
      this.dispatchEvent({ type: "connected", data: inputSource });
      return this;
    }
    /**
     * Disconnects the controller from the given XR input source.
     *
     * @param {XRInputSource} inputSource - The input source.
     * @return {WebXRController} A reference to this instance.
     */
    disconnect(inputSource) {
      this.dispatchEvent({ type: "disconnected", data: inputSource });
      if (this._targetRay !== null) {
        this._targetRay.visible = false;
      }
      if (this._grip !== null) {
        this._grip.visible = false;
      }
      if (this._hand !== null) {
        this._hand.visible = false;
      }
      return this;
    }
    /**
     * Updates the controller with the given input source, XR frame and reference space.
     * This updates the transformations of the groups that represent the different
     * coordinate systems of the controller.
     *
     * @param {XRInputSource} inputSource - The input source.
     * @param {XRFrame} frame - The XR frame.
     * @param {XRReferenceSpace} referenceSpace - The reference space.
     * @return {WebXRController} A reference to this instance.
     */
    update(inputSource, frame, referenceSpace) {
      let inputPose = null;
      let gripPose = null;
      let handPose = null;
      const targetRay = this._targetRay;
      const grip = this._grip;
      const hand = this._hand;
      if (inputSource && frame.session.visibilityState !== "visible-blurred") {
        if (hand && inputSource.hand) {
          handPose = true;
          for (const inputjoint of inputSource.hand.values()) {
            const jointPose = frame.getJointPose(inputjoint, referenceSpace);
            const joint = this._getHandJoint(hand, inputjoint);
            if (jointPose !== null) {
              joint.matrix.fromArray(jointPose.transform.matrix);
              joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
              joint.matrixWorldNeedsUpdate = true;
              joint.jointRadius = jointPose.radius;
            }
            joint.visible = jointPose !== null;
          }
          const indexTip = hand.joints["index-finger-tip"];
          const thumbTip = hand.joints["thumb-tip"];
          const distance2 = indexTip.position.distanceTo(thumbTip.position);
          const distanceToPinch = 0.02;
          const threshold = 5e-3;
          if (hand.inputState.pinching && distance2 > distanceToPinch + threshold) {
            hand.inputState.pinching = false;
            this.dispatchEvent({
              type: "pinchend",
              handedness: inputSource.handedness,
              target: this
            });
          } else if (!hand.inputState.pinching && distance2 <= distanceToPinch - threshold) {
            hand.inputState.pinching = true;
            this.dispatchEvent({
              type: "pinchstart",
              handedness: inputSource.handedness,
              target: this
            });
          }
        } else {
          if (grip !== null && inputSource.gripSpace) {
            gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
            if (gripPose !== null) {
              grip.matrix.fromArray(gripPose.transform.matrix);
              grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
              grip.matrixWorldNeedsUpdate = true;
              if (gripPose.linearVelocity) {
                grip.hasLinearVelocity = true;
                grip.linearVelocity.copy(gripPose.linearVelocity);
              } else {
                grip.hasLinearVelocity = false;
              }
              if (gripPose.angularVelocity) {
                grip.hasAngularVelocity = true;
                grip.angularVelocity.copy(gripPose.angularVelocity);
              } else {
                grip.hasAngularVelocity = false;
              }
            }
          }
        }
        if (targetRay !== null) {
          inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
          if (inputPose === null && gripPose !== null) {
            inputPose = gripPose;
          }
          if (inputPose !== null) {
            targetRay.matrix.fromArray(inputPose.transform.matrix);
            targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
            targetRay.matrixWorldNeedsUpdate = true;
            if (inputPose.linearVelocity) {
              targetRay.hasLinearVelocity = true;
              targetRay.linearVelocity.copy(inputPose.linearVelocity);
            } else {
              targetRay.hasLinearVelocity = false;
            }
            if (inputPose.angularVelocity) {
              targetRay.hasAngularVelocity = true;
              targetRay.angularVelocity.copy(inputPose.angularVelocity);
            } else {
              targetRay.hasAngularVelocity = false;
            }
            this.dispatchEvent(_moveEvent);
          }
        }
      }
      if (targetRay !== null) {
        targetRay.visible = inputPose !== null;
      }
      if (grip !== null) {
        grip.visible = gripPose !== null;
      }
      if (hand !== null) {
        hand.visible = handPose !== null;
      }
      return this;
    }
    /**
     * Returns a group representing the hand joint for the given input joint.
     *
     * @private
     * @param {Group} hand - The group representing the hand space.
     * @param {XRJointSpace} inputjoint - The hand joint data.
     * @return {Group} A group representing the hand joint for the given input joint.
     */
    _getHandJoint(hand, inputjoint) {
      if (hand.joints[inputjoint.jointName] === void 0) {
        const joint = new Group();
        joint.matrixAutoUpdate = false;
        joint.visible = false;
        hand.joints[inputjoint.jointName] = joint;
        hand.add(joint);
      }
      return hand.joints[inputjoint.jointName];
    }
  };
  var Scene = class extends Object3D {
    /**
     * Constructs a new scene.
     */
    constructor() {
      super();
      this.isScene = true;
      this.type = "Scene";
      this.background = null;
      this.environment = null;
      this.fog = null;
      this.backgroundBlurriness = 0;
      this.backgroundIntensity = 1;
      this.backgroundRotation = new Euler();
      this.environmentIntensity = 1;
      this.environmentRotation = new Euler();
      this.overrideMaterial = null;
      if (typeof __THREE_DEVTOOLS__ !== "undefined") {
        __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
      }
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      if (source.background !== null) this.background = source.background.clone();
      if (source.environment !== null) this.environment = source.environment.clone();
      if (source.fog !== null) this.fog = source.fog.clone();
      this.backgroundBlurriness = source.backgroundBlurriness;
      this.backgroundIntensity = source.backgroundIntensity;
      this.backgroundRotation.copy(source.backgroundRotation);
      this.environmentIntensity = source.environmentIntensity;
      this.environmentRotation.copy(source.environmentRotation);
      if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      return this;
    }
    toJSON(meta2) {
      const data = super.toJSON(meta2);
      if (this.fog !== null) data.object.fog = this.fog.toJSON();
      if (this.backgroundBlurriness > 0) data.object.backgroundBlurriness = this.backgroundBlurriness;
      if (this.backgroundIntensity !== 1) data.object.backgroundIntensity = this.backgroundIntensity;
      data.object.backgroundRotation = this.backgroundRotation.toArray();
      if (this.environmentIntensity !== 1) data.object.environmentIntensity = this.environmentIntensity;
      data.object.environmentRotation = this.environmentRotation.toArray();
      return data;
    }
  };
  var InterleavedBuffer = class {
    /**
     * Constructs a new interleaved buffer.
     *
     * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.
     * @param {number} stride - The number of typed-array elements per vertex.
     */
    constructor(array2, stride) {
      this.isInterleavedBuffer = true;
      this.array = array2;
      this.stride = stride;
      this.count = array2 !== void 0 ? array2.length / stride : 0;
      this.usage = StaticDrawUsage;
      this.updateRanges = [];
      this.version = 0;
      this.uuid = generateUUID();
    }
    /**
     * A callback function that is executed after the renderer has transferred the attribute array
     * data to the GPU.
     */
    onUploadCallback() {
    }
    /**
     * Flag to indicate that this attribute has changed and should be re-sent to
     * the GPU. Set this to `true` when you modify the value of the array.
     *
     * @type {number}
     * @default false
     * @param {boolean} value
     */
    set needsUpdate(value) {
      if (value === true) this.version++;
    }
    /**
     * Sets the usage of this interleaved buffer.
     *
     * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.
     * @return {InterleavedBuffer} A reference to this interleaved buffer.
     */
    setUsage(value) {
      this.usage = value;
      return this;
    }
    /**
     * Adds a range of data in the data array to be updated on the GPU.
     *
     * @param {number} start - Position at which to start update.
     * @param {number} count - The number of components to update.
     */
    addUpdateRange(start, count) {
      this.updateRanges.push({ start, count });
    }
    /**
     * Clears the update ranges.
     */
    clearUpdateRanges() {
      this.updateRanges.length = 0;
    }
    /**
     * Copies the values of the given interleaved buffer to this instance.
     *
     * @param {InterleavedBuffer} source - The interleaved buffer to copy.
     * @return {InterleavedBuffer} A reference to this instance.
     */
    copy(source) {
      this.array = new source.array.constructor(source.array);
      this.count = source.count;
      this.stride = source.stride;
      this.usage = source.usage;
      return this;
    }
    /**
     * Copies a vector from the given interleaved buffer to this one. The start
     * and destination position in the attribute buffers are represented by the
     * given indices.
     *
     * @param {number} index1 - The destination index into this interleaved buffer.
     * @param {InterleavedBuffer} interleavedBuffer - The interleaved buffer to copy from.
     * @param {number} index2 - The source index into the given interleaved buffer.
     * @return {InterleavedBuffer} A reference to this instance.
     */
    copyAt(index1, interleavedBuffer, index2) {
      index1 *= this.stride;
      index2 *= interleavedBuffer.stride;
      for (let i = 0, l = this.stride; i < l; i++) {
        this.array[index1 + i] = interleavedBuffer.array[index2 + i];
      }
      return this;
    }
    /**
     * Sets the given array data in the interleaved buffer.
     *
     * @param {(TypedArray|Array)} value - The array data to set.
     * @param {number} [offset=0] - The offset in this interleaved buffer's array.
     * @return {InterleavedBuffer} A reference to this instance.
     */
    set(value, offset = 0) {
      this.array.set(value, offset);
      return this;
    }
    /**
     * Returns a new interleaved buffer with copied values from this instance.
     *
     * @param {Object} [data] - An object with shared array buffers that allows to retain shared structures.
     * @return {InterleavedBuffer} A clone of this instance.
     */
    clone(data) {
      if (data.arrayBuffers === void 0) {
        data.arrayBuffers = {};
      }
      if (this.array.buffer._uuid === void 0) {
        this.array.buffer._uuid = generateUUID();
      }
      if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
        data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
      }
      const array2 = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
      const ib = new this.constructor(array2, this.stride);
      ib.setUsage(this.usage);
      return ib;
    }
    /**
     * Sets the given callback function that is executed after the Renderer has transferred
     * the array data to the GPU. Can be used to perform clean-up operations after
     * the upload when data are not needed anymore on the CPU side.
     *
     * @param {Function} callback - The `onUpload()` callback.
     * @return {InterleavedBuffer} A reference to this instance.
     */
    onUpload(callback) {
      this.onUploadCallback = callback;
      return this;
    }
    /**
     * Serializes the interleaved buffer into JSON.
     *
     * @param {Object} [data] - An optional value holding meta information about the serialization.
     * @return {Object} A JSON object representing the serialized interleaved buffer.
     */
    toJSON(data) {
      if (data.arrayBuffers === void 0) {
        data.arrayBuffers = {};
      }
      if (this.array.buffer._uuid === void 0) {
        this.array.buffer._uuid = generateUUID();
      }
      if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
        data.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer));
      }
      return {
        uuid: this.uuid,
        buffer: this.array.buffer._uuid,
        type: this.array.constructor.name,
        stride: this.stride
      };
    }
  };
  var _vector$7 = /* @__PURE__ */ new Vector3();
  var InterleavedBufferAttribute = class _InterleavedBufferAttribute {
    /**
     * Constructs a new interleaved buffer attribute.
     *
     * @param {InterleavedBuffer} interleavedBuffer - The buffer holding the interleaved data.
     * @param {number} itemSize - The item size.
     * @param {number} offset - The attribute offset into the buffer.
     * @param {boolean} [normalized=false] - Whether the data are normalized or not.
     */
    constructor(interleavedBuffer, itemSize, offset, normalized = false) {
      this.isInterleavedBufferAttribute = true;
      this.name = "";
      this.data = interleavedBuffer;
      this.itemSize = itemSize;
      this.offset = offset;
      this.normalized = normalized;
    }
    /**
     * The item count of this buffer attribute.
     *
     * @type {number}
     * @readonly
     */
    get count() {
      return this.data.count;
    }
    /**
     * The array holding the interleaved buffer attribute data.
     *
     * @type {TypedArray}
     */
    get array() {
      return this.data.array;
    }
    /**
     * Flag to indicate that this attribute has changed and should be re-sent to
     * the GPU. Set this to `true` when you modify the value of the array.
     *
     * @type {number}
     * @default false
     * @param {boolean} value
     */
    set needsUpdate(value) {
      this.data.needsUpdate = value;
    }
    /**
     * Applies the given 4x4 matrix to the given attribute. Only works with
     * item size `3`.
     *
     * @param {Matrix4} m - The matrix to apply.
     * @return {InterleavedBufferAttribute} A reference to this instance.
     */
    applyMatrix4(m) {
      for (let i = 0, l = this.data.count; i < l; i++) {
        _vector$7.fromBufferAttribute(this, i);
        _vector$7.applyMatrix4(m);
        this.setXYZ(i, _vector$7.x, _vector$7.y, _vector$7.z);
      }
      return this;
    }
    /**
     * Applies the given 3x3 normal matrix to the given attribute. Only works with
     * item size `3`.
     *
     * @param {Matrix3} m - The normal matrix to apply.
     * @return {InterleavedBufferAttribute} A reference to this instance.
     */
    applyNormalMatrix(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$7.fromBufferAttribute(this, i);
        _vector$7.applyNormalMatrix(m);
        this.setXYZ(i, _vector$7.x, _vector$7.y, _vector$7.z);
      }
      return this;
    }
    /**
     * Applies the given 4x4 matrix to the given attribute. Only works with
     * item size `3` and with direction vectors.
     *
     * @param {Matrix4} m - The matrix to apply.
     * @return {InterleavedBufferAttribute} A reference to this instance.
     */
    transformDirection(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$7.fromBufferAttribute(this, i);
        _vector$7.transformDirection(m);
        this.setXYZ(i, _vector$7.x, _vector$7.y, _vector$7.z);
      }
      return this;
    }
    /**
     * Returns the given component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @param {number} component - The component index.
     * @return {number} The returned value.
     */
    getComponent(index, component) {
      let value = this.array[index * this.data.stride + this.offset + component];
      if (this.normalized) value = denormalize(value, this.array);
      return value;
    }
    /**
     * Sets the given value to the given component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @param {number} component - The component index.
     * @param {number} value - The value to set.
     * @return {InterleavedBufferAttribute} A reference to this instance.
     */
    setComponent(index, component, value) {
      if (this.normalized) value = normalize(value, this.array);
      this.data.array[index * this.data.stride + this.offset + component] = value;
      return this;
    }
    /**
     * Sets the x component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @param {number} x - The value to set.
     * @return {InterleavedBufferAttribute} A reference to this instance.
     */
    setX(index, x) {
      if (this.normalized) x = normalize(x, this.array);
      this.data.array[index * this.data.stride + this.offset] = x;
      return this;
    }
    /**
     * Sets the y component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @param {number} y - The value to set.
     * @return {InterleavedBufferAttribute} A reference to this instance.
     */
    setY(index, y) {
      if (this.normalized) y = normalize(y, this.array);
      this.data.array[index * this.data.stride + this.offset + 1] = y;
      return this;
    }
    /**
     * Sets the z component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @param {number} z - The value to set.
     * @return {InterleavedBufferAttribute} A reference to this instance.
     */
    setZ(index, z) {
      if (this.normalized) z = normalize(z, this.array);
      this.data.array[index * this.data.stride + this.offset + 2] = z;
      return this;
    }
    /**
     * Sets the w component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @param {number} w - The value to set.
     * @return {InterleavedBufferAttribute} A reference to this instance.
     */
    setW(index, w) {
      if (this.normalized) w = normalize(w, this.array);
      this.data.array[index * this.data.stride + this.offset + 3] = w;
      return this;
    }
    /**
     * Returns the x component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @return {number} The x component.
     */
    getX(index) {
      let x = this.data.array[index * this.data.stride + this.offset];
      if (this.normalized) x = denormalize(x, this.array);
      return x;
    }
    /**
     * Returns the y component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @return {number} The y component.
     */
    getY(index) {
      let y = this.data.array[index * this.data.stride + this.offset + 1];
      if (this.normalized) y = denormalize(y, this.array);
      return y;
    }
    /**
     * Returns the z component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @return {number} The z component.
     */
    getZ(index) {
      let z = this.data.array[index * this.data.stride + this.offset + 2];
      if (this.normalized) z = denormalize(z, this.array);
      return z;
    }
    /**
     * Returns the w component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @return {number} The w component.
     */
    getW(index) {
      let w = this.data.array[index * this.data.stride + this.offset + 3];
      if (this.normalized) w = denormalize(w, this.array);
      return w;
    }
    /**
     * Sets the x and y component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @param {number} x - The value for the x component to set.
     * @param {number} y - The value for the y component to set.
     * @return {InterleavedBufferAttribute} A reference to this instance.
     */
    setXY(index, x, y) {
      index = index * this.data.stride + this.offset;
      if (this.normalized) {
        x = normalize(x, this.array);
        y = normalize(y, this.array);
      }
      this.data.array[index + 0] = x;
      this.data.array[index + 1] = y;
      return this;
    }
    /**
     * Sets the x, y and z component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @param {number} x - The value for the x component to set.
     * @param {number} y - The value for the y component to set.
     * @param {number} z - The value for the z component to set.
     * @return {InterleavedBufferAttribute} A reference to this instance.
     */
    setXYZ(index, x, y, z) {
      index = index * this.data.stride + this.offset;
      if (this.normalized) {
        x = normalize(x, this.array);
        y = normalize(y, this.array);
        z = normalize(z, this.array);
      }
      this.data.array[index + 0] = x;
      this.data.array[index + 1] = y;
      this.data.array[index + 2] = z;
      return this;
    }
    /**
     * Sets the x, y, z and w component of the vector at the given index.
     *
     * @param {number} index - The index into the buffer attribute.
     * @param {number} x - The value for the x component to set.
     * @param {number} y - The value for the y component to set.
     * @param {number} z - The value for the z component to set.
     * @param {number} w - The value for the w component to set.
     * @return {InterleavedBufferAttribute} A reference to this instance.
     */
    setXYZW(index, x, y, z, w) {
      index = index * this.data.stride + this.offset;
      if (this.normalized) {
        x = normalize(x, this.array);
        y = normalize(y, this.array);
        z = normalize(z, this.array);
        w = normalize(w, this.array);
      }
      this.data.array[index + 0] = x;
      this.data.array[index + 1] = y;
      this.data.array[index + 2] = z;
      this.data.array[index + 3] = w;
      return this;
    }
    /**
     * Returns a new buffer attribute with copied values from this instance.
     *
     * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.
     *
     * @param {Object} [data] - An object with interleaved buffers that allows to retain the interleaved property.
     * @return {BufferAttribute|InterleavedBufferAttribute} A clone of this instance.
     */
    clone(data) {
      if (data === void 0) {
        console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
        const array2 = [];
        for (let i = 0; i < this.count; i++) {
          const index = i * this.data.stride + this.offset;
          for (let j = 0; j < this.itemSize; j++) {
            array2.push(this.data.array[index + j]);
          }
        }
        return new BufferAttribute(new this.array.constructor(array2), this.itemSize, this.normalized);
      } else {
        if (data.interleavedBuffers === void 0) {
          data.interleavedBuffers = {};
        }
        if (data.interleavedBuffers[this.data.uuid] === void 0) {
          data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
        }
        return new _InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
      }
    }
    /**
     * Serializes the buffer attribute into JSON.
     *
     * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.
     *
     * @param {Object} [data] - An optional value holding meta information about the serialization.
     * @return {Object} A JSON object representing the serialized buffer attribute.
     */
    toJSON(data) {
      if (data === void 0) {
        console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
        const array2 = [];
        for (let i = 0; i < this.count; i++) {
          const index = i * this.data.stride + this.offset;
          for (let j = 0; j < this.itemSize; j++) {
            array2.push(this.data.array[index + j]);
          }
        }
        return {
          itemSize: this.itemSize,
          type: this.array.constructor.name,
          array: array2,
          normalized: this.normalized
        };
      } else {
        if (data.interleavedBuffers === void 0) {
          data.interleavedBuffers = {};
        }
        if (data.interleavedBuffers[this.data.uuid] === void 0) {
          data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
        }
        return {
          isInterleavedBufferAttribute: true,
          itemSize: this.itemSize,
          data: this.data.uuid,
          offset: this.offset,
          normalized: this.normalized
        };
      }
    }
  };
  var SpriteMaterial = class extends Material {
    /**
     * Constructs a new sprite material.
     *
     * @param {Object} [parameters] - An object with one or more properties
     * defining the material's appearance. Any property of the material
     * (including any property from inherited materials) can be passed
     * in here. Color values can be passed any type of value accepted
     * by {@link Color#set}.
     */
    constructor(parameters) {
      super();
      this.isSpriteMaterial = true;
      this.type = "SpriteMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.alphaMap = null;
      this.rotation = 0;
      this.sizeAttenuation = true;
      this.transparent = true;
      this.fog = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.alphaMap = source.alphaMap;
      this.rotation = source.rotation;
      this.sizeAttenuation = source.sizeAttenuation;
      this.fog = source.fog;
      return this;
    }
  };
  var DataTexture = class extends Texture {
    /**
     * Constructs a new data texture.
     *
     * @param {?TypedArray} [data=null] - The buffer data.
     * @param {number} [width=1] - The width of the texture.
     * @param {number} [height=1] - The height of the texture.
     * @param {number} [format=RGBAFormat] - The texture format.
     * @param {number} [type=UnsignedByteType] - The texture type.
     * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
     * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
     * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
     * @param {number} [magFilter=NearestFilter] - The mag filter value.
     * @param {number} [minFilter=NearestFilter] - The min filter value.
     * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
     * @param {string} [colorSpace=NoColorSpace] - The color space.
     */
    constructor(data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy2, colorSpace) {
      super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy2, colorSpace);
      this.isDataTexture = true;
      this.image = { data, width, height };
      this.generateMipmaps = false;
      this.flipY = false;
      this.unpackAlignment = 1;
    }
  };
  var InstancedBufferAttribute = class extends BufferAttribute {
    /**
     * Constructs a new instanced buffer attribute.
     *
     * @param {TypedArray} array - The array holding the attribute data.
     * @param {number} itemSize - The item size.
     * @param {boolean} [normalized=false] - Whether the data are normalized or not.
     * @param {number} [meshPerAttribute=1] - How often a value of this buffer attribute should be repeated.
     */
    constructor(array2, itemSize, normalized, meshPerAttribute = 1) {
      super(array2, itemSize, normalized);
      this.isInstancedBufferAttribute = true;
      this.meshPerAttribute = meshPerAttribute;
    }
    copy(source) {
      super.copy(source);
      this.meshPerAttribute = source.meshPerAttribute;
      return this;
    }
    toJSON() {
      const data = super.toJSON();
      data.meshPerAttribute = this.meshPerAttribute;
      data.isInstancedBufferAttribute = true;
      return data;
    }
  };
  var _vector1 = /* @__PURE__ */ new Vector3();
  var _vector2 = /* @__PURE__ */ new Vector3();
  var _normalMatrix = /* @__PURE__ */ new Matrix3();
  var Plane = class {
    /**
     * Constructs a new plane.
     *
     * @param {Vector3} [normal=(1,0,0)] - A unit length vector defining the normal of the plane.
     * @param {number} [constant=0] - The signed distance from the origin to the plane.
     */
    constructor(normal2 = new Vector3(1, 0, 0), constant = 0) {
      this.isPlane = true;
      this.normal = normal2;
      this.constant = constant;
    }
    /**
     * Sets the plane components by copying the given values.
     *
     * @param {Vector3} normal - The normal.
     * @param {number} constant - The constant.
     * @return {Plane} A reference to this plane.
     */
    set(normal2, constant) {
      this.normal.copy(normal2);
      this.constant = constant;
      return this;
    }
    /**
     * Sets the plane components by defining `x`, `y`, `z` as the
     * plane normal and `w` as the constant.
     *
     * @param {number} x - The value for the normal's x component.
     * @param {number} y - The value for the normal's y component.
     * @param {number} z - The value for the normal's z component.
     * @param {number} w - The constant value.
     * @return {Plane} A reference to this plane.
     */
    setComponents(x, y, z, w) {
      this.normal.set(x, y, z);
      this.constant = w;
      return this;
    }
    /**
     * Sets the plane from the given normal and coplanar point (that is a point
     * that lies onto the plane).
     *
     * @param {Vector3} normal - The normal.
     * @param {Vector3} point - A coplanar point.
     * @return {Plane} A reference to this plane.
     */
    setFromNormalAndCoplanarPoint(normal2, point) {
      this.normal.copy(normal2);
      this.constant = -point.dot(this.normal);
      return this;
    }
    /**
     * Sets the plane from three coplanar points. The winding order is
     * assumed to be counter-clockwise, and determines the direction of
     * the plane normal.
     *
     * @param {Vector3} a - The first coplanar point.
     * @param {Vector3} b - The second coplanar point.
     * @param {Vector3} c - The third coplanar point.
     * @return {Plane} A reference to this plane.
     */
    setFromCoplanarPoints(a, b, c) {
      const normal2 = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize();
      this.setFromNormalAndCoplanarPoint(normal2, a);
      return this;
    }
    /**
     * Copies the values of the given plane to this instance.
     *
     * @param {Plane} plane - The plane to copy.
     * @return {Plane} A reference to this plane.
     */
    copy(plane) {
      this.normal.copy(plane.normal);
      this.constant = plane.constant;
      return this;
    }
    /**
     * Normalizes the plane normal and adjusts the constant accordingly.
     *
     * @return {Plane} A reference to this plane.
     */
    normalize() {
      const inverseNormalLength = 1 / this.normal.length();
      this.normal.multiplyScalar(inverseNormalLength);
      this.constant *= inverseNormalLength;
      return this;
    }
    /**
     * Negates both the plane normal and the constant.
     *
     * @return {Plane} A reference to this plane.
     */
    negate() {
      this.constant *= -1;
      this.normal.negate();
      return this;
    }
    /**
     * Returns the signed distance from the given point to this plane.
     *
     * @param {Vector3} point - The point to compute the distance for.
     * @return {number} The signed distance.
     */
    distanceToPoint(point) {
      return this.normal.dot(point) + this.constant;
    }
    /**
     * Returns the signed distance from the given sphere to this plane.
     *
     * @param {Sphere} sphere - The sphere to compute the distance for.
     * @return {number} The signed distance.
     */
    distanceToSphere(sphere2) {
      return this.distanceToPoint(sphere2.center) - sphere2.radius;
    }
    /**
     * Projects a the given point onto the plane.
     *
     * @param {Vector3} point - The point to project.
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {Vector3} The projected point on the plane.
     */
    projectPoint(point, target) {
      return target.copy(point).addScaledVector(this.normal, -this.distanceToPoint(point));
    }
    /**
     * Returns the intersection point of the passed line and the plane. Returns
     * `null` if the line does not intersect. Returns the line's starting point if
     * the line is coplanar with the plane.
     *
     * @param {Line3} line - The line to compute the intersection for.
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {?Vector3} The intersection point.
     */
    intersectLine(line, target) {
      const direction = line.delta(_vector1);
      const denominator = this.normal.dot(direction);
      if (denominator === 0) {
        if (this.distanceToPoint(line.start) === 0) {
          return target.copy(line.start);
        }
        return null;
      }
      const t2 = -(line.start.dot(this.normal) + this.constant) / denominator;
      if (t2 < 0 || t2 > 1) {
        return null;
      }
      return target.copy(line.start).addScaledVector(direction, t2);
    }
    /**
     * Returns `true` if the given line segment intersects with (passes through) the plane.
     *
     * @param {Line3} line - The line to test.
     * @return {boolean} Whether the given line segment intersects with the plane or not.
     */
    intersectsLine(line) {
      const startSign = this.distanceToPoint(line.start);
      const endSign = this.distanceToPoint(line.end);
      return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
    }
    /**
     * Returns `true` if the given bounding box intersects with the plane.
     *
     * @param {Box3} box - The bounding box to test.
     * @return {boolean} Whether the given bounding box intersects with the plane or not.
     */
    intersectsBox(box2) {
      return box2.intersectsPlane(this);
    }
    /**
     * Returns `true` if the given bounding sphere intersects with the plane.
     *
     * @param {Sphere} sphere - The bounding sphere to test.
     * @return {boolean} Whether the given bounding sphere intersects with the plane or not.
     */
    intersectsSphere(sphere2) {
      return sphere2.intersectsPlane(this);
    }
    /**
     * Returns a coplanar vector to the plane, by calculating the
     * projection of the normal at the origin onto the plane.
     *
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {Vector3} The coplanar point.
     */
    coplanarPoint(target) {
      return target.copy(this.normal).multiplyScalar(-this.constant);
    }
    /**
     * Apply a 4x4 matrix to the plane. The matrix must be an affine, homogeneous transform.
     *
     * The optional normal matrix can be pre-computed like so:
     * ```js
     * const optionalNormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );
     * ```
     *
     * @param {Matrix4} matrix - The transformation matrix.
     * @param {Matrix4} [optionalNormalMatrix] - A pre-computed normal matrix.
     * @return {Plane} A reference to this plane.
     */
    applyMatrix4(matrix, optionalNormalMatrix) {
      const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);
      const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
      const normal2 = this.normal.applyMatrix3(normalMatrix).normalize();
      this.constant = -referencePoint.dot(normal2);
      return this;
    }
    /**
     * Translates the plane by the distance defined by the given offset vector.
     * Note that this only affects the plane constant and will not affect the normal vector.
     *
     * @param {Vector3} offset - The offset vector.
     * @return {Plane} A reference to this plane.
     */
    translate(offset) {
      this.constant -= offset.dot(this.normal);
      return this;
    }
    /**
     * Returns `true` if this plane is equal with the given one.
     *
     * @param {Plane} plane - The plane to test for equality.
     * @return {boolean} Whether this plane is equal with the given one.
     */
    equals(plane) {
      return plane.normal.equals(this.normal) && plane.constant === this.constant;
    }
    /**
     * Returns a new plane with copied values from this instance.
     *
     * @return {Plane} A clone of this instance.
     */
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var _sphere$3 = /* @__PURE__ */ new Sphere();
  var _vector$6 = /* @__PURE__ */ new Vector3();
  var Frustum = class {
    /**
     * Constructs a new frustum.
     *
     * @param {Plane} [p0] - The first plane that encloses the frustum.
     * @param {Plane} [p1] - The second plane that encloses the frustum.
     * @param {Plane} [p2] - The third plane that encloses the frustum.
     * @param {Plane} [p3] - The fourth plane that encloses the frustum.
     * @param {Plane} [p4] - The fifth plane that encloses the frustum.
     * @param {Plane} [p5] - The sixth plane that encloses the frustum.
     */
    constructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {
      this.planes = [p0, p1, p2, p3, p4, p5];
    }
    /**
     * Sets the frustum planes by copying the given planes.
     *
     * @param {Plane} [p0] - The first plane that encloses the frustum.
     * @param {Plane} [p1] - The second plane that encloses the frustum.
     * @param {Plane} [p2] - The third plane that encloses the frustum.
     * @param {Plane} [p3] - The fourth plane that encloses the frustum.
     * @param {Plane} [p4] - The fifth plane that encloses the frustum.
     * @param {Plane} [p5] - The sixth plane that encloses the frustum.
     * @return {Frustum} A reference to this frustum.
     */
    set(p0, p1, p2, p3, p4, p5) {
      const planes = this.planes;
      planes[0].copy(p0);
      planes[1].copy(p1);
      planes[2].copy(p2);
      planes[3].copy(p3);
      planes[4].copy(p4);
      planes[5].copy(p5);
      return this;
    }
    /**
     * Copies the values of the given frustum to this instance.
     *
     * @param {Frustum} frustum - The frustum to copy.
     * @return {Frustum} A reference to this frustum.
     */
    copy(frustum) {
      const planes = this.planes;
      for (let i = 0; i < 6; i++) {
        planes[i].copy(frustum.planes[i]);
      }
      return this;
    }
    /**
     * Sets the frustum planes from the given projection matrix.
     *
     * @param {Matrix4} m - The projection matrix.
     * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} coordinateSystem - The coordinate system.
     * @return {Frustum} A reference to this frustum.
     */
    setFromProjectionMatrix(m, coordinateSystem = WebGLCoordinateSystem) {
      const planes = this.planes;
      const me = m.elements;
      const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
      const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
      const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
      const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
      planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
      planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
      planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
      planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
      planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
      if (coordinateSystem === WebGLCoordinateSystem) {
        planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        planes[5].setComponents(me2, me6, me10, me14).normalize();
      } else {
        throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + coordinateSystem);
      }
      return this;
    }
    /**
     * Returns `true` if the 3D object's bounding sphere is intersecting this frustum.
     *
     * Note that the 3D object must have a geometry so that the bounding sphere can be calculated.
     *
     * @param {Object3D} object - The 3D object to test.
     * @return {boolean} Whether the 3D object's bounding sphere is intersecting this frustum or not.
     */
    intersectsObject(object) {
      if (object.boundingSphere !== void 0) {
        if (object.boundingSphere === null) object.computeBoundingSphere();
        _sphere$3.copy(object.boundingSphere).applyMatrix4(object.matrixWorld);
      } else {
        const geometry = object.geometry;
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        _sphere$3.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
      }
      return this.intersectsSphere(_sphere$3);
    }
    /**
     * Returns `true` if the given sprite is intersecting this frustum.
     *
     * @param {Sprite} sprite - The sprite to test.
     * @return {boolean} Whether the sprite is intersecting this frustum or not.
     */
    intersectsSprite(sprite) {
      _sphere$3.center.set(0, 0, 0);
      _sphere$3.radius = 0.7071067811865476;
      _sphere$3.applyMatrix4(sprite.matrixWorld);
      return this.intersectsSphere(_sphere$3);
    }
    /**
     * Returns `true` if the given bounding sphere is intersecting this frustum.
     *
     * @param {Sphere} sphere - The bounding sphere to test.
     * @return {boolean} Whether the bounding sphere is intersecting this frustum or not.
     */
    intersectsSphere(sphere2) {
      const planes = this.planes;
      const center = sphere2.center;
      const negRadius = -sphere2.radius;
      for (let i = 0; i < 6; i++) {
        const distance2 = planes[i].distanceToPoint(center);
        if (distance2 < negRadius) {
          return false;
        }
      }
      return true;
    }
    /**
     * Returns `true` if the given bounding box is intersecting this frustum.
     *
     * @param {Box3} box - The bounding box to test.
     * @return {boolean} Whether the bounding box is intersecting this frustum or not.
     */
    intersectsBox(box2) {
      const planes = this.planes;
      for (let i = 0; i < 6; i++) {
        const plane = planes[i];
        _vector$6.x = plane.normal.x > 0 ? box2.max.x : box2.min.x;
        _vector$6.y = plane.normal.y > 0 ? box2.max.y : box2.min.y;
        _vector$6.z = plane.normal.z > 0 ? box2.max.z : box2.min.z;
        if (plane.distanceToPoint(_vector$6) < 0) {
          return false;
        }
      }
      return true;
    }
    /**
     * Returns `true` if the given point lies within the frustum.
     *
     * @param {Vector3} point - The point to test.
     * @return {boolean} Whether the point lies within this frustum or not.
     */
    containsPoint(point) {
      const planes = this.planes;
      for (let i = 0; i < 6; i++) {
        if (planes[i].distanceToPoint(point) < 0) {
          return false;
        }
      }
      return true;
    }
    /**
     * Returns a new frustum with copied values from this instance.
     *
     * @return {Frustum} A clone of this instance.
     */
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var _projScreenMatrix$2 = /* @__PURE__ */ new Matrix4();
  var _frustum$1 = /* @__PURE__ */ new Frustum();
  var FrustumArray = class _FrustumArray {
    /**
     * Constructs a new frustum array.
     *
     */
    constructor() {
      this.coordinateSystem = WebGLCoordinateSystem;
    }
    /**
     * Returns `true` if the 3D object's bounding sphere is intersecting any frustum
     * from the camera array.
     *
     * @param {Object3D} object - The 3D object to test.
     * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
     * @return {boolean} Whether the 3D object is visible in any camera.
     */
    intersectsObject(object, cameraArray) {
      if (!cameraArray.isArrayCamera || cameraArray.cameras.length === 0) {
        return false;
      }
      for (let i = 0; i < cameraArray.cameras.length; i++) {
        const camera = cameraArray.cameras[i];
        _projScreenMatrix$2.multiplyMatrices(
          camera.projectionMatrix,
          camera.matrixWorldInverse
        );
        _frustum$1.setFromProjectionMatrix(
          _projScreenMatrix$2,
          this.coordinateSystem
        );
        if (_frustum$1.intersectsObject(object)) {
          return true;
        }
      }
      return false;
    }
    /**
     * Returns `true` if the given sprite is intersecting any frustum
     * from the camera array.
     *
     * @param {Sprite} sprite - The sprite to test.
     * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
     * @return {boolean} Whether the sprite is visible in any camera.
     */
    intersectsSprite(sprite, cameraArray) {
      if (!cameraArray || !cameraArray.cameras || cameraArray.cameras.length === 0) {
        return false;
      }
      for (let i = 0; i < cameraArray.cameras.length; i++) {
        const camera = cameraArray.cameras[i];
        _projScreenMatrix$2.multiplyMatrices(
          camera.projectionMatrix,
          camera.matrixWorldInverse
        );
        _frustum$1.setFromProjectionMatrix(
          _projScreenMatrix$2,
          this.coordinateSystem
        );
        if (_frustum$1.intersectsSprite(sprite)) {
          return true;
        }
      }
      return false;
    }
    /**
     * Returns `true` if the given bounding sphere is intersecting any frustum
     * from the camera array.
     *
     * @param {Sphere} sphere - The bounding sphere to test.
     * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
     * @return {boolean} Whether the sphere is visible in any camera.
     */
    intersectsSphere(sphere2, cameraArray) {
      if (!cameraArray || !cameraArray.cameras || cameraArray.cameras.length === 0) {
        return false;
      }
      for (let i = 0; i < cameraArray.cameras.length; i++) {
        const camera = cameraArray.cameras[i];
        _projScreenMatrix$2.multiplyMatrices(
          camera.projectionMatrix,
          camera.matrixWorldInverse
        );
        _frustum$1.setFromProjectionMatrix(
          _projScreenMatrix$2,
          this.coordinateSystem
        );
        if (_frustum$1.intersectsSphere(sphere2)) {
          return true;
        }
      }
      return false;
    }
    /**
     * Returns `true` if the given bounding box is intersecting any frustum
     * from the camera array.
     *
     * @param {Box3} box - The bounding box to test.
     * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
     * @return {boolean} Whether the box is visible in any camera.
     */
    intersectsBox(box2, cameraArray) {
      if (!cameraArray || !cameraArray.cameras || cameraArray.cameras.length === 0) {
        return false;
      }
      for (let i = 0; i < cameraArray.cameras.length; i++) {
        const camera = cameraArray.cameras[i];
        _projScreenMatrix$2.multiplyMatrices(
          camera.projectionMatrix,
          camera.matrixWorldInverse
        );
        _frustum$1.setFromProjectionMatrix(
          _projScreenMatrix$2,
          this.coordinateSystem
        );
        if (_frustum$1.intersectsBox(box2)) {
          return true;
        }
      }
      return false;
    }
    /**
     * Returns `true` if the given point lies within any frustum
     * from the camera array.
     *
     * @param {Vector3} point - The point to test.
     * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
     * @return {boolean} Whether the point is visible in any camera.
     */
    containsPoint(point, cameraArray) {
      if (!cameraArray || !cameraArray.cameras || cameraArray.cameras.length === 0) {
        return false;
      }
      for (let i = 0; i < cameraArray.cameras.length; i++) {
        const camera = cameraArray.cameras[i];
        _projScreenMatrix$2.multiplyMatrices(
          camera.projectionMatrix,
          camera.matrixWorldInverse
        );
        _frustum$1.setFromProjectionMatrix(
          _projScreenMatrix$2,
          this.coordinateSystem
        );
        if (_frustum$1.containsPoint(point)) {
          return true;
        }
      }
      return false;
    }
    /**
     * Returns a new frustum array with copied values from this instance.
     *
     * @return {FrustumArray} A clone of this instance.
     */
    clone() {
      return new _FrustumArray();
    }
  };
  var LineBasicMaterial = class extends Material {
    /**
     * Constructs a new line basic material.
     *
     * @param {Object} [parameters] - An object with one or more properties
     * defining the material's appearance. Any property of the material
     * (including any property from inherited materials) can be passed
     * in here. Color values can be passed any type of value accepted
     * by {@link Color#set}.
     */
    constructor(parameters) {
      super();
      this.isLineBasicMaterial = true;
      this.type = "LineBasicMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.linewidth = 1;
      this.linecap = "round";
      this.linejoin = "round";
      this.fog = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.linewidth = source.linewidth;
      this.linecap = source.linecap;
      this.linejoin = source.linejoin;
      this.fog = source.fog;
      return this;
    }
  };
  var PointsMaterial = class extends Material {
    /**
     * Constructs a new points material.
     *
     * @param {Object} [parameters] - An object with one or more properties
     * defining the material's appearance. Any property of the material
     * (including any property from inherited materials) can be passed
     * in here. Color values can be passed any type of value accepted
     * by {@link Color#set}.
     */
    constructor(parameters) {
      super();
      this.isPointsMaterial = true;
      this.type = "PointsMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.alphaMap = null;
      this.size = 1;
      this.sizeAttenuation = true;
      this.fog = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.alphaMap = source.alphaMap;
      this.size = source.size;
      this.sizeAttenuation = source.sizeAttenuation;
      this.fog = source.fog;
      return this;
    }
  };
  var FramebufferTexture = class extends Texture {
    /**
     * Constructs a new framebuffer texture.
     *
     * @param {number} width - The width of the texture.
     * @param {number} height - The height of the texture.
     */
    constructor(width, height) {
      super({ width, height });
      this.isFramebufferTexture = true;
      this.magFilter = NearestFilter;
      this.minFilter = NearestFilter;
      this.generateMipmaps = false;
      this.needsUpdate = true;
    }
  };
  var DepthTexture = class extends Texture {
    /**
     * Constructs a new depth texture.
     *
     * @param {number} width - The width of the texture.
     * @param {number} height - The height of the texture.
     * @param {number} [type=UnsignedIntType] - The texture type.
     * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
     * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
     * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
     * @param {number} [magFilter=LinearFilter] - The mag filter value.
     * @param {number} [minFilter=LinearFilter] - The min filter value.
     * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
     * @param {number} [format=DepthFormat] - The texture format.
     * @param {number} [depth=1] - The depth of the texture.
     */
    constructor(width, height, type = UnsignedIntType, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy2, format = DepthFormat, depth2 = 1) {
      if (format !== DepthFormat && format !== DepthStencilFormat) {
        throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
      }
      const image = { width, height, depth: depth2 };
      super(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy2);
      this.isDepthTexture = true;
      this.flipY = false;
      this.generateMipmaps = false;
      this.compareFunction = null;
    }
    copy(source) {
      super.copy(source);
      this.source = new Source(Object.assign({}, source.image));
      this.compareFunction = source.compareFunction;
      return this;
    }
    toJSON(meta2) {
      const data = super.toJSON(meta2);
      if (this.compareFunction !== null) data.compareFunction = this.compareFunction;
      return data;
    }
  };
  var CylinderGeometry = class _CylinderGeometry extends BufferGeometry {
    /**
     * Constructs a new cylinder geometry.
     *
     * @param {number} [radiusTop=1] - Radius of the cylinder at the top.
     * @param {number} [radiusBottom=1] - Radius of the cylinder at the bottom.
     * @param {number} [height=1] - Height of the cylinder.
     * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cylinder.
     * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cylinder.
     * @param {boolean} [openEnded=false] - Whether the base of the cylinder is open or capped.
     * @param {number} [thetaStart=0] - Start angle for first segment, in radians.
     * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.
     * The default value results in a complete cylinder.
     */
    constructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
      super();
      this.type = "CylinderGeometry";
      this.parameters = {
        radiusTop,
        radiusBottom,
        height,
        radialSegments,
        heightSegments,
        openEnded,
        thetaStart,
        thetaLength
      };
      const scope = this;
      radialSegments = Math.floor(radialSegments);
      heightSegments = Math.floor(heightSegments);
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      let index = 0;
      const indexArray = [];
      const halfHeight = height / 2;
      let groupStart = 0;
      generateTorso();
      if (openEnded === false) {
        if (radiusTop > 0) generateCap(true);
        if (radiusBottom > 0) generateCap(false);
      }
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
      function generateTorso() {
        const normal2 = new Vector3();
        const vertex = new Vector3();
        let groupCount = 0;
        const slope = (radiusBottom - radiusTop) / height;
        for (let y = 0; y <= heightSegments; y++) {
          const indexRow = [];
          const v = y / heightSegments;
          const radius = v * (radiusBottom - radiusTop) + radiusTop;
          for (let x = 0; x <= radialSegments; x++) {
            const u = x / radialSegments;
            const theta = u * thetaLength + thetaStart;
            const sinTheta = Math.sin(theta);
            const cosTheta = Math.cos(theta);
            vertex.x = radius * sinTheta;
            vertex.y = -v * height + halfHeight;
            vertex.z = radius * cosTheta;
            vertices.push(vertex.x, vertex.y, vertex.z);
            normal2.set(sinTheta, slope, cosTheta).normalize();
            normals.push(normal2.x, normal2.y, normal2.z);
            uvs.push(u, 1 - v);
            indexRow.push(index++);
          }
          indexArray.push(indexRow);
        }
        for (let x = 0; x < radialSegments; x++) {
          for (let y = 0; y < heightSegments; y++) {
            const a = indexArray[y][x];
            const b = indexArray[y + 1][x];
            const c = indexArray[y + 1][x + 1];
            const d = indexArray[y][x + 1];
            if (radiusTop > 0 || y !== 0) {
              indices.push(a, b, d);
              groupCount += 3;
            }
            if (radiusBottom > 0 || y !== heightSegments - 1) {
              indices.push(b, c, d);
              groupCount += 3;
            }
          }
        }
        scope.addGroup(groupStart, groupCount, 0);
        groupStart += groupCount;
      }
      function generateCap(top2) {
        const centerIndexStart = index;
        const uv2 = new Vector2();
        const vertex = new Vector3();
        let groupCount = 0;
        const radius = top2 === true ? radiusTop : radiusBottom;
        const sign2 = top2 === true ? 1 : -1;
        for (let x = 1; x <= radialSegments; x++) {
          vertices.push(0, halfHeight * sign2, 0);
          normals.push(0, sign2, 0);
          uvs.push(0.5, 0.5);
          index++;
        }
        const centerIndexEnd = index;
        for (let x = 0; x <= radialSegments; x++) {
          const u = x / radialSegments;
          const theta = u * thetaLength + thetaStart;
          const cosTheta = Math.cos(theta);
          const sinTheta = Math.sin(theta);
          vertex.x = radius * sinTheta;
          vertex.y = halfHeight * sign2;
          vertex.z = radius * cosTheta;
          vertices.push(vertex.x, vertex.y, vertex.z);
          normals.push(0, sign2, 0);
          uv2.x = cosTheta * 0.5 + 0.5;
          uv2.y = sinTheta * 0.5 * sign2 + 0.5;
          uvs.push(uv2.x, uv2.y);
          index++;
        }
        for (let x = 0; x < radialSegments; x++) {
          const c = centerIndexStart + x;
          const i = centerIndexEnd + x;
          if (top2 === true) {
            indices.push(i, i + 1, c);
          } else {
            indices.push(i + 1, i, c);
          }
          groupCount += 3;
        }
        scope.addGroup(groupStart, groupCount, top2 === true ? 1 : 2);
        groupStart += groupCount;
      }
    }
    copy(source) {
      super.copy(source);
      this.parameters = Object.assign({}, source.parameters);
      return this;
    }
    /**
     * Factory method for creating an instance of this class from the given
     * JSON object.
     *
     * @param {Object} data - A JSON object representing the serialized geometry.
     * @return {CylinderGeometry} A new instance.
     */
    static fromJSON(data) {
      return new _CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
    }
  };
  var PlaneGeometry = class _PlaneGeometry extends BufferGeometry {
    /**
     * Constructs a new plane geometry.
     *
     * @param {number} [width=1] - The width along the X axis.
     * @param {number} [height=1] - The height along the Y axis
     * @param {number} [widthSegments=1] - The number of segments along the X axis.
     * @param {number} [heightSegments=1] - The number of segments along the Y axis.
     */
    constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
      super();
      this.type = "PlaneGeometry";
      this.parameters = {
        width,
        height,
        widthSegments,
        heightSegments
      };
      const width_half = width / 2;
      const height_half = height / 2;
      const gridX = Math.floor(widthSegments);
      const gridY = Math.floor(heightSegments);
      const gridX1 = gridX + 1;
      const gridY1 = gridY + 1;
      const segment_width = width / gridX;
      const segment_height = height / gridY;
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      for (let iy = 0; iy < gridY1; iy++) {
        const y = iy * segment_height - height_half;
        for (let ix = 0; ix < gridX1; ix++) {
          const x = ix * segment_width - width_half;
          vertices.push(x, -y, 0);
          normals.push(0, 0, 1);
          uvs.push(ix / gridX);
          uvs.push(1 - iy / gridY);
        }
      }
      for (let iy = 0; iy < gridY; iy++) {
        for (let ix = 0; ix < gridX; ix++) {
          const a = ix + gridX1 * iy;
          const b = ix + gridX1 * (iy + 1);
          const c = ix + 1 + gridX1 * (iy + 1);
          const d = ix + 1 + gridX1 * iy;
          indices.push(a, b, d);
          indices.push(b, c, d);
        }
      }
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    }
    copy(source) {
      super.copy(source);
      this.parameters = Object.assign({}, source.parameters);
      return this;
    }
    /**
     * Factory method for creating an instance of this class from the given
     * JSON object.
     *
     * @param {Object} data - A JSON object representing the serialized geometry.
     * @return {PlaneGeometry} A new instance.
     */
    static fromJSON(data) {
      return new _PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
    }
  };
  var SphereGeometry = class _SphereGeometry extends BufferGeometry {
    /**
     * Constructs a new sphere geometry.
     *
     * @param {number} [radius=1] - The sphere radius.
     * @param {number} [widthSegments=32] - The number of horizontal segments. Minimum value is `3`.
     * @param {number} [heightSegments=16] - The number of vertical segments. Minimum value is `2`.
     * @param {number} [phiStart=0] - The horizontal starting angle in radians.
     * @param {number} [phiLength=Math.PI*2] - The horizontal sweep angle size.
     * @param {number} [thetaStart=0] - The vertical starting angle in radians.
     * @param {number} [thetaLength=Math.PI] - The vertical sweep angle size.
     */
    constructor(radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {
      super();
      this.type = "SphereGeometry";
      this.parameters = {
        radius,
        widthSegments,
        heightSegments,
        phiStart,
        phiLength,
        thetaStart,
        thetaLength
      };
      widthSegments = Math.max(3, Math.floor(widthSegments));
      heightSegments = Math.max(2, Math.floor(heightSegments));
      const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);
      let index = 0;
      const grid = [];
      const vertex = new Vector3();
      const normal2 = new Vector3();
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      for (let iy = 0; iy <= heightSegments; iy++) {
        const verticesRow = [];
        const v = iy / heightSegments;
        let uOffset = 0;
        if (iy === 0 && thetaStart === 0) {
          uOffset = 0.5 / widthSegments;
        } else if (iy === heightSegments && thetaEnd === Math.PI) {
          uOffset = -0.5 / widthSegments;
        }
        for (let ix = 0; ix <= widthSegments; ix++) {
          const u = ix / widthSegments;
          vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
          vertex.y = radius * Math.cos(thetaStart + v * thetaLength);
          vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
          vertices.push(vertex.x, vertex.y, vertex.z);
          normal2.copy(vertex).normalize();
          normals.push(normal2.x, normal2.y, normal2.z);
          uvs.push(u + uOffset, 1 - v);
          verticesRow.push(index++);
        }
        grid.push(verticesRow);
      }
      for (let iy = 0; iy < heightSegments; iy++) {
        for (let ix = 0; ix < widthSegments; ix++) {
          const a = grid[iy][ix + 1];
          const b = grid[iy][ix];
          const c = grid[iy + 1][ix];
          const d = grid[iy + 1][ix + 1];
          if (iy !== 0 || thetaStart > 0) indices.push(a, b, d);
          if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);
        }
      }
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    }
    copy(source) {
      super.copy(source);
      this.parameters = Object.assign({}, source.parameters);
      return this;
    }
    /**
     * Factory method for creating an instance of this class from the given
     * JSON object.
     *
     * @param {Object} data - A JSON object representing the serialized geometry.
     * @return {SphereGeometry} A new instance.
     */
    static fromJSON(data) {
      return new _SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
    }
  };
  var ShadowMaterial = class extends Material {
    /**
     * Constructs a new shadow material.
     *
     * @param {Object} [parameters] - An object with one or more properties
     * defining the material's appearance. Any property of the material
     * (including any property from inherited materials) can be passed
     * in here. Color values can be passed any type of value accepted
     * by {@link Color#set}.
     */
    constructor(parameters) {
      super();
      this.isShadowMaterial = true;
      this.type = "ShadowMaterial";
      this.color = new Color(0);
      this.transparent = true;
      this.fog = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.fog = source.fog;
      return this;
    }
  };
  var MeshStandardMaterial = class extends Material {
    /**
     * Constructs a new mesh standard material.
     *
     * @param {Object} [parameters] - An object with one or more properties
     * defining the material's appearance. Any property of the material
     * (including any property from inherited materials) can be passed
     * in here. Color values can be passed any type of value accepted
     * by {@link Color#set}.
     */
    constructor(parameters) {
      super();
      this.isMeshStandardMaterial = true;
      this.type = "MeshStandardMaterial";
      this.defines = { "STANDARD": "" };
      this.color = new Color(16777215);
      this.roughness = 1;
      this.metalness = 0;
      this.map = null;
      this.lightMap = null;
      this.lightMapIntensity = 1;
      this.aoMap = null;
      this.aoMapIntensity = 1;
      this.emissive = new Color(0);
      this.emissiveIntensity = 1;
      this.emissiveMap = null;
      this.bumpMap = null;
      this.bumpScale = 1;
      this.normalMap = null;
      this.normalMapType = TangentSpaceNormalMap;
      this.normalScale = new Vector2(1, 1);
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.roughnessMap = null;
      this.metalnessMap = null;
      this.alphaMap = null;
      this.envMap = null;
      this.envMapRotation = new Euler();
      this.envMapIntensity = 1;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.wireframeLinecap = "round";
      this.wireframeLinejoin = "round";
      this.flatShading = false;
      this.fog = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.defines = { "STANDARD": "" };
      this.color.copy(source.color);
      this.roughness = source.roughness;
      this.metalness = source.metalness;
      this.map = source.map;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.emissive.copy(source.emissive);
      this.emissiveMap = source.emissiveMap;
      this.emissiveIntensity = source.emissiveIntensity;
      this.bumpMap = source.bumpMap;
      this.bumpScale = source.bumpScale;
      this.normalMap = source.normalMap;
      this.normalMapType = source.normalMapType;
      this.normalScale.copy(source.normalScale);
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.roughnessMap = source.roughnessMap;
      this.metalnessMap = source.metalnessMap;
      this.alphaMap = source.alphaMap;
      this.envMap = source.envMap;
      this.envMapRotation.copy(source.envMapRotation);
      this.envMapIntensity = source.envMapIntensity;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      this.flatShading = source.flatShading;
      this.fog = source.fog;
      return this;
    }
  };
  var MeshPhysicalMaterial = class extends MeshStandardMaterial {
    /**
     * Constructs a new mesh physical material.
     *
     * @param {Object} [parameters] - An object with one or more properties
     * defining the material's appearance. Any property of the material
     * (including any property from inherited materials) can be passed
     * in here. Color values can be passed any type of value accepted
     * by {@link Color#set}.
     */
    constructor(parameters) {
      super();
      this.isMeshPhysicalMaterial = true;
      this.defines = {
        "STANDARD": "",
        "PHYSICAL": ""
      };
      this.type = "MeshPhysicalMaterial";
      this.anisotropyRotation = 0;
      this.anisotropyMap = null;
      this.clearcoatMap = null;
      this.clearcoatRoughness = 0;
      this.clearcoatRoughnessMap = null;
      this.clearcoatNormalScale = new Vector2(1, 1);
      this.clearcoatNormalMap = null;
      this.ior = 1.5;
      Object.defineProperty(this, "reflectivity", {
        get: function() {
          return clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
        },
        set: function(reflectivity) {
          this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);
        }
      });
      this.iridescenceMap = null;
      this.iridescenceIOR = 1.3;
      this.iridescenceThicknessRange = [100, 400];
      this.iridescenceThicknessMap = null;
      this.sheenColor = new Color(0);
      this.sheenColorMap = null;
      this.sheenRoughness = 1;
      this.sheenRoughnessMap = null;
      this.transmissionMap = null;
      this.thickness = 0;
      this.thicknessMap = null;
      this.attenuationDistance = Infinity;
      this.attenuationColor = new Color(1, 1, 1);
      this.specularIntensity = 1;
      this.specularIntensityMap = null;
      this.specularColor = new Color(1, 1, 1);
      this.specularColorMap = null;
      this._anisotropy = 0;
      this._clearcoat = 0;
      this._dispersion = 0;
      this._iridescence = 0;
      this._sheen = 0;
      this._transmission = 0;
      this.setValues(parameters);
    }
    /**
     * The anisotropy strength.
     *
     * @type {number}
     * @default 0
     */
    get anisotropy() {
      return this._anisotropy;
    }
    set anisotropy(value) {
      if (this._anisotropy > 0 !== value > 0) {
        this.version++;
      }
      this._anisotropy = value;
    }
    /**
     * Represents the intensity of the clear coat layer, from `0.0` to `1.0`. Use
     * clear coat related properties to enable multilayer materials that have a
     * thin translucent layer over the base layer.
     *
     * @type {number}
     * @default 0
     */
    get clearcoat() {
      return this._clearcoat;
    }
    set clearcoat(value) {
      if (this._clearcoat > 0 !== value > 0) {
        this.version++;
      }
      this._clearcoat = value;
    }
    /**
     * The intensity of the iridescence layer, simulating RGB color shift based on the angle between
     * the surface and the viewer, from `0.0` to `1.0`.
     *
     * @type {number}
     * @default 0
     */
    get iridescence() {
      return this._iridescence;
    }
    set iridescence(value) {
      if (this._iridescence > 0 !== value > 0) {
        this.version++;
      }
      this._iridescence = value;
    }
    /**
     * Defines the strength of the angular separation of colors (chromatic aberration) transmitting
     * through a relatively clear volume. Any value zero or larger is valid, the typical range of
     * realistic values is `[0, 1]`. This property can be only be used with transmissive objects.
     *
     * @type {number}
     * @default 0
     */
    get dispersion() {
      return this._dispersion;
    }
    set dispersion(value) {
      if (this._dispersion > 0 !== value > 0) {
        this.version++;
      }
      this._dispersion = value;
    }
    /**
     * The intensity of the sheen layer, from `0.0` to `1.0`.
     *
     * @type {number}
     * @default 0
     */
    get sheen() {
      return this._sheen;
    }
    set sheen(value) {
      if (this._sheen > 0 !== value > 0) {
        this.version++;
      }
      this._sheen = value;
    }
    /**
     * Degree of transmission (or optical transparency), from `0.0` to `1.0`.
     *
     * Thin, transparent or semitransparent, plastic or glass materials remain
     * largely reflective even if they are fully transmissive. The transmission
     * property can be used to model these materials.
     *
     * When transmission is non-zero, `opacity` should be  set to `1`.
     *
     * @type {number}
     * @default 0
     */
    get transmission() {
      return this._transmission;
    }
    set transmission(value) {
      if (this._transmission > 0 !== value > 0) {
        this.version++;
      }
      this._transmission = value;
    }
    copy(source) {
      super.copy(source);
      this.defines = {
        "STANDARD": "",
        "PHYSICAL": ""
      };
      this.anisotropy = source.anisotropy;
      this.anisotropyRotation = source.anisotropyRotation;
      this.anisotropyMap = source.anisotropyMap;
      this.clearcoat = source.clearcoat;
      this.clearcoatMap = source.clearcoatMap;
      this.clearcoatRoughness = source.clearcoatRoughness;
      this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
      this.clearcoatNormalMap = source.clearcoatNormalMap;
      this.clearcoatNormalScale.copy(source.clearcoatNormalScale);
      this.dispersion = source.dispersion;
      this.ior = source.ior;
      this.iridescence = source.iridescence;
      this.iridescenceMap = source.iridescenceMap;
      this.iridescenceIOR = source.iridescenceIOR;
      this.iridescenceThicknessRange = [...source.iridescenceThicknessRange];
      this.iridescenceThicknessMap = source.iridescenceThicknessMap;
      this.sheen = source.sheen;
      this.sheenColor.copy(source.sheenColor);
      this.sheenColorMap = source.sheenColorMap;
      this.sheenRoughness = source.sheenRoughness;
      this.sheenRoughnessMap = source.sheenRoughnessMap;
      this.transmission = source.transmission;
      this.transmissionMap = source.transmissionMap;
      this.thickness = source.thickness;
      this.thicknessMap = source.thicknessMap;
      this.attenuationDistance = source.attenuationDistance;
      this.attenuationColor.copy(source.attenuationColor);
      this.specularIntensity = source.specularIntensity;
      this.specularIntensityMap = source.specularIntensityMap;
      this.specularColor.copy(source.specularColor);
      this.specularColorMap = source.specularColorMap;
      return this;
    }
  };
  var MeshPhongMaterial = class extends Material {
    /**
     * Constructs a new mesh phong material.
     *
     * @param {Object} [parameters] - An object with one or more properties
     * defining the material's appearance. Any property of the material
     * (including any property from inherited materials) can be passed
     * in here. Color values can be passed any type of value accepted
     * by {@link Color#set}.
     */
    constructor(parameters) {
      super();
      this.isMeshPhongMaterial = true;
      this.type = "MeshPhongMaterial";
      this.color = new Color(16777215);
      this.specular = new Color(1118481);
      this.shininess = 30;
      this.map = null;
      this.lightMap = null;
      this.lightMapIntensity = 1;
      this.aoMap = null;
      this.aoMapIntensity = 1;
      this.emissive = new Color(0);
      this.emissiveIntensity = 1;
      this.emissiveMap = null;
      this.bumpMap = null;
      this.bumpScale = 1;
      this.normalMap = null;
      this.normalMapType = TangentSpaceNormalMap;
      this.normalScale = new Vector2(1, 1);
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.specularMap = null;
      this.alphaMap = null;
      this.envMap = null;
      this.envMapRotation = new Euler();
      this.combine = MultiplyOperation;
      this.reflectivity = 1;
      this.refractionRatio = 0.98;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.wireframeLinecap = "round";
      this.wireframeLinejoin = "round";
      this.flatShading = false;
      this.fog = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.specular.copy(source.specular);
      this.shininess = source.shininess;
      this.map = source.map;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.emissive.copy(source.emissive);
      this.emissiveMap = source.emissiveMap;
      this.emissiveIntensity = source.emissiveIntensity;
      this.bumpMap = source.bumpMap;
      this.bumpScale = source.bumpScale;
      this.normalMap = source.normalMap;
      this.normalMapType = source.normalMapType;
      this.normalScale.copy(source.normalScale);
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.specularMap = source.specularMap;
      this.alphaMap = source.alphaMap;
      this.envMap = source.envMap;
      this.envMapRotation.copy(source.envMapRotation);
      this.combine = source.combine;
      this.reflectivity = source.reflectivity;
      this.refractionRatio = source.refractionRatio;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      this.flatShading = source.flatShading;
      this.fog = source.fog;
      return this;
    }
  };
  var MeshToonMaterial = class extends Material {
    /**
     * Constructs a new mesh toon material.
     *
     * @param {Object} [parameters] - An object with one or more properties
     * defining the material's appearance. Any property of the material
     * (including any property from inherited materials) can be passed
     * in here. Color values can be passed any type of value accepted
     * by {@link Color#set}.
     */
    constructor(parameters) {
      super();
      this.isMeshToonMaterial = true;
      this.defines = { "TOON": "" };
      this.type = "MeshToonMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.gradientMap = null;
      this.lightMap = null;
      this.lightMapIntensity = 1;
      this.aoMap = null;
      this.aoMapIntensity = 1;
      this.emissive = new Color(0);
      this.emissiveIntensity = 1;
      this.emissiveMap = null;
      this.bumpMap = null;
      this.bumpScale = 1;
      this.normalMap = null;
      this.normalMapType = TangentSpaceNormalMap;
      this.normalScale = new Vector2(1, 1);
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.alphaMap = null;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.wireframeLinecap = "round";
      this.wireframeLinejoin = "round";
      this.fog = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.gradientMap = source.gradientMap;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.emissive.copy(source.emissive);
      this.emissiveMap = source.emissiveMap;
      this.emissiveIntensity = source.emissiveIntensity;
      this.bumpMap = source.bumpMap;
      this.bumpScale = source.bumpScale;
      this.normalMap = source.normalMap;
      this.normalMapType = source.normalMapType;
      this.normalScale.copy(source.normalScale);
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.alphaMap = source.alphaMap;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      this.fog = source.fog;
      return this;
    }
  };
  var MeshNormalMaterial = class extends Material {
    /**
     * Constructs a new mesh normal material.
     *
     * @param {Object} [parameters] - An object with one or more properties
     * defining the material's appearance. Any property of the material
     * (including any property from inherited materials) can be passed
     * in here. Color values can be passed any type of value accepted
     * by {@link Color#set}.
     */
    constructor(parameters) {
      super();
      this.isMeshNormalMaterial = true;
      this.type = "MeshNormalMaterial";
      this.bumpMap = null;
      this.bumpScale = 1;
      this.normalMap = null;
      this.normalMapType = TangentSpaceNormalMap;
      this.normalScale = new Vector2(1, 1);
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.flatShading = false;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.bumpMap = source.bumpMap;
      this.bumpScale = source.bumpScale;
      this.normalMap = source.normalMap;
      this.normalMapType = source.normalMapType;
      this.normalScale.copy(source.normalScale);
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.flatShading = source.flatShading;
      return this;
    }
  };
  var MeshLambertMaterial = class extends Material {
    /**
     * Constructs a new mesh lambert material.
     *
     * @param {Object} [parameters] - An object with one or more properties
     * defining the material's appearance. Any property of the material
     * (including any property from inherited materials) can be passed
     * in here. Color values can be passed any type of value accepted
     * by {@link Color#set}.
     */
    constructor(parameters) {
      super();
      this.isMeshLambertMaterial = true;
      this.type = "MeshLambertMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.lightMap = null;
      this.lightMapIntensity = 1;
      this.aoMap = null;
      this.aoMapIntensity = 1;
      this.emissive = new Color(0);
      this.emissiveIntensity = 1;
      this.emissiveMap = null;
      this.bumpMap = null;
      this.bumpScale = 1;
      this.normalMap = null;
      this.normalMapType = TangentSpaceNormalMap;
      this.normalScale = new Vector2(1, 1);
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.specularMap = null;
      this.alphaMap = null;
      this.envMap = null;
      this.envMapRotation = new Euler();
      this.combine = MultiplyOperation;
      this.reflectivity = 1;
      this.refractionRatio = 0.98;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.wireframeLinecap = "round";
      this.wireframeLinejoin = "round";
      this.flatShading = false;
      this.fog = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.emissive.copy(source.emissive);
      this.emissiveMap = source.emissiveMap;
      this.emissiveIntensity = source.emissiveIntensity;
      this.bumpMap = source.bumpMap;
      this.bumpScale = source.bumpScale;
      this.normalMap = source.normalMap;
      this.normalMapType = source.normalMapType;
      this.normalScale.copy(source.normalScale);
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.specularMap = source.specularMap;
      this.alphaMap = source.alphaMap;
      this.envMap = source.envMap;
      this.envMapRotation.copy(source.envMapRotation);
      this.combine = source.combine;
      this.reflectivity = source.reflectivity;
      this.refractionRatio = source.refractionRatio;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      this.flatShading = source.flatShading;
      this.fog = source.fog;
      return this;
    }
  };
  var MeshMatcapMaterial = class extends Material {
    /**
     * Constructs a new mesh matcap material.
     *
     * @param {Object} [parameters] - An object with one or more properties
     * defining the material's appearance. Any property of the material
     * (including any property from inherited materials) can be passed
     * in here. Color values can be passed any type of value accepted
     * by {@link Color#set}.
     */
    constructor(parameters) {
      super();
      this.isMeshMatcapMaterial = true;
      this.defines = { "MATCAP": "" };
      this.type = "MeshMatcapMaterial";
      this.color = new Color(16777215);
      this.matcap = null;
      this.map = null;
      this.bumpMap = null;
      this.bumpScale = 1;
      this.normalMap = null;
      this.normalMapType = TangentSpaceNormalMap;
      this.normalScale = new Vector2(1, 1);
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.alphaMap = null;
      this.flatShading = false;
      this.fog = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.defines = { "MATCAP": "" };
      this.color.copy(source.color);
      this.matcap = source.matcap;
      this.map = source.map;
      this.bumpMap = source.bumpMap;
      this.bumpScale = source.bumpScale;
      this.normalMap = source.normalMap;
      this.normalMapType = source.normalMapType;
      this.normalScale.copy(source.normalScale);
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.alphaMap = source.alphaMap;
      this.flatShading = source.flatShading;
      this.fog = source.fog;
      return this;
    }
  };
  var LineDashedMaterial = class extends LineBasicMaterial {
    /**
     * Constructs a new line dashed material.
     *
     * @param {Object} [parameters] - An object with one or more properties
     * defining the material's appearance. Any property of the material
     * (including any property from inherited materials) can be passed
     * in here. Color values can be passed any type of value accepted
     * by {@link Color#set}.
     */
    constructor(parameters) {
      super();
      this.isLineDashedMaterial = true;
      this.type = "LineDashedMaterial";
      this.scale = 1;
      this.dashSize = 3;
      this.gapSize = 1;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.scale = source.scale;
      this.dashSize = source.dashSize;
      this.gapSize = source.gapSize;
      return this;
    }
  };
  function convertArray(array2, type) {
    if (!array2 || array2.constructor === type) return array2;
    if (typeof type.BYTES_PER_ELEMENT === "number") {
      return new type(array2);
    }
    return Array.prototype.slice.call(array2);
  }
  function isTypedArray(object) {
    return ArrayBuffer.isView(object) && !(object instanceof DataView);
  }
  var Interpolant = class {
    /**
     * Constructs a new interpolant.
     *
     * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
     * @param {TypedArray} sampleValues - The sample values.
     * @param {number} sampleSize - The sample size
     * @param {TypedArray} [resultBuffer] - The result buffer.
     */
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      this.parameterPositions = parameterPositions;
      this._cachedIndex = 0;
      this.resultBuffer = resultBuffer !== void 0 ? resultBuffer : new sampleValues.constructor(sampleSize);
      this.sampleValues = sampleValues;
      this.valueSize = sampleSize;
      this.settings = null;
      this.DefaultSettings_ = {};
    }
    /**
     * Evaluate the interpolant at position `t`.
     *
     * @param {number} t - The interpolation factor.
     * @return {TypedArray} The result buffer.
     */
    evaluate(t2) {
      const pp = this.parameterPositions;
      let i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];
      validate_interval: {
        seek: {
          let right;
          linear_scan: {
            forward_scan: if (!(t2 < t1)) {
              for (let giveUpAt = i1 + 2; ; ) {
                if (t1 === void 0) {
                  if (t2 < t0) break forward_scan;
                  i1 = pp.length;
                  this._cachedIndex = i1;
                  return this.copySampleValue_(i1 - 1);
                }
                if (i1 === giveUpAt) break;
                t0 = t1;
                t1 = pp[++i1];
                if (t2 < t1) {
                  break seek;
                }
              }
              right = pp.length;
              break linear_scan;
            }
            if (!(t2 >= t0)) {
              const t1global = pp[1];
              if (t2 < t1global) {
                i1 = 2;
                t0 = t1global;
              }
              for (let giveUpAt = i1 - 2; ; ) {
                if (t0 === void 0) {
                  this._cachedIndex = 0;
                  return this.copySampleValue_(0);
                }
                if (i1 === giveUpAt) break;
                t1 = t0;
                t0 = pp[--i1 - 1];
                if (t2 >= t0) {
                  break seek;
                }
              }
              right = i1;
              i1 = 0;
              break linear_scan;
            }
            break validate_interval;
          }
          while (i1 < right) {
            const mid = i1 + right >>> 1;
            if (t2 < pp[mid]) {
              right = mid;
            } else {
              i1 = mid + 1;
            }
          }
          t1 = pp[i1];
          t0 = pp[i1 - 1];
          if (t0 === void 0) {
            this._cachedIndex = 0;
            return this.copySampleValue_(0);
          }
          if (t1 === void 0) {
            i1 = pp.length;
            this._cachedIndex = i1;
            return this.copySampleValue_(i1 - 1);
          }
        }
        this._cachedIndex = i1;
        this.intervalChanged_(i1, t0, t1);
      }
      return this.interpolate_(i1, t0, t2, t1);
    }
    /**
     * Returns the interpolation settings.
     *
     * @return {Object} The interpolation settings.
     */
    getSettings_() {
      return this.settings || this.DefaultSettings_;
    }
    /**
     * Copies a sample value to the result buffer.
     *
     * @param {number} index - An index into the sample value buffer.
     * @return {TypedArray} The result buffer.
     */
    copySampleValue_(index) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index * stride;
      for (let i = 0; i !== stride; ++i) {
        result[i] = values[offset + i];
      }
      return result;
    }
    /**
     * Copies a sample value to the result buffer.
     *
     * @abstract
     * @param {number} i1 - An index into the sample value buffer.
     * @param {number} t0 - The previous interpolation factor.
     * @param {number} t - The current interpolation factor.
     * @param {number} t1 - The next interpolation factor.
     * @return {TypedArray} The result buffer.
     */
    interpolate_() {
      throw new Error("call to abstract method");
    }
    /**
     * Optional method that is executed when the interval has changed.
     *
     * @param {number} i1 - An index into the sample value buffer.
     * @param {number} t0 - The previous interpolation factor.
     * @param {number} t - The current interpolation factor.
     */
    intervalChanged_() {
    }
  };
  var CubicInterpolant = class extends Interpolant {
    /**
     * Constructs a new cubic interpolant.
     *
     * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
     * @param {TypedArray} sampleValues - The sample values.
     * @param {number} sampleSize - The sample size
     * @param {TypedArray} [resultBuffer] - The result buffer.
     */
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
      this._weightPrev = -0;
      this._offsetPrev = -0;
      this._weightNext = -0;
      this._offsetNext = -0;
      this.DefaultSettings_ = {
        endingStart: ZeroCurvatureEnding,
        endingEnd: ZeroCurvatureEnding
      };
    }
    intervalChanged_(i1, t0, t1) {
      const pp = this.parameterPositions;
      let iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
      if (tPrev === void 0) {
        switch (this.getSettings_().endingStart) {
          case ZeroSlopeEnding:
            iPrev = i1;
            tPrev = 2 * t0 - t1;
            break;
          case WrapAroundEnding:
            iPrev = pp.length - 2;
            tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
            break;
          default:
            iPrev = i1;
            tPrev = t1;
        }
      }
      if (tNext === void 0) {
        switch (this.getSettings_().endingEnd) {
          case ZeroSlopeEnding:
            iNext = i1;
            tNext = 2 * t1 - t0;
            break;
          case WrapAroundEnding:
            iNext = 1;
            tNext = t1 + pp[1] - pp[0];
            break;
          default:
            iNext = i1 - 1;
            tNext = t0;
        }
      }
      const halfDt = (t1 - t0) * 0.5, stride = this.valueSize;
      this._weightPrev = halfDt / (t0 - tPrev);
      this._weightNext = halfDt / (tNext - t1);
      this._offsetPrev = iPrev * stride;
      this._offsetNext = iNext * stride;
    }
    interpolate_(i1, t0, t2, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p = (t2 - t0) / (t1 - t0), pp = p * p, ppp = pp * p;
      const sP = -wP * ppp + 2 * wP * pp - wP * p;
      const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
      const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
      const sN = wN * ppp - wN * pp;
      for (let i = 0; i !== stride; ++i) {
        result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
      }
      return result;
    }
  };
  var LinearInterpolant = class extends Interpolant {
    /**
     * Constructs a new linear interpolant.
     *
     * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
     * @param {TypedArray} sampleValues - The sample values.
     * @param {number} sampleSize - The sample size
     * @param {TypedArray} [resultBuffer] - The result buffer.
     */
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1, t0, t2, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t2 - t0) / (t1 - t0), weight0 = 1 - weight1;
      for (let i = 0; i !== stride; ++i) {
        result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
      }
      return result;
    }
  };
  var DiscreteInterpolant = class extends Interpolant {
    /**
     * Constructs a new discrete interpolant.
     *
     * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
     * @param {TypedArray} sampleValues - The sample values.
     * @param {number} sampleSize - The sample size
     * @param {TypedArray} [resultBuffer] - The result buffer.
     */
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1) {
      return this.copySampleValue_(i1 - 1);
    }
  };
  var KeyframeTrack = class {
    /**
     * Constructs a new keyframe track.
     *
     * @param {string} name - The keyframe track's name.
     * @param {Array<number>} times - A list of keyframe times.
     * @param {Array<number>} values - A list of keyframe values.
     * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
     */
    constructor(name2, times, values, interpolation) {
      if (name2 === void 0) throw new Error("THREE.KeyframeTrack: track name is undefined");
      if (times === void 0 || times.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name2);
      this.name = name2;
      this.times = convertArray(times, this.TimeBufferType);
      this.values = convertArray(values, this.ValueBufferType);
      this.setInterpolation(interpolation || this.DefaultInterpolation);
    }
    /**
     * Converts the keyframe track to JSON.
     *
     * @static
     * @param {KeyframeTrack} track - The keyframe track to serialize.
     * @return {Object} The serialized keyframe track as JSON.
     */
    static toJSON(track) {
      const trackType = track.constructor;
      let json;
      if (trackType.toJSON !== this.toJSON) {
        json = trackType.toJSON(track);
      } else {
        json = {
          "name": track.name,
          "times": convertArray(track.times, Array),
          "values": convertArray(track.values, Array)
        };
        const interpolation = track.getInterpolation();
        if (interpolation !== track.DefaultInterpolation) {
          json.interpolation = interpolation;
        }
      }
      json.type = track.ValueTypeName;
      return json;
    }
    /**
     * Factory method for creating a new discrete interpolant.
     *
     * @static
     * @param {TypedArray} [result] - The result buffer.
     * @return {DiscreteInterpolant} The new interpolant.
     */
    InterpolantFactoryMethodDiscrete(result) {
      return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
    }
    /**
     * Factory method for creating a new linear interpolant.
     *
     * @static
     * @param {TypedArray} [result] - The result buffer.
     * @return {LinearInterpolant} The new interpolant.
     */
    InterpolantFactoryMethodLinear(result) {
      return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
    }
    /**
     * Factory method for creating a new smooth interpolant.
     *
     * @static
     * @param {TypedArray} [result] - The result buffer.
     * @return {CubicInterpolant} The new interpolant.
     */
    InterpolantFactoryMethodSmooth(result) {
      return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
    }
    /**
     * Defines the interpolation factor method for this keyframe track.
     *
     * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} interpolation - The interpolation type.
     * @return {KeyframeTrack} A reference to this keyframe track.
     */
    setInterpolation(interpolation) {
      let factoryMethod;
      switch (interpolation) {
        case InterpolateDiscrete:
          factoryMethod = this.InterpolantFactoryMethodDiscrete;
          break;
        case InterpolateLinear:
          factoryMethod = this.InterpolantFactoryMethodLinear;
          break;
        case InterpolateSmooth:
          factoryMethod = this.InterpolantFactoryMethodSmooth;
          break;
      }
      if (factoryMethod === void 0) {
        const message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
        if (this.createInterpolant === void 0) {
          if (interpolation !== this.DefaultInterpolation) {
            this.setInterpolation(this.DefaultInterpolation);
          } else {
            throw new Error(message);
          }
        }
        console.warn("THREE.KeyframeTrack:", message);
        return this;
      }
      this.createInterpolant = factoryMethod;
      return this;
    }
    /**
     * Returns the current interpolation type.
     *
     * @return {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} The interpolation type.
     */
    getInterpolation() {
      switch (this.createInterpolant) {
        case this.InterpolantFactoryMethodDiscrete:
          return InterpolateDiscrete;
        case this.InterpolantFactoryMethodLinear:
          return InterpolateLinear;
        case this.InterpolantFactoryMethodSmooth:
          return InterpolateSmooth;
      }
    }
    /**
     * Returns the value size.
     *
     * @return {number} The value size.
     */
    getValueSize() {
      return this.values.length / this.times.length;
    }
    /**
     * Moves all keyframes either forward or backward in time.
     *
     * @param {number} timeOffset - The offset to move the time values.
     * @return {KeyframeTrack} A reference to this keyframe track.
     */
    shift(timeOffset) {
      if (timeOffset !== 0) {
        const times = this.times;
        for (let i = 0, n = times.length; i !== n; ++i) {
          times[i] += timeOffset;
        }
      }
      return this;
    }
    /**
     * Scale all keyframe times by a factor (useful for frame - seconds conversions).
     *
     * @param {number} timeScale - The time scale.
     * @return {KeyframeTrack} A reference to this keyframe track.
     */
    scale(timeScale) {
      if (timeScale !== 1) {
        const times = this.times;
        for (let i = 0, n = times.length; i !== n; ++i) {
          times[i] *= timeScale;
        }
      }
      return this;
    }
    /**
     * Removes keyframes before and after animation without changing any values within the defined time range.
     *
     * Note: The method does not shift around keys to the start of the track time, because for interpolated
     * keys this will change their values
     *
     * @param {number} startTime - The start time.
     * @param {number} endTime - The end time.
     * @return {KeyframeTrack} A reference to this keyframe track.
     */
    trim(startTime, endTime) {
      const times = this.times, nKeys = times.length;
      let from = 0, to = nKeys - 1;
      while (from !== nKeys && times[from] < startTime) {
        ++from;
      }
      while (to !== -1 && times[to] > endTime) {
        --to;
      }
      ++to;
      if (from !== 0 || to !== nKeys) {
        if (from >= to) {
          to = Math.max(to, 1);
          from = to - 1;
        }
        const stride = this.getValueSize();
        this.times = times.slice(from, to);
        this.values = this.values.slice(from * stride, to * stride);
      }
      return this;
    }
    /**
     * Performs minimal validation on the keyframe track. Returns `true` if the values
     * are valid.
     *
     * @return {boolean} Whether the keyframes are valid or not.
     */
    validate() {
      let valid = true;
      const valueSize = this.getValueSize();
      if (valueSize - Math.floor(valueSize) !== 0) {
        console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
        valid = false;
      }
      const times = this.times, values = this.values, nKeys = times.length;
      if (nKeys === 0) {
        console.error("THREE.KeyframeTrack: Track is empty.", this);
        valid = false;
      }
      let prevTime = null;
      for (let i = 0; i !== nKeys; i++) {
        const currTime = times[i];
        if (typeof currTime === "number" && isNaN(currTime)) {
          console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i, currTime);
          valid = false;
          break;
        }
        if (prevTime !== null && prevTime > currTime) {
          console.error("THREE.KeyframeTrack: Out of order keys.", this, i, currTime, prevTime);
          valid = false;
          break;
        }
        prevTime = currTime;
      }
      if (values !== void 0) {
        if (isTypedArray(values)) {
          for (let i = 0, n = values.length; i !== n; ++i) {
            const value = values[i];
            if (isNaN(value)) {
              console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i, value);
              valid = false;
              break;
            }
          }
        }
      }
      return valid;
    }
    /**
     * Optimizes this keyframe track by removing equivalent sequential keys (which are
     * common in morph target sequences).
     *
     * @return {AnimationClip} A reference to this animation clip.
     */
    optimize() {
      const times = this.times.slice(), values = this.values.slice(), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === InterpolateSmooth, lastIndex = times.length - 1;
      let writeIndex = 1;
      for (let i = 1; i < lastIndex; ++i) {
        let keep = false;
        const time = times[i];
        const timeNext = times[i + 1];
        if (time !== timeNext && (i !== 1 || time !== times[0])) {
          if (!smoothInterpolation) {
            const offset = i * stride, offsetP = offset - stride, offsetN = offset + stride;
            for (let j = 0; j !== stride; ++j) {
              const value = values[offset + j];
              if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
                keep = true;
                break;
              }
            }
          } else {
            keep = true;
          }
        }
        if (keep) {
          if (i !== writeIndex) {
            times[writeIndex] = times[i];
            const readOffset = i * stride, writeOffset = writeIndex * stride;
            for (let j = 0; j !== stride; ++j) {
              values[writeOffset + j] = values[readOffset + j];
            }
          }
          ++writeIndex;
        }
      }
      if (lastIndex > 0) {
        times[writeIndex] = times[lastIndex];
        for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {
          values[writeOffset + j] = values[readOffset + j];
        }
        ++writeIndex;
      }
      if (writeIndex !== times.length) {
        this.times = times.slice(0, writeIndex);
        this.values = values.slice(0, writeIndex * stride);
      } else {
        this.times = times;
        this.values = values;
      }
      return this;
    }
    /**
     * Returns a new keyframe track with copied values from this instance.
     *
     * @return {KeyframeTrack} A clone of this instance.
     */
    clone() {
      const times = this.times.slice();
      const values = this.values.slice();
      const TypedKeyframeTrack = this.constructor;
      const track = new TypedKeyframeTrack(this.name, times, values);
      track.createInterpolant = this.createInterpolant;
      return track;
    }
  };
  KeyframeTrack.prototype.ValueTypeName = "";
  KeyframeTrack.prototype.TimeBufferType = Float32Array;
  KeyframeTrack.prototype.ValueBufferType = Float32Array;
  KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
  var BooleanKeyframeTrack = class extends KeyframeTrack {
    /**
     * Constructs a new boolean keyframe track.
     *
     * This keyframe track type has no `interpolation` parameter because the
     * interpolation is always discrete.
     *
     * @param {string} name - The keyframe track's name.
     * @param {Array<number>} times - A list of keyframe times.
     * @param {Array<number>} values - A list of keyframe values.
     */
    constructor(name2, times, values) {
      super(name2, times, values);
    }
  };
  BooleanKeyframeTrack.prototype.ValueTypeName = "bool";
  BooleanKeyframeTrack.prototype.ValueBufferType = Array;
  BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
  BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
  BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
  var ColorKeyframeTrack = class extends KeyframeTrack {
    /**
     * Constructs a new color keyframe track.
     *
     * @param {string} name - The keyframe track's name.
     * @param {Array<number>} times - A list of keyframe times.
     * @param {Array<number>} values - A list of keyframe values.
     * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
     */
    constructor(name2, times, values, interpolation) {
      super(name2, times, values, interpolation);
    }
  };
  ColorKeyframeTrack.prototype.ValueTypeName = "color";
  var NumberKeyframeTrack = class extends KeyframeTrack {
    /**
     * Constructs a new number keyframe track.
     *
     * @param {string} name - The keyframe track's name.
     * @param {Array<number>} times - A list of keyframe times.
     * @param {Array<number>} values - A list of keyframe values.
     * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
     */
    constructor(name2, times, values, interpolation) {
      super(name2, times, values, interpolation);
    }
  };
  NumberKeyframeTrack.prototype.ValueTypeName = "number";
  var QuaternionLinearInterpolant = class extends Interpolant {
    /**
     * Constructs a new SLERP interpolant.
     *
     * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
     * @param {TypedArray} sampleValues - The sample values.
     * @param {number} sampleSize - The sample size
     * @param {TypedArray} [resultBuffer] - The result buffer.
     */
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1, t0, t2, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t2 - t0) / (t1 - t0);
      let offset = i1 * stride;
      for (let end = offset + stride; offset !== end; offset += 4) {
        Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
      }
      return result;
    }
  };
  var QuaternionKeyframeTrack = class extends KeyframeTrack {
    /**
     * Constructs a new Quaternion keyframe track.
     *
     * @param {string} name - The keyframe track's name.
     * @param {Array<number>} times - A list of keyframe times.
     * @param {Array<number>} values - A list of keyframe values.
     * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
     */
    constructor(name2, times, values, interpolation) {
      super(name2, times, values, interpolation);
    }
    /**
     * Overwritten so the method returns Quaternion based interpolant.
     *
     * @static
     * @param {TypedArray} [result] - The result buffer.
     * @return {QuaternionLinearInterpolant} The new interpolant.
     */
    InterpolantFactoryMethodLinear(result) {
      return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
    }
  };
  QuaternionKeyframeTrack.prototype.ValueTypeName = "quaternion";
  QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
  var StringKeyframeTrack = class extends KeyframeTrack {
    /**
     * Constructs a new string keyframe track.
     *
     * This keyframe track type has no `interpolation` parameter because the
     * interpolation is always discrete.
     *
     * @param {string} name - The keyframe track's name.
     * @param {Array<number>} times - A list of keyframe times.
     * @param {Array<number>} values - A list of keyframe values.
     */
    constructor(name2, times, values) {
      super(name2, times, values);
    }
  };
  StringKeyframeTrack.prototype.ValueTypeName = "string";
  StringKeyframeTrack.prototype.ValueBufferType = Array;
  StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
  StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
  StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
  var VectorKeyframeTrack = class extends KeyframeTrack {
    /**
     * Constructs a new vector keyframe track.
     *
     * @param {string} name - The keyframe track's name.
     * @param {Array<number>} times - A list of keyframe times.
     * @param {Array<number>} values - A list of keyframe values.
     * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
     */
    constructor(name2, times, values, interpolation) {
      super(name2, times, values, interpolation);
    }
  };
  VectorKeyframeTrack.prototype.ValueTypeName = "vector";
  var LoadingManager = class {
    /**
     * Constructs a new loading manager.
     *
     * @param {Function} [onLoad] - Executes when all items have been loaded.
     * @param {Function} [onProgress] - Executes when single items have been loaded.
     * @param {Function} [onError] - Executes when an error occurs.
     */
    constructor(onLoad, onProgress, onError) {
      const scope = this;
      let isLoading = false;
      let itemsLoaded = 0;
      let itemsTotal = 0;
      let urlModifier = void 0;
      const handlers2 = [];
      this.onStart = void 0;
      this.onLoad = onLoad;
      this.onProgress = onProgress;
      this.onError = onError;
      this.itemStart = function(url) {
        itemsTotal++;
        if (isLoading === false) {
          if (scope.onStart !== void 0) {
            scope.onStart(url, itemsLoaded, itemsTotal);
          }
        }
        isLoading = true;
      };
      this.itemEnd = function(url) {
        itemsLoaded++;
        if (scope.onProgress !== void 0) {
          scope.onProgress(url, itemsLoaded, itemsTotal);
        }
        if (itemsLoaded === itemsTotal) {
          isLoading = false;
          if (scope.onLoad !== void 0) {
            scope.onLoad();
          }
        }
      };
      this.itemError = function(url) {
        if (scope.onError !== void 0) {
          scope.onError(url);
        }
      };
      this.resolveURL = function(url) {
        if (urlModifier) {
          return urlModifier(url);
        }
        return url;
      };
      this.setURLModifier = function(transform) {
        urlModifier = transform;
        return this;
      };
      this.addHandler = function(regex, loader) {
        handlers2.push(regex, loader);
        return this;
      };
      this.removeHandler = function(regex) {
        const index = handlers2.indexOf(regex);
        if (index !== -1) {
          handlers2.splice(index, 2);
        }
        return this;
      };
      this.getHandler = function(file) {
        for (let i = 0, l = handlers2.length; i < l; i += 2) {
          const regex = handlers2[i];
          const loader = handlers2[i + 1];
          if (regex.global) regex.lastIndex = 0;
          if (regex.test(file)) {
            return loader;
          }
        }
        return null;
      };
    }
  };
  var DefaultLoadingManager = /* @__PURE__ */ new LoadingManager();
  var Loader = class {
    /**
     * Constructs a new loader.
     *
     * @param {LoadingManager} [manager] - The loading manager.
     */
    constructor(manager) {
      this.manager = manager !== void 0 ? manager : DefaultLoadingManager;
      this.crossOrigin = "anonymous";
      this.withCredentials = false;
      this.path = "";
      this.resourcePath = "";
      this.requestHeader = {};
    }
    /**
     * This method needs to be implemented by all concrete loaders. It holds the
     * logic for loading assets from the backend.
     *
     * @param {string} url - The path/URL of the file to be loaded.
     * @param {Function} onLoad - Executed when the loading process has been finished.
     * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.
     * @param {onErrorCallback} [onError] - Executed when errors occur.
     */
    load() {
    }
    /**
     * A async version of {@link Loader#load}.
     *
     * @param {string} url - The path/URL of the file to be loaded.
     * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.
     * @return {Promise} A Promise that resolves when the asset has been loaded.
     */
    loadAsync(url, onProgress) {
      const scope = this;
      return new Promise(function(resolve, reject) {
        scope.load(url, resolve, onProgress, reject);
      });
    }
    /**
     * This method needs to be implemented by all concrete loaders. It holds the
     * logic for parsing the asset into three.js entities.
     *
     * @param {any} data - The data to parse.
     */
    parse() {
    }
    /**
     * Sets the `crossOrigin` String to implement CORS for loading the URL
     * from a different domain that allows CORS.
     *
     * @param {string} crossOrigin - The `crossOrigin` value.
     * @return {Loader} A reference to this instance.
     */
    setCrossOrigin(crossOrigin) {
      this.crossOrigin = crossOrigin;
      return this;
    }
    /**
     * Whether the XMLHttpRequest uses credentials such as cookies, authorization
     * headers or TLS client certificates, see [XMLHttpRequest.withCredentials]{@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials}.
     *
     * Note: This setting has no effect if you are loading files locally or from the same domain.
     *
     * @param {boolean} value - The `withCredentials` value.
     * @return {Loader} A reference to this instance.
     */
    setWithCredentials(value) {
      this.withCredentials = value;
      return this;
    }
    /**
     * Sets the base path for the asset.
     *
     * @param {string} path - The base path.
     * @return {Loader} A reference to this instance.
     */
    setPath(path) {
      this.path = path;
      return this;
    }
    /**
     * Sets the base path for dependent resources like textures.
     *
     * @param {string} resourcePath - The resource path.
     * @return {Loader} A reference to this instance.
     */
    setResourcePath(resourcePath) {
      this.resourcePath = resourcePath;
      return this;
    }
    /**
     * Sets the given request header.
     *
     * @param {Object} requestHeader - A [request header]{@link https://developer.mozilla.org/en-US/docs/Glossary/Request_header}
     * for configuring the HTTP request.
     * @return {Loader} A reference to this instance.
     */
    setRequestHeader(requestHeader) {
      this.requestHeader = requestHeader;
      return this;
    }
  };
  Loader.DEFAULT_MATERIAL_NAME = "__DEFAULT";
  var Light = class extends Object3D {
    /**
     * Constructs a new light.
     *
     * @param {(number|Color|string)} [color=0xffffff] - The light's color.
     * @param {number} [intensity=1] - The light's strength/intensity.
     */
    constructor(color2, intensity = 1) {
      super();
      this.isLight = true;
      this.type = "Light";
      this.color = new Color(color2);
      this.intensity = intensity;
    }
    /**
     * Frees the GPU-related resources allocated by this instance. Call this
     * method whenever this instance is no longer used in your app.
     */
    dispose() {
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.color.copy(source.color);
      this.intensity = source.intensity;
      return this;
    }
    toJSON(meta2) {
      const data = super.toJSON(meta2);
      data.object.color = this.color.getHex();
      data.object.intensity = this.intensity;
      if (this.groundColor !== void 0) data.object.groundColor = this.groundColor.getHex();
      if (this.distance !== void 0) data.object.distance = this.distance;
      if (this.angle !== void 0) data.object.angle = this.angle;
      if (this.decay !== void 0) data.object.decay = this.decay;
      if (this.penumbra !== void 0) data.object.penumbra = this.penumbra;
      if (this.shadow !== void 0) data.object.shadow = this.shadow.toJSON();
      if (this.target !== void 0) data.object.target = this.target.uuid;
      return data;
    }
  };
  var HemisphereLight = class extends Light {
    /**
     * Constructs a new hemisphere light.
     *
     * @param {(number|Color|string)} [skyColor=0xffffff] - The light's sky color.
     * @param {(number|Color|string)} [groundColor=0xffffff] - The light's ground color.
     * @param {number} [intensity=1] - The light's strength/intensity.
     */
    constructor(skyColor, groundColor, intensity) {
      super(skyColor, intensity);
      this.isHemisphereLight = true;
      this.type = "HemisphereLight";
      this.position.copy(Object3D.DEFAULT_UP);
      this.updateMatrix();
      this.groundColor = new Color(groundColor);
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.groundColor.copy(source.groundColor);
      return this;
    }
  };
  var _projScreenMatrix$1 = /* @__PURE__ */ new Matrix4();
  var _lightPositionWorld$1 = /* @__PURE__ */ new Vector3();
  var _lookTarget$1 = /* @__PURE__ */ new Vector3();
  var LightShadow = class {
    /**
     * Constructs a new light shadow.
     *
     * @param {Camera} camera - The light's view of the world.
     */
    constructor(camera) {
      this.camera = camera;
      this.intensity = 1;
      this.bias = 0;
      this.normalBias = 0;
      this.radius = 1;
      this.blurSamples = 8;
      this.mapSize = new Vector2(512, 512);
      this.mapType = UnsignedByteType;
      this.map = null;
      this.mapPass = null;
      this.matrix = new Matrix4();
      this.autoUpdate = true;
      this.needsUpdate = false;
      this._frustum = new Frustum();
      this._frameExtents = new Vector2(1, 1);
      this._viewportCount = 1;
      this._viewports = [
        new Vector4(0, 0, 1, 1)
      ];
    }
    /**
     * Used internally by the renderer to get the number of viewports that need
     * to be rendered for this shadow.
     *
     * @return {number} The viewport count.
     */
    getViewportCount() {
      return this._viewportCount;
    }
    /**
     * Gets the shadow cameras frustum. Used internally by the renderer to cull objects.
     *
     * @return {Frustum} The shadow camera frustum.
     */
    getFrustum() {
      return this._frustum;
    }
    /**
     * Update the matrices for the camera and shadow, used internally by the renderer.
     *
     * @param {Light} light - The light for which the shadow is being rendered.
     */
    updateMatrices(light) {
      const shadowCamera = this.camera;
      const shadowMatrix = this.matrix;
      _lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);
      shadowCamera.position.copy(_lightPositionWorld$1);
      _lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);
      shadowCamera.lookAt(_lookTarget$1);
      shadowCamera.updateMatrixWorld();
      _projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
      this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);
      shadowMatrix.set(
        0.5,
        0,
        0,
        0.5,
        0,
        0.5,
        0,
        0.5,
        0,
        0,
        0.5,
        0.5,
        0,
        0,
        0,
        1
      );
      shadowMatrix.multiply(_projScreenMatrix$1);
    }
    /**
     * Returns a viewport definition for the given viewport index.
     *
     * @param {number} viewportIndex - The viewport index.
     * @return {Vector4} The viewport.
     */
    getViewport(viewportIndex) {
      return this._viewports[viewportIndex];
    }
    /**
     * Returns the frame extends.
     *
     * @return {Vector2} The frame extends.
     */
    getFrameExtents() {
      return this._frameExtents;
    }
    /**
     * Frees the GPU-related resources allocated by this instance. Call this
     * method whenever this instance is no longer used in your app.
     */
    dispose() {
      if (this.map) {
        this.map.dispose();
      }
      if (this.mapPass) {
        this.mapPass.dispose();
      }
    }
    /**
     * Copies the values of the given light shadow instance to this instance.
     *
     * @param {LightShadow} source - The light shadow to copy.
     * @return {LightShadow} A reference to this light shadow instance.
     */
    copy(source) {
      this.camera = source.camera.clone();
      this.intensity = source.intensity;
      this.bias = source.bias;
      this.radius = source.radius;
      this.autoUpdate = source.autoUpdate;
      this.needsUpdate = source.needsUpdate;
      this.normalBias = source.normalBias;
      this.blurSamples = source.blurSamples;
      this.mapSize.copy(source.mapSize);
      return this;
    }
    /**
     * Returns a new light shadow instance with copied values from this instance.
     *
     * @return {LightShadow} A clone of this instance.
     */
    clone() {
      return new this.constructor().copy(this);
    }
    /**
     * Serializes the light shadow into JSON.
     *
     * @return {Object} A JSON object representing the serialized light shadow.
     * @see {@link ObjectLoader#parse}
     */
    toJSON() {
      const object = {};
      if (this.intensity !== 1) object.intensity = this.intensity;
      if (this.bias !== 0) object.bias = this.bias;
      if (this.normalBias !== 0) object.normalBias = this.normalBias;
      if (this.radius !== 1) object.radius = this.radius;
      if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();
      object.camera = this.camera.toJSON(false).object;
      delete object.camera.matrix;
      return object;
    }
  };
  var SpotLightShadow = class extends LightShadow {
    /**
     * Constructs a new spot light shadow.
     */
    constructor() {
      super(new PerspectiveCamera(50, 1, 0.5, 500));
      this.isSpotLightShadow = true;
      this.focus = 1;
      this.aspect = 1;
    }
    updateMatrices(light) {
      const camera = this.camera;
      const fov2 = RAD2DEG * 2 * light.angle * this.focus;
      const aspect2 = this.mapSize.width / this.mapSize.height * this.aspect;
      const far = light.distance || camera.far;
      if (fov2 !== camera.fov || aspect2 !== camera.aspect || far !== camera.far) {
        camera.fov = fov2;
        camera.aspect = aspect2;
        camera.far = far;
        camera.updateProjectionMatrix();
      }
      super.updateMatrices(light);
    }
    copy(source) {
      super.copy(source);
      this.focus = source.focus;
      return this;
    }
  };
  var SpotLight = class extends Light {
    /**
     * Constructs a new spot light.
     *
     * @param {(number|Color|string)} [color=0xffffff] - The light's color.
     * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).
     * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.
     * @param {number} [angle=Math.PI/3] - Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.
     * @param {number} [penumbra=0] - Percent of the spotlight cone that is attenuated due to penumbra. Value range is `[0,1]`.
     * @param {number} [decay=2] - The amount the light dims along the distance of the light.
     */
    constructor(color2, intensity, distance2 = 0, angle = Math.PI / 3, penumbra = 0, decay = 2) {
      super(color2, intensity);
      this.isSpotLight = true;
      this.type = "SpotLight";
      this.position.copy(Object3D.DEFAULT_UP);
      this.updateMatrix();
      this.target = new Object3D();
      this.distance = distance2;
      this.angle = angle;
      this.penumbra = penumbra;
      this.decay = decay;
      this.map = null;
      this.shadow = new SpotLightShadow();
    }
    /**
     * The light's power. Power is the luminous power of the light measured in lumens (lm).
     *  Changing the power will also change the light's intensity.
     *
     * @type {number}
     */
    get power() {
      return this.intensity * Math.PI;
    }
    set power(power) {
      this.intensity = power / Math.PI;
    }
    dispose() {
      this.shadow.dispose();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.distance = source.distance;
      this.angle = source.angle;
      this.penumbra = source.penumbra;
      this.decay = source.decay;
      this.target = source.target.clone();
      this.shadow = source.shadow.clone();
      return this;
    }
  };
  var _projScreenMatrix = /* @__PURE__ */ new Matrix4();
  var _lightPositionWorld = /* @__PURE__ */ new Vector3();
  var _lookTarget = /* @__PURE__ */ new Vector3();
  var PointLightShadow = class extends LightShadow {
    /**
     * Constructs a new point light shadow.
     */
    constructor() {
      super(new PerspectiveCamera(90, 1, 0.5, 500));
      this.isPointLightShadow = true;
      this._frameExtents = new Vector2(4, 2);
      this._viewportCount = 6;
      this._viewports = [
        // These viewports map a cube-map onto a 2D texture with the
        // following orientation:
        //
        //  xzXZ
        //   y Y
        //
        // X - Positive x direction
        // x - Negative x direction
        // Y - Positive y direction
        // y - Negative y direction
        // Z - Positive z direction
        // z - Negative z direction
        // positive X
        new Vector4(2, 1, 1, 1),
        // negative X
        new Vector4(0, 1, 1, 1),
        // positive Z
        new Vector4(3, 1, 1, 1),
        // negative Z
        new Vector4(1, 1, 1, 1),
        // positive Y
        new Vector4(3, 0, 1, 1),
        // negative Y
        new Vector4(1, 0, 1, 1)
      ];
      this._cubeDirections = [
        new Vector3(1, 0, 0),
        new Vector3(-1, 0, 0),
        new Vector3(0, 0, 1),
        new Vector3(0, 0, -1),
        new Vector3(0, 1, 0),
        new Vector3(0, -1, 0)
      ];
      this._cubeUps = [
        new Vector3(0, 1, 0),
        new Vector3(0, 1, 0),
        new Vector3(0, 1, 0),
        new Vector3(0, 1, 0),
        new Vector3(0, 0, 1),
        new Vector3(0, 0, -1)
      ];
    }
    /**
     * Update the matrices for the camera and shadow, used internally by the renderer.
     *
     * @param {Light} light - The light for which the shadow is being rendered.
     * @param {number} [viewportIndex=0] - The viewport index.
     */
    updateMatrices(light, viewportIndex = 0) {
      const camera = this.camera;
      const shadowMatrix = this.matrix;
      const far = light.distance || camera.far;
      if (far !== camera.far) {
        camera.far = far;
        camera.updateProjectionMatrix();
      }
      _lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
      camera.position.copy(_lightPositionWorld);
      _lookTarget.copy(camera.position);
      _lookTarget.add(this._cubeDirections[viewportIndex]);
      camera.up.copy(this._cubeUps[viewportIndex]);
      camera.lookAt(_lookTarget);
      camera.updateMatrixWorld();
      shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);
      _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
      this._frustum.setFromProjectionMatrix(_projScreenMatrix);
    }
  };
  var PointLight = class extends Light {
    /**
     * Constructs a new point light.
     *
     * @param {(number|Color|string)} [color=0xffffff] - The light's color.
     * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).
     * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.
     * @param {number} [decay=2] - The amount the light dims along the distance of the light.
     */
    constructor(color2, intensity, distance2 = 0, decay = 2) {
      super(color2, intensity);
      this.isPointLight = true;
      this.type = "PointLight";
      this.distance = distance2;
      this.decay = decay;
      this.shadow = new PointLightShadow();
    }
    /**
     * The light's power. Power is the luminous power of the light measured in lumens (lm).
     * Changing the power will also change the light's intensity.
     *
     * @type {number}
     */
    get power() {
      return this.intensity * 4 * Math.PI;
    }
    set power(power) {
      this.intensity = power / (4 * Math.PI);
    }
    dispose() {
      this.shadow.dispose();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.distance = source.distance;
      this.decay = source.decay;
      this.shadow = source.shadow.clone();
      return this;
    }
  };
  var OrthographicCamera = class extends Camera {
    /**
     * Constructs a new orthographic camera.
     *
     * @param {number} [left=-1] - The left plane of the camera's frustum.
     * @param {number} [right=1] - The right plane of the camera's frustum.
     * @param {number} [top=1] - The top plane of the camera's frustum.
     * @param {number} [bottom=-1] - The bottom plane of the camera's frustum.
     * @param {number} [near=0.1] - The camera's near plane.
     * @param {number} [far=2000] - The camera's far plane.
     */
    constructor(left = -1, right = 1, top2 = 1, bottom = -1, near = 0.1, far = 2e3) {
      super();
      this.isOrthographicCamera = true;
      this.type = "OrthographicCamera";
      this.zoom = 1;
      this.view = null;
      this.left = left;
      this.right = right;
      this.top = top2;
      this.bottom = bottom;
      this.near = near;
      this.far = far;
      this.updateProjectionMatrix();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.left = source.left;
      this.right = source.right;
      this.top = source.top;
      this.bottom = source.bottom;
      this.near = source.near;
      this.far = source.far;
      this.zoom = source.zoom;
      this.view = source.view === null ? null : Object.assign({}, source.view);
      return this;
    }
    /**
     * Sets an offset in a larger frustum. This is useful for multi-window or
     * multi-monitor/multi-machine setups.
     *
     * @param {number} fullWidth - The full width of multiview setup.
     * @param {number} fullHeight - The full height of multiview setup.
     * @param {number} x - The horizontal offset of the subcamera.
     * @param {number} y - The vertical offset of the subcamera.
     * @param {number} width - The width of subcamera.
     * @param {number} height - The height of subcamera.
     * @see {@link PerspectiveCamera#setViewOffset}
     */
    setViewOffset(fullWidth, fullHeight, x, y, width, height) {
      if (this.view === null) {
        this.view = {
          enabled: true,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1
        };
      }
      this.view.enabled = true;
      this.view.fullWidth = fullWidth;
      this.view.fullHeight = fullHeight;
      this.view.offsetX = x;
      this.view.offsetY = y;
      this.view.width = width;
      this.view.height = height;
      this.updateProjectionMatrix();
    }
    /**
     * Removes the view offset from the projection matrix.
     */
    clearViewOffset() {
      if (this.view !== null) {
        this.view.enabled = false;
      }
      this.updateProjectionMatrix();
    }
    /**
     * Updates the camera's projection matrix. Must be called after any change of
     * camera properties.
     */
    updateProjectionMatrix() {
      const dx = (this.right - this.left) / (2 * this.zoom);
      const dy = (this.top - this.bottom) / (2 * this.zoom);
      const cx = (this.right + this.left) / 2;
      const cy = (this.top + this.bottom) / 2;
      let left = cx - dx;
      let right = cx + dx;
      let top2 = cy + dy;
      let bottom = cy - dy;
      if (this.view !== null && this.view.enabled) {
        const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
        const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
        left += scaleW * this.view.offsetX;
        right = left + scaleW * this.view.width;
        top2 -= scaleH * this.view.offsetY;
        bottom = top2 - scaleH * this.view.height;
      }
      this.projectionMatrix.makeOrthographic(left, right, top2, bottom, this.near, this.far, this.coordinateSystem);
      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(meta2) {
      const data = super.toJSON(meta2);
      data.object.zoom = this.zoom;
      data.object.left = this.left;
      data.object.right = this.right;
      data.object.top = this.top;
      data.object.bottom = this.bottom;
      data.object.near = this.near;
      data.object.far = this.far;
      if (this.view !== null) data.object.view = Object.assign({}, this.view);
      return data;
    }
  };
  var DirectionalLightShadow = class extends LightShadow {
    /**
     * Constructs a new directional light shadow.
     */
    constructor() {
      super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
      this.isDirectionalLightShadow = true;
    }
  };
  var DirectionalLight = class extends Light {
    /**
     * Constructs a new directional light.
     *
     * @param {(number|Color|string)} [color=0xffffff] - The light's color.
     * @param {number} [intensity=1] - The light's strength/intensity.
     */
    constructor(color2, intensity) {
      super(color2, intensity);
      this.isDirectionalLight = true;
      this.type = "DirectionalLight";
      this.position.copy(Object3D.DEFAULT_UP);
      this.updateMatrix();
      this.target = new Object3D();
      this.shadow = new DirectionalLightShadow();
    }
    dispose() {
      this.shadow.dispose();
    }
    copy(source) {
      super.copy(source);
      this.target = source.target.clone();
      this.shadow = source.shadow.clone();
      return this;
    }
  };
  var AmbientLight = class extends Light {
    /**
     * Constructs a new ambient light.
     *
     * @param {(number|Color|string)} [color=0xffffff] - The light's color.
     * @param {number} [intensity=1] - The light's strength/intensity.
     */
    constructor(color2, intensity) {
      super(color2, intensity);
      this.isAmbientLight = true;
      this.type = "AmbientLight";
    }
  };
  var RectAreaLight = class extends Light {
    /**
     * Constructs a new area light.
     *
     * @param {(number|Color|string)} [color=0xffffff] - The light's color.
     * @param {number} [intensity=1] - The light's strength/intensity.
     * @param {number} [width=10] - The width of the light.
     * @param {number} [height=10] - The height of the light.
     */
    constructor(color2, intensity, width = 10, height = 10) {
      super(color2, intensity);
      this.isRectAreaLight = true;
      this.type = "RectAreaLight";
      this.width = width;
      this.height = height;
    }
    /**
     * The light's power. Power is the luminous power of the light measured in lumens (lm).
     * Changing the power will also change the light's intensity.
     *
     * @type {number}
     */
    get power() {
      return this.intensity * this.width * this.height * Math.PI;
    }
    set power(power) {
      this.intensity = power / (this.width * this.height * Math.PI);
    }
    copy(source) {
      super.copy(source);
      this.width = source.width;
      this.height = source.height;
      return this;
    }
    toJSON(meta2) {
      const data = super.toJSON(meta2);
      data.object.width = this.width;
      data.object.height = this.height;
      return data;
    }
  };
  var SphericalHarmonics3 = class {
    /**
     * Constructs a new spherical harmonics.
     */
    constructor() {
      this.isSphericalHarmonics3 = true;
      this.coefficients = [];
      for (let i = 0; i < 9; i++) {
        this.coefficients.push(new Vector3());
      }
    }
    /**
     * Sets the given SH coefficients to this instance by copying
     * the values.
     *
     * @param {Array<Vector3>} coefficients - The SH coefficients.
     * @return {SphericalHarmonics3} A reference to this spherical harmonics.
     */
    set(coefficients) {
      for (let i = 0; i < 9; i++) {
        this.coefficients[i].copy(coefficients[i]);
      }
      return this;
    }
    /**
     * Sets all SH coefficients to `0`.
     *
     * @return {SphericalHarmonics3} A reference to this spherical harmonics.
     */
    zero() {
      for (let i = 0; i < 9; i++) {
        this.coefficients[i].set(0, 0, 0);
      }
      return this;
    }
    /**
     * Returns the radiance in the direction of the given normal.
     *
     * @param {Vector3} normal - The normal vector (assumed to be unit length)
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {Vector3} The radiance.
     */
    getAt(normal2, target) {
      const x = normal2.x, y = normal2.y, z = normal2.z;
      const coeff = this.coefficients;
      target.copy(coeff[0]).multiplyScalar(0.282095);
      target.addScaledVector(coeff[1], 0.488603 * y);
      target.addScaledVector(coeff[2], 0.488603 * z);
      target.addScaledVector(coeff[3], 0.488603 * x);
      target.addScaledVector(coeff[4], 1.092548 * (x * y));
      target.addScaledVector(coeff[5], 1.092548 * (y * z));
      target.addScaledVector(coeff[6], 0.315392 * (3 * z * z - 1));
      target.addScaledVector(coeff[7], 1.092548 * (x * z));
      target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));
      return target;
    }
    /**
     * Returns the irradiance (radiance convolved with cosine lobe) in the
     * direction of the given normal.
     *
     * @param {Vector3} normal - The normal vector (assumed to be unit length)
     * @param {Vector3} target - The target vector that is used to store the method's result.
     * @return {Vector3} The irradiance.
     */
    getIrradianceAt(normal2, target) {
      const x = normal2.x, y = normal2.y, z = normal2.z;
      const coeff = this.coefficients;
      target.copy(coeff[0]).multiplyScalar(0.886227);
      target.addScaledVector(coeff[1], 2 * 0.511664 * y);
      target.addScaledVector(coeff[2], 2 * 0.511664 * z);
      target.addScaledVector(coeff[3], 2 * 0.511664 * x);
      target.addScaledVector(coeff[4], 2 * 0.429043 * x * y);
      target.addScaledVector(coeff[5], 2 * 0.429043 * y * z);
      target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708);
      target.addScaledVector(coeff[7], 2 * 0.429043 * x * z);
      target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y));
      return target;
    }
    /**
     * Adds the given SH to this instance.
     *
     * @param {SphericalHarmonics3} sh - The SH to add.
     * @return {SphericalHarmonics3} A reference to this spherical harmonics.
     */
    add(sh) {
      for (let i = 0; i < 9; i++) {
        this.coefficients[i].add(sh.coefficients[i]);
      }
      return this;
    }
    /**
     * A convenience method for performing {@link SphericalHarmonics3#add} and
     * {@link SphericalHarmonics3#scale} at once.
     *
     * @param {SphericalHarmonics3} sh - The SH to add.
     * @param {number} s - The scale factor.
     * @return {SphericalHarmonics3} A reference to this spherical harmonics.
     */
    addScaledSH(sh, s) {
      for (let i = 0; i < 9; i++) {
        this.coefficients[i].addScaledVector(sh.coefficients[i], s);
      }
      return this;
    }
    /**
     * Scales this SH by the given scale factor.
     *
     * @param {number} s - The scale factor.
     * @return {SphericalHarmonics3} A reference to this spherical harmonics.
     */
    scale(s) {
      for (let i = 0; i < 9; i++) {
        this.coefficients[i].multiplyScalar(s);
      }
      return this;
    }
    /**
     * Linear interpolates between the given SH and this instance by the given
     * alpha factor.
     *
     * @param {SphericalHarmonics3} sh - The SH to interpolate with.
     * @param {number} alpha - The alpha factor.
     * @return {SphericalHarmonics3} A reference to this spherical harmonics.
     */
    lerp(sh, alpha) {
      for (let i = 0; i < 9; i++) {
        this.coefficients[i].lerp(sh.coefficients[i], alpha);
      }
      return this;
    }
    /**
     * Returns `true` if this spherical harmonics is equal with the given one.
     *
     * @param {SphericalHarmonics3} sh - The spherical harmonics to test for equality.
     * @return {boolean} Whether this spherical harmonics is equal with the given one.
     */
    equals(sh) {
      for (let i = 0; i < 9; i++) {
        if (!this.coefficients[i].equals(sh.coefficients[i])) {
          return false;
        }
      }
      return true;
    }
    /**
     * Copies the values of the given spherical harmonics to this instance.
     *
     * @param {SphericalHarmonics3} sh - The spherical harmonics to copy.
     * @return {SphericalHarmonics3} A reference to this spherical harmonics.
     */
    copy(sh) {
      return this.set(sh.coefficients);
    }
    /**
     * Returns a new spherical harmonics with copied values from this instance.
     *
     * @return {SphericalHarmonics3} A clone of this instance.
     */
    clone() {
      return new this.constructor().copy(this);
    }
    /**
     * Sets the SH coefficients of this instance from the given array.
     *
     * @param {Array<number>} array - An array holding the SH coefficients.
     * @param {number} [offset=0] - The array offset where to start copying.
     * @return {SphericalHarmonics3} A clone of this instance.
     */
    fromArray(array2, offset = 0) {
      const coefficients = this.coefficients;
      for (let i = 0; i < 9; i++) {
        coefficients[i].fromArray(array2, offset + i * 3);
      }
      return this;
    }
    /**
     * Returns an array with the SH coefficients, or copies them into the provided
     * array. The coefficients are represented as numbers.
     *
     * @param {Array<number>} [array=[]] - The target array.
     * @param {number} [offset=0] - The array offset where to start copying.
     * @return {Array<number>} An array with flat SH coefficients.
     */
    toArray(array2 = [], offset = 0) {
      const coefficients = this.coefficients;
      for (let i = 0; i < 9; i++) {
        coefficients[i].toArray(array2, offset + i * 3);
      }
      return array2;
    }
    /**
     * Computes the SH basis for the given normal vector.
     *
     * @param {Vector3} normal - The normal.
     * @param {Array<number>} shBasis - The target array holding the SH basis.
     */
    static getBasisAt(normal2, shBasis) {
      const x = normal2.x, y = normal2.y, z = normal2.z;
      shBasis[0] = 0.282095;
      shBasis[1] = 0.488603 * y;
      shBasis[2] = 0.488603 * z;
      shBasis[3] = 0.488603 * x;
      shBasis[4] = 1.092548 * x * y;
      shBasis[5] = 1.092548 * y * z;
      shBasis[6] = 0.315392 * (3 * z * z - 1);
      shBasis[7] = 1.092548 * x * z;
      shBasis[8] = 0.546274 * (x * x - y * y);
    }
  };
  var LightProbe = class extends Light {
    /**
     * Constructs a new light probe.
     *
     * @param {SphericalHarmonics3} sh - The spherical harmonics which represents encoded lighting information.
     * @param {number} [intensity=1] - The light's strength/intensity.
     */
    constructor(sh = new SphericalHarmonics3(), intensity = 1) {
      super(void 0, intensity);
      this.isLightProbe = true;
      this.sh = sh;
    }
    copy(source) {
      super.copy(source);
      this.sh.copy(source.sh);
      return this;
    }
    /**
     * Deserializes the light prove from the given JSON.
     *
     * @param {Object} json - The JSON holding the serialized light probe.
     * @return {LightProbe} A reference to this light probe.
     */
    fromJSON(json) {
      this.intensity = json.intensity;
      this.sh.fromArray(json.sh);
      return this;
    }
    toJSON(meta2) {
      const data = super.toJSON(meta2);
      data.object.sh = this.sh.toArray();
      return data;
    }
  };
  var ArrayCamera = class extends PerspectiveCamera {
    /**
     * Constructs a new array camera.
     *
     * @param {Array<PerspectiveCamera>} [array=[]] - An array of perspective sub cameras.
     */
    constructor(array2 = []) {
      super();
      this.isArrayCamera = true;
      this.isMultiViewCamera = false;
      this.cameras = array2;
    }
  };
  var _RESERVED_CHARS_RE = "\\[\\]\\.:\\/";
  var _reservedRe = new RegExp("[" + _RESERVED_CHARS_RE + "]", "g");
  var _wordChar = "[^" + _RESERVED_CHARS_RE + "]";
  var _wordCharOrDot = "[^" + _RESERVED_CHARS_RE.replace("\\.", "") + "]";
  var _directoryRe = /* @__PURE__ */ /((?:WC+[\/:])*)/.source.replace("WC", _wordChar);
  var _nodeRe = /* @__PURE__ */ /(WCOD+)?/.source.replace("WCOD", _wordCharOrDot);
  var _objectRe = /* @__PURE__ */ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", _wordChar);
  var _propertyRe = /* @__PURE__ */ /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", _wordChar);
  var _trackRe = new RegExp(
    "^" + _directoryRe + _nodeRe + _objectRe + _propertyRe + "$"
  );
  var _supportedObjectNames = ["material", "materials", "bones", "map"];
  var Composite = class {
    constructor(targetGroup, path, optionalParsedPath) {
      const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
      this._targetGroup = targetGroup;
      this._bindings = targetGroup.subscribe_(path, parsedPath);
    }
    getValue(array2, offset) {
      this.bind();
      const firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
      if (binding !== void 0) binding.getValue(array2, offset);
    }
    setValue(array2, offset) {
      const bindings = this._bindings;
      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
        bindings[i].setValue(array2, offset);
      }
    }
    bind() {
      const bindings = this._bindings;
      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
        bindings[i].bind();
      }
    }
    unbind() {
      const bindings = this._bindings;
      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
        bindings[i].unbind();
      }
    }
  };
  var PropertyBinding = class _PropertyBinding {
    /**
     * Constructs a new property binding.
     *
     * @param {Object} rootNode - The root node.
     * @param {string} path - The path.
     * @param {?Object} [parsedPath] - The parsed path.
     */
    constructor(rootNode, path, parsedPath) {
      this.path = path;
      this.parsedPath = parsedPath || _PropertyBinding.parseTrackName(path);
      this.node = _PropertyBinding.findNode(rootNode, this.parsedPath.nodeName);
      this.rootNode = rootNode;
      this.getValue = this._getValue_unbound;
      this.setValue = this._setValue_unbound;
    }
    /**
     * Factory method for creating a property binding from the given parameters.
     *
     * @static
     * @param {Object} root - The root node.
     * @param {string} path - The path.
     * @param {?Object} [parsedPath] - The parsed path.
     * @return {PropertyBinding|Composite} The created property binding or composite.
     */
    static create(root, path, parsedPath) {
      if (!(root && root.isAnimationObjectGroup)) {
        return new _PropertyBinding(root, path, parsedPath);
      } else {
        return new _PropertyBinding.Composite(root, path, parsedPath);
      }
    }
    /**
     * Replaces spaces with underscores and removes unsupported characters from
     * node names, to ensure compatibility with parseTrackName().
     *
     * @param {string} name - Node name to be sanitized.
     * @return {string} The sanitized node name.
     */
    static sanitizeNodeName(name2) {
      return name2.replace(/\s/g, "_").replace(_reservedRe, "");
    }
    /**
     * Parses the given track name (an object path to an animated property) and
     * returns an object with information about the path. Matches strings in the following forms:
     *
     * - nodeName.property
     * - nodeName.property[accessor]
     * - nodeName.material.property[accessor]
     * - uuid.property[accessor]
     * - uuid.objectName[objectIndex].propertyName[propertyIndex]
     * - parentName/nodeName.property
     * - parentName/parentName/nodeName.property[index]
     * - .bone[Armature.DEF_cog].position
     * - scene:helium_balloon_model:helium_balloon_model.position
     *
     * @static
     * @param {string} trackName - The track name to parse.
     * @return {Object} The parsed track name as an object.
     */
    static parseTrackName(trackName) {
      const matches = _trackRe.exec(trackName);
      if (matches === null) {
        throw new Error("PropertyBinding: Cannot parse trackName: " + trackName);
      }
      const results = {
        // directoryName: matches[ 1 ], // (tschw) currently unused
        nodeName: matches[2],
        objectName: matches[3],
        objectIndex: matches[4],
        propertyName: matches[5],
        // required
        propertyIndex: matches[6]
      };
      const lastDot = results.nodeName && results.nodeName.lastIndexOf(".");
      if (lastDot !== void 0 && lastDot !== -1) {
        const objectName = results.nodeName.substring(lastDot + 1);
        if (_supportedObjectNames.indexOf(objectName) !== -1) {
          results.nodeName = results.nodeName.substring(0, lastDot);
          results.objectName = objectName;
        }
      }
      if (results.propertyName === null || results.propertyName.length === 0) {
        throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName);
      }
      return results;
    }
    /**
     * Searches for a node in the hierarchy of the given root object by the given
     * node name.
     *
     * @static
     * @param {Object} root - The root object.
     * @param {string|number} nodeName - The name of the node.
     * @return {?Object} The found node. Returns `null` if no object was found.
     */
    static findNode(root, nodeName) {
      if (nodeName === void 0 || nodeName === "" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
        return root;
      }
      if (root.skeleton) {
        const bone = root.skeleton.getBoneByName(nodeName);
        if (bone !== void 0) {
          return bone;
        }
      }
      if (root.children) {
        const searchNodeSubtree = function(children) {
          for (let i = 0; i < children.length; i++) {
            const childNode = children[i];
            if (childNode.name === nodeName || childNode.uuid === nodeName) {
              return childNode;
            }
            const result = searchNodeSubtree(childNode.children);
            if (result) return result;
          }
          return null;
        };
        const subTreeNode = searchNodeSubtree(root.children);
        if (subTreeNode) {
          return subTreeNode;
        }
      }
      return null;
    }
    // these are used to "bind" a nonexistent property
    _getValue_unavailable() {
    }
    _setValue_unavailable() {
    }
    // Getters
    _getValue_direct(buffer2, offset) {
      buffer2[offset] = this.targetObject[this.propertyName];
    }
    _getValue_array(buffer2, offset) {
      const source = this.resolvedProperty;
      for (let i = 0, n = source.length; i !== n; ++i) {
        buffer2[offset++] = source[i];
      }
    }
    _getValue_arrayElement(buffer2, offset) {
      buffer2[offset] = this.resolvedProperty[this.propertyIndex];
    }
    _getValue_toArray(buffer2, offset) {
      this.resolvedProperty.toArray(buffer2, offset);
    }
    // Direct
    _setValue_direct(buffer2, offset) {
      this.targetObject[this.propertyName] = buffer2[offset];
    }
    _setValue_direct_setNeedsUpdate(buffer2, offset) {
      this.targetObject[this.propertyName] = buffer2[offset];
      this.targetObject.needsUpdate = true;
    }
    _setValue_direct_setMatrixWorldNeedsUpdate(buffer2, offset) {
      this.targetObject[this.propertyName] = buffer2[offset];
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // EntireArray
    _setValue_array(buffer2, offset) {
      const dest = this.resolvedProperty;
      for (let i = 0, n = dest.length; i !== n; ++i) {
        dest[i] = buffer2[offset++];
      }
    }
    _setValue_array_setNeedsUpdate(buffer2, offset) {
      const dest = this.resolvedProperty;
      for (let i = 0, n = dest.length; i !== n; ++i) {
        dest[i] = buffer2[offset++];
      }
      this.targetObject.needsUpdate = true;
    }
    _setValue_array_setMatrixWorldNeedsUpdate(buffer2, offset) {
      const dest = this.resolvedProperty;
      for (let i = 0, n = dest.length; i !== n; ++i) {
        dest[i] = buffer2[offset++];
      }
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // ArrayElement
    _setValue_arrayElement(buffer2, offset) {
      this.resolvedProperty[this.propertyIndex] = buffer2[offset];
    }
    _setValue_arrayElement_setNeedsUpdate(buffer2, offset) {
      this.resolvedProperty[this.propertyIndex] = buffer2[offset];
      this.targetObject.needsUpdate = true;
    }
    _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer2, offset) {
      this.resolvedProperty[this.propertyIndex] = buffer2[offset];
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // HasToFromArray
    _setValue_fromArray(buffer2, offset) {
      this.resolvedProperty.fromArray(buffer2, offset);
    }
    _setValue_fromArray_setNeedsUpdate(buffer2, offset) {
      this.resolvedProperty.fromArray(buffer2, offset);
      this.targetObject.needsUpdate = true;
    }
    _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer2, offset) {
      this.resolvedProperty.fromArray(buffer2, offset);
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    _getValue_unbound(targetArray, offset) {
      this.bind();
      this.getValue(targetArray, offset);
    }
    _setValue_unbound(sourceArray, offset) {
      this.bind();
      this.setValue(sourceArray, offset);
    }
    /**
     * Creates a getter / setter pair for the property tracked by this binding.
     */
    bind() {
      let targetObject = this.node;
      const parsedPath = this.parsedPath;
      const objectName = parsedPath.objectName;
      const propertyName2 = parsedPath.propertyName;
      let propertyIndex = parsedPath.propertyIndex;
      if (!targetObject) {
        targetObject = _PropertyBinding.findNode(this.rootNode, parsedPath.nodeName);
        this.node = targetObject;
      }
      this.getValue = this._getValue_unavailable;
      this.setValue = this._setValue_unavailable;
      if (!targetObject) {
        console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
        return;
      }
      if (objectName) {
        let objectIndex = parsedPath.objectIndex;
        switch (objectName) {
          case "materials":
            if (!targetObject.material) {
              console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
              return;
            }
            if (!targetObject.material.materials) {
              console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
              return;
            }
            targetObject = targetObject.material.materials;
            break;
          case "bones":
            if (!targetObject.skeleton) {
              console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
              return;
            }
            targetObject = targetObject.skeleton.bones;
            for (let i = 0; i < targetObject.length; i++) {
              if (targetObject[i].name === objectIndex) {
                objectIndex = i;
                break;
              }
            }
            break;
          case "map":
            if ("map" in targetObject) {
              targetObject = targetObject.map;
              break;
            }
            if (!targetObject.material) {
              console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
              return;
            }
            if (!targetObject.material.map) {
              console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
              return;
            }
            targetObject = targetObject.material.map;
            break;
          default:
            if (targetObject[objectName] === void 0) {
              console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
              return;
            }
            targetObject = targetObject[objectName];
        }
        if (objectIndex !== void 0) {
          if (targetObject[objectIndex] === void 0) {
            console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject);
            return;
          }
          targetObject = targetObject[objectIndex];
        }
      }
      const nodeProperty = targetObject[propertyName2];
      if (nodeProperty === void 0) {
        const nodeName = parsedPath.nodeName;
        console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName + "." + propertyName2 + " but it wasn't found.", targetObject);
        return;
      }
      let versioning = this.Versioning.None;
      this.targetObject = targetObject;
      if (targetObject.isMaterial === true) {
        versioning = this.Versioning.NeedsUpdate;
      } else if (targetObject.isObject3D === true) {
        versioning = this.Versioning.MatrixWorldNeedsUpdate;
      }
      let bindingType = this.BindingType.Direct;
      if (propertyIndex !== void 0) {
        if (propertyName2 === "morphTargetInfluences") {
          if (!targetObject.geometry) {
            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
            return;
          }
          if (!targetObject.geometry.morphAttributes) {
            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
            return;
          }
          if (targetObject.morphTargetDictionary[propertyIndex] !== void 0) {
            propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
          }
        }
        bindingType = this.BindingType.ArrayElement;
        this.resolvedProperty = nodeProperty;
        this.propertyIndex = propertyIndex;
      } else if (nodeProperty.fromArray !== void 0 && nodeProperty.toArray !== void 0) {
        bindingType = this.BindingType.HasFromToArray;
        this.resolvedProperty = nodeProperty;
      } else if (Array.isArray(nodeProperty)) {
        bindingType = this.BindingType.EntireArray;
        this.resolvedProperty = nodeProperty;
      } else {
        this.propertyName = propertyName2;
      }
      this.getValue = this.GetterByBindingType[bindingType];
      this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
    }
    /**
     * Unbinds the property.
     */
    unbind() {
      this.node = null;
      this.getValue = this._getValue_unbound;
      this.setValue = this._setValue_unbound;
    }
  };
  PropertyBinding.Composite = Composite;
  PropertyBinding.prototype.BindingType = {
    Direct: 0,
    EntireArray: 1,
    ArrayElement: 2,
    HasFromToArray: 3
  };
  PropertyBinding.prototype.Versioning = {
    None: 0,
    NeedsUpdate: 1,
    MatrixWorldNeedsUpdate: 2
  };
  PropertyBinding.prototype.GetterByBindingType = [
    PropertyBinding.prototype._getValue_direct,
    PropertyBinding.prototype._getValue_array,
    PropertyBinding.prototype._getValue_arrayElement,
    PropertyBinding.prototype._getValue_toArray
  ];
  PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [
    [
      // Direct
      PropertyBinding.prototype._setValue_direct,
      PropertyBinding.prototype._setValue_direct_setNeedsUpdate,
      PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate
    ],
    [
      // EntireArray
      PropertyBinding.prototype._setValue_array,
      PropertyBinding.prototype._setValue_array_setNeedsUpdate,
      PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate
    ],
    [
      // ArrayElement
      PropertyBinding.prototype._setValue_arrayElement,
      PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,
      PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
    ],
    [
      // HasToFromArray
      PropertyBinding.prototype._setValue_fromArray,
      PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,
      PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
    ]
  ];
  var _controlInterpolantsResultBuffer = new Float32Array(1);
  var InstancedInterleavedBuffer = class extends InterleavedBuffer {
    /**
     * Constructs a new instanced interleaved buffer.
     *
     * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.
     * @param {number} stride - The number of typed-array elements per vertex.
     * @param {number} [meshPerAttribute=1] - Defines how often a value of this interleaved buffer should be repeated.
     */
    constructor(array2, stride, meshPerAttribute = 1) {
      super(array2, stride);
      this.isInstancedInterleavedBuffer = true;
      this.meshPerAttribute = meshPerAttribute;
    }
    copy(source) {
      super.copy(source);
      this.meshPerAttribute = source.meshPerAttribute;
      return this;
    }
    clone(data) {
      const ib = super.clone(data);
      ib.meshPerAttribute = this.meshPerAttribute;
      return ib;
    }
    toJSON(data) {
      const json = super.toJSON(data);
      json.isInstancedInterleavedBuffer = true;
      json.meshPerAttribute = this.meshPerAttribute;
      return json;
    }
  };
  var Matrix2 = class _Matrix2 {
    /**
     * Constructs a new 2x2 matrix. The arguments are supposed to be
     * in row-major order. If no arguments are provided, the constructor
     * initializes the matrix as an identity matrix.
     *
     * @param {number} [n11] - 1-1 matrix element.
     * @param {number} [n12] - 1-2 matrix element.
     * @param {number} [n21] - 2-1 matrix element.
     * @param {number} [n22] - 2-2 matrix element.
     */
    constructor(n11, n12, n21, n22) {
      _Matrix2.prototype.isMatrix2 = true;
      this.elements = [
        1,
        0,
        0,
        1
      ];
      if (n11 !== void 0) {
        this.set(n11, n12, n21, n22);
      }
    }
    /**
     * Sets this matrix to the 2x2 identity matrix.
     *
     * @return {Matrix2} A reference to this matrix.
     */
    identity() {
      this.set(
        1,
        0,
        0,
        1
      );
      return this;
    }
    /**
     * Sets the elements of the matrix from the given array.
     *
     * @param {Array<number>} array - The matrix elements in column-major order.
     * @param {number} [offset=0] - Index of the first element in the array.
     * @return {Matrix2} A reference to this matrix.
     */
    fromArray(array2, offset = 0) {
      for (let i = 0; i < 4; i++) {
        this.elements[i] = array2[i + offset];
      }
      return this;
    }
    /**
     * Sets the elements of the matrix.The arguments are supposed to be
     * in row-major order.
     *
     * @param {number} n11 - 1-1 matrix element.
     * @param {number} n12 - 1-2 matrix element.
     * @param {number} n21 - 2-1 matrix element.
     * @param {number} n22 - 2-2 matrix element.
     * @return {Matrix2} A reference to this matrix.
     */
    set(n11, n12, n21, n22) {
      const te = this.elements;
      te[0] = n11;
      te[2] = n12;
      te[1] = n21;
      te[3] = n22;
      return this;
    }
  };
  if (typeof __THREE_DEVTOOLS__ !== "undefined") {
    __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
      revision: REVISION
    } }));
  }
  if (typeof window !== "undefined") {
    if (window.__THREE__) {
      console.warn("WARNING: Multiple instances of Three.js being imported.");
    } else {
      window.__THREE__ = REVISION;
    }
  }

  // node_modules/three/build/three.webgpu.js
  var refreshUniforms = [
    "alphaMap",
    "alphaTest",
    "anisotropy",
    "anisotropyMap",
    "anisotropyRotation",
    "aoMap",
    "aoMapIntensity",
    "attenuationColor",
    "attenuationDistance",
    "bumpMap",
    "clearcoat",
    "clearcoatMap",
    "clearcoatNormalMap",
    "clearcoatNormalScale",
    "clearcoatRoughness",
    "color",
    "dispersion",
    "displacementMap",
    "emissive",
    "emissiveIntensity",
    "emissiveMap",
    "envMap",
    "envMapIntensity",
    "gradientMap",
    "ior",
    "iridescence",
    "iridescenceIOR",
    "iridescenceMap",
    "iridescenceThicknessMap",
    "lightMap",
    "lightMapIntensity",
    "map",
    "matcap",
    "metalness",
    "metalnessMap",
    "normalMap",
    "normalScale",
    "opacity",
    "roughness",
    "roughnessMap",
    "sheen",
    "sheenColor",
    "sheenColorMap",
    "sheenRoughnessMap",
    "shininess",
    "specular",
    "specularColor",
    "specularColorMap",
    "specularIntensity",
    "specularIntensityMap",
    "specularMap",
    "thickness",
    "transmission",
    "transmissionMap"
  ];
  var NodeMaterialObserver = class {
    /**
     * Constructs a new node material observer.
     *
     * @param {NodeBuilder} builder - The node builder.
     */
    constructor(builder) {
      this.renderObjects = /* @__PURE__ */ new WeakMap();
      this.hasNode = this.containsNode(builder);
      this.hasAnimation = builder.object.isSkinnedMesh === true;
      this.refreshUniforms = refreshUniforms;
      this.renderId = 0;
    }
    /**
     * Returns `true` if the given render object is verified for the first time of this observer.
     *
     * @param {RenderObject} renderObject - The render object.
     * @return {boolean} Whether the given render object is verified for the first time of this observer.
     */
    firstInitialization(renderObject) {
      const hasInitialized = this.renderObjects.has(renderObject);
      if (hasInitialized === false) {
        this.getRenderObjectData(renderObject);
        return true;
      }
      return false;
    }
    /**
     * Returns `true` if the current rendering produces motion vectors.
     *
     * @param {Renderer} renderer - The renderer.
     * @return {boolean} Whether the current rendering produces motion vectors or not.
     */
    needsVelocity(renderer) {
      const mrt = renderer.getMRT();
      return mrt !== null && mrt.has("velocity");
    }
    /**
     * Returns monitoring data for the given render object.
     *
     * @param {RenderObject} renderObject - The render object.
     * @return {Object} The monitoring data.
     */
    getRenderObjectData(renderObject) {
      let data = this.renderObjects.get(renderObject);
      if (data === void 0) {
        const { geometry, material: material2, object } = renderObject;
        data = {
          material: this.getMaterialData(material2),
          geometry: {
            id: geometry.id,
            attributes: this.getAttributesData(geometry.attributes),
            indexVersion: geometry.index ? geometry.index.version : null,
            drawRange: { start: geometry.drawRange.start, count: geometry.drawRange.count }
          },
          worldMatrix: object.matrixWorld.clone()
        };
        if (object.center) {
          data.center = object.center.clone();
        }
        if (object.morphTargetInfluences) {
          data.morphTargetInfluences = object.morphTargetInfluences.slice();
        }
        if (renderObject.bundle !== null) {
          data.version = renderObject.bundle.version;
        }
        if (data.material.transmission > 0) {
          const { width, height } = renderObject.context;
          data.bufferWidth = width;
          data.bufferHeight = height;
        }
        this.renderObjects.set(renderObject, data);
      }
      return data;
    }
    /**
     * Returns an attribute data structure holding the attributes versions for
     * monitoring.
     *
     * @param {Object} attributes - The geometry attributes.
     * @return {Object} An object for monitoring the versions of attributes.
     */
    getAttributesData(attributes) {
      const attributesData = {};
      for (const name2 in attributes) {
        const attribute2 = attributes[name2];
        attributesData[name2] = {
          version: attribute2.version
        };
      }
      return attributesData;
    }
    /**
     * Returns `true` if the node builder's material uses
     * node properties.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {boolean} Whether the node builder's material uses node properties or not.
     */
    containsNode(builder) {
      const material2 = builder.material;
      for (const property2 in material2) {
        if (material2[property2] && material2[property2].isNode)
          return true;
      }
      if (builder.renderer.overrideNodes.modelViewMatrix !== null || builder.renderer.overrideNodes.modelNormalViewMatrix !== null)
        return true;
      return false;
    }
    /**
     * Returns a material data structure holding the material property values for
     * monitoring.
     *
     * @param {Material} material - The material.
     * @return {Object} An object for monitoring material properties.
     */
    getMaterialData(material2) {
      const data = {};
      for (const property2 of this.refreshUniforms) {
        const value = material2[property2];
        if (value === null || value === void 0) continue;
        if (typeof value === "object" && value.clone !== void 0) {
          if (value.isTexture === true) {
            data[property2] = { id: value.id, version: value.version };
          } else {
            data[property2] = value.clone();
          }
        } else {
          data[property2] = value;
        }
      }
      return data;
    }
    /**
     * Returns `true` if the given render object has not changed its state.
     *
     * @param {RenderObject} renderObject - The render object.
     * @return {boolean} Whether the given render object has changed its state or not.
     */
    equals(renderObject) {
      const { object, material: material2, geometry } = renderObject;
      const renderObjectData = this.getRenderObjectData(renderObject);
      if (renderObjectData.worldMatrix.equals(object.matrixWorld) !== true) {
        renderObjectData.worldMatrix.copy(object.matrixWorld);
        return false;
      }
      const materialData = renderObjectData.material;
      for (const property2 in materialData) {
        const value = materialData[property2];
        const mtlValue = material2[property2];
        if (value.equals !== void 0) {
          if (value.equals(mtlValue) === false) {
            value.copy(mtlValue);
            return false;
          }
        } else if (mtlValue.isTexture === true) {
          if (value.id !== mtlValue.id || value.version !== mtlValue.version) {
            value.id = mtlValue.id;
            value.version = mtlValue.version;
            return false;
          }
        } else if (value !== mtlValue) {
          materialData[property2] = mtlValue;
          return false;
        }
      }
      if (materialData.transmission > 0) {
        const { width, height } = renderObject.context;
        if (renderObjectData.bufferWidth !== width || renderObjectData.bufferHeight !== height) {
          renderObjectData.bufferWidth = width;
          renderObjectData.bufferHeight = height;
          return false;
        }
      }
      const storedGeometryData = renderObjectData.geometry;
      const attributes = geometry.attributes;
      const storedAttributes = storedGeometryData.attributes;
      const storedAttributeNames = Object.keys(storedAttributes);
      const currentAttributeNames = Object.keys(attributes);
      if (storedGeometryData.id !== geometry.id) {
        storedGeometryData.id = geometry.id;
        return false;
      }
      if (storedAttributeNames.length !== currentAttributeNames.length) {
        renderObjectData.geometry.attributes = this.getAttributesData(attributes);
        return false;
      }
      for (const name2 of storedAttributeNames) {
        const storedAttributeData = storedAttributes[name2];
        const attribute2 = attributes[name2];
        if (attribute2 === void 0) {
          delete storedAttributes[name2];
          return false;
        }
        if (storedAttributeData.version !== attribute2.version) {
          storedAttributeData.version = attribute2.version;
          return false;
        }
      }
      const index = geometry.index;
      const storedIndexVersion = storedGeometryData.indexVersion;
      const currentIndexVersion = index ? index.version : null;
      if (storedIndexVersion !== currentIndexVersion) {
        storedGeometryData.indexVersion = currentIndexVersion;
        return false;
      }
      if (storedGeometryData.drawRange.start !== geometry.drawRange.start || storedGeometryData.drawRange.count !== geometry.drawRange.count) {
        storedGeometryData.drawRange.start = geometry.drawRange.start;
        storedGeometryData.drawRange.count = geometry.drawRange.count;
        return false;
      }
      if (renderObjectData.morphTargetInfluences) {
        let morphChanged = false;
        for (let i = 0; i < renderObjectData.morphTargetInfluences.length; i++) {
          if (renderObjectData.morphTargetInfluences[i] !== object.morphTargetInfluences[i]) {
            morphChanged = true;
          }
        }
        if (morphChanged) return true;
      }
      if (renderObjectData.center) {
        if (renderObjectData.center.equals(object.center) === false) {
          renderObjectData.center.copy(object.center);
          return true;
        }
      }
      if (renderObject.bundle !== null) {
        renderObjectData.version = renderObject.bundle.version;
      }
      return true;
    }
    /**
     * Checks if the given render object requires a refresh.
     *
     * @param {RenderObject} renderObject - The render object.
     * @param {NodeFrame} nodeFrame - The current node frame.
     * @return {boolean} Whether the given render object requires a refresh or not.
     */
    needsRefresh(renderObject, nodeFrame) {
      if (this.hasNode || this.hasAnimation || this.firstInitialization(renderObject) || this.needsVelocity(nodeFrame.renderer))
        return true;
      const { renderId } = nodeFrame;
      if (this.renderId !== renderId) {
        this.renderId = renderId;
        return true;
      }
      const isStatic = renderObject.object.static === true;
      const isBundle = renderObject.bundle !== null && renderObject.bundle.static === true && this.getRenderObjectData(renderObject).version === renderObject.bundle.version;
      if (isStatic || isBundle)
        return false;
      const notEqual2 = this.equals(renderObject) !== true;
      return notEqual2;
    }
  };
  function cyrb53(value, seed = 0) {
    let h12 = 3735928559 ^ seed, h2 = 1103547991 ^ seed;
    if (value instanceof Array) {
      for (let i = 0, val; i < value.length; i++) {
        val = value[i];
        h12 = Math.imul(h12 ^ val, 2654435761);
        h2 = Math.imul(h2 ^ val, 1597334677);
      }
    } else {
      for (let i = 0, ch; i < value.length; i++) {
        ch = value.charCodeAt(i);
        h12 = Math.imul(h12 ^ ch, 2654435761);
        h2 = Math.imul(h2 ^ ch, 1597334677);
      }
    }
    h12 = Math.imul(h12 ^ h12 >>> 16, 2246822507);
    h12 ^= Math.imul(h2 ^ h2 >>> 13, 3266489909);
    h2 = Math.imul(h2 ^ h2 >>> 16, 2246822507);
    h2 ^= Math.imul(h12 ^ h12 >>> 13, 3266489909);
    return 4294967296 * (2097151 & h2) + (h12 >>> 0);
  }
  var hashString = (str) => cyrb53(str);
  var hashArray = (array2) => cyrb53(array2);
  var hash$1 = (...params) => cyrb53(params);
  function getCacheKey$1(object, force = false) {
    const values = [];
    if (object.isNode === true) {
      values.push(object.id);
      object = object.getSelf();
    }
    for (const { property: property2, childNode } of getNodeChildren(object)) {
      values.push(cyrb53(property2.slice(0, -4)), childNode.getCacheKey(force));
    }
    return cyrb53(values);
  }
  function* getNodeChildren(node, toJSON = false) {
    for (const property2 in node) {
      if (property2.startsWith("_") === true) continue;
      const object = node[property2];
      if (Array.isArray(object) === true) {
        for (let i = 0; i < object.length; i++) {
          const child = object[i];
          if (child && (child.isNode === true || toJSON && typeof child.toJSON === "function")) {
            yield { property: property2, index: i, childNode: child };
          }
        }
      } else if (object && object.isNode === true) {
        yield { property: property2, childNode: object };
      } else if (typeof object === "object") {
        for (const subProperty in object) {
          const child = object[subProperty];
          if (child && (child.isNode === true || toJSON && typeof child.toJSON === "function")) {
            yield { property: property2, index: subProperty, childNode: child };
          }
        }
      }
    }
  }
  var typeFromLength = /* @__PURE__ */ new Map([
    [1, "float"],
    [2, "vec2"],
    [3, "vec3"],
    [4, "vec4"],
    [9, "mat3"],
    [16, "mat4"]
  ]);
  var dataFromObject = /* @__PURE__ */ new WeakMap();
  function getTypeFromLength(length2) {
    return typeFromLength.get(length2);
  }
  function getValueType(value) {
    if (value === void 0 || value === null) return null;
    const typeOf = typeof value;
    if (value.isNode === true) {
      return "node";
    } else if (typeOf === "number") {
      return "float";
    } else if (typeOf === "boolean") {
      return "bool";
    } else if (typeOf === "string") {
      return "string";
    } else if (typeOf === "function") {
      return "shader";
    } else if (value.isVector2 === true) {
      return "vec2";
    } else if (value.isVector3 === true) {
      return "vec3";
    } else if (value.isVector4 === true) {
      return "vec4";
    } else if (value.isMatrix2 === true) {
      return "mat2";
    } else if (value.isMatrix3 === true) {
      return "mat3";
    } else if (value.isMatrix4 === true) {
      return "mat4";
    } else if (value.isColor === true) {
      return "color";
    } else if (value instanceof ArrayBuffer) {
      return "ArrayBuffer";
    }
    return null;
  }
  function getValueFromType(type, ...params) {
    const last4 = type ? type.slice(-4) : void 0;
    if (params.length === 1) {
      if (last4 === "vec2") params = [params[0], params[0]];
      else if (last4 === "vec3") params = [params[0], params[0], params[0]];
      else if (last4 === "vec4") params = [params[0], params[0], params[0], params[0]];
    }
    if (type === "color") {
      return new Color(...params);
    } else if (last4 === "vec2") {
      return new Vector2(...params);
    } else if (last4 === "vec3") {
      return new Vector3(...params);
    } else if (last4 === "vec4") {
      return new Vector4(...params);
    } else if (last4 === "mat2") {
      return new Matrix2(...params);
    } else if (last4 === "mat3") {
      return new Matrix3(...params);
    } else if (last4 === "mat4") {
      return new Matrix4(...params);
    } else if (type === "bool") {
      return params[0] || false;
    } else if (type === "float" || type === "int" || type === "uint") {
      return params[0] || 0;
    } else if (type === "string") {
      return params[0] || "";
    } else if (type === "ArrayBuffer") {
      return base64ToArrayBuffer(params[0]);
    }
    return null;
  }
  function getDataFromObject(object) {
    let data = dataFromObject.get(object);
    if (data === void 0) {
      data = {};
      dataFromObject.set(object, data);
    }
    return data;
  }
  function arrayBufferToBase64(arrayBuffer) {
    let chars = "";
    const array2 = new Uint8Array(arrayBuffer);
    for (let i = 0; i < array2.length; i++) {
      chars += String.fromCharCode(array2[i]);
    }
    return btoa(chars);
  }
  function base64ToArrayBuffer(base64) {
    return Uint8Array.from(atob(base64), (c) => c.charCodeAt(0)).buffer;
  }
  var NodeShaderStage = {
    VERTEX: "vertex",
    FRAGMENT: "fragment"
  };
  var NodeUpdateType = {
    NONE: "none",
    FRAME: "frame",
    RENDER: "render",
    OBJECT: "object"
  };
  var NodeAccess = {
    READ_ONLY: "readOnly",
    WRITE_ONLY: "writeOnly",
    READ_WRITE: "readWrite"
  };
  var defaultShaderStages = ["fragment", "vertex"];
  var defaultBuildStages = ["setup", "analyze", "generate"];
  var shaderStages = [...defaultShaderStages, "compute"];
  var vectorComponents = ["x", "y", "z", "w"];
  var _parentBuildStage = {
    analyze: "setup",
    generate: "analyze"
  };
  var _nodeId = 0;
  var Node = class extends EventDispatcher {
    static get type() {
      return "Node";
    }
    /**
     * Constructs a new node.
     *
     * @param {?string} nodeType - The node type.
     */
    constructor(nodeType = null) {
      super();
      this.nodeType = nodeType;
      this.updateType = NodeUpdateType.NONE;
      this.updateBeforeType = NodeUpdateType.NONE;
      this.updateAfterType = NodeUpdateType.NONE;
      this.uuid = MathUtils.generateUUID();
      this.version = 0;
      this.global = false;
      this.parents = false;
      this.isNode = true;
      this._cacheKey = null;
      this._cacheKeyVersion = 0;
      Object.defineProperty(this, "id", { value: _nodeId++ });
    }
    /**
     * Set this property to `true` when the node should be regenerated.
     *
     * @type {boolean}
     * @default false
     * @param {boolean} value
     */
    set needsUpdate(value) {
      if (value === true) {
        this.version++;
      }
    }
    /**
     * The type of the class. The value is usually the constructor name.
     *
     * @type {string}
    	 * @readonly
     */
    get type() {
      return this.constructor.type;
    }
    /**
     * Convenient method for defining {@link Node#update}.
     *
     * @param {Function} callback - The update method.
     * @param {string} updateType - The update type.
     * @return {Node} A reference to this node.
     */
    onUpdate(callback, updateType) {
      this.updateType = updateType;
      this.update = callback.bind(this.getSelf());
      return this;
    }
    /**
     * Convenient method for defining {@link Node#update}. Similar to {@link Node#onUpdate}, but
     * this method automatically sets the update type to `FRAME`.
     *
     * @param {Function} callback - The update method.
     * @return {Node} A reference to this node.
     */
    onFrameUpdate(callback) {
      return this.onUpdate(callback, NodeUpdateType.FRAME);
    }
    /**
     * Convenient method for defining {@link Node#update}. Similar to {@link Node#onUpdate}, but
     * this method automatically sets the update type to `RENDER`.
     *
     * @param {Function} callback - The update method.
     * @return {Node} A reference to this node.
     */
    onRenderUpdate(callback) {
      return this.onUpdate(callback, NodeUpdateType.RENDER);
    }
    /**
     * Convenient method for defining {@link Node#update}. Similar to {@link Node#onUpdate}, but
     * this method automatically sets the update type to `OBJECT`.
     *
     * @param {Function} callback - The update method.
     * @return {Node} A reference to this node.
     */
    onObjectUpdate(callback) {
      return this.onUpdate(callback, NodeUpdateType.OBJECT);
    }
    /**
     * Convenient method for defining {@link Node#updateReference}.
     *
     * @param {Function} callback - The update method.
     * @return {Node} A reference to this node.
     */
    onReference(callback) {
      this.updateReference = callback.bind(this.getSelf());
      return this;
    }
    /**
     * The `this` reference might point to a Proxy so this method can be used
     * to get the reference to the actual node instance.
     *
     * @return {Node} A reference to the node.
     */
    getSelf() {
      return this.self || this;
    }
    /**
     * Nodes might refer to other objects like materials. This method allows to dynamically update the reference
     * to such objects based on a given state (e.g. the current node frame or builder).
     *
     * @param {any} state - This method can be invocated in different contexts so `state` can refer to any object type.
     * @return {any} The updated reference.
     */
    updateReference() {
      return this;
    }
    /**
     * By default this method returns the value of the {@link Node#global} flag. This method
     * can be overwritten in derived classes if an analytical way is required to determine the
     * global cache referring to the current shader-stage.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {boolean} Whether this node is global or not.
     */
    isGlobal() {
      return this.global;
    }
    /**
     * Generator function that can be used to iterate over the child nodes.
     *
     * @generator
     * @yields {Node} A child node.
     */
    *getChildren() {
      for (const { childNode } of getNodeChildren(this)) {
        yield childNode;
      }
    }
    /**
     * Calling this method dispatches the `dispose` event. This event can be used
     * to register event listeners for clean up tasks.
     */
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
    /**
     * Callback for {@link Node#traverse}.
     *
     * @callback traverseCallback
     * @param {Node} node - The current node.
     */
    /**
     * Can be used to traverse through the node's hierarchy.
     *
     * @param {traverseCallback} callback - A callback that is executed per node.
     */
    traverse(callback) {
      callback(this);
      for (const childNode of this.getChildren()) {
        childNode.traverse(callback);
      }
    }
    /**
     * Returns the cache key for this node.
     *
     * @param {boolean} [force=false] - When set to `true`, a recomputation of the cache key is forced.
     * @return {number} The cache key of the node.
     */
    getCacheKey(force = false) {
      force = force || this.version !== this._cacheKeyVersion;
      if (force === true || this._cacheKey === null) {
        this._cacheKey = hash$1(getCacheKey$1(this, force), this.customCacheKey());
        this._cacheKeyVersion = this.version;
      }
      return this._cacheKey;
    }
    /**
     * Generate a custom cache key for this node.
     *
     * @return {number} The cache key of the node.
     */
    customCacheKey() {
      return 0;
    }
    /**
     * Returns the references to this node which is by default `this`.
     *
     * @return {Node} A reference to this node.
     */
    getScope() {
      return this;
    }
    /**
     * Returns the hash of the node which is used to identify the node. By default it's
     * the {@link Node#uuid} however derived node classes might have to overwrite this method
     * depending on their implementation.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The hash.
     */
    getHash() {
      return this.uuid;
    }
    /**
     * Returns the update type of {@link Node#update}.
     *
     * @return {NodeUpdateType} The update type.
     */
    getUpdateType() {
      return this.updateType;
    }
    /**
     * Returns the update type of {@link Node#updateBefore}.
     *
     * @return {NodeUpdateType} The update type.
     */
    getUpdateBeforeType() {
      return this.updateBeforeType;
    }
    /**
     * Returns the update type of {@link Node#updateAfter}.
     *
     * @return {NodeUpdateType} The update type.
     */
    getUpdateAfterType() {
      return this.updateAfterType;
    }
    /**
     * Certain types are composed of multiple elements. For example a `vec3`
     * is composed of three `float` values. This method returns the type of
     * these elements.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The type of the node.
     */
    getElementType(builder) {
      const type = this.getNodeType(builder);
      const elementType = builder.getElementType(type);
      return elementType;
    }
    /**
     * Returns the node member type for the given name.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @param {string} name - The name of the member.
     * @return {string} The type of the node.
     */
    getMemberType() {
      return "void";
    }
    /**
     * Returns the node's type.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The type of the node.
     */
    getNodeType(builder) {
      const nodeProperties = builder.getNodeProperties(this);
      if (nodeProperties.outputNode) {
        return nodeProperties.outputNode.getNodeType(builder);
      }
      return this.nodeType;
    }
    /**
     * This method is used during the build process of a node and ensures
     * equal nodes are not built multiple times but just once. For example if
     * `attribute( 'uv' )` is used multiple times by the user, the build
     * process makes sure to process just the first node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {Node} The shared node if possible. Otherwise `this` is returned.
     */
    getShared(builder) {
      const hash = this.getHash(builder);
      const nodeFromHash = builder.getNodeFromHash(hash);
      return nodeFromHash || this;
    }
    /**
     * Represents the setup stage which is the first step of the build process, see {@link Node#build} method.
     * This method is often overwritten in derived modules to prepare the node which is used as the output/result.
     * The output node must be returned in the `return` statement.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {?Node} The output node.
     */
    setup(builder) {
      const nodeProperties = builder.getNodeProperties(this);
      let index = 0;
      for (const childNode of this.getChildren()) {
        nodeProperties["node" + index++] = childNode;
      }
      return nodeProperties.outputNode || null;
    }
    /**
     * Represents the analyze stage which is the second step of the build process, see {@link Node#build} method.
     * This stage analyzes the node hierarchy and ensures descendent nodes are built.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @param {?Node} output - The target output node.
     */
    analyze(builder, output2 = null) {
      const usageCount = builder.increaseUsage(this);
      if (this.parents === true) {
        const nodeData = builder.getDataFromNode(this, "any");
        nodeData.stages = nodeData.stages || {};
        nodeData.stages[builder.shaderStage] = nodeData.stages[builder.shaderStage] || [];
        nodeData.stages[builder.shaderStage].push(output2);
      }
      if (usageCount === 1) {
        const nodeProperties = builder.getNodeProperties(this);
        for (const childNode of Object.values(nodeProperties)) {
          if (childNode && childNode.isNode === true) {
            childNode.build(builder, this);
          }
        }
      }
    }
    /**
     * Represents the generate stage which is the third step of the build process, see {@link Node#build} method.
     * This state builds the output node and returns the resulting shader string.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @param {?string} output - Can be used to define the output type.
     * @return {?string} The generated shader string.
     */
    generate(builder, output2) {
      const { outputNode } = builder.getNodeProperties(this);
      if (outputNode && outputNode.isNode === true) {
        return outputNode.build(builder, output2);
      }
    }
    /**
     * The method can be implemented to update the node's internal state before it is used to render an object.
     * The {@link Node#updateBeforeType} property defines how often the update is executed.
     *
     * @abstract
     * @param {NodeFrame} frame - A reference to the current node frame.
     * @return {?boolean} An optional bool that indicates whether the implementation actually performed an update or not (e.g. due to caching).
     */
    updateBefore() {
      console.warn("Abstract function.");
    }
    /**
     * The method can be implemented to update the node's internal state after it was used to render an object.
     * The {@link Node#updateAfterType} property defines how often the update is executed.
     *
     * @abstract
     * @param {NodeFrame} frame - A reference to the current node frame.
     * @return {?boolean} An optional bool that indicates whether the implementation actually performed an update or not (e.g. due to caching).
     */
    updateAfter() {
      console.warn("Abstract function.");
    }
    /**
     * The method can be implemented to update the node's internal state when it is used to render an object.
     * The {@link Node#updateType} property defines how often the update is executed.
     *
     * @abstract
     * @param {NodeFrame} frame - A reference to the current node frame.
     * @return {?boolean} An optional bool that indicates whether the implementation actually performed an update or not (e.g. due to caching).
     */
    update() {
      console.warn("Abstract function.");
    }
    /**
     * This method performs the build of a node. The behavior and return value depend on the current build stage:
     * - **setup**: Prepares the node and its children for the build process. This process can also create new nodes. Returns the node itself or a variant.
     * - **analyze**: Analyzes the node hierarchy for optimizations in the code generation stage. Returns `null`.
     * - **generate**: Generates the shader code for the node. Returns the generated shader string.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @param {string|Node|null} [output=null] - Can be used to define the output type.
     * @return {Node|string|null} The result of the build process, depending on the build stage.
     */
    build(builder, output2 = null) {
      const refNode = this.getShared(builder);
      if (this !== refNode) {
        return refNode.build(builder, output2);
      }
      const nodeData = builder.getDataFromNode(this);
      nodeData.buildStages = nodeData.buildStages || {};
      nodeData.buildStages[builder.buildStage] = true;
      const parentBuildStage = _parentBuildStage[builder.buildStage];
      if (parentBuildStage && nodeData.buildStages[parentBuildStage] !== true) {
        const previousBuildStage = builder.getBuildStage();
        builder.setBuildStage(parentBuildStage);
        this.build(builder);
        builder.setBuildStage(previousBuildStage);
      }
      builder.addNode(this);
      builder.addChain(this);
      let result = null;
      const buildStage = builder.getBuildStage();
      if (buildStage === "setup") {
        this.updateReference(builder);
        const properties = builder.getNodeProperties(this);
        if (properties.initialized !== true) {
          properties.initialized = true;
          properties.outputNode = this.setup(builder) || properties.outputNode || null;
          for (const childNode of Object.values(properties)) {
            if (childNode && childNode.isNode === true) {
              if (childNode.parents === true) {
                const childProperties = builder.getNodeProperties(childNode);
                childProperties.parents = childProperties.parents || [];
                childProperties.parents.push(this);
              }
              childNode.build(builder);
            }
          }
        }
        result = properties.outputNode;
      } else if (buildStage === "analyze") {
        this.analyze(builder, output2);
      } else if (buildStage === "generate") {
        const isGenerateOnce = this.generate.length === 1;
        if (isGenerateOnce) {
          const type = this.getNodeType(builder);
          const nodeData2 = builder.getDataFromNode(this);
          result = nodeData2.snippet;
          if (result === void 0) {
            if (nodeData2.generated === void 0) {
              nodeData2.generated = true;
              result = this.generate(builder) || "";
              nodeData2.snippet = result;
            } else {
              console.warn("THREE.Node: Recursion detected.", this);
              result = "";
            }
          } else if (nodeData2.flowCodes !== void 0 && builder.context.nodeBlock !== void 0) {
            builder.addFlowCodeHierarchy(this, builder.context.nodeBlock);
          }
          result = builder.format(result, type, output2);
        } else {
          result = this.generate(builder, output2) || "";
        }
      }
      builder.removeChain(this);
      builder.addSequentialNode(this);
      return result;
    }
    /**
     * Returns the child nodes as a JSON object.
     *
     * @return {Array<Object>} An iterable list of serialized child objects as JSON.
     */
    getSerializeChildren() {
      return getNodeChildren(this);
    }
    /**
     * Serializes the node to JSON.
     *
     * @param {Object} json - The output JSON object.
     */
    serialize(json) {
      const nodeChildren = this.getSerializeChildren();
      const inputNodes = {};
      for (const { property: property2, index, childNode } of nodeChildren) {
        if (index !== void 0) {
          if (inputNodes[property2] === void 0) {
            inputNodes[property2] = Number.isInteger(index) ? [] : {};
          }
          inputNodes[property2][index] = childNode.toJSON(json.meta).uuid;
        } else {
          inputNodes[property2] = childNode.toJSON(json.meta).uuid;
        }
      }
      if (Object.keys(inputNodes).length > 0) {
        json.inputNodes = inputNodes;
      }
    }
    /**
     * Deserializes the node from the given JSON.
     *
     * @param {Object} json - The JSON object.
     */
    deserialize(json) {
      if (json.inputNodes !== void 0) {
        const nodes = json.meta.nodes;
        for (const property2 in json.inputNodes) {
          if (Array.isArray(json.inputNodes[property2])) {
            const inputArray = [];
            for (const uuid of json.inputNodes[property2]) {
              inputArray.push(nodes[uuid]);
            }
            this[property2] = inputArray;
          } else if (typeof json.inputNodes[property2] === "object") {
            const inputObject = {};
            for (const subProperty in json.inputNodes[property2]) {
              const uuid = json.inputNodes[property2][subProperty];
              inputObject[subProperty] = nodes[uuid];
            }
            this[property2] = inputObject;
          } else {
            const uuid = json.inputNodes[property2];
            this[property2] = nodes[uuid];
          }
        }
      }
    }
    /**
     * Serializes the node into the three.js JSON Object/Scene format.
     *
     * @param {?Object} meta - An optional JSON object that already holds serialized data from other scene objects.
     * @return {Object} The serialized node.
     */
    toJSON(meta2) {
      const { uuid, type } = this;
      const isRoot = meta2 === void 0 || typeof meta2 === "string";
      if (isRoot) {
        meta2 = {
          textures: {},
          images: {},
          nodes: {}
        };
      }
      let data = meta2.nodes[uuid];
      if (data === void 0) {
        data = {
          uuid,
          type,
          meta: meta2,
          metadata: {
            version: 4.7,
            type: "Node",
            generator: "Node.toJSON"
          }
        };
        if (isRoot !== true) meta2.nodes[data.uuid] = data;
        this.serialize(data);
        delete data.meta;
      }
      function extractFromCache(cache3) {
        const values = [];
        for (const key in cache3) {
          const data2 = cache3[key];
          delete data2.metadata;
          values.push(data2);
        }
        return values;
      }
      if (isRoot) {
        const textures = extractFromCache(meta2.textures);
        const images = extractFromCache(meta2.images);
        const nodes = extractFromCache(meta2.nodes);
        if (textures.length > 0) data.textures = textures;
        if (images.length > 0) data.images = images;
        if (nodes.length > 0) data.nodes = nodes;
      }
      return data;
    }
  };
  var ArrayElementNode = class extends Node {
    // @TODO: If extending from TempNode it breaks webgpu_compute
    static get type() {
      return "ArrayElementNode";
    }
    /**
     * Constructs an array element node.
     *
     * @param {Node} node - The array-like node.
     * @param {Node} indexNode - The index node that defines the element access.
     */
    constructor(node, indexNode) {
      super();
      this.node = node;
      this.indexNode = indexNode;
      this.isArrayElementNode = true;
    }
    /**
     * This method is overwritten since the node type is inferred from the array-like node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The node type.
     */
    getNodeType(builder) {
      return this.node.getElementType(builder);
    }
    generate(builder) {
      const indexType = this.indexNode.getNodeType(builder);
      const nodeSnippet = this.node.build(builder);
      const indexSnippet = this.indexNode.build(builder, !builder.isVector(indexType) && builder.isInteger(indexType) ? indexType : "uint");
      return `${nodeSnippet}[ ${indexSnippet} ]`;
    }
  };
  var ConvertNode = class extends Node {
    static get type() {
      return "ConvertNode";
    }
    /**
     * Constructs a new convert node.
     *
     * @param {Node} node - The node which type should be converted.
     * @param {string} convertTo - The target node type. Multiple types can be defined by separating them with a `|` sign.
     */
    constructor(node, convertTo) {
      super();
      this.node = node;
      this.convertTo = convertTo;
    }
    /**
     * This method is overwritten since the implementation tries to infer the best
     * matching type from the {@link ConvertNode#convertTo} property.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The node type.
     */
    getNodeType(builder) {
      const requestType = this.node.getNodeType(builder);
      let convertTo = null;
      for (const overloadingType of this.convertTo.split("|")) {
        if (convertTo === null || builder.getTypeLength(requestType) === builder.getTypeLength(overloadingType)) {
          convertTo = overloadingType;
        }
      }
      return convertTo;
    }
    serialize(data) {
      super.serialize(data);
      data.convertTo = this.convertTo;
    }
    deserialize(data) {
      super.deserialize(data);
      this.convertTo = data.convertTo;
    }
    generate(builder, output2) {
      const node = this.node;
      const type = this.getNodeType(builder);
      const snippet2 = node.build(builder, type);
      return builder.format(snippet2, type, output2);
    }
  };
  var TempNode = class extends Node {
    static get type() {
      return "TempNode";
    }
    /**
     * Constructs a temp node.
     *
     * @param {?string} nodeType - The node type.
     */
    constructor(nodeType = null) {
      super(nodeType);
      this.isTempNode = true;
    }
    /**
     * Whether this node is used more than once in context of other nodes.
     *
     * @param {NodeBuilder} builder - The node builder.
     * @return {boolean} A flag that indicates if there is more than one dependency to other nodes.
     */
    hasDependencies(builder) {
      return builder.getDataFromNode(this).usageCount > 1;
    }
    build(builder, output2) {
      const buildStage = builder.getBuildStage();
      if (buildStage === "generate") {
        const type = builder.getVectorType(this.getNodeType(builder, output2));
        const nodeData = builder.getDataFromNode(this);
        if (nodeData.propertyName !== void 0) {
          return builder.format(nodeData.propertyName, type, output2);
        } else if (type !== "void" && output2 !== "void" && this.hasDependencies(builder)) {
          const snippet2 = super.build(builder, type);
          const nodeVar = builder.getVarFromNode(this, null, type);
          const propertyName2 = builder.getPropertyName(nodeVar);
          builder.addLineFlowCode(`${propertyName2} = ${snippet2}`, this);
          nodeData.snippet = snippet2;
          nodeData.propertyName = propertyName2;
          return builder.format(nodeData.propertyName, type, output2);
        }
      }
      return super.build(builder, output2);
    }
  };
  var JoinNode = class extends TempNode {
    static get type() {
      return "JoinNode";
    }
    /**
     * Constructs a new join node.
     *
     * @param {Array<Node>} nodes - An array of nodes that should be joined.
     * @param {?string} [nodeType=null] - The node type.
     */
    constructor(nodes = [], nodeType = null) {
      super(nodeType);
      this.nodes = nodes;
    }
    /**
     * This method is overwritten since the node type must be inferred from the
     * joined data length if not explicitly defined.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The node type.
     */
    getNodeType(builder) {
      if (this.nodeType !== null) {
        return builder.getVectorType(this.nodeType);
      }
      return builder.getTypeFromLength(this.nodes.reduce((count, cur2) => count + builder.getTypeLength(cur2.getNodeType(builder)), 0));
    }
    generate(builder, output2) {
      const type = this.getNodeType(builder);
      const maxLength = builder.getTypeLength(type);
      const nodes = this.nodes;
      const primitiveType = builder.getComponentType(type);
      const snippetValues = [];
      let length2 = 0;
      for (const input of nodes) {
        if (length2 >= maxLength) {
          console.error(`THREE.TSL: Length of parameters exceeds maximum length of function '${type}()' type.`);
          break;
        }
        let inputType = input.getNodeType(builder);
        let inputTypeLength = builder.getTypeLength(inputType);
        let inputSnippet;
        if (length2 + inputTypeLength > maxLength) {
          console.error(`THREE.TSL: Length of '${type}()' data exceeds maximum length of output type.`);
          inputTypeLength = maxLength - length2;
          inputType = builder.getTypeFromLength(inputTypeLength);
        }
        length2 += inputTypeLength;
        inputSnippet = input.build(builder, inputType);
        const inputPrimitiveType = builder.getComponentType(inputType);
        if (inputPrimitiveType !== primitiveType) {
          inputSnippet = builder.format(inputSnippet, inputPrimitiveType, primitiveType);
        }
        snippetValues.push(inputSnippet);
      }
      const snippet2 = `${builder.getType(type)}( ${snippetValues.join(", ")} )`;
      return builder.format(snippet2, type, output2);
    }
  };
  var _stringVectorComponents = vectorComponents.join("");
  var SplitNode = class extends Node {
    static get type() {
      return "SplitNode";
    }
    /**
     * Constructs a new split node.
     *
     * @param {Node} node - The node that should be accessed.
     * @param {string} [components='x'] - The components that should be accessed.
     */
    constructor(node, components = "x") {
      super();
      this.node = node;
      this.components = components;
      this.isSplitNode = true;
    }
    /**
     * Returns the vector length which is computed based on the requested components.
     *
     * @return {number} The vector length.
     */
    getVectorLength() {
      let vectorLength = this.components.length;
      for (const c of this.components) {
        vectorLength = Math.max(vectorComponents.indexOf(c) + 1, vectorLength);
      }
      return vectorLength;
    }
    /**
     * Returns the component type of the node's type.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The component type.
     */
    getComponentType(builder) {
      return builder.getComponentType(this.node.getNodeType(builder));
    }
    /**
     * This method is overwritten since the node type is inferred from requested components.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The node type.
     */
    getNodeType(builder) {
      return builder.getTypeFromLength(this.components.length, this.getComponentType(builder));
    }
    generate(builder, output2) {
      const node = this.node;
      const nodeTypeLength = builder.getTypeLength(node.getNodeType(builder));
      let snippet2 = null;
      if (nodeTypeLength > 1) {
        let type = null;
        const componentsLength = this.getVectorLength();
        if (componentsLength >= nodeTypeLength) {
          type = builder.getTypeFromLength(this.getVectorLength(), this.getComponentType(builder));
        }
        const nodeSnippet = node.build(builder, type);
        if (this.components.length === nodeTypeLength && this.components === _stringVectorComponents.slice(0, this.components.length)) {
          snippet2 = builder.format(nodeSnippet, type, output2);
        } else {
          snippet2 = builder.format(`${nodeSnippet}.${this.components}`, this.getNodeType(builder), output2);
        }
      } else {
        snippet2 = node.build(builder, output2);
      }
      return snippet2;
    }
    serialize(data) {
      super.serialize(data);
      data.components = this.components;
    }
    deserialize(data) {
      super.deserialize(data);
      this.components = data.components;
    }
  };
  var SetNode = class extends TempNode {
    static get type() {
      return "SetNode";
    }
    /**
     * Constructs a new set node.
     *
     * @param {Node} sourceNode - The node that should be updated.
     * @param {string} components - The components that should be updated.
     * @param {Node} targetNode - The value node.
     */
    constructor(sourceNode, components, targetNode) {
      super();
      this.sourceNode = sourceNode;
      this.components = components;
      this.targetNode = targetNode;
    }
    /**
     * This method is overwritten since the node type is inferred from {@link SetNode#sourceNode}.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The node type.
     */
    getNodeType(builder) {
      return this.sourceNode.getNodeType(builder);
    }
    generate(builder) {
      const { sourceNode, components, targetNode } = this;
      const sourceType = this.getNodeType(builder);
      const componentType = builder.getComponentType(targetNode.getNodeType(builder));
      const targetType = builder.getTypeFromLength(components.length, componentType);
      const targetSnippet = targetNode.build(builder, targetType);
      const sourceSnippet = sourceNode.build(builder, sourceType);
      const length2 = builder.getTypeLength(sourceType);
      const snippetValues = [];
      for (let i = 0; i < length2; i++) {
        const component = vectorComponents[i];
        if (component === components[0]) {
          snippetValues.push(targetSnippet);
          i += components.length - 1;
        } else {
          snippetValues.push(sourceSnippet + "." + component);
        }
      }
      return `${builder.getType(sourceType)}( ${snippetValues.join(", ")} )`;
    }
  };
  var FlipNode = class extends TempNode {
    static get type() {
      return "FlipNode";
    }
    /**
     * Constructs a new flip node.
     *
     * @param {Node} sourceNode - The node which component(s) should be flipped.
     * @param {string} components - The components that should be flipped e.g. `'x'` or `'xy'`.
     */
    constructor(sourceNode, components) {
      super();
      this.sourceNode = sourceNode;
      this.components = components;
    }
    /**
     * This method is overwritten since the node type is inferred from the source node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The node type.
     */
    getNodeType(builder) {
      return this.sourceNode.getNodeType(builder);
    }
    generate(builder) {
      const { components, sourceNode } = this;
      const sourceType = this.getNodeType(builder);
      const sourceSnippet = sourceNode.build(builder);
      const sourceCache = builder.getVarFromNode(this);
      const sourceProperty = builder.getPropertyName(sourceCache);
      builder.addLineFlowCode(sourceProperty + " = " + sourceSnippet, this);
      const length2 = builder.getTypeLength(sourceType);
      const snippetValues = [];
      let componentIndex = 0;
      for (let i = 0; i < length2; i++) {
        const component = vectorComponents[i];
        if (component === components[componentIndex]) {
          snippetValues.push("1.0 - " + (sourceProperty + "." + component));
          componentIndex++;
        } else {
          snippetValues.push(sourceProperty + "." + component);
        }
      }
      return `${builder.getType(sourceType)}( ${snippetValues.join(", ")} )`;
    }
  };
  var InputNode = class extends Node {
    static get type() {
      return "InputNode";
    }
    /**
     * Constructs a new input node.
     *
     * @param {any} value - The value of this node. This can be any JS primitive, functions, array buffers or even three.js objects (vector, matrices, colors).
     * @param {?string} nodeType - The node type. If no explicit type is defined, the node tries to derive the type from its value.
     */
    constructor(value, nodeType = null) {
      super(nodeType);
      this.isInputNode = true;
      this.value = value;
      this.precision = null;
    }
    getNodeType() {
      if (this.nodeType === null) {
        return getValueType(this.value);
      }
      return this.nodeType;
    }
    /**
     * Returns the input type of the node which is by default the node type. Derived modules
     * might overwrite this method and use a fixed type or compute one analytically.
     *
     * A typical example for different input and node types are textures. The input type of a
     * normal RGBA texture is `texture` whereas its node type is `vec4`.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The input type.
     */
    getInputType(builder) {
      return this.getNodeType(builder);
    }
    /**
     * Sets the precision to the given value. The method can be
     * overwritten in derived classes if the final precision must be computed
     * analytically.
     *
     * @param {('low'|'medium'|'high')} precision - The precision of the input value in the shader.
     * @return {InputNode} A reference to this node.
     */
    setPrecision(precision) {
      this.precision = precision;
      return this;
    }
    serialize(data) {
      super.serialize(data);
      data.value = this.value;
      if (this.value && this.value.toArray) data.value = this.value.toArray();
      data.valueType = getValueType(this.value);
      data.nodeType = this.nodeType;
      if (data.valueType === "ArrayBuffer") data.value = arrayBufferToBase64(data.value);
      data.precision = this.precision;
    }
    deserialize(data) {
      super.deserialize(data);
      this.nodeType = data.nodeType;
      this.value = Array.isArray(data.value) ? getValueFromType(data.valueType, ...data.value) : data.value;
      this.precision = data.precision || null;
      if (this.value && this.value.fromArray) this.value = this.value.fromArray(data.value);
    }
    generate() {
      console.warn("Abstract function.");
    }
  };
  var _regNum = /float|u?int/;
  var ConstNode = class extends InputNode {
    static get type() {
      return "ConstNode";
    }
    /**
     * Constructs a new input node.
     *
     * @param {any} value - The value of this node. Usually a JS primitive or three.js object (vector, matrix, color).
     * @param {?string} nodeType - The node type. If no explicit type is defined, the node tries to derive the type from its value.
     */
    constructor(value, nodeType = null) {
      super(value, nodeType);
      this.isConstNode = true;
    }
    /**
     * Generates the shader string of the value with the current node builder.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The generated value as a shader string.
     */
    generateConst(builder) {
      return builder.generateConst(this.getNodeType(builder), this.value);
    }
    generate(builder, output2) {
      const type = this.getNodeType(builder);
      if (_regNum.test(type) && _regNum.test(output2)) {
        return builder.generateConst(output2, this.value);
      }
      return builder.format(this.generateConst(builder), type, output2);
    }
  };
  var MemberNode = class extends Node {
    static get type() {
      return "MemberNode";
    }
    /**
     * Constructs an array element node.
     *
     * @param {Node} node - The array-like node.
     * @param {string} property - The property name.
     */
    constructor(node, property2) {
      super();
      this.node = node;
      this.property = property2;
      this.isMemberNode = true;
    }
    getNodeType(builder) {
      return this.node.getMemberType(builder, this.property);
    }
    generate(builder) {
      const propertyName2 = this.node.build(builder);
      return propertyName2 + "." + this.property;
    }
  };
  var currentStack = null;
  var NodeElements = /* @__PURE__ */ new Map();
  function addMethodChaining(name2, nodeElement) {
    if (NodeElements.has(name2)) {
      console.warn(`THREE.TSL: Redefinition of method chaining '${name2}'.`);
      return;
    }
    if (typeof nodeElement !== "function") throw new Error(`THREE.TSL: Node element ${name2} is not a function`);
    NodeElements.set(name2, nodeElement);
  }
  var parseSwizzle = (props) => props.replace(/r|s/g, "x").replace(/g|t/g, "y").replace(/b|p/g, "z").replace(/a|q/g, "w");
  var parseSwizzleAndSort = (props) => parseSwizzle(props).split("").sort().join("");
  var shaderNodeHandler = {
    setup(NodeClosure, params) {
      const inputs = params.shift();
      return NodeClosure(nodeObjects(inputs), ...params);
    },
    get(node, prop, nodeObj) {
      if (typeof prop === "string" && node[prop] === void 0) {
        if (node.isStackNode !== true && prop === "assign") {
          return (...params) => {
            currentStack.assign(nodeObj, ...params);
            return nodeObj;
          };
        } else if (NodeElements.has(prop)) {
          const nodeElement = NodeElements.get(prop);
          return node.isStackNode ? (...params) => nodeObj.add(nodeElement(...params)) : (...params) => nodeElement(nodeObj, ...params);
        } else if (prop === "self") {
          return node;
        } else if (prop.endsWith("Assign") && NodeElements.has(prop.slice(0, prop.length - "Assign".length))) {
          const nodeElement = NodeElements.get(prop.slice(0, prop.length - "Assign".length));
          return node.isStackNode ? (...params) => nodeObj.assign(params[0], nodeElement(...params)) : (...params) => nodeObj.assign(nodeElement(nodeObj, ...params));
        } else if (/^[xyzwrgbastpq]{1,4}$/.test(prop) === true) {
          prop = parseSwizzle(prop);
          return nodeObject(new SplitNode(nodeObj, prop));
        } else if (/^set[XYZWRGBASTPQ]{1,4}$/.test(prop) === true) {
          prop = parseSwizzleAndSort(prop.slice(3).toLowerCase());
          return (value) => nodeObject(new SetNode(node, prop, nodeObject(value)));
        } else if (/^flip[XYZWRGBASTPQ]{1,4}$/.test(prop) === true) {
          prop = parseSwizzleAndSort(prop.slice(4).toLowerCase());
          return () => nodeObject(new FlipNode(nodeObject(node), prop));
        } else if (prop === "width" || prop === "height" || prop === "depth") {
          if (prop === "width") prop = "x";
          else if (prop === "height") prop = "y";
          else if (prop === "depth") prop = "z";
          return nodeObject(new SplitNode(node, prop));
        } else if (/^\d+$/.test(prop) === true) {
          return nodeObject(new ArrayElementNode(nodeObj, new ConstNode(Number(prop), "uint")));
        } else if (/^get$/.test(prop) === true) {
          return (value) => nodeObject(new MemberNode(nodeObj, value));
        }
      }
      return Reflect.get(node, prop, nodeObj);
    },
    set(node, prop, value, nodeObj) {
      if (typeof prop === "string" && node[prop] === void 0) {
        if (/^[xyzwrgbastpq]{1,4}$/.test(prop) === true || prop === "width" || prop === "height" || prop === "depth" || /^\d+$/.test(prop) === true) {
          nodeObj[prop].assign(value);
          return true;
        }
      }
      return Reflect.set(node, prop, value, nodeObj);
    }
  };
  var nodeObjectsCacheMap = /* @__PURE__ */ new WeakMap();
  var nodeBuilderFunctionsCacheMap = /* @__PURE__ */ new WeakMap();
  var ShaderNodeObject = function(obj, altType = null) {
    const type = getValueType(obj);
    if (type === "node") {
      let nodeObject2 = nodeObjectsCacheMap.get(obj);
      if (nodeObject2 === void 0) {
        nodeObject2 = new Proxy(obj, shaderNodeHandler);
        nodeObjectsCacheMap.set(obj, nodeObject2);
        nodeObjectsCacheMap.set(nodeObject2, nodeObject2);
      }
      return nodeObject2;
    } else if (altType === null && (type === "float" || type === "boolean") || type && type !== "shader" && type !== "string") {
      return nodeObject(getConstNode(obj, altType));
    } else if (type === "shader") {
      return Fn(obj);
    }
    return obj;
  };
  var ShaderNodeObjects = function(objects, altType = null) {
    for (const name2 in objects) {
      objects[name2] = nodeObject(objects[name2], altType);
    }
    return objects;
  };
  var ShaderNodeArray = function(array2, altType = null) {
    const len = array2.length;
    for (let i = 0; i < len; i++) {
      array2[i] = nodeObject(array2[i], altType);
    }
    return array2;
  };
  var ShaderNodeProxy = function(NodeClass, scope = null, factor = null, settings = null) {
    const assignNode = (node) => nodeObject(settings !== null ? Object.assign(node, settings) : node);
    let fn, name2 = scope, minParams, maxParams;
    function verifyParamsLimit(params) {
      let tslName;
      if (name2) tslName = /[a-z]/i.test(name2) ? name2 + "()" : name2;
      else tslName = NodeClass.type;
      if (minParams !== void 0 && params.length < minParams) {
        console.error(`THREE.TSL: "${tslName}" parameter length is less than minimum required.`);
        return params.concat(new Array(minParams - params.length).fill(0));
      } else if (maxParams !== void 0 && params.length > maxParams) {
        console.error(`THREE.TSL: "${tslName}" parameter length exceeds limit.`);
        return params.slice(0, maxParams);
      }
      return params;
    }
    if (scope === null) {
      fn = (...params) => {
        return assignNode(new NodeClass(...nodeArray(verifyParamsLimit(params))));
      };
    } else if (factor !== null) {
      factor = nodeObject(factor);
      fn = (...params) => {
        return assignNode(new NodeClass(scope, ...nodeArray(verifyParamsLimit(params)), factor));
      };
    } else {
      fn = (...params) => {
        return assignNode(new NodeClass(scope, ...nodeArray(verifyParamsLimit(params))));
      };
    }
    fn.setParameterLength = (...params) => {
      if (params.length === 1) minParams = maxParams = params[0];
      else if (params.length === 2) [minParams, maxParams] = params;
      return fn;
    };
    fn.setName = (value) => {
      name2 = value;
      return fn;
    };
    return fn;
  };
  var ShaderNodeImmutable = function(NodeClass, ...params) {
    return nodeObject(new NodeClass(...nodeArray(params)));
  };
  var ShaderCallNodeInternal = class extends Node {
    constructor(shaderNode, inputNodes) {
      super();
      this.shaderNode = shaderNode;
      this.inputNodes = inputNodes;
      this.isShaderCallNodeInternal = true;
    }
    getNodeType(builder) {
      return this.shaderNode.nodeType || this.getOutputNode(builder).getNodeType(builder);
    }
    getMemberType(builder, name2) {
      return this.getOutputNode(builder).getMemberType(builder, name2);
    }
    call(builder) {
      const { shaderNode, inputNodes } = this;
      const properties = builder.getNodeProperties(shaderNode);
      const onceNS = shaderNode.namespace && shaderNode.namespace === builder.namespace ? builder.getNamespace("once") : "once";
      if (properties[onceNS]) {
        return properties[onceNS];
      }
      let result = null;
      if (shaderNode.layout) {
        let functionNodesCacheMap = nodeBuilderFunctionsCacheMap.get(builder.constructor);
        if (functionNodesCacheMap === void 0) {
          functionNodesCacheMap = /* @__PURE__ */ new WeakMap();
          nodeBuilderFunctionsCacheMap.set(builder.constructor, functionNodesCacheMap);
        }
        let functionNode = functionNodesCacheMap.get(shaderNode);
        if (functionNode === void 0) {
          functionNode = nodeObject(builder.buildFunctionNode(shaderNode));
          functionNodesCacheMap.set(shaderNode, functionNode);
        }
        builder.addInclude(functionNode);
        result = nodeObject(functionNode.call(inputNodes));
      } else {
        const jsFunc = shaderNode.jsFunc;
        const outputNode = inputNodes !== null || jsFunc.length > 1 ? jsFunc(inputNodes || [], builder) : jsFunc(builder);
        result = nodeObject(outputNode);
      }
      if (shaderNode.once) {
        properties[onceNS] = result;
      }
      return result;
    }
    setupOutput(builder) {
      builder.addStack();
      builder.stack.outputNode = this.call(builder);
      return builder.removeStack();
    }
    getOutputNode(builder) {
      const properties = builder.getNodeProperties(this);
      const outputNamespace = builder.getOutputNamespace();
      properties[outputNamespace] = properties[outputNamespace] || this.setupOutput(builder);
      return properties[outputNamespace];
    }
    build(builder, output2 = null) {
      let result = null;
      const buildStage = builder.getBuildStage();
      const properties = builder.getNodeProperties(this);
      const outputNamespace = builder.getOutputNamespace();
      const outputNode = this.getOutputNode(builder);
      if (buildStage === "setup") {
        const initializedNamespace = builder.getNamespace("initialized");
        if (properties[initializedNamespace] !== true) {
          properties[initializedNamespace] = true;
          properties[outputNamespace] = this.getOutputNode(builder);
          properties[outputNamespace].build(builder);
        }
        result = properties[outputNamespace];
      } else if (buildStage === "analyze") {
        outputNode.build(builder, output2);
      } else if (buildStage === "generate") {
        result = outputNode.build(builder, output2) || "";
      }
      return result;
    }
  };
  var ShaderNodeInternal = class extends Node {
    constructor(jsFunc, nodeType) {
      super(nodeType);
      this.jsFunc = jsFunc;
      this.layout = null;
      this.global = true;
      this.once = false;
      this.namespace = null;
    }
    setLayout(layout) {
      this.layout = layout;
      return this;
    }
    call(inputs = null) {
      nodeObjects(inputs);
      return nodeObject(new ShaderCallNodeInternal(this, inputs));
    }
    setup() {
      return this.call();
    }
  };
  var bools = [false, true];
  var uints = [0, 1, 2, 3];
  var ints = [-1, -2];
  var floats = [0.5, 1.5, 1 / 3, 1e-6, 1e6, Math.PI, Math.PI * 2, 1 / Math.PI, 2 / Math.PI, 1 / (Math.PI * 2), Math.PI / 2];
  var boolsCacheMap = /* @__PURE__ */ new Map();
  for (const bool2 of bools) boolsCacheMap.set(bool2, new ConstNode(bool2));
  var uintsCacheMap = /* @__PURE__ */ new Map();
  for (const uint2 of uints) uintsCacheMap.set(uint2, new ConstNode(uint2, "uint"));
  var intsCacheMap = new Map([...uintsCacheMap].map((el) => new ConstNode(el.value, "int")));
  for (const int2 of ints) intsCacheMap.set(int2, new ConstNode(int2, "int"));
  var floatsCacheMap = new Map([...intsCacheMap].map((el) => new ConstNode(el.value)));
  for (const float2 of floats) floatsCacheMap.set(float2, new ConstNode(float2));
  for (const float2 of floats) floatsCacheMap.set(-float2, new ConstNode(-float2));
  var cacheMaps = { bool: boolsCacheMap, uint: uintsCacheMap, ints: intsCacheMap, float: floatsCacheMap };
  var constNodesCacheMap = new Map([...boolsCacheMap, ...floatsCacheMap]);
  var getConstNode = (value, type) => {
    if (constNodesCacheMap.has(value)) {
      return constNodesCacheMap.get(value);
    } else if (value.isNode === true) {
      return value;
    } else {
      return new ConstNode(value, type);
    }
  };
  var safeGetNodeType = (node) => {
    try {
      return node.getNodeType();
    } catch (_) {
      return void 0;
    }
  };
  var ConvertType = function(type, cacheMap = null) {
    return (...params) => {
      if (params.length === 0 || !["bool", "float", "int", "uint"].includes(type) && params.every((param) => typeof param !== "object")) {
        params = [getValueFromType(type, ...params)];
      }
      if (params.length === 1 && cacheMap !== null && cacheMap.has(params[0])) {
        return nodeObject(cacheMap.get(params[0]));
      }
      if (params.length === 1) {
        const node = getConstNode(params[0], type);
        if (safeGetNodeType(node) === type) return nodeObject(node);
        return nodeObject(new ConvertNode(node, type));
      }
      const nodes = params.map((param) => getConstNode(param));
      return nodeObject(new JoinNode(nodes, type));
    };
  };
  var defined = (v) => typeof v === "object" && v !== null ? v.value : v;
  var getConstNodeType = (value) => value !== void 0 && value !== null ? value.nodeType || value.convertTo || (typeof value === "string" ? value : null) : null;
  function ShaderNode(jsFunc, nodeType) {
    return new Proxy(new ShaderNodeInternal(jsFunc, nodeType), shaderNodeHandler);
  }
  var nodeObject = (val, altType = null) => (
    /* new */
    ShaderNodeObject(val, altType)
  );
  var nodeObjects = (val, altType = null) => new ShaderNodeObjects(val, altType);
  var nodeArray = (val, altType = null) => new ShaderNodeArray(val, altType);
  var nodeProxy = (...params) => new ShaderNodeProxy(...params);
  var nodeImmutable = (...params) => new ShaderNodeImmutable(...params);
  var fnId = 0;
  var Fn = (jsFunc, layout = null) => {
    let nodeType = null;
    if (layout !== null) {
      if (typeof layout === "object") {
        nodeType = layout.return;
      } else {
        if (typeof layout === "string") {
          nodeType = layout;
        } else {
          console.error("THREE.TSL: Invalid layout type.");
        }
        layout = null;
      }
    }
    const shaderNode = new ShaderNode(jsFunc, nodeType);
    const fn = (...params) => {
      let inputs;
      nodeObjects(params);
      const isArrayAsParameter = params[0] && (params[0].isNode || Object.getPrototypeOf(params[0]) !== Object.prototype);
      if (isArrayAsParameter) {
        inputs = [...params];
      } else {
        inputs = params[0];
      }
      const fnCall = shaderNode.call(inputs);
      if (nodeType === "void") fnCall.toStack();
      return fnCall;
    };
    fn.shaderNode = shaderNode;
    fn.id = shaderNode.id;
    fn.getNodeType = (...params) => shaderNode.getNodeType(...params);
    fn.getCacheKey = (...params) => shaderNode.getCacheKey(...params);
    fn.setLayout = (layout2) => {
      shaderNode.setLayout(layout2);
      return fn;
    };
    fn.once = (namespace2 = null) => {
      shaderNode.once = true;
      shaderNode.namespace = namespace2;
      return fn;
    };
    if (layout !== null) {
      if (typeof layout.inputs !== "object") {
        const fullLayout = {
          name: "fn" + fnId++,
          type: nodeType,
          inputs: []
        };
        for (const name2 in layout) {
          if (name2 === "return") continue;
          fullLayout.inputs.push({
            name: name2,
            type: layout[name2]
          });
        }
        layout = fullLayout;
      }
      fn.setLayout(layout);
    }
    return fn;
  };
  var setCurrentStack = (stack2) => {
    currentStack = stack2;
  };
  var getCurrentStack = () => currentStack;
  var If = (...params) => currentStack.If(...params);
  function Stack2(node) {
    if (currentStack) currentStack.add(node);
    return node;
  }
  addMethodChaining("toStack", Stack2);
  var color = new ConvertType("color");
  var float = new ConvertType("float", cacheMaps.float);
  var int = new ConvertType("int", cacheMaps.ints);
  var uint = new ConvertType("uint", cacheMaps.uint);
  var bool = new ConvertType("bool", cacheMaps.bool);
  var vec2 = new ConvertType("vec2");
  var ivec2 = new ConvertType("ivec2");
  var uvec2 = new ConvertType("uvec2");
  var bvec2 = new ConvertType("bvec2");
  var vec3 = new ConvertType("vec3");
  var ivec3 = new ConvertType("ivec3");
  var uvec3 = new ConvertType("uvec3");
  var bvec3 = new ConvertType("bvec3");
  var vec4 = new ConvertType("vec4");
  var ivec4 = new ConvertType("ivec4");
  var uvec4 = new ConvertType("uvec4");
  var bvec4 = new ConvertType("bvec4");
  var mat2 = new ConvertType("mat2");
  var mat3 = new ConvertType("mat3");
  var mat4 = new ConvertType("mat4");
  addMethodChaining("toColor", color);
  addMethodChaining("toFloat", float);
  addMethodChaining("toInt", int);
  addMethodChaining("toUint", uint);
  addMethodChaining("toBool", bool);
  addMethodChaining("toVec2", vec2);
  addMethodChaining("toIVec2", ivec2);
  addMethodChaining("toUVec2", uvec2);
  addMethodChaining("toBVec2", bvec2);
  addMethodChaining("toVec3", vec3);
  addMethodChaining("toIVec3", ivec3);
  addMethodChaining("toUVec3", uvec3);
  addMethodChaining("toBVec3", bvec3);
  addMethodChaining("toVec4", vec4);
  addMethodChaining("toIVec4", ivec4);
  addMethodChaining("toUVec4", uvec4);
  addMethodChaining("toBVec4", bvec4);
  addMethodChaining("toMat2", mat2);
  addMethodChaining("toMat3", mat3);
  addMethodChaining("toMat4", mat4);
  var element = /* @__PURE__ */ nodeProxy(ArrayElementNode).setParameterLength(2);
  var convert = (node, types2) => nodeObject(new ConvertNode(nodeObject(node), types2));
  addMethodChaining("element", element);
  addMethodChaining("convert", convert);
  addMethodChaining("append", (node) => {
    console.warn("THREE.TSL: .append() has been renamed to .toStack().");
    return Stack2(node);
  });
  var PropertyNode = class extends Node {
    static get type() {
      return "PropertyNode";
    }
    /**
     * Constructs a new property node.
     *
     * @param {string} nodeType - The type of the node.
     * @param {?string} [name=null] - The name of the property in the shader.
     * @param {boolean} [varying=false] - Whether this property is a varying or not.
     */
    constructor(nodeType, name2 = null, varying2 = false) {
      super(nodeType);
      this.name = name2;
      this.varying = varying2;
      this.isPropertyNode = true;
      this.global = true;
    }
    getHash(builder) {
      return this.name || super.getHash(builder);
    }
    generate(builder) {
      let nodeVar;
      if (this.varying === true) {
        nodeVar = builder.getVaryingFromNode(this, this.name);
        nodeVar.needsInterpolation = true;
      } else {
        nodeVar = builder.getVarFromNode(this, this.name);
      }
      return builder.getPropertyName(nodeVar);
    }
  };
  var property = (type, name2) => nodeObject(new PropertyNode(type, name2));
  var varyingProperty = (type, name2) => nodeObject(new PropertyNode(type, name2, true));
  var diffuseColor = /* @__PURE__ */ nodeImmutable(PropertyNode, "vec4", "DiffuseColor");
  var emissive = /* @__PURE__ */ nodeImmutable(PropertyNode, "vec3", "EmissiveColor");
  var roughness = /* @__PURE__ */ nodeImmutable(PropertyNode, "float", "Roughness");
  var metalness = /* @__PURE__ */ nodeImmutable(PropertyNode, "float", "Metalness");
  var clearcoat = /* @__PURE__ */ nodeImmutable(PropertyNode, "float", "Clearcoat");
  var clearcoatRoughness = /* @__PURE__ */ nodeImmutable(PropertyNode, "float", "ClearcoatRoughness");
  var sheen = /* @__PURE__ */ nodeImmutable(PropertyNode, "vec3", "Sheen");
  var sheenRoughness = /* @__PURE__ */ nodeImmutable(PropertyNode, "float", "SheenRoughness");
  var iridescence = /* @__PURE__ */ nodeImmutable(PropertyNode, "float", "Iridescence");
  var iridescenceIOR = /* @__PURE__ */ nodeImmutable(PropertyNode, "float", "IridescenceIOR");
  var iridescenceThickness = /* @__PURE__ */ nodeImmutable(PropertyNode, "float", "IridescenceThickness");
  var alphaT = /* @__PURE__ */ nodeImmutable(PropertyNode, "float", "AlphaT");
  var anisotropy = /* @__PURE__ */ nodeImmutable(PropertyNode, "float", "Anisotropy");
  var anisotropyT = /* @__PURE__ */ nodeImmutable(PropertyNode, "vec3", "AnisotropyT");
  var anisotropyB = /* @__PURE__ */ nodeImmutable(PropertyNode, "vec3", "AnisotropyB");
  var specularColor = /* @__PURE__ */ nodeImmutable(PropertyNode, "color", "SpecularColor");
  var specularF90 = /* @__PURE__ */ nodeImmutable(PropertyNode, "float", "SpecularF90");
  var shininess = /* @__PURE__ */ nodeImmutable(PropertyNode, "float", "Shininess");
  var output = /* @__PURE__ */ nodeImmutable(PropertyNode, "vec4", "Output");
  var dashSize = /* @__PURE__ */ nodeImmutable(PropertyNode, "float", "dashSize");
  var gapSize = /* @__PURE__ */ nodeImmutable(PropertyNode, "float", "gapSize");
  var ior = /* @__PURE__ */ nodeImmutable(PropertyNode, "float", "IOR");
  var transmission = /* @__PURE__ */ nodeImmutable(PropertyNode, "float", "Transmission");
  var thickness = /* @__PURE__ */ nodeImmutable(PropertyNode, "float", "Thickness");
  var attenuationDistance = /* @__PURE__ */ nodeImmutable(PropertyNode, "float", "AttenuationDistance");
  var attenuationColor = /* @__PURE__ */ nodeImmutable(PropertyNode, "color", "AttenuationColor");
  var dispersion = /* @__PURE__ */ nodeImmutable(PropertyNode, "float", "Dispersion");
  var UniformGroupNode = class extends Node {
    static get type() {
      return "UniformGroupNode";
    }
    /**
     * Constructs a new uniform group node.
     *
     * @param {string} name - The name of the uniform group node.
     * @param {boolean} [shared=false] - Whether this uniform group node is shared or not.
     * @param {number} [order=1] - Influences the internal sorting.
     */
    constructor(name2, shared = false, order = 1) {
      super("string");
      this.name = name2;
      this.shared = shared;
      this.order = order;
      this.isUniformGroup = true;
    }
    serialize(data) {
      super.serialize(data);
      data.name = this.name;
      data.version = this.version;
      data.shared = this.shared;
    }
    deserialize(data) {
      super.deserialize(data);
      this.name = data.name;
      this.version = data.version;
      this.shared = data.shared;
    }
  };
  var uniformGroup = (name2) => new UniformGroupNode(name2);
  var sharedUniformGroup = (name2, order = 0) => new UniformGroupNode(name2, true, order);
  var frameGroup = /* @__PURE__ */ sharedUniformGroup("frame");
  var renderGroup = /* @__PURE__ */ sharedUniformGroup("render");
  var objectGroup = /* @__PURE__ */ uniformGroup("object");
  var UniformNode = class extends InputNode {
    static get type() {
      return "UniformNode";
    }
    /**
     * Constructs a new uniform node.
     *
     * @param {any} value - The value of this node. Usually a JS primitive or three.js object (vector, matrix, color, texture).
     * @param {?string} nodeType - The node type. If no explicit type is defined, the node tries to derive the type from its value.
     */
    constructor(value, nodeType = null) {
      super(value, nodeType);
      this.isUniformNode = true;
      this.name = "";
      this.groupNode = objectGroup;
    }
    /**
     * Sets the {@link UniformNode#name} property.
     *
     * @param {string} name - The name of the uniform.
     * @return {UniformNode} A reference to this node.
     */
    label(name2) {
      this.name = name2;
      return this;
    }
    /**
     * Sets the {@link UniformNode#groupNode} property.
     *
     * @param {UniformGroupNode} group - The uniform group.
     * @return {UniformNode} A reference to this node.
     */
    setGroup(group) {
      this.groupNode = group;
      return this;
    }
    /**
     * Returns the {@link UniformNode#groupNode}.
     *
     * @return {UniformGroupNode} The uniform group.
     */
    getGroup() {
      return this.groupNode;
    }
    /**
     * By default, this method returns the result of {@link Node#getHash} but derived
     * classes might overwrite this method with a different implementation.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The uniform hash.
     */
    getUniformHash(builder) {
      return this.getHash(builder);
    }
    onUpdate(callback, updateType) {
      const self2 = this.getSelf();
      callback = callback.bind(self2);
      return super.onUpdate((frame) => {
        const value = callback(frame, self2);
        if (value !== void 0) {
          this.value = value;
        }
      }, updateType);
    }
    generate(builder, output2) {
      const type = this.getNodeType(builder);
      const hash = this.getUniformHash(builder);
      let sharedNode = builder.getNodeFromHash(hash);
      if (sharedNode === void 0) {
        builder.setHashNode(this, hash);
        sharedNode = this;
      }
      const sharedNodeType = sharedNode.getInputType(builder);
      const nodeUniform = builder.getUniformFromNode(sharedNode, sharedNodeType, builder.shaderStage, this.name || builder.context.label);
      const propertyName2 = builder.getPropertyName(nodeUniform);
      if (builder.context.label !== void 0) delete builder.context.label;
      return builder.format(propertyName2, type, output2);
    }
  };
  var uniform = (arg1, arg2) => {
    const nodeType = getConstNodeType(arg2 || arg1);
    const value = arg1 && arg1.isNode === true ? arg1.node && arg1.node.value || arg1.value : arg1;
    return nodeObject(new UniformNode(value, nodeType));
  };
  var ArrayNode = class extends TempNode {
    static get type() {
      return "ArrayNode";
    }
    /**
     * Constructs a new array node.
     *
     * @param {?string} nodeType - The data type of the elements.
     * @param {number} count - Size of the array.
     * @param {?Array<Node>} [values=null] - Array default values.
     */
    constructor(nodeType, count, values = null) {
      super(nodeType);
      this.count = count;
      this.values = values;
      this.isArrayNode = true;
    }
    /**
     * Returns the node's type.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The type of the node.
     */
    getNodeType(builder) {
      if (this.nodeType === null) {
        this.nodeType = this.values[0].getNodeType(builder);
      }
      return this.nodeType;
    }
    /**
     * Returns the node's type.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The type of the node.
     */
    getElementType(builder) {
      return this.getNodeType(builder);
    }
    /**
     * This method builds the output node and returns the resulting array as a shader string.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The generated shader string.
     */
    generate(builder) {
      const type = this.getNodeType(builder);
      return builder.generateArray(type, this.count, this.values);
    }
  };
  var array = (...params) => {
    let node;
    if (params.length === 1) {
      const values = params[0];
      node = new ArrayNode(null, values.length, values);
    } else {
      const nodeType = params[0];
      const count = params[1];
      node = new ArrayNode(nodeType, count);
    }
    return nodeObject(node);
  };
  addMethodChaining("toArray", (node, count) => array(Array(count).fill(node)));
  var AssignNode = class extends TempNode {
    static get type() {
      return "AssignNode";
    }
    /**
     * Constructs a new assign node.
     *
     * @param {Node} targetNode - The target node.
     * @param {Node} sourceNode - The source type.
     */
    constructor(targetNode, sourceNode) {
      super();
      this.targetNode = targetNode;
      this.sourceNode = sourceNode;
      this.isAssignNode = true;
    }
    /**
     * Whether this node is used more than once in context of other nodes. This method
     * is overwritten since it always returns `false` (assigns are unique).
     *
     * @return {boolean} A flag that indicates if there is more than one dependency to other nodes. Always `false`.
     */
    hasDependencies() {
      return false;
    }
    getNodeType(builder, output2) {
      return output2 !== "void" ? this.targetNode.getNodeType(builder) : "void";
    }
    /**
     * Whether a split is required when assigning source to target. This can happen when the component length of
     * target and source data type does not match.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {boolean} Whether a split is required when assigning source to target.
     */
    needsSplitAssign(builder) {
      const { targetNode } = this;
      if (builder.isAvailable("swizzleAssign") === false && targetNode.isSplitNode && targetNode.components.length > 1) {
        const targetLength = builder.getTypeLength(targetNode.node.getNodeType(builder));
        const assignDifferentVector = vectorComponents.join("").slice(0, targetLength) !== targetNode.components;
        return assignDifferentVector;
      }
      return false;
    }
    setup(builder) {
      const { targetNode, sourceNode } = this;
      const properties = builder.getNodeProperties(this);
      properties.sourceNode = sourceNode;
      properties.targetNode = targetNode.context({ assign: true });
    }
    generate(builder, output2) {
      const { targetNode, sourceNode } = builder.getNodeProperties(this);
      const needsSplitAssign = this.needsSplitAssign(builder);
      const targetType = targetNode.getNodeType(builder);
      const target = targetNode.build(builder);
      const source = sourceNode.build(builder, targetType);
      const sourceType = sourceNode.getNodeType(builder);
      const nodeData = builder.getDataFromNode(this);
      let snippet2;
      if (nodeData.initialized === true) {
        if (output2 !== "void") {
          snippet2 = target;
        }
      } else if (needsSplitAssign) {
        const sourceVar = builder.getVarFromNode(this, null, targetType);
        const sourceProperty = builder.getPropertyName(sourceVar);
        builder.addLineFlowCode(`${sourceProperty} = ${source}`, this);
        const splitNode = targetNode.node;
        const splitTargetNode = splitNode.node.context({ assign: true });
        const targetRoot = splitTargetNode.build(builder);
        for (let i = 0; i < splitNode.components.length; i++) {
          const component = splitNode.components[i];
          builder.addLineFlowCode(`${targetRoot}.${component} = ${sourceProperty}[ ${i} ]`, this);
        }
        if (output2 !== "void") {
          snippet2 = target;
        }
      } else {
        snippet2 = `${target} = ${source}`;
        if (output2 === "void" || sourceType === "void") {
          builder.addLineFlowCode(snippet2, this);
          if (output2 !== "void") {
            snippet2 = target;
          }
        }
      }
      nodeData.initialized = true;
      return builder.format(snippet2, targetType, output2);
    }
  };
  var assign = /* @__PURE__ */ nodeProxy(AssignNode).setParameterLength(2);
  addMethodChaining("assign", assign);
  var FunctionCallNode = class extends TempNode {
    static get type() {
      return "FunctionCallNode";
    }
    /**
     * Constructs a new function call node.
     *
     * @param {?FunctionNode} functionNode - The function node.
     * @param {Object<string, Node>} [parameters={}] - The parameters for the function call.
     */
    constructor(functionNode = null, parameters = {}) {
      super();
      this.functionNode = functionNode;
      this.parameters = parameters;
    }
    /**
     * Sets the parameters of the function call node.
     *
     * @param {Object<string, Node>} parameters - The parameters to set.
     * @return {FunctionCallNode} A reference to this node.
     */
    setParameters(parameters) {
      this.parameters = parameters;
      return this;
    }
    /**
     * Returns the parameters of the function call node.
     *
     * @return {Object<string, Node>} The parameters of this node.
     */
    getParameters() {
      return this.parameters;
    }
    getNodeType(builder) {
      return this.functionNode.getNodeType(builder);
    }
    generate(builder) {
      const params = [];
      const functionNode = this.functionNode;
      const inputs = functionNode.getInputs(builder);
      const parameters = this.parameters;
      const generateInput = (node, inputNode) => {
        const type = inputNode.type;
        const pointer = type === "pointer";
        let output2;
        if (pointer) output2 = "&" + node.build(builder);
        else output2 = node.build(builder, type);
        return output2;
      };
      if (Array.isArray(parameters)) {
        if (parameters.length > inputs.length) {
          console.error("THREE.TSL: The number of provided parameters exceeds the expected number of inputs in 'Fn()'.");
          parameters.length = inputs.length;
        } else if (parameters.length < inputs.length) {
          console.error("THREE.TSL: The number of provided parameters is less than the expected number of inputs in 'Fn()'.");
          while (parameters.length < inputs.length) {
            parameters.push(float(0));
          }
        }
        for (let i = 0; i < parameters.length; i++) {
          params.push(generateInput(parameters[i], inputs[i]));
        }
      } else {
        for (const inputNode of inputs) {
          const node = parameters[inputNode.name];
          if (node !== void 0) {
            params.push(generateInput(node, inputNode));
          } else {
            console.error(`THREE.TSL: Input '${inputNode.name}' not found in 'Fn()'.`);
            params.push(generateInput(float(0), inputNode));
          }
        }
      }
      const functionName = functionNode.build(builder, "property");
      return `${functionName}( ${params.join(", ")} )`;
    }
  };
  var call = (func, ...params) => {
    params = params.length > 1 || params[0] && params[0].isNode === true ? nodeArray(params) : nodeObjects(params[0]);
    return nodeObject(new FunctionCallNode(nodeObject(func), params));
  };
  addMethodChaining("call", call);
  var _vectorOperators = {
    "==": "equal",
    "!=": "notEqual",
    "<": "lessThan",
    ">": "greaterThan",
    "<=": "lessThanEqual",
    ">=": "greaterThanEqual",
    "%": "mod"
  };
  var OperatorNode = class _OperatorNode extends TempNode {
    static get type() {
      return "OperatorNode";
    }
    /**
     * Constructs a new operator node.
     *
     * @param {string} op - The operator.
     * @param {Node} aNode - The first input.
     * @param {Node} bNode - The second input.
     * @param {...Node} params - Additional input parameters.
     */
    constructor(op, aNode, bNode, ...params) {
      super();
      if (params.length > 0) {
        let finalOp = new _OperatorNode(op, aNode, bNode);
        for (let i = 0; i < params.length - 1; i++) {
          finalOp = new _OperatorNode(op, finalOp, params[i]);
        }
        aNode = finalOp;
        bNode = params[params.length - 1];
      }
      this.op = op;
      this.aNode = aNode;
      this.bNode = bNode;
      this.isOperatorNode = true;
    }
    /**
     * Returns the operator method name.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @param {string} output - The output type.
     * @returns {string} The operator method name.
     */
    getOperatorMethod(builder, output2) {
      return builder.getMethod(_vectorOperators[this.op], output2);
    }
    /**
     * This method is overwritten since the node type is inferred from the operator
     * and the input node types.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The node type.
     */
    getNodeType(builder) {
      const op = this.op;
      const aNode = this.aNode;
      const bNode = this.bNode;
      const typeA = aNode.getNodeType(builder);
      const typeB = bNode ? bNode.getNodeType(builder) : null;
      if (typeA === "void" || typeB === "void") {
        return "void";
      } else if (op === "%") {
        return typeA;
      } else if (op === "~" || op === "&" || op === "|" || op === "^" || op === ">>" || op === "<<") {
        return builder.getIntegerType(typeA);
      } else if (op === "!" || op === "&&" || op === "||" || op === "^^") {
        return "bool";
      } else if (op === "==" || op === "!=" || op === "<" || op === ">" || op === "<=" || op === ">=") {
        const typeLength = Math.max(builder.getTypeLength(typeA), builder.getTypeLength(typeB));
        return typeLength > 1 ? `bvec${typeLength}` : "bool";
      } else {
        if (builder.isMatrix(typeA)) {
          if (typeB === "float") {
            return typeA;
          } else if (builder.isVector(typeB)) {
            return builder.getVectorFromMatrix(typeA);
          } else if (builder.isMatrix(typeB)) {
            return typeA;
          }
        } else if (builder.isMatrix(typeB)) {
          if (typeA === "float") {
            return typeB;
          } else if (builder.isVector(typeA)) {
            return builder.getVectorFromMatrix(typeB);
          }
        }
        if (builder.getTypeLength(typeB) > builder.getTypeLength(typeA)) {
          return typeB;
        }
        return typeA;
      }
    }
    generate(builder, output2) {
      const op = this.op;
      const { aNode, bNode } = this;
      const type = this.getNodeType(builder);
      let typeA = null;
      let typeB = null;
      if (type !== "void") {
        typeA = aNode.getNodeType(builder);
        typeB = bNode ? bNode.getNodeType(builder) : null;
        if (op === "<" || op === ">" || op === "<=" || op === ">=" || op === "==" || op === "!=") {
          if (builder.isVector(typeA)) {
            typeB = typeA;
          } else if (builder.isVector(typeB)) {
            typeA = typeB;
          } else if (typeA !== typeB) {
            typeA = typeB = "float";
          }
        } else if (op === ">>" || op === "<<") {
          typeA = type;
          typeB = builder.changeComponentType(typeB, "uint");
        } else if (op === "%") {
          typeA = type;
          typeB = builder.isInteger(typeA) && builder.isInteger(typeB) ? typeB : typeA;
        } else if (builder.isMatrix(typeA)) {
          if (typeB === "float") {
            typeB = "float";
          } else if (builder.isVector(typeB)) {
            typeB = builder.getVectorFromMatrix(typeA);
          } else if (builder.isMatrix(typeB)) ;
          else {
            typeA = typeB = type;
          }
        } else if (builder.isMatrix(typeB)) {
          if (typeA === "float") {
            typeA = "float";
          } else if (builder.isVector(typeA)) {
            typeA = builder.getVectorFromMatrix(typeB);
          } else {
            typeA = typeB = type;
          }
        } else {
          typeA = typeB = type;
        }
      } else {
        typeA = typeB = type;
      }
      const a = aNode.build(builder, typeA);
      const b = bNode ? bNode.build(builder, typeB) : null;
      const fnOpSnippet = builder.getFunctionOperator(op);
      if (output2 !== "void") {
        const isGLSL = builder.renderer.coordinateSystem === WebGLCoordinateSystem;
        if (op === "==" || op === "!=" || op === "<" || op === ">" || op === "<=" || op === ">=") {
          if (isGLSL) {
            if (builder.isVector(typeA)) {
              return builder.format(`${this.getOperatorMethod(builder, output2)}( ${a}, ${b} )`, type, output2);
            } else {
              return builder.format(`( ${a} ${op} ${b} )`, type, output2);
            }
          } else {
            return builder.format(`( ${a} ${op} ${b} )`, type, output2);
          }
        } else if (op === "%") {
          if (builder.isInteger(typeB)) {
            return builder.format(`( ${a} % ${b} )`, type, output2);
          } else {
            return builder.format(`${this.getOperatorMethod(builder, type)}( ${a}, ${b} )`, type, output2);
          }
        } else if (op === "!" || op === "~") {
          return builder.format(`(${op}${a})`, typeA, output2);
        } else if (fnOpSnippet) {
          return builder.format(`${fnOpSnippet}( ${a}, ${b} )`, type, output2);
        } else {
          if (builder.isMatrix(typeA) && typeB === "float") {
            return builder.format(`( ${b} ${op} ${a} )`, type, output2);
          } else if (typeA === "float" && builder.isMatrix(typeB)) {
            return builder.format(`${a} ${op} ${b}`, type, output2);
          } else {
            let snippet2 = `( ${a} ${op} ${b} )`;
            if (!isGLSL && type === "bool" && builder.isVector(typeA) && builder.isVector(typeB)) {
              snippet2 = `all${snippet2}`;
            }
            return builder.format(snippet2, type, output2);
          }
        }
      } else if (typeA !== "void") {
        if (fnOpSnippet) {
          return builder.format(`${fnOpSnippet}( ${a}, ${b} )`, type, output2);
        } else {
          if (builder.isMatrix(typeA) && typeB === "float") {
            return builder.format(`${b} ${op} ${a}`, type, output2);
          } else {
            return builder.format(`${a} ${op} ${b}`, type, output2);
          }
        }
      }
    }
    serialize(data) {
      super.serialize(data);
      data.op = this.op;
    }
    deserialize(data) {
      super.deserialize(data);
      this.op = data.op;
    }
  };
  var add2 = /* @__PURE__ */ nodeProxy(OperatorNode, "+").setParameterLength(2, Infinity).setName("add");
  var sub = /* @__PURE__ */ nodeProxy(OperatorNode, "-").setParameterLength(2, Infinity).setName("sub");
  var mul = /* @__PURE__ */ nodeProxy(OperatorNode, "*").setParameterLength(2, Infinity).setName("mul");
  var div = /* @__PURE__ */ nodeProxy(OperatorNode, "/").setParameterLength(2, Infinity).setName("div");
  var mod = /* @__PURE__ */ nodeProxy(OperatorNode, "%").setParameterLength(2).setName("mod");
  var equal = /* @__PURE__ */ nodeProxy(OperatorNode, "==").setParameterLength(2).setName("equal");
  var notEqual = /* @__PURE__ */ nodeProxy(OperatorNode, "!=").setParameterLength(2).setName("notEqual");
  var lessThan = /* @__PURE__ */ nodeProxy(OperatorNode, "<").setParameterLength(2).setName("lessThan");
  var greaterThan = /* @__PURE__ */ nodeProxy(OperatorNode, ">").setParameterLength(2).setName("greaterThan");
  var lessThanEqual = /* @__PURE__ */ nodeProxy(OperatorNode, "<=").setParameterLength(2).setName("lessThanEqual");
  var greaterThanEqual = /* @__PURE__ */ nodeProxy(OperatorNode, ">=").setParameterLength(2).setName("greaterThanEqual");
  var and = /* @__PURE__ */ nodeProxy(OperatorNode, "&&").setParameterLength(2, Infinity).setName("and");
  var or = /* @__PURE__ */ nodeProxy(OperatorNode, "||").setParameterLength(2, Infinity).setName("or");
  var not = /* @__PURE__ */ nodeProxy(OperatorNode, "!").setParameterLength(1).setName("not");
  var xor = /* @__PURE__ */ nodeProxy(OperatorNode, "^^").setParameterLength(2).setName("xor");
  var bitAnd = /* @__PURE__ */ nodeProxy(OperatorNode, "&").setParameterLength(2).setName("bitAnd");
  var bitNot = /* @__PURE__ */ nodeProxy(OperatorNode, "~").setParameterLength(2).setName("bitNot");
  var bitOr = /* @__PURE__ */ nodeProxy(OperatorNode, "|").setParameterLength(2).setName("bitOr");
  var bitXor = /* @__PURE__ */ nodeProxy(OperatorNode, "^").setParameterLength(2).setName("bitXor");
  var shiftLeft = /* @__PURE__ */ nodeProxy(OperatorNode, "<<").setParameterLength(2).setName("shiftLeft");
  var shiftRight = /* @__PURE__ */ nodeProxy(OperatorNode, ">>").setParameterLength(2).setName("shiftRight");
  var incrementBefore = Fn(([a]) => {
    a.addAssign(1);
    return a;
  });
  var decrementBefore = Fn(([a]) => {
    a.subAssign(1);
    return a;
  });
  var increment = /* @__PURE__ */ Fn(([a]) => {
    const temp2 = int(a).toConst();
    a.addAssign(1);
    return temp2;
  });
  var decrement = /* @__PURE__ */ Fn(([a]) => {
    const temp2 = int(a).toConst();
    a.subAssign(1);
    return temp2;
  });
  addMethodChaining("add", add2);
  addMethodChaining("sub", sub);
  addMethodChaining("mul", mul);
  addMethodChaining("div", div);
  addMethodChaining("mod", mod);
  addMethodChaining("equal", equal);
  addMethodChaining("notEqual", notEqual);
  addMethodChaining("lessThan", lessThan);
  addMethodChaining("greaterThan", greaterThan);
  addMethodChaining("lessThanEqual", lessThanEqual);
  addMethodChaining("greaterThanEqual", greaterThanEqual);
  addMethodChaining("and", and);
  addMethodChaining("or", or);
  addMethodChaining("not", not);
  addMethodChaining("xor", xor);
  addMethodChaining("bitAnd", bitAnd);
  addMethodChaining("bitNot", bitNot);
  addMethodChaining("bitOr", bitOr);
  addMethodChaining("bitXor", bitXor);
  addMethodChaining("shiftLeft", shiftLeft);
  addMethodChaining("shiftRight", shiftRight);
  addMethodChaining("incrementBefore", incrementBefore);
  addMethodChaining("decrementBefore", decrementBefore);
  addMethodChaining("increment", increment);
  addMethodChaining("decrement", decrement);
  var remainder = (a, b) => {
    console.warn('THREE.TSL: "remainder()" is deprecated. Use "mod( int( ... ) )" instead.');
    return mod(a, b);
  };
  var modInt = (a, b) => {
    console.warn('THREE.TSL: "modInt()" is deprecated. Use "mod( int( ... ) )" instead.');
    return mod(int(a), int(b));
  };
  addMethodChaining("remainder", remainder);
  addMethodChaining("modInt", modInt);
  var MathNode = class _MathNode extends TempNode {
    static get type() {
      return "MathNode";
    }
    /**
     * Constructs a new math node.
     *
     * @param {string} method - The method name.
     * @param {Node} aNode - The first input.
     * @param {?Node} [bNode=null] - The second input.
     * @param {?Node} [cNode=null] - The third input.
     */
    constructor(method, aNode, bNode = null, cNode = null) {
      super();
      if ((method === _MathNode.MAX || method === _MathNode.MIN) && arguments.length > 3) {
        let finalOp = new _MathNode(method, aNode, bNode);
        for (let i = 2; i < arguments.length - 1; i++) {
          finalOp = new _MathNode(method, finalOp, arguments[i]);
        }
        aNode = finalOp;
        bNode = arguments[arguments.length - 1];
        cNode = null;
      }
      this.method = method;
      this.aNode = aNode;
      this.bNode = bNode;
      this.cNode = cNode;
      this.isMathNode = true;
    }
    /**
     * The input type is inferred from the node types of the input nodes.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The input type.
     */
    getInputType(builder) {
      const aType = this.aNode.getNodeType(builder);
      const bType = this.bNode ? this.bNode.getNodeType(builder) : null;
      const cType = this.cNode ? this.cNode.getNodeType(builder) : null;
      const aLen = builder.isMatrix(aType) ? 0 : builder.getTypeLength(aType);
      const bLen = builder.isMatrix(bType) ? 0 : builder.getTypeLength(bType);
      const cLen = builder.isMatrix(cType) ? 0 : builder.getTypeLength(cType);
      if (aLen > bLen && aLen > cLen) {
        return aType;
      } else if (bLen > cLen) {
        return bType;
      } else if (cLen > aLen) {
        return cType;
      }
      return aType;
    }
    /**
     * The selected method as well as the input type determine the node type of this node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The node type.
     */
    getNodeType(builder) {
      const method = this.method;
      if (method === _MathNode.LENGTH || method === _MathNode.DISTANCE || method === _MathNode.DOT) {
        return "float";
      } else if (method === _MathNode.CROSS) {
        return "vec3";
      } else if (method === _MathNode.ALL || method === _MathNode.ANY) {
        return "bool";
      } else if (method === _MathNode.EQUALS) {
        return builder.changeComponentType(this.aNode.getNodeType(builder), "bool");
      } else {
        return this.getInputType(builder);
      }
    }
    setup(builder) {
      const { aNode, bNode, method } = this;
      let outputNode = null;
      if (method === _MathNode.ONE_MINUS) {
        outputNode = sub(1, aNode);
      } else if (method === _MathNode.RECIPROCAL) {
        outputNode = div(1, aNode);
      } else if (method === _MathNode.DIFFERENCE) {
        outputNode = abs(sub(aNode, bNode));
      } else if (method === _MathNode.TRANSFORM_DIRECTION) {
        let tA = aNode;
        let tB = bNode;
        if (builder.isMatrix(tA.getNodeType(builder))) {
          tB = vec4(vec3(tB), 0);
        } else {
          tA = vec4(vec3(tA), 0);
        }
        const mulNode = mul(tA, tB).xyz;
        outputNode = normalize2(mulNode);
      }
      if (outputNode !== null) {
        return outputNode;
      } else {
        return super.setup(builder);
      }
    }
    generate(builder, output2) {
      const properties = builder.getNodeProperties(this);
      if (properties.outputNode) {
        return super.generate(builder, output2);
      }
      let method = this.method;
      const type = this.getNodeType(builder);
      const inputType = this.getInputType(builder);
      const a = this.aNode;
      const b = this.bNode;
      const c = this.cNode;
      const coordinateSystem = builder.renderer.coordinateSystem;
      if (method === _MathNode.NEGATE) {
        return builder.format("( - " + a.build(builder, inputType) + " )", type, output2);
      } else {
        const params = [];
        if (method === _MathNode.CROSS) {
          params.push(
            a.build(builder, type),
            b.build(builder, type)
          );
        } else if (coordinateSystem === WebGLCoordinateSystem && method === _MathNode.STEP) {
          params.push(
            a.build(builder, builder.getTypeLength(a.getNodeType(builder)) === 1 ? "float" : inputType),
            b.build(builder, inputType)
          );
        } else if (coordinateSystem === WebGLCoordinateSystem && (method === _MathNode.MIN || method === _MathNode.MAX)) {
          params.push(
            a.build(builder, inputType),
            b.build(builder, builder.getTypeLength(b.getNodeType(builder)) === 1 ? "float" : inputType)
          );
        } else if (method === _MathNode.REFRACT) {
          params.push(
            a.build(builder, inputType),
            b.build(builder, inputType),
            c.build(builder, "float")
          );
        } else if (method === _MathNode.MIX) {
          params.push(
            a.build(builder, inputType),
            b.build(builder, inputType),
            c.build(builder, builder.getTypeLength(c.getNodeType(builder)) === 1 ? "float" : inputType)
          );
        } else {
          if (coordinateSystem === WebGPUCoordinateSystem && method === _MathNode.ATAN && b !== null) {
            method = "atan2";
          }
          if (builder.shaderStage !== "fragment" && (method === _MathNode.DFDX || method === _MathNode.DFDY)) {
            console.warn(`THREE.TSL: '${method}' is not supported in the ${builder.shaderStage} stage.`);
            method = "/*" + method + "*/";
          }
          params.push(a.build(builder, inputType));
          if (b !== null) params.push(b.build(builder, inputType));
          if (c !== null) params.push(c.build(builder, inputType));
        }
        return builder.format(`${builder.getMethod(method, type)}( ${params.join(", ")} )`, type, output2);
      }
    }
    serialize(data) {
      super.serialize(data);
      data.method = this.method;
    }
    deserialize(data) {
      super.deserialize(data);
      this.method = data.method;
    }
  };
  MathNode.ALL = "all";
  MathNode.ANY = "any";
  MathNode.RADIANS = "radians";
  MathNode.DEGREES = "degrees";
  MathNode.EXP = "exp";
  MathNode.EXP2 = "exp2";
  MathNode.LOG = "log";
  MathNode.LOG2 = "log2";
  MathNode.SQRT = "sqrt";
  MathNode.INVERSE_SQRT = "inversesqrt";
  MathNode.FLOOR = "floor";
  MathNode.CEIL = "ceil";
  MathNode.NORMALIZE = "normalize";
  MathNode.FRACT = "fract";
  MathNode.SIN = "sin";
  MathNode.COS = "cos";
  MathNode.TAN = "tan";
  MathNode.ASIN = "asin";
  MathNode.ACOS = "acos";
  MathNode.ATAN = "atan";
  MathNode.ABS = "abs";
  MathNode.SIGN = "sign";
  MathNode.LENGTH = "length";
  MathNode.NEGATE = "negate";
  MathNode.ONE_MINUS = "oneMinus";
  MathNode.DFDX = "dFdx";
  MathNode.DFDY = "dFdy";
  MathNode.ROUND = "round";
  MathNode.RECIPROCAL = "reciprocal";
  MathNode.TRUNC = "trunc";
  MathNode.FWIDTH = "fwidth";
  MathNode.TRANSPOSE = "transpose";
  MathNode.BITCAST = "bitcast";
  MathNode.EQUALS = "equals";
  MathNode.MIN = "min";
  MathNode.MAX = "max";
  MathNode.STEP = "step";
  MathNode.REFLECT = "reflect";
  MathNode.DISTANCE = "distance";
  MathNode.DIFFERENCE = "difference";
  MathNode.DOT = "dot";
  MathNode.CROSS = "cross";
  MathNode.POW = "pow";
  MathNode.TRANSFORM_DIRECTION = "transformDirection";
  MathNode.MIX = "mix";
  MathNode.CLAMP = "clamp";
  MathNode.REFRACT = "refract";
  MathNode.SMOOTHSTEP = "smoothstep";
  MathNode.FACEFORWARD = "faceforward";
  var EPSILON = /* @__PURE__ */ float(1e-6);
  var PI = /* @__PURE__ */ float(Math.PI);
  var PI2 = /* @__PURE__ */ float(Math.PI * 2);
  var all = /* @__PURE__ */ nodeProxy(MathNode, MathNode.ALL).setParameterLength(1);
  var any = /* @__PURE__ */ nodeProxy(MathNode, MathNode.ANY).setParameterLength(1);
  var radians = /* @__PURE__ */ nodeProxy(MathNode, MathNode.RADIANS).setParameterLength(1);
  var degrees = /* @__PURE__ */ nodeProxy(MathNode, MathNode.DEGREES).setParameterLength(1);
  var exp = /* @__PURE__ */ nodeProxy(MathNode, MathNode.EXP).setParameterLength(1);
  var exp2 = /* @__PURE__ */ nodeProxy(MathNode, MathNode.EXP2).setParameterLength(1);
  var log = /* @__PURE__ */ nodeProxy(MathNode, MathNode.LOG).setParameterLength(1);
  var log2 = /* @__PURE__ */ nodeProxy(MathNode, MathNode.LOG2).setParameterLength(1);
  var sqrt = /* @__PURE__ */ nodeProxy(MathNode, MathNode.SQRT).setParameterLength(1);
  var inverseSqrt = /* @__PURE__ */ nodeProxy(MathNode, MathNode.INVERSE_SQRT).setParameterLength(1);
  var floor = /* @__PURE__ */ nodeProxy(MathNode, MathNode.FLOOR).setParameterLength(1);
  var ceil = /* @__PURE__ */ nodeProxy(MathNode, MathNode.CEIL).setParameterLength(1);
  var normalize2 = /* @__PURE__ */ nodeProxy(MathNode, MathNode.NORMALIZE).setParameterLength(1);
  var fract = /* @__PURE__ */ nodeProxy(MathNode, MathNode.FRACT).setParameterLength(1);
  var sin = /* @__PURE__ */ nodeProxy(MathNode, MathNode.SIN).setParameterLength(1);
  var cos = /* @__PURE__ */ nodeProxy(MathNode, MathNode.COS).setParameterLength(1);
  var tan = /* @__PURE__ */ nodeProxy(MathNode, MathNode.TAN).setParameterLength(1);
  var asin = /* @__PURE__ */ nodeProxy(MathNode, MathNode.ASIN).setParameterLength(1);
  var acos = /* @__PURE__ */ nodeProxy(MathNode, MathNode.ACOS).setParameterLength(1);
  var atan = /* @__PURE__ */ nodeProxy(MathNode, MathNode.ATAN).setParameterLength(1, 2);
  var abs = /* @__PURE__ */ nodeProxy(MathNode, MathNode.ABS).setParameterLength(1);
  var sign = /* @__PURE__ */ nodeProxy(MathNode, MathNode.SIGN).setParameterLength(1);
  var length = /* @__PURE__ */ nodeProxy(MathNode, MathNode.LENGTH).setParameterLength(1);
  var negate = /* @__PURE__ */ nodeProxy(MathNode, MathNode.NEGATE).setParameterLength(1);
  var oneMinus = /* @__PURE__ */ nodeProxy(MathNode, MathNode.ONE_MINUS).setParameterLength(1);
  var dFdx = /* @__PURE__ */ nodeProxy(MathNode, MathNode.DFDX).setParameterLength(1);
  var dFdy = /* @__PURE__ */ nodeProxy(MathNode, MathNode.DFDY).setParameterLength(1);
  var round = /* @__PURE__ */ nodeProxy(MathNode, MathNode.ROUND).setParameterLength(1);
  var reciprocal = /* @__PURE__ */ nodeProxy(MathNode, MathNode.RECIPROCAL).setParameterLength(1);
  var trunc = /* @__PURE__ */ nodeProxy(MathNode, MathNode.TRUNC).setParameterLength(1);
  var fwidth = /* @__PURE__ */ nodeProxy(MathNode, MathNode.FWIDTH).setParameterLength(1);
  var transpose = /* @__PURE__ */ nodeProxy(MathNode, MathNode.TRANSPOSE).setParameterLength(1);
  var equals = (x, y) => {
    console.warn('THREE.TSL: "equals" is deprecated. Use "equal" inside a vector instead, like: "bvec*( equal( ... ) )"');
    return equal(x, y);
  };
  var min$1 = /* @__PURE__ */ nodeProxy(MathNode, MathNode.MIN).setParameterLength(2, Infinity);
  var max$1 = /* @__PURE__ */ nodeProxy(MathNode, MathNode.MAX).setParameterLength(2, Infinity);
  var step = /* @__PURE__ */ nodeProxy(MathNode, MathNode.STEP).setParameterLength(2);
  var reflect = /* @__PURE__ */ nodeProxy(MathNode, MathNode.REFLECT).setParameterLength(2);
  var distance = /* @__PURE__ */ nodeProxy(MathNode, MathNode.DISTANCE).setParameterLength(2);
  var difference = /* @__PURE__ */ nodeProxy(MathNode, MathNode.DIFFERENCE).setParameterLength(2);
  var dot2 = /* @__PURE__ */ nodeProxy(MathNode, MathNode.DOT).setParameterLength(2);
  var cross = /* @__PURE__ */ nodeProxy(MathNode, MathNode.CROSS).setParameterLength(2);
  var pow = /* @__PURE__ */ nodeProxy(MathNode, MathNode.POW).setParameterLength(2);
  var pow2 = /* @__PURE__ */ nodeProxy(MathNode, MathNode.POW, 2).setParameterLength(1);
  var pow3 = /* @__PURE__ */ nodeProxy(MathNode, MathNode.POW, 3).setParameterLength(1);
  var pow4 = /* @__PURE__ */ nodeProxy(MathNode, MathNode.POW, 4).setParameterLength(1);
  var transformDirection = /* @__PURE__ */ nodeProxy(MathNode, MathNode.TRANSFORM_DIRECTION).setParameterLength(2);
  var cbrt = (a) => mul(sign(a), pow(abs(a), 1 / 3));
  var lengthSq = (a) => dot2(a, a);
  var mix = /* @__PURE__ */ nodeProxy(MathNode, MathNode.MIX).setParameterLength(3);
  var clamp2 = (value, low = 0, high = 1) => nodeObject(new MathNode(MathNode.CLAMP, nodeObject(value), nodeObject(low), nodeObject(high)));
  var saturate = (value) => clamp2(value);
  var refract = /* @__PURE__ */ nodeProxy(MathNode, MathNode.REFRACT).setParameterLength(3);
  var smoothstep2 = /* @__PURE__ */ nodeProxy(MathNode, MathNode.SMOOTHSTEP).setParameterLength(3);
  var faceForward = /* @__PURE__ */ nodeProxy(MathNode, MathNode.FACEFORWARD).setParameterLength(3);
  var rand = /* @__PURE__ */ Fn(([uv2]) => {
    const a = 12.9898, b = 78.233, c = 43758.5453;
    const dt = dot2(uv2.xy, vec2(a, b)), sn = mod(dt, PI);
    return fract(sin(sn).mul(c));
  });
  var mixElement = (t2, e1, e2) => mix(e1, e2, t2);
  var smoothstepElement = (x, low, high) => smoothstep2(low, high, x);
  var atan2 = (y, x) => {
    console.warn('THREE.TSL: "atan2" is overloaded. Use "atan" instead.');
    return atan(y, x);
  };
  addMethodChaining("all", all);
  addMethodChaining("any", any);
  addMethodChaining("equals", equals);
  addMethodChaining("radians", radians);
  addMethodChaining("degrees", degrees);
  addMethodChaining("exp", exp);
  addMethodChaining("exp2", exp2);
  addMethodChaining("log", log);
  addMethodChaining("log2", log2);
  addMethodChaining("sqrt", sqrt);
  addMethodChaining("inverseSqrt", inverseSqrt);
  addMethodChaining("floor", floor);
  addMethodChaining("ceil", ceil);
  addMethodChaining("normalize", normalize2);
  addMethodChaining("fract", fract);
  addMethodChaining("sin", sin);
  addMethodChaining("cos", cos);
  addMethodChaining("tan", tan);
  addMethodChaining("asin", asin);
  addMethodChaining("acos", acos);
  addMethodChaining("atan", atan);
  addMethodChaining("abs", abs);
  addMethodChaining("sign", sign);
  addMethodChaining("length", length);
  addMethodChaining("lengthSq", lengthSq);
  addMethodChaining("negate", negate);
  addMethodChaining("oneMinus", oneMinus);
  addMethodChaining("dFdx", dFdx);
  addMethodChaining("dFdy", dFdy);
  addMethodChaining("round", round);
  addMethodChaining("reciprocal", reciprocal);
  addMethodChaining("trunc", trunc);
  addMethodChaining("fwidth", fwidth);
  addMethodChaining("atan2", atan2);
  addMethodChaining("min", min$1);
  addMethodChaining("max", max$1);
  addMethodChaining("step", step);
  addMethodChaining("reflect", reflect);
  addMethodChaining("distance", distance);
  addMethodChaining("dot", dot2);
  addMethodChaining("cross", cross);
  addMethodChaining("pow", pow);
  addMethodChaining("pow2", pow2);
  addMethodChaining("pow3", pow3);
  addMethodChaining("pow4", pow4);
  addMethodChaining("transformDirection", transformDirection);
  addMethodChaining("mix", mixElement);
  addMethodChaining("clamp", clamp2);
  addMethodChaining("refract", refract);
  addMethodChaining("smoothstep", smoothstepElement);
  addMethodChaining("faceForward", faceForward);
  addMethodChaining("difference", difference);
  addMethodChaining("saturate", saturate);
  addMethodChaining("cbrt", cbrt);
  addMethodChaining("transpose", transpose);
  addMethodChaining("rand", rand);
  var ConditionalNode = class extends Node {
    static get type() {
      return "ConditionalNode";
    }
    /**
     * Constructs a new conditional node.
     *
     * @param {Node} condNode - The node that defines the condition.
     * @param {Node} ifNode - The node that is evaluate when the condition ends up `true`.
     * @param {?Node} [elseNode=null] - The node that is evaluate when the condition ends up `false`.
     */
    constructor(condNode, ifNode, elseNode = null) {
      super();
      this.condNode = condNode;
      this.ifNode = ifNode;
      this.elseNode = elseNode;
    }
    /**
     * This method is overwritten since the node type is inferred from the if/else
     * nodes.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The node type.
     */
    getNodeType(builder) {
      const { ifNode, elseNode } = builder.getNodeProperties(this);
      if (ifNode === void 0) {
        this.setup(builder);
        return this.getNodeType(builder);
      }
      const ifType = ifNode.getNodeType(builder);
      if (elseNode !== null) {
        const elseType = elseNode.getNodeType(builder);
        if (builder.getTypeLength(elseType) > builder.getTypeLength(ifType)) {
          return elseType;
        }
      }
      return ifType;
    }
    setup(builder) {
      const condNode = this.condNode.cache();
      const ifNode = this.ifNode.cache();
      const elseNode = this.elseNode ? this.elseNode.cache() : null;
      const currentNodeBlock = builder.context.nodeBlock;
      builder.getDataFromNode(ifNode).parentNodeBlock = currentNodeBlock;
      if (elseNode !== null) builder.getDataFromNode(elseNode).parentNodeBlock = currentNodeBlock;
      const properties = builder.getNodeProperties(this);
      properties.condNode = condNode;
      properties.ifNode = ifNode.context({ nodeBlock: ifNode });
      properties.elseNode = elseNode ? elseNode.context({ nodeBlock: elseNode }) : null;
    }
    generate(builder, output2) {
      const type = this.getNodeType(builder);
      const nodeData = builder.getDataFromNode(this);
      if (nodeData.nodeProperty !== void 0) {
        return nodeData.nodeProperty;
      }
      const { condNode, ifNode, elseNode } = builder.getNodeProperties(this);
      const functionNode = builder.currentFunctionNode;
      const needsOutput = output2 !== "void";
      const nodeProperty = needsOutput ? property(type).build(builder) : "";
      nodeData.nodeProperty = nodeProperty;
      const nodeSnippet = condNode.build(builder, "bool");
      builder.addFlowCode(`
${builder.tab}if ( ${nodeSnippet} ) {

`).addFlowTab();
      let ifSnippet = ifNode.build(builder, type);
      if (ifSnippet) {
        if (needsOutput) {
          ifSnippet = nodeProperty + " = " + ifSnippet + ";";
        } else {
          ifSnippet = "return " + ifSnippet + ";";
          if (functionNode === null) {
            console.warn("THREE.TSL: Return statement used in an inline 'Fn()'. Define a layout struct to allow return values.");
            ifSnippet = "// " + ifSnippet;
          }
        }
      }
      builder.removeFlowTab().addFlowCode(builder.tab + "	" + ifSnippet + "\n\n" + builder.tab + "}");
      if (elseNode !== null) {
        builder.addFlowCode(" else {\n\n").addFlowTab();
        let elseSnippet = elseNode.build(builder, type);
        if (elseSnippet) {
          if (needsOutput) {
            elseSnippet = nodeProperty + " = " + elseSnippet + ";";
          } else {
            elseSnippet = "return " + elseSnippet + ";";
            if (functionNode === null) {
              console.warn("THREE.TSL: Return statement used in an inline 'Fn()'. Define a layout struct to allow return values.");
              elseSnippet = "// " + elseSnippet;
            }
          }
        }
        builder.removeFlowTab().addFlowCode(builder.tab + "	" + elseSnippet + "\n\n" + builder.tab + "}\n\n");
      } else {
        builder.addFlowCode("\n\n");
      }
      return builder.format(nodeProperty, type, output2);
    }
  };
  var select = /* @__PURE__ */ nodeProxy(ConditionalNode).setParameterLength(2, 3);
  addMethodChaining("select", select);
  var cond = (...params) => {
    console.warn("THREE.TSL: cond() has been renamed to select().");
    return select(...params);
  };
  addMethodChaining("cond", cond);
  var ContextNode = class extends Node {
    static get type() {
      return "ContextNode";
    }
    /**
     * Constructs a new context node.
     *
     * @param {Node} node - The node whose context should be modified.
     * @param {Object} [value={}] - The modified context data.
     */
    constructor(node, value = {}) {
      super();
      this.isContextNode = true;
      this.node = node;
      this.value = value;
    }
    /**
     * This method is overwritten to ensure it returns the reference to {@link ContextNode#node}.
     *
     * @return {Node} A reference to {@link ContextNode#node}.
     */
    getScope() {
      return this.node.getScope();
    }
    /**
     * This method is overwritten to ensure it returns the type of {@link ContextNode#node}.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The node type.
     */
    getNodeType(builder) {
      return this.node.getNodeType(builder);
    }
    analyze(builder) {
      const previousContext = builder.getContext();
      builder.setContext({ ...builder.context, ...this.value });
      this.node.build(builder);
      builder.setContext(previousContext);
    }
    setup(builder) {
      const previousContext = builder.getContext();
      builder.setContext({ ...builder.context, ...this.value });
      this.node.build(builder);
      builder.setContext(previousContext);
    }
    generate(builder, output2) {
      const previousContext = builder.getContext();
      builder.setContext({ ...builder.context, ...this.value });
      const snippet2 = this.node.build(builder, output2);
      builder.setContext(previousContext);
      return snippet2;
    }
  };
  var context = /* @__PURE__ */ nodeProxy(ContextNode).setParameterLength(1, 2);
  var label = (node, name2) => context(node, { label: name2 });
  addMethodChaining("context", context);
  addMethodChaining("label", label);
  var VarNode = class extends Node {
    static get type() {
      return "VarNode";
    }
    /**
     * Constructs a new variable node.
     *
     * @param {Node} node - The node for which a variable should be created.
     * @param {?string} [name=null] - The name of the variable in the shader.
     * @param {boolean} [readOnly=false] - The read-only flag.
     */
    constructor(node, name2 = null, readOnly2 = false) {
      super();
      this.node = node;
      this.name = name2;
      this.global = true;
      this.isVarNode = true;
      this.readOnly = readOnly2;
      this.parents = true;
    }
    getMemberType(builder, name2) {
      return this.node.getMemberType(builder, name2);
    }
    getElementType(builder) {
      return this.node.getElementType(builder);
    }
    getNodeType(builder) {
      return this.node.getNodeType(builder);
    }
    generate(builder) {
      const { node, name: name2, readOnly: readOnly2 } = this;
      const { renderer } = builder;
      const isWebGPUBackend = renderer.backend.isWebGPUBackend === true;
      let isDeterministic = false;
      let shouldTreatAsReadOnly = false;
      if (readOnly2) {
        isDeterministic = builder.isDeterministic(node);
        shouldTreatAsReadOnly = isWebGPUBackend ? readOnly2 : isDeterministic;
      }
      const vectorType = builder.getVectorType(this.getNodeType(builder));
      const snippet2 = node.build(builder, vectorType);
      const nodeVar = builder.getVarFromNode(this, name2, vectorType, void 0, shouldTreatAsReadOnly);
      const propertyName2 = builder.getPropertyName(nodeVar);
      let declarationPrefix = propertyName2;
      if (shouldTreatAsReadOnly) {
        if (isWebGPUBackend) {
          declarationPrefix = isDeterministic ? `const ${propertyName2}` : `let ${propertyName2}`;
        } else {
          const count = builder.getArrayCount(node);
          declarationPrefix = `const ${builder.getVar(nodeVar.type, propertyName2, count)}`;
        }
      }
      builder.addLineFlowCode(`${declarationPrefix} = ${snippet2}`, this);
      return propertyName2;
    }
  };
  var createVar = /* @__PURE__ */ nodeProxy(VarNode);
  var Var = (node, name2 = null) => createVar(node, name2).toStack();
  var Const = (node, name2 = null) => createVar(node, name2, true).toStack();
  addMethodChaining("toVar", Var);
  addMethodChaining("toConst", Const);
  var temp = (node) => {
    console.warn('TSL: "temp( node )" is deprecated. Use "Var( node )" or "node.toVar()" instead.');
    return createVar(node);
  };
  addMethodChaining("temp", temp);
  var VaryingNode = class extends Node {
    static get type() {
      return "VaryingNode";
    }
    /**
     * Constructs a new varying node.
     *
     * @param {Node} node - The node for which a varying should be created.
     * @param {?string} name - The name of the varying in the shader.
     */
    constructor(node, name2 = null) {
      super();
      this.node = node;
      this.name = name2;
      this.isVaryingNode = true;
      this.interpolationType = null;
      this.interpolationSampling = null;
      this.global = true;
    }
    /**
     * Defines the interpolation type of the varying.
     *
     * @param {string} type - The interpolation type.
     * @param {?string} sampling - The interpolation sampling type
     * @return {VaryingNode} A reference to this node.
     */
    setInterpolation(type, sampling = null) {
      this.interpolationType = type;
      this.interpolationSampling = sampling;
      return this;
    }
    getHash(builder) {
      return this.name || super.getHash(builder);
    }
    getNodeType(builder) {
      return this.node.getNodeType(builder);
    }
    /**
     * This method performs the setup of a varying node with the current node builder.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {NodeVarying} The node varying from the node builder.
     */
    setupVarying(builder) {
      const properties = builder.getNodeProperties(this);
      let varying2 = properties.varying;
      if (varying2 === void 0) {
        const name2 = this.name;
        const type = this.getNodeType(builder);
        const interpolationType = this.interpolationType;
        const interpolationSampling = this.interpolationSampling;
        properties.varying = varying2 = builder.getVaryingFromNode(this, name2, type, interpolationType, interpolationSampling);
        properties.node = this.node;
      }
      varying2.needsInterpolation || (varying2.needsInterpolation = builder.shaderStage === "fragment");
      return varying2;
    }
    setup(builder) {
      this.setupVarying(builder);
      builder.flowNodeFromShaderStage(NodeShaderStage.VERTEX, this.node);
    }
    analyze(builder) {
      this.setupVarying(builder);
      builder.flowNodeFromShaderStage(NodeShaderStage.VERTEX, this.node);
    }
    generate(builder) {
      const properties = builder.getNodeProperties(this);
      const varying2 = this.setupVarying(builder);
      if (properties.propertyName === void 0) {
        const type = this.getNodeType(builder);
        const propertyName2 = builder.getPropertyName(varying2, NodeShaderStage.VERTEX);
        builder.flowNodeFromShaderStage(NodeShaderStage.VERTEX, this.node, type, propertyName2);
        properties.propertyName = propertyName2;
      }
      return builder.getPropertyName(varying2);
    }
  };
  var varying = /* @__PURE__ */ nodeProxy(VaryingNode).setParameterLength(1, 2);
  var vertexStage = (node) => varying(node);
  addMethodChaining("toVarying", varying);
  addMethodChaining("toVertexStage", vertexStage);
  addMethodChaining("varying", (...params) => {
    console.warn("THREE.TSL: .varying() has been renamed to .toVarying().");
    return varying(...params);
  });
  addMethodChaining("vertexStage", (...params) => {
    console.warn("THREE.TSL: .vertexStage() has been renamed to .toVertexStage().");
    return varying(...params);
  });
  var sRGBTransferEOTF = /* @__PURE__ */ Fn(([color2]) => {
    const a = color2.mul(0.9478672986).add(0.0521327014).pow(2.4);
    const b = color2.mul(0.0773993808);
    const factor = color2.lessThanEqual(0.04045);
    const rgbResult = mix(a, b, factor);
    return rgbResult;
  }).setLayout({
    name: "sRGBTransferEOTF",
    type: "vec3",
    inputs: [
      { name: "color", type: "vec3" }
    ]
  });
  var sRGBTransferOETF = /* @__PURE__ */ Fn(([color2]) => {
    const a = color2.pow(0.41666).mul(1.055).sub(0.055);
    const b = color2.mul(12.92);
    const factor = color2.lessThanEqual(31308e-7);
    const rgbResult = mix(a, b, factor);
    return rgbResult;
  }).setLayout({
    name: "sRGBTransferOETF",
    type: "vec3",
    inputs: [
      { name: "color", type: "vec3" }
    ]
  });
  var WORKING_COLOR_SPACE = "WorkingColorSpace";
  var OUTPUT_COLOR_SPACE = "OutputColorSpace";
  var ColorSpaceNode = class extends TempNode {
    static get type() {
      return "ColorSpaceNode";
    }
    /**
     * Constructs a new color space node.
     *
     * @param {Node} colorNode - Represents the color to convert.
     * @param {string} source - The source color space.
     * @param {string} target - The target color space.
     */
    constructor(colorNode, source, target) {
      super("vec4");
      this.colorNode = colorNode;
      this.source = source;
      this.target = target;
    }
    /**
     * This method resolves the constants `WORKING_COLOR_SPACE` and
     * `OUTPUT_COLOR_SPACE` based on the current configuration of the
     * color management and renderer.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @param {string} colorSpace - The color space to resolve.
     * @return {string} The resolved color space.
     */
    resolveColorSpace(builder, colorSpace) {
      if (colorSpace === WORKING_COLOR_SPACE) {
        return ColorManagement.workingColorSpace;
      } else if (colorSpace === OUTPUT_COLOR_SPACE) {
        return builder.context.outputColorSpace || builder.renderer.outputColorSpace;
      }
      return colorSpace;
    }
    setup(builder) {
      const { colorNode } = this;
      const source = this.resolveColorSpace(builder, this.source);
      const target = this.resolveColorSpace(builder, this.target);
      let outputNode = colorNode;
      if (ColorManagement.enabled === false || source === target || !source || !target) {
        return outputNode;
      }
      if (ColorManagement.getTransfer(source) === SRGBTransfer) {
        outputNode = vec4(sRGBTransferEOTF(outputNode.rgb), outputNode.a);
      }
      if (ColorManagement.getPrimaries(source) !== ColorManagement.getPrimaries(target)) {
        outputNode = vec4(
          mat3(ColorManagement._getMatrix(new Matrix3(), source, target)).mul(outputNode.rgb),
          outputNode.a
        );
      }
      if (ColorManagement.getTransfer(target) === SRGBTransfer) {
        outputNode = vec4(sRGBTransferOETF(outputNode.rgb), outputNode.a);
      }
      return outputNode;
    }
  };
  var workingToColorSpace = (node, targetColorSpace) => nodeObject(new ColorSpaceNode(nodeObject(node), WORKING_COLOR_SPACE, targetColorSpace));
  var colorSpaceToWorking = (node, sourceColorSpace) => nodeObject(new ColorSpaceNode(nodeObject(node), sourceColorSpace, WORKING_COLOR_SPACE));
  addMethodChaining("workingToColorSpace", workingToColorSpace);
  addMethodChaining("colorSpaceToWorking", colorSpaceToWorking);
  var ReferenceElementNode$1 = class ReferenceElementNode extends ArrayElementNode {
    static get type() {
      return "ReferenceElementNode";
    }
    /**
     * Constructs a new reference element node.
     *
     * @param {ReferenceBaseNode} referenceNode - The reference node.
     * @param {Node} indexNode - The index node that defines the element access.
     */
    constructor(referenceNode, indexNode) {
      super(referenceNode, indexNode);
      this.referenceNode = referenceNode;
      this.isReferenceElementNode = true;
    }
    /**
     * This method is overwritten since the node type is inferred from
     * the uniform type of the reference node.
     *
     * @return {string} The node type.
     */
    getNodeType() {
      return this.referenceNode.uniformType;
    }
    generate(builder) {
      const snippet2 = super.generate(builder);
      const arrayType = this.referenceNode.getNodeType();
      const elementType = this.getNodeType();
      return builder.format(snippet2, arrayType, elementType);
    }
  };
  var ReferenceBaseNode = class extends Node {
    static get type() {
      return "ReferenceBaseNode";
    }
    /**
     * Constructs a new reference base node.
     *
     * @param {string} property - The name of the property the node refers to.
     * @param {string} uniformType - The uniform type that should be used to represent the property value.
     * @param {?Object} [object=null] - The object the property belongs to.
     * @param {?number} [count=null] - When the linked property is an array-like, this parameter defines its length.
     */
    constructor(property2, uniformType, object = null, count = null) {
      super();
      this.property = property2;
      this.uniformType = uniformType;
      this.object = object;
      this.count = count;
      this.properties = property2.split(".");
      this.reference = object;
      this.node = null;
      this.group = null;
      this.updateType = NodeUpdateType.OBJECT;
    }
    /**
     * Sets the uniform group for this reference node.
     *
     * @param {UniformGroupNode} group - The uniform group to set.
     * @return {ReferenceBaseNode} A reference to this node.
     */
    setGroup(group) {
      this.group = group;
      return this;
    }
    /**
     * When the referred property is array-like, this method can be used
     * to access elements via an index node.
     *
     * @param {IndexNode} indexNode - indexNode.
     * @return {ReferenceElementNode} A reference to an element.
     */
    element(indexNode) {
      return nodeObject(new ReferenceElementNode$1(this, nodeObject(indexNode)));
    }
    /**
     * Sets the node type which automatically defines the internal
     * uniform type.
     *
     * @param {string} uniformType - The type to set.
     */
    setNodeType(uniformType) {
      const node = uniform(null, uniformType).getSelf();
      if (this.group !== null) {
        node.setGroup(this.group);
      }
      this.node = node;
    }
    /**
     * This method is overwritten since the node type is inferred from
     * the type of the reference node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The node type.
     */
    getNodeType(builder) {
      if (this.node === null) {
        this.updateReference(builder);
        this.updateValue();
      }
      return this.node.getNodeType(builder);
    }
    /**
     * Returns the property value from the given referred object.
     *
     * @param {Object} [object=this.reference] - The object to retrieve the property value from.
     * @return {any} The value.
     */
    getValueFromReference(object = this.reference) {
      const { properties } = this;
      let value = object[properties[0]];
      for (let i = 1; i < properties.length; i++) {
        value = value[properties[i]];
      }
      return value;
    }
    /**
     * Allows to update the reference based on the given state. The state is only
     * evaluated {@link ReferenceBaseNode#object} is not set.
     *
     * @param {(NodeFrame|NodeBuilder)} state - The current state.
     * @return {Object} The updated reference.
     */
    updateReference(state) {
      this.reference = this.object !== null ? this.object : state.object;
      return this.reference;
    }
    /**
     * The output of the reference node is the internal uniform node.
     *
     * @return {UniformNode} The output node.
     */
    setup() {
      this.updateValue();
      return this.node;
    }
    /**
     * Overwritten to update the internal uniform value.
     *
     * @param {NodeFrame} frame - A reference to the current node frame.
     */
    update() {
      this.updateValue();
    }
    /**
     * Retrieves the value from the referred object property and uses it
     * to updated the internal uniform.
     */
    updateValue() {
      if (this.node === null) this.setNodeType(this.uniformType);
      const value = this.getValueFromReference();
      if (Array.isArray(value)) {
        this.node.array = value;
      } else {
        this.node.value = value;
      }
    }
  };
  var reference$1 = (name2, type, object) => nodeObject(new ReferenceBaseNode(name2, type, object));
  var RendererReferenceNode = class extends ReferenceBaseNode {
    static get type() {
      return "RendererReferenceNode";
    }
    /**
     * Constructs a new renderer reference node.
     *
     * @param {string} property - The name of the property the node refers to.
     * @param {string} inputType - The uniform type that should be used to represent the property value.
     * @param {?Renderer} [renderer=null] - The renderer the property belongs to. When no renderer is set,
     * the node refers to the renderer of the current state.
     */
    constructor(property2, inputType, renderer = null) {
      super(property2, inputType, renderer);
      this.renderer = renderer;
      this.setGroup(renderGroup);
    }
    /**
     * Updates the reference based on the given state. The state is only evaluated
     * {@link RendererReferenceNode#renderer} is not set.
     *
     * @param {(NodeFrame|NodeBuilder)} state - The current state.
     * @return {Object} The updated reference.
     */
    updateReference(state) {
      this.reference = this.renderer !== null ? this.renderer : state.renderer;
      return this.reference;
    }
  };
  var rendererReference = (name2, type, renderer = null) => nodeObject(new RendererReferenceNode(name2, type, renderer));
  var ToneMappingNode = class extends TempNode {
    static get type() {
      return "ToneMappingNode";
    }
    /**
     * Constructs a new tone mapping node.
     *
     * @param {number} toneMapping - The tone mapping type.
     * @param {Node} exposureNode - The tone mapping exposure.
     * @param {Node} [colorNode=null] - The color node to process.
     */
    constructor(toneMapping2, exposureNode = toneMappingExposure, colorNode = null) {
      super("vec3");
      this.toneMapping = toneMapping2;
      this.exposureNode = exposureNode;
      this.colorNode = colorNode;
    }
    /**
     * Overwrites the default `customCacheKey()` implementation by including the tone
     * mapping type into the cache key.
     *
     * @return {number} The hash.
     */
    customCacheKey() {
      return hash$1(this.toneMapping);
    }
    setup(builder) {
      const colorNode = this.colorNode || builder.context.color;
      const toneMapping2 = this.toneMapping;
      if (toneMapping2 === NoToneMapping) return colorNode;
      let outputNode = null;
      const toneMappingFn = builder.renderer.library.getToneMappingFunction(toneMapping2);
      if (toneMappingFn !== null) {
        outputNode = vec4(toneMappingFn(colorNode.rgb, this.exposureNode), colorNode.a);
      } else {
        console.error("ToneMappingNode: Unsupported Tone Mapping configuration.", toneMapping2);
        outputNode = colorNode;
      }
      return outputNode;
    }
  };
  var toneMapping = (mapping, exposure, color2) => nodeObject(new ToneMappingNode(mapping, nodeObject(exposure), nodeObject(color2)));
  var toneMappingExposure = /* @__PURE__ */ rendererReference("toneMappingExposure", "float");
  addMethodChaining("toneMapping", (color2, mapping, exposure) => toneMapping(mapping, exposure, color2));
  var BufferAttributeNode = class extends InputNode {
    static get type() {
      return "BufferAttributeNode";
    }
    /**
     * Constructs a new buffer attribute node.
     *
     * @param {BufferAttribute|InterleavedBuffer|TypedArray} value - The attribute data.
     * @param {?string} [bufferType=null] - The buffer type (e.g. `'vec3'`).
     * @param {number} [bufferStride=0] - The buffer stride.
     * @param {number} [bufferOffset=0] - The buffer offset.
     */
    constructor(value, bufferType = null, bufferStride = 0, bufferOffset = 0) {
      super(value, bufferType);
      this.isBufferNode = true;
      this.bufferType = bufferType;
      this.bufferStride = bufferStride;
      this.bufferOffset = bufferOffset;
      this.usage = StaticDrawUsage;
      this.instanced = false;
      this.attribute = null;
      this.global = true;
      if (value && value.isBufferAttribute === true) {
        this.attribute = value;
        this.usage = value.usage;
        this.instanced = value.isInstancedBufferAttribute;
      }
    }
    /**
     * This method is overwritten since the attribute data might be shared
     * and thus the hash should be shared as well.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The hash.
     */
    getHash(builder) {
      if (this.bufferStride === 0 && this.bufferOffset === 0) {
        let bufferData = builder.globalCache.getData(this.value);
        if (bufferData === void 0) {
          bufferData = {
            node: this
          };
          builder.globalCache.setData(this.value, bufferData);
        }
        return bufferData.node.uuid;
      }
      return this.uuid;
    }
    /**
     * This method is overwritten since the node type is inferred from
     * the buffer attribute.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The node type.
     */
    getNodeType(builder) {
      if (this.bufferType === null) {
        this.bufferType = builder.getTypeFromAttribute(this.attribute);
      }
      return this.bufferType;
    }
    /**
     * Depending on which value was passed to the node, `setup()` behaves
     * differently. If no instance of `BufferAttribute` was passed, the method
     * creates an internal attribute and configures it respectively.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    setup(builder) {
      if (this.attribute !== null) return;
      const type = this.getNodeType(builder);
      const array2 = this.value;
      const itemSize = builder.getTypeLength(type);
      const stride = this.bufferStride || itemSize;
      const offset = this.bufferOffset;
      const buffer2 = array2.isInterleavedBuffer === true ? array2 : new InterleavedBuffer(array2, stride);
      const bufferAttribute2 = new InterleavedBufferAttribute(buffer2, itemSize, offset);
      buffer2.setUsage(this.usage);
      this.attribute = bufferAttribute2;
      this.attribute.isInstancedBufferAttribute = this.instanced;
    }
    /**
     * Generates the code snippet of the buffer attribute node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The generated code snippet.
     */
    generate(builder) {
      const nodeType = this.getNodeType(builder);
      const nodeAttribute = builder.getBufferAttributeFromNode(this, nodeType);
      const propertyName2 = builder.getPropertyName(nodeAttribute);
      let output2 = null;
      if (builder.shaderStage === "vertex" || builder.shaderStage === "compute") {
        this.name = propertyName2;
        output2 = propertyName2;
      } else {
        const nodeVarying = varying(this);
        output2 = nodeVarying.build(builder, nodeType);
      }
      return output2;
    }
    /**
     * Overwrites the default implementation to return a fixed value `'bufferAttribute'`.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The input type.
     */
    getInputType() {
      return "bufferAttribute";
    }
    /**
     * Sets the `usage` property to the given value.
     *
     * @param {number} value - The usage to set.
     * @return {BufferAttributeNode} A reference to this node.
     */
    setUsage(value) {
      this.usage = value;
      if (this.attribute && this.attribute.isBufferAttribute === true) {
        this.attribute.usage = value;
      }
      return this;
    }
    /**
     * Sets the `instanced` property to the given value.
     *
     * @param {boolean} value - The value to set.
     * @return {BufferAttributeNode} A reference to this node.
     */
    setInstanced(value) {
      this.instanced = value;
      return this;
    }
  };
  var bufferAttribute = (array2, type = null, stride = 0, offset = 0) => nodeObject(new BufferAttributeNode(array2, type, stride, offset));
  var dynamicBufferAttribute = (array2, type = null, stride = 0, offset = 0) => bufferAttribute(array2, type, stride, offset).setUsage(DynamicDrawUsage);
  var instancedBufferAttribute = (array2, type = null, stride = 0, offset = 0) => bufferAttribute(array2, type, stride, offset).setInstanced(true);
  var instancedDynamicBufferAttribute = (array2, type = null, stride = 0, offset = 0) => dynamicBufferAttribute(array2, type, stride, offset).setInstanced(true);
  addMethodChaining("toAttribute", (bufferNode) => bufferAttribute(bufferNode.value));
  var ComputeNode = class extends Node {
    static get type() {
      return "ComputeNode";
    }
    /**
     * Constructs a new compute node.
     *
     * @param {Node} computeNode - TODO
     * @param {number} count - TODO.
     * @param {Array<number>} [workgroupSize=[64]] - TODO.
     */
    constructor(computeNode, count, workgroupSize = [64]) {
      super("void");
      this.isComputeNode = true;
      this.computeNode = computeNode;
      this.count = count;
      this.workgroupSize = workgroupSize;
      this.dispatchCount = 0;
      this.version = 1;
      this.name = "";
      this.updateBeforeType = NodeUpdateType.OBJECT;
      this.onInitFunction = null;
      this.updateDispatchCount();
    }
    /**
     * Executes the `dispose` event for this node.
     */
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
    /**
     * Sets the {@link ComputeNode#name} property.
     *
     * @param {string} name - The name of the uniform.
     * @return {ComputeNode} A reference to this node.
     */
    label(name2) {
      this.name = name2;
      return this;
    }
    /**
     * TODO
     */
    updateDispatchCount() {
      const { count, workgroupSize } = this;
      let size = workgroupSize[0];
      for (let i = 1; i < workgroupSize.length; i++)
        size *= workgroupSize[i];
      this.dispatchCount = Math.ceil(count / size);
    }
    /**
     * TODO
     *
     * @param {Function} callback - TODO.
     * @return {ComputeNode} A reference to this node.
     */
    onInit(callback) {
      this.onInitFunction = callback;
      return this;
    }
    /**
     * The method execute the compute for this node.
     *
     * @param {NodeFrame} frame - A reference to the current node frame.
     */
    updateBefore({ renderer }) {
      renderer.compute(this);
    }
    setup(builder) {
      const result = this.computeNode.build(builder);
      if (result) {
        const properties = builder.getNodeProperties(this);
        properties.outputComputeNode = result.outputNode;
        result.outputNode = null;
      }
      return result;
    }
    generate(builder, output2) {
      const { shaderStage } = builder;
      if (shaderStage === "compute") {
        const snippet2 = this.computeNode.build(builder, "void");
        if (snippet2 !== "") {
          builder.addLineFlowCode(snippet2, this);
        }
      } else {
        const properties = builder.getNodeProperties(this);
        const outputComputeNode = properties.outputComputeNode;
        if (outputComputeNode) {
          return outputComputeNode.build(builder, output2);
        }
      }
    }
  };
  var compute = (node, count, workgroupSize) => nodeObject(new ComputeNode(nodeObject(node), count, workgroupSize));
  addMethodChaining("compute", compute);
  var CacheNode = class extends Node {
    static get type() {
      return "CacheNode";
    }
    /**
     * Constructs a new cache node.
     *
     * @param {Node} node - The node that should be cached.
     * @param {boolean} [parent=true] - Whether this node refers to a shared parent cache or not.
     */
    constructor(node, parent = true) {
      super();
      this.node = node;
      this.parent = parent;
      this.isCacheNode = true;
    }
    getNodeType(builder) {
      const previousCache = builder.getCache();
      const cache3 = builder.getCacheFromNode(this, this.parent);
      builder.setCache(cache3);
      const nodeType = this.node.getNodeType(builder);
      builder.setCache(previousCache);
      return nodeType;
    }
    build(builder, ...params) {
      const previousCache = builder.getCache();
      const cache3 = builder.getCacheFromNode(this, this.parent);
      builder.setCache(cache3);
      const data = this.node.build(builder, ...params);
      builder.setCache(previousCache);
      return data;
    }
  };
  var cache2 = (node, parent) => nodeObject(new CacheNode(nodeObject(node), parent));
  var namespace = (node, namespace2) => node.context({ namespace: namespace2 });
  addMethodChaining("cache", cache2);
  var BypassNode = class extends Node {
    static get type() {
      return "BypassNode";
    }
    /**
     * Constructs a new bypass node.
     *
     * @param {Node} outputNode - The output node.
     * @param {Node} callNode - The call node.
     */
    constructor(outputNode, callNode) {
      super();
      this.isBypassNode = true;
      this.outputNode = outputNode;
      this.callNode = callNode;
    }
    getNodeType(builder) {
      return this.outputNode.getNodeType(builder);
    }
    generate(builder) {
      const snippet2 = this.callNode.build(builder, "void");
      if (snippet2 !== "") {
        builder.addLineFlowCode(snippet2, this);
      }
      return this.outputNode.build(builder);
    }
  };
  var bypass = /* @__PURE__ */ nodeProxy(BypassNode).setParameterLength(2);
  addMethodChaining("bypass", bypass);
  var RemapNode = class extends Node {
    static get type() {
      return "RemapNode";
    }
    /**
     * Constructs a new remap node.
     *
     * @param {Node} node - The node that should be remapped.
     * @param {Node} inLowNode - The source or current lower bound of the range.
     * @param {Node} inHighNode - The source or current upper bound of the range.
     * @param {Node} [outLowNode=float(0)] - The target lower bound of the range.
     * @param {Node} [outHighNode=float(1)] - The target upper bound of the range.
     */
    constructor(node, inLowNode, inHighNode, outLowNode = float(0), outHighNode = float(1)) {
      super();
      this.node = node;
      this.inLowNode = inLowNode;
      this.inHighNode = inHighNode;
      this.outLowNode = outLowNode;
      this.outHighNode = outHighNode;
      this.doClamp = true;
    }
    setup() {
      const { node, inLowNode, inHighNode, outLowNode, outHighNode, doClamp } = this;
      let t2 = node.sub(inLowNode).div(inHighNode.sub(inLowNode));
      if (doClamp === true) t2 = t2.clamp();
      return t2.mul(outHighNode.sub(outLowNode)).add(outLowNode);
    }
  };
  var remap = /* @__PURE__ */ nodeProxy(RemapNode, null, null, { doClamp: false }).setParameterLength(3, 5);
  var remapClamp = /* @__PURE__ */ nodeProxy(RemapNode).setParameterLength(3, 5);
  addMethodChaining("remap", remap);
  addMethodChaining("remapClamp", remapClamp);
  var ExpressionNode = class extends Node {
    static get type() {
      return "ExpressionNode";
    }
    /**
     * Constructs a new expression node.
     *
     * @param {string} [snippet=''] - The native code snippet.
     * @param {string} [nodeType='void'] - The node type.
     */
    constructor(snippet2 = "", nodeType = "void") {
      super(nodeType);
      this.snippet = snippet2;
    }
    generate(builder, output2) {
      const type = this.getNodeType(builder);
      const snippet2 = this.snippet;
      if (type === "void") {
        builder.addLineFlowCode(snippet2, this);
      } else {
        return builder.format(snippet2, type, output2);
      }
    }
  };
  var expression = /* @__PURE__ */ nodeProxy(ExpressionNode).setParameterLength(1, 2);
  var Discard = (conditional) => (conditional ? select(conditional, expression("discard")) : expression("discard")).toStack();
  addMethodChaining("discard", Discard);
  var RenderOutputNode = class extends TempNode {
    static get type() {
      return "RenderOutputNode";
    }
    /**
     * Constructs a new render output node.
     *
     * @param {Node} colorNode - The color node to process.
     * @param {?number} toneMapping - The tone mapping type.
     * @param {?string} outputColorSpace - The output color space.
     */
    constructor(colorNode, toneMapping2, outputColorSpace) {
      super("vec4");
      this.colorNode = colorNode;
      this.toneMapping = toneMapping2;
      this.outputColorSpace = outputColorSpace;
      this.isRenderOutputNode = true;
    }
    setup({ context: context2 }) {
      let outputNode = this.colorNode || context2.color;
      const toneMapping2 = (this.toneMapping !== null ? this.toneMapping : context2.toneMapping) || NoToneMapping;
      const outputColorSpace = (this.outputColorSpace !== null ? this.outputColorSpace : context2.outputColorSpace) || NoColorSpace;
      if (toneMapping2 !== NoToneMapping) {
        outputNode = outputNode.toneMapping(toneMapping2);
      }
      if (outputColorSpace !== NoColorSpace && outputColorSpace !== ColorManagement.workingColorSpace) {
        outputNode = outputNode.workingToColorSpace(outputColorSpace);
      }
      return outputNode;
    }
  };
  var renderOutput = (color2, toneMapping2 = null, outputColorSpace = null) => nodeObject(new RenderOutputNode(nodeObject(color2), toneMapping2, outputColorSpace));
  addMethodChaining("renderOutput", renderOutput);
  var DebugNode = class extends TempNode {
    static get type() {
      return "DebugNode";
    }
    constructor(node, callback = null) {
      super();
      this.node = node;
      this.callback = callback;
    }
    getNodeType(builder) {
      return this.node.getNodeType(builder);
    }
    setup(builder) {
      return this.node.build(builder);
    }
    analyze(builder) {
      return this.node.build(builder);
    }
    generate(builder) {
      const callback = this.callback;
      const snippet2 = this.node.build(builder);
      const title = "--- TSL debug - " + builder.shaderStage + " shader ---";
      const border = "-".repeat(title.length);
      let code = "";
      code += "// #" + title + "#\n";
      code += builder.flow.code.replace(/^\t/mg, "") + "\n";
      code += "/* ... */ " + snippet2 + " /* ... */\n";
      code += "// #" + border + "#\n";
      if (callback !== null) {
        callback(builder, code);
      } else {
        console.log(code);
      }
      return snippet2;
    }
  };
  var debug = (node, callback = null) => nodeObject(new DebugNode(nodeObject(node), callback));
  addMethodChaining("debug", debug);
  var AttributeNode = class extends Node {
    static get type() {
      return "AttributeNode";
    }
    /**
     * Constructs a new attribute node.
     *
     * @param {string} attributeName - The name of the attribute.
     * @param {?string} nodeType - The node type.
     */
    constructor(attributeName, nodeType = null) {
      super(nodeType);
      this.global = true;
      this._attributeName = attributeName;
    }
    getHash(builder) {
      return this.getAttributeName(builder);
    }
    getNodeType(builder) {
      let nodeType = this.nodeType;
      if (nodeType === null) {
        const attributeName = this.getAttributeName(builder);
        if (builder.hasGeometryAttribute(attributeName)) {
          const attribute2 = builder.geometry.getAttribute(attributeName);
          nodeType = builder.getTypeFromAttribute(attribute2);
        } else {
          nodeType = "float";
        }
      }
      return nodeType;
    }
    /**
     * Sets the attribute name to the given value. The method can be
     * overwritten in derived classes if the final name must be computed
     * analytically.
     *
     * @param {string} attributeName - The name of the attribute.
     * @return {AttributeNode} A reference to this node.
     */
    setAttributeName(attributeName) {
      this._attributeName = attributeName;
      return this;
    }
    /**
     * Returns the attribute name of this node. The method can be
     * overwritten in derived classes if the final name must be computed
     * analytically.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The attribute name.
     */
    getAttributeName() {
      return this._attributeName;
    }
    generate(builder) {
      const attributeName = this.getAttributeName(builder);
      const nodeType = this.getNodeType(builder);
      const geometryAttribute = builder.hasGeometryAttribute(attributeName);
      if (geometryAttribute === true) {
        const attribute2 = builder.geometry.getAttribute(attributeName);
        const attributeType = builder.getTypeFromAttribute(attribute2);
        const nodeAttribute = builder.getAttribute(attributeName, attributeType);
        if (builder.shaderStage === "vertex") {
          return builder.format(nodeAttribute.name, attributeType, nodeType);
        } else {
          const nodeVarying = varying(this);
          return nodeVarying.build(builder, nodeType);
        }
      } else {
        console.warn(`AttributeNode: Vertex attribute "${attributeName}" not found on geometry.`);
        return builder.generateConst(nodeType);
      }
    }
    serialize(data) {
      super.serialize(data);
      data.global = this.global;
      data._attributeName = this._attributeName;
    }
    deserialize(data) {
      super.deserialize(data);
      this.global = data.global;
      this._attributeName = data._attributeName;
    }
  };
  var attribute = (name2, nodeType = null) => nodeObject(new AttributeNode(name2, nodeType));
  var uv = (index = 0) => attribute("uv" + (index > 0 ? index : ""), "vec2");
  var TextureSizeNode = class extends Node {
    static get type() {
      return "TextureSizeNode";
    }
    /**
     * Constructs a new texture size node.
     *
     * @param {TextureNode} textureNode - A texture node which size should be retrieved.
     * @param {?Node<int>} [levelNode=null] - A level node which defines the requested mip.
     */
    constructor(textureNode, levelNode = null) {
      super("uvec2");
      this.isTextureSizeNode = true;
      this.textureNode = textureNode;
      this.levelNode = levelNode;
    }
    generate(builder, output2) {
      const textureProperty = this.textureNode.build(builder, "property");
      const level = this.levelNode === null ? "0" : this.levelNode.build(builder, "int");
      return builder.format(`${builder.getMethod("textureDimensions")}( ${textureProperty}, ${level} )`, this.getNodeType(builder), output2);
    }
  };
  var textureSize = /* @__PURE__ */ nodeProxy(TextureSizeNode).setParameterLength(1, 2);
  var MaxMipLevelNode = class extends UniformNode {
    static get type() {
      return "MaxMipLevelNode";
    }
    /**
     * Constructs a new max mip level node.
     *
     * @param {TextureNode} textureNode - The texture node to compute the max mip level for.
     */
    constructor(textureNode) {
      super(0);
      this._textureNode = textureNode;
      this.updateType = NodeUpdateType.FRAME;
    }
    /**
     * The texture node to compute the max mip level for.
     *
     * @readonly
     * @type {TextureNode}
     */
    get textureNode() {
      return this._textureNode;
    }
    /**
     * The texture.
     *
     * @readonly
     * @type {Texture}
     */
    get texture() {
      return this._textureNode.value;
    }
    update() {
      const texture2 = this.texture;
      const images = texture2.images;
      const image = images && images.length > 0 ? images[0] && images[0].image || images[0] : texture2.image;
      if (image && image.width !== void 0) {
        const { width, height } = image;
        this.value = Math.log2(Math.max(width, height));
      }
    }
  };
  var maxMipLevel = /* @__PURE__ */ nodeProxy(MaxMipLevelNode).setParameterLength(1);
  var EmptyTexture$1 = /* @__PURE__ */ new Texture();
  var TextureNode = class extends UniformNode {
    static get type() {
      return "TextureNode";
    }
    /**
     * Constructs a new texture node.
     *
     * @param {Texture} [value=EmptyTexture] - The texture.
     * @param {?Node<vec2|vec3>} [uvNode=null] - The uv node.
     * @param {?Node<int>} [levelNode=null] - The level node.
     * @param {?Node<float>} [biasNode=null] - The bias node.
     */
    constructor(value = EmptyTexture$1, uvNode = null, levelNode = null, biasNode = null) {
      super(value);
      this.isTextureNode = true;
      this.uvNode = uvNode;
      this.levelNode = levelNode;
      this.biasNode = biasNode;
      this.compareNode = null;
      this.depthNode = null;
      this.gradNode = null;
      this.sampler = true;
      this.updateMatrix = false;
      this.updateType = NodeUpdateType.NONE;
      this.referenceNode = null;
      this._value = value;
      this._matrixUniform = null;
      this.setUpdateMatrix(uvNode === null);
    }
    set value(value) {
      if (this.referenceNode) {
        this.referenceNode.value = value;
      } else {
        this._value = value;
      }
    }
    /**
     * The texture value.
     *
     * @type {Texture}
     */
    get value() {
      return this.referenceNode ? this.referenceNode.value : this._value;
    }
    /**
     * Overwritten since the uniform hash is defined by the texture's UUID.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The uniform hash.
     */
    getUniformHash() {
      return this.value.uuid;
    }
    /**
     * Overwritten since the node type is inferred from the texture type.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The node type.
     */
    getNodeType() {
      if (this.value.isDepthTexture === true) return "float";
      if (this.value.type === UnsignedIntType) {
        return "uvec4";
      } else if (this.value.type === IntType) {
        return "ivec4";
      }
      return "vec4";
    }
    /**
     * Overwrites the default implementation to return a fixed value `'texture'`.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The input type.
     */
    getInputType() {
      return "texture";
    }
    /**
     * Returns a default uvs based on the current texture's channel.
     *
     * @return {AttributeNode<vec2>} The default uvs.
     */
    getDefaultUV() {
      return uv(this.value.channel);
    }
    /**
     * Overwritten to always return the texture reference of the node.
     *
     * @param {any} state - This method can be invocated in different contexts so `state` can refer to any object type.
     * @return {Texture} The texture reference.
     */
    updateReference() {
      return this.value;
    }
    /**
     * Transforms the given uv node with the texture transformation matrix.
     *
     * @param {Node} uvNode - The uv node to transform.
     * @return {Node} The transformed uv node.
     */
    getTransformedUV(uvNode) {
      if (this._matrixUniform === null) this._matrixUniform = uniform(this.value.matrix);
      return this._matrixUniform.mul(vec3(uvNode, 1)).xy;
    }
    /**
     * Defines whether the uv transformation matrix should automatically be updated or not.
     *
     * @param {boolean} value - The update toggle.
     * @return {TextureNode} A reference to this node.
     */
    setUpdateMatrix(value) {
      this.updateMatrix = value;
      this.updateType = value ? NodeUpdateType.OBJECT : NodeUpdateType.NONE;
      return this;
    }
    /**
     * Setups the uv node. Depending on the backend as well as texture's image and type, it might be necessary
     * to modify the uv node for correct sampling.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @param {Node} uvNode - The uv node to setup.
     * @return {Node} The updated uv node.
     */
    setupUV(builder, uvNode) {
      const texture2 = this.value;
      if (builder.isFlipY() && (texture2.image instanceof ImageBitmap && texture2.flipY === true || texture2.isRenderTargetTexture === true || texture2.isFramebufferTexture === true || texture2.isDepthTexture === true)) {
        if (this.sampler) {
          uvNode = uvNode.flipY();
        } else {
          uvNode = uvNode.setY(int(textureSize(this, this.levelNode).y).sub(uvNode.y).sub(1));
        }
      }
      return uvNode;
    }
    /**
     * Setups texture node by preparing the internal nodes for code generation.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    setup(builder) {
      const properties = builder.getNodeProperties(this);
      properties.referenceNode = this.referenceNode;
      const texture2 = this.value;
      if (!texture2 || texture2.isTexture !== true) {
        throw new Error("THREE.TSL: `texture( value )` function expects a valid instance of THREE.Texture().");
      }
      let uvNode = this.uvNode;
      if ((uvNode === null || builder.context.forceUVContext === true) && builder.context.getUV) {
        uvNode = builder.context.getUV(this, builder);
      }
      if (!uvNode) uvNode = this.getDefaultUV();
      if (this.updateMatrix === true) {
        uvNode = this.getTransformedUV(uvNode);
      }
      uvNode = this.setupUV(builder, uvNode);
      let levelNode = this.levelNode;
      if (levelNode === null && builder.context.getTextureLevel) {
        levelNode = builder.context.getTextureLevel(this);
      }
      properties.uvNode = uvNode;
      properties.levelNode = levelNode;
      properties.biasNode = this.biasNode;
      properties.compareNode = this.compareNode;
      properties.gradNode = this.gradNode;
      properties.depthNode = this.depthNode;
    }
    /**
     * Generates the uv code snippet.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @param {Node} uvNode - The uv node to generate code for.
     * @return {string} The generated code snippet.
     */
    generateUV(builder, uvNode) {
      return uvNode.build(builder, this.sampler === true ? "vec2" : "ivec2");
    }
    /**
     * Generates the snippet for the texture sampling.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @param {string} textureProperty - The texture property.
     * @param {string} uvSnippet - The uv snippet.
     * @param {?string} levelSnippet - The level snippet.
     * @param {?string} biasSnippet - The bias snippet.
     * @param {?string} depthSnippet - The depth snippet.
     * @param {?string} compareSnippet - The compare snippet.
     * @param {?Array<string>} gradSnippet - The grad snippet.
     * @return {string} The generated code snippet.
     */
    generateSnippet(builder, textureProperty, uvSnippet, levelSnippet, biasSnippet, depthSnippet, compareSnippet, gradSnippet) {
      const texture2 = this.value;
      let snippet2;
      if (levelSnippet) {
        snippet2 = builder.generateTextureLevel(texture2, textureProperty, uvSnippet, levelSnippet, depthSnippet);
      } else if (biasSnippet) {
        snippet2 = builder.generateTextureBias(texture2, textureProperty, uvSnippet, biasSnippet, depthSnippet);
      } else if (gradSnippet) {
        snippet2 = builder.generateTextureGrad(texture2, textureProperty, uvSnippet, gradSnippet, depthSnippet);
      } else if (compareSnippet) {
        snippet2 = builder.generateTextureCompare(texture2, textureProperty, uvSnippet, compareSnippet, depthSnippet);
      } else if (this.sampler === false) {
        snippet2 = builder.generateTextureLoad(texture2, textureProperty, uvSnippet, depthSnippet);
      } else {
        snippet2 = builder.generateTexture(texture2, textureProperty, uvSnippet, depthSnippet);
      }
      return snippet2;
    }
    /**
     * Generates the code snippet of the texture node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @param {string} output - The current output.
     * @return {string} The generated code snippet.
     */
    generate(builder, output2) {
      const texture2 = this.value;
      const properties = builder.getNodeProperties(this);
      const textureProperty = super.generate(builder, "property");
      if (/^sampler/.test(output2)) {
        return textureProperty + "_sampler";
      } else if (builder.isReference(output2)) {
        return textureProperty;
      } else {
        const nodeData = builder.getDataFromNode(this);
        let propertyName2 = nodeData.propertyName;
        if (propertyName2 === void 0) {
          const { uvNode, levelNode, biasNode, compareNode, depthNode, gradNode } = properties;
          const uvSnippet = this.generateUV(builder, uvNode);
          const levelSnippet = levelNode ? levelNode.build(builder, "float") : null;
          const biasSnippet = biasNode ? biasNode.build(builder, "float") : null;
          const depthSnippet = depthNode ? depthNode.build(builder, "int") : null;
          const compareSnippet = compareNode ? compareNode.build(builder, "float") : null;
          const gradSnippet = gradNode ? [gradNode[0].build(builder, "vec2"), gradNode[1].build(builder, "vec2")] : null;
          const nodeVar = builder.getVarFromNode(this);
          propertyName2 = builder.getPropertyName(nodeVar);
          const snippet3 = this.generateSnippet(builder, textureProperty, uvSnippet, levelSnippet, biasSnippet, depthSnippet, compareSnippet, gradSnippet);
          builder.addLineFlowCode(`${propertyName2} = ${snippet3}`, this);
          nodeData.snippet = snippet3;
          nodeData.propertyName = propertyName2;
        }
        let snippet2 = propertyName2;
        const nodeType = this.getNodeType(builder);
        if (builder.needsToWorkingColorSpace(texture2)) {
          snippet2 = colorSpaceToWorking(expression(snippet2, nodeType), texture2.colorSpace).setup(builder).build(builder, nodeType);
        }
        return builder.format(snippet2, nodeType, output2);
      }
    }
    /**
     * Sets the sampler value.
     *
     * @param {boolean} value - The sampler value to set.
     * @return {TextureNode} A reference to this texture node.
     */
    setSampler(value) {
      this.sampler = value;
      return this;
    }
    /**
     * Returns the sampler value.
     *
     * @return {boolean} The sampler value.
     */
    getSampler() {
      return this.sampler;
    }
    // @TODO: Move to TSL
    /**
     * @function
     * @deprecated since r172. Use {@link TextureNode#sample} instead.
     *
     * @param {Node} uvNode - The uv node.
     * @return {TextureNode} A texture node representing the texture sample.
     */
    uv(uvNode) {
      console.warn("THREE.TextureNode: .uv() has been renamed. Use .sample() instead.");
      return this.sample(uvNode);
    }
    /**
     * Samples the texture with the given uv node.
     *
     * @param {Node} uvNode - The uv node.
     * @return {TextureNode} A texture node representing the texture sample.
     */
    sample(uvNode) {
      const textureNode = this.clone();
      textureNode.uvNode = nodeObject(uvNode);
      textureNode.referenceNode = this.getSelf();
      return nodeObject(textureNode);
    }
    /**
     * Samples a blurred version of the texture by defining an internal bias.
     *
     * @param {Node<float>} amountNode - How blurred the texture should be.
     * @return {TextureNode} A texture node representing the texture sample.
     */
    blur(amountNode) {
      const textureNode = this.clone();
      textureNode.biasNode = nodeObject(amountNode).mul(maxMipLevel(textureNode));
      textureNode.referenceNode = this.getSelf();
      const map = textureNode.value;
      if (textureNode.generateMipmaps === false && (map && map.generateMipmaps === false || map.minFilter === NearestFilter || map.magFilter === NearestFilter)) {
        console.warn("THREE.TSL: texture().blur() requires mipmaps and sampling. Use .generateMipmaps=true and .minFilter/.magFilter=THREE.LinearFilter in the Texture.");
        textureNode.biasNode = null;
      }
      return nodeObject(textureNode);
    }
    /**
     * Samples a specific mip of the texture.
     *
     * @param {Node<int>} levelNode - The mip level to sample.
     * @return {TextureNode} A texture node representing the texture sample.
     */
    level(levelNode) {
      const textureNode = this.clone();
      textureNode.levelNode = nodeObject(levelNode);
      textureNode.referenceNode = this.getSelf();
      return nodeObject(textureNode);
    }
    /**
     * Returns the texture size of the requested level.
     *
     * @param {Node<int>} levelNode - The level to compute the size for.
     * @return {TextureSizeNode} The texture size.
     */
    size(levelNode) {
      return textureSize(this, levelNode);
    }
    /**
     * Samples the texture with the given bias.
     *
     * @param {Node<float>} biasNode - The bias node.
     * @return {TextureNode} A texture node representing the texture sample.
     */
    bias(biasNode) {
      const textureNode = this.clone();
      textureNode.biasNode = nodeObject(biasNode);
      textureNode.referenceNode = this.getSelf();
      return nodeObject(textureNode);
    }
    /**
     * Samples the texture by executing a compare operation.
     *
     * @param {Node<float>} compareNode - The node that defines the compare value.
     * @return {TextureNode} A texture node representing the texture sample.
     */
    compare(compareNode) {
      const textureNode = this.clone();
      textureNode.compareNode = nodeObject(compareNode);
      textureNode.referenceNode = this.getSelf();
      return nodeObject(textureNode);
    }
    /**
     * Samples the texture using an explicit gradient.
     *
     * @param {Node<vec2>} gradNodeX - The gradX node.
     * @param {Node<vec2>} gradNodeY - The gradY node.
     * @return {TextureNode} A texture node representing the texture sample.
     */
    grad(gradNodeX, gradNodeY) {
      const textureNode = this.clone();
      textureNode.gradNode = [nodeObject(gradNodeX), nodeObject(gradNodeY)];
      textureNode.referenceNode = this.getSelf();
      return nodeObject(textureNode);
    }
    /**
     * Samples the texture by defining a depth node.
     *
     * @param {Node<int>} depthNode - The depth node.
     * @return {TextureNode} A texture node representing the texture sample.
     */
    depth(depthNode) {
      const textureNode = this.clone();
      textureNode.depthNode = nodeObject(depthNode);
      textureNode.referenceNode = this.getSelf();
      return nodeObject(textureNode);
    }
    // --
    serialize(data) {
      super.serialize(data);
      data.value = this.value.toJSON(data.meta).uuid;
      data.sampler = this.sampler;
      data.updateMatrix = this.updateMatrix;
      data.updateType = this.updateType;
    }
    deserialize(data) {
      super.deserialize(data);
      this.value = data.meta.textures[data.value];
      this.sampler = data.sampler;
      this.updateMatrix = data.updateMatrix;
      this.updateType = data.updateType;
    }
    /**
     * The update is used to implement the update of the uv transformation matrix.
     */
    update() {
      const texture2 = this.value;
      const matrixUniform = this._matrixUniform;
      if (matrixUniform !== null) matrixUniform.value = texture2.matrix;
      if (texture2.matrixAutoUpdate === true) {
        texture2.updateMatrix();
      }
    }
    /**
     * Clones the texture node.
     *
     * @return {TextureNode} The cloned texture node.
     */
    clone() {
      const newNode = new this.constructor(this.value, this.uvNode, this.levelNode, this.biasNode);
      newNode.sampler = this.sampler;
      newNode.depthNode = this.depthNode;
      newNode.compareNode = this.compareNode;
      newNode.gradNode = this.gradNode;
      return newNode;
    }
  };
  var textureBase = /* @__PURE__ */ nodeProxy(TextureNode).setParameterLength(1, 4).setName("texture");
  var texture = (value = EmptyTexture$1, uvNode = null, levelNode = null, biasNode = null) => {
    let textureNode;
    if (value && value.isTextureNode === true) {
      textureNode = nodeObject(value.clone());
      textureNode.referenceNode = value.getSelf();
      if (uvNode !== null) textureNode.uvNode = nodeObject(uvNode);
      if (levelNode !== null) textureNode.levelNode = nodeObject(levelNode);
      if (biasNode !== null) textureNode.biasNode = nodeObject(biasNode);
    } else {
      textureNode = textureBase(value, uvNode, levelNode, biasNode);
    }
    return textureNode;
  };
  var textureLoad = (...params) => texture(...params).setSampler(false);
  var BufferNode2 = class extends UniformNode {
    static get type() {
      return "BufferNode";
    }
    /**
     * Constructs a new buffer node.
     *
     * @param {Array<number>} value - Array-like buffer data.
     * @param {string} bufferType - The data type of the buffer.
     * @param {number} [bufferCount=0] - The count of buffer elements.
     */
    constructor(value, bufferType, bufferCount = 0) {
      super(value, bufferType);
      this.isBufferNode = true;
      this.bufferType = bufferType;
      this.bufferCount = bufferCount;
    }
    /**
     * The data type of the buffer elements.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The element type.
     */
    getElementType(builder) {
      return this.getNodeType(builder);
    }
    /**
     * Overwrites the default implementation to return a fixed value `'buffer'`.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The input type.
     */
    getInputType() {
      return "buffer";
    }
  };
  var buffer = (value, type, count) => nodeObject(new BufferNode2(value, type, count));
  var UniformArrayElementNode = class extends ArrayElementNode {
    static get type() {
      return "UniformArrayElementNode";
    }
    /**
     * Constructs a new buffer node.
     *
     * @param {UniformArrayNode} uniformArrayNode - The uniform array node to access.
     * @param {IndexNode} indexNode - The index data that define the position of the accessed element in the array.
     */
    constructor(uniformArrayNode, indexNode) {
      super(uniformArrayNode, indexNode);
      this.isArrayBufferElementNode = true;
    }
    generate(builder) {
      const snippet2 = super.generate(builder);
      const type = this.getNodeType();
      const paddedType = this.node.getPaddedType();
      return builder.format(snippet2, paddedType, type);
    }
  };
  var UniformArrayNode = class extends BufferNode2 {
    static get type() {
      return "UniformArrayNode";
    }
    /**
     * Constructs a new uniform array node.
     *
     * @param {Array<any>} value - Array holding the buffer data.
     * @param {?string} [elementType=null] - The data type of a buffer element.
     */
    constructor(value, elementType = null) {
      super(null);
      this.array = value;
      this.elementType = elementType === null ? getValueType(value[0]) : elementType;
      this.paddedType = this.getPaddedType();
      this.updateType = NodeUpdateType.RENDER;
      this.isArrayBufferNode = true;
    }
    /**
     * This method is overwritten since the node type is inferred from the
     * {@link UniformArrayNode#paddedType}.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The node type.
     */
    getNodeType() {
      return this.paddedType;
    }
    /**
     * The data type of the array elements.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The element type.
     */
    getElementType() {
      return this.elementType;
    }
    /**
     * Returns the padded type based on the element type.
     *
     * @return {string} The padded type.
     */
    getPaddedType() {
      const elementType = this.elementType;
      let paddedType = "vec4";
      if (elementType === "mat2") {
        paddedType = "mat2";
      } else if (/mat/.test(elementType) === true) {
        paddedType = "mat4";
      } else if (elementType.charAt(0) === "i") {
        paddedType = "ivec4";
      } else if (elementType.charAt(0) === "u") {
        paddedType = "uvec4";
      }
      return paddedType;
    }
    /**
     * The update makes sure to correctly transfer the data from the (complex) objects
     * in the array to the internal, correctly padded value buffer.
     *
     * @param {NodeFrame} frame - A reference to the current node frame.
     */
    update() {
      const { array: array2, value } = this;
      const elementType = this.elementType;
      if (elementType === "float" || elementType === "int" || elementType === "uint") {
        for (let i = 0; i < array2.length; i++) {
          const index = i * 4;
          value[index] = array2[i];
        }
      } else if (elementType === "color") {
        for (let i = 0; i < array2.length; i++) {
          const index = i * 4;
          const vector = array2[i];
          value[index] = vector.r;
          value[index + 1] = vector.g;
          value[index + 2] = vector.b || 0;
        }
      } else if (elementType === "mat2") {
        for (let i = 0; i < array2.length; i++) {
          const index = i * 4;
          const matrix = array2[i];
          value[index] = matrix.elements[0];
          value[index + 1] = matrix.elements[1];
          value[index + 2] = matrix.elements[2];
          value[index + 3] = matrix.elements[3];
        }
      } else if (elementType === "mat3") {
        for (let i = 0; i < array2.length; i++) {
          const index = i * 16;
          const matrix = array2[i];
          value[index] = matrix.elements[0];
          value[index + 1] = matrix.elements[1];
          value[index + 2] = matrix.elements[2];
          value[index + 4] = matrix.elements[3];
          value[index + 5] = matrix.elements[4];
          value[index + 6] = matrix.elements[5];
          value[index + 8] = matrix.elements[6];
          value[index + 9] = matrix.elements[7];
          value[index + 10] = matrix.elements[8];
          value[index + 15] = 1;
        }
      } else if (elementType === "mat4") {
        for (let i = 0; i < array2.length; i++) {
          const index = i * 16;
          const matrix = array2[i];
          for (let i2 = 0; i2 < matrix.elements.length; i2++) {
            value[index + i2] = matrix.elements[i2];
          }
        }
      } else {
        for (let i = 0; i < array2.length; i++) {
          const index = i * 4;
          const vector = array2[i];
          value[index] = vector.x;
          value[index + 1] = vector.y;
          value[index + 2] = vector.z || 0;
          value[index + 3] = vector.w || 0;
        }
      }
    }
    /**
     * Implement the value buffer creation based on the array data.
     *
     * @param {NodeBuilder} builder - A reference to the current node builder.
     * @return {null}
     */
    setup(builder) {
      const length2 = this.array.length;
      const elementType = this.elementType;
      let arrayType = Float32Array;
      const paddedType = this.paddedType;
      const paddedElementLength = builder.getTypeLength(paddedType);
      if (elementType.charAt(0) === "i") arrayType = Int32Array;
      if (elementType.charAt(0) === "u") arrayType = Uint32Array;
      this.value = new arrayType(length2 * paddedElementLength);
      this.bufferCount = length2;
      this.bufferType = paddedType;
      return super.setup(builder);
    }
    /**
     * Overwrites the default `element()` method to provide element access
     * based on {@link UniformArrayNode}.
     *
     * @param {IndexNode} indexNode - The index node.
     * @return {UniformArrayElementNode}
     */
    element(indexNode) {
      return nodeObject(new UniformArrayElementNode(this, nodeObject(indexNode)));
    }
  };
  var uniformArray = (values, nodeType) => nodeObject(new UniformArrayNode(values, nodeType));
  var BuiltinNode = class extends Node {
    /**
     * Constructs a new builtin node.
     *
     * @param {string} name - The name of the built-in shader variable.
     */
    constructor(name2) {
      super("float");
      this.name = name2;
      this.isBuiltinNode = true;
    }
    /**
     * Generates the code snippet of the builtin node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The generated code snippet.
     */
    generate() {
      return this.name;
    }
  };
  var builtin = nodeProxy(BuiltinNode).setParameterLength(1);
  var cameraIndex = /* @__PURE__ */ uniform(0, "uint").label("u_cameraIndex").setGroup(sharedUniformGroup("cameraIndex")).toVarying("v_cameraIndex");
  var cameraNear = /* @__PURE__ */ uniform("float").label("cameraNear").setGroup(renderGroup).onRenderUpdate(({ camera }) => camera.near);
  var cameraFar = /* @__PURE__ */ uniform("float").label("cameraFar").setGroup(renderGroup).onRenderUpdate(({ camera }) => camera.far);
  var cameraProjectionMatrix = /* @__PURE__ */ Fn(({ camera }) => {
    let cameraProjectionMatrix2;
    if (camera.isArrayCamera && camera.cameras.length > 0) {
      const matrices = [];
      for (const subCamera of camera.cameras) {
        matrices.push(subCamera.projectionMatrix);
      }
      const cameraProjectionMatrices = uniformArray(matrices).setGroup(renderGroup).label("cameraProjectionMatrices");
      cameraProjectionMatrix2 = cameraProjectionMatrices.element(camera.isMultiViewCamera ? builtin("gl_ViewID_OVR") : cameraIndex).toVar("cameraProjectionMatrix");
    } else {
      cameraProjectionMatrix2 = uniform("mat4").label("cameraProjectionMatrix").setGroup(renderGroup).onRenderUpdate(({ camera: camera2 }) => camera2.projectionMatrix);
    }
    return cameraProjectionMatrix2;
  }).once()();
  var cameraViewMatrix = /* @__PURE__ */ Fn(({ camera }) => {
    let cameraViewMatrix2;
    if (camera.isArrayCamera && camera.cameras.length > 0) {
      const matrices = [];
      for (const subCamera of camera.cameras) {
        matrices.push(subCamera.matrixWorldInverse);
      }
      const cameraViewMatrices = uniformArray(matrices).setGroup(renderGroup).label("cameraViewMatrices");
      cameraViewMatrix2 = cameraViewMatrices.element(camera.isMultiViewCamera ? builtin("gl_ViewID_OVR") : cameraIndex).toVar("cameraViewMatrix");
    } else {
      cameraViewMatrix2 = uniform("mat4").label("cameraViewMatrix").setGroup(renderGroup).onRenderUpdate(({ camera: camera2 }) => camera2.matrixWorldInverse);
    }
    return cameraViewMatrix2;
  }).once()();
  var cameraPosition = /* @__PURE__ */ uniform(new Vector3()).label("cameraPosition").setGroup(renderGroup).onRenderUpdate(({ camera }, self2) => self2.value.setFromMatrixPosition(camera.matrixWorld));
  var _sphere = /* @__PURE__ */ new Sphere();
  var Object3DNode = class _Object3DNode extends Node {
    static get type() {
      return "Object3DNode";
    }
    /**
     * Constructs a new object 3D node.
     *
     * @param {('position'|'viewPosition'|'direction'|'scale'|'worldMatrix')} scope - The node represents a different type of transformation depending on the scope.
     * @param {?Object3D} [object3d=null] - The 3D object.
     */
    constructor(scope, object3d = null) {
      super();
      this.scope = scope;
      this.object3d = object3d;
      this.updateType = NodeUpdateType.OBJECT;
      this.uniformNode = new UniformNode(null);
    }
    /**
     * Overwritten since the node type is inferred from the scope.
     *
     * @return {string} The node type.
     */
    getNodeType() {
      const scope = this.scope;
      if (scope === _Object3DNode.WORLD_MATRIX) {
        return "mat4";
      } else if (scope === _Object3DNode.POSITION || scope === _Object3DNode.VIEW_POSITION || scope === _Object3DNode.DIRECTION || scope === _Object3DNode.SCALE) {
        return "vec3";
      } else if (scope === _Object3DNode.RADIUS) {
        return "float";
      }
    }
    /**
     * Updates the uniform value depending on the scope.
     *
     * @param {NodeFrame} frame - The current node frame.
     */
    update(frame) {
      const object = this.object3d;
      const uniformNode = this.uniformNode;
      const scope = this.scope;
      if (scope === _Object3DNode.WORLD_MATRIX) {
        uniformNode.value = object.matrixWorld;
      } else if (scope === _Object3DNode.POSITION) {
        uniformNode.value = uniformNode.value || new Vector3();
        uniformNode.value.setFromMatrixPosition(object.matrixWorld);
      } else if (scope === _Object3DNode.SCALE) {
        uniformNode.value = uniformNode.value || new Vector3();
        uniformNode.value.setFromMatrixScale(object.matrixWorld);
      } else if (scope === _Object3DNode.DIRECTION) {
        uniformNode.value = uniformNode.value || new Vector3();
        object.getWorldDirection(uniformNode.value);
      } else if (scope === _Object3DNode.VIEW_POSITION) {
        const camera = frame.camera;
        uniformNode.value = uniformNode.value || new Vector3();
        uniformNode.value.setFromMatrixPosition(object.matrixWorld);
        uniformNode.value.applyMatrix4(camera.matrixWorldInverse);
      } else if (scope === _Object3DNode.RADIUS) {
        const geometry = frame.object.geometry;
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        _sphere.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
        uniformNode.value = _sphere.radius;
      }
    }
    /**
     * Generates the code snippet of the uniform node. The node type of the uniform
     * node also depends on the selected scope.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The generated code snippet.
     */
    generate(builder) {
      const scope = this.scope;
      if (scope === _Object3DNode.WORLD_MATRIX) {
        this.uniformNode.nodeType = "mat4";
      } else if (scope === _Object3DNode.POSITION || scope === _Object3DNode.VIEW_POSITION || scope === _Object3DNode.DIRECTION || scope === _Object3DNode.SCALE) {
        this.uniformNode.nodeType = "vec3";
      } else if (scope === _Object3DNode.RADIUS) {
        this.uniformNode.nodeType = "float";
      }
      return this.uniformNode.build(builder);
    }
    serialize(data) {
      super.serialize(data);
      data.scope = this.scope;
    }
    deserialize(data) {
      super.deserialize(data);
      this.scope = data.scope;
    }
  };
  Object3DNode.WORLD_MATRIX = "worldMatrix";
  Object3DNode.POSITION = "position";
  Object3DNode.SCALE = "scale";
  Object3DNode.VIEW_POSITION = "viewPosition";
  Object3DNode.DIRECTION = "direction";
  Object3DNode.RADIUS = "radius";
  var objectPosition = /* @__PURE__ */ nodeProxy(Object3DNode, Object3DNode.POSITION).setParameterLength(1);
  var ModelNode = class extends Object3DNode {
    static get type() {
      return "ModelNode";
    }
    /**
     * Constructs a new object model node.
     *
     * @param {('position'|'viewPosition'|'direction'|'scale'|'worldMatrix')} scope - The node represents a different type of transformation depending on the scope.
     */
    constructor(scope) {
      super(scope);
    }
    /**
     * Extracts the model reference from the frame state and then
     * updates the uniform value depending on the scope.
     *
     * @param {NodeFrame} frame - The current node frame.
     */
    update(frame) {
      this.object3d = frame.object;
      super.update(frame);
    }
  };
  var modelDirection = /* @__PURE__ */ nodeImmutable(ModelNode, ModelNode.DIRECTION);
  var modelWorldMatrix = /* @__PURE__ */ nodeImmutable(ModelNode, ModelNode.WORLD_MATRIX);
  var modelPosition = /* @__PURE__ */ nodeImmutable(ModelNode, ModelNode.POSITION);
  var modelScale = /* @__PURE__ */ nodeImmutable(ModelNode, ModelNode.SCALE);
  var modelViewPosition = /* @__PURE__ */ nodeImmutable(ModelNode, ModelNode.VIEW_POSITION);
  var modelRadius = /* @__PURE__ */ nodeImmutable(ModelNode, ModelNode.RADIUS);
  var modelNormalMatrix = /* @__PURE__ */ uniform(new Matrix3()).onObjectUpdate(({ object }, self2) => self2.value.getNormalMatrix(object.matrixWorld));
  var modelViewMatrix = /* @__PURE__ */ Fn((builder) => {
    return builder.renderer.overrideNodes.modelViewMatrix || mediumpModelViewMatrix;
  }).once()().toVar("modelViewMatrix");
  var mediumpModelViewMatrix = /* @__PURE__ */ cameraViewMatrix.mul(modelWorldMatrix);
  var highpModelViewMatrix = /* @__PURE__ */ Fn((builder) => {
    builder.context.isHighPrecisionModelViewMatrix = true;
    return uniform("mat4").onObjectUpdate(({ object, camera }) => {
      return object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
    });
  }).once()().toVar("highpModelViewMatrix");
  var highpModelNormalViewMatrix = /* @__PURE__ */ Fn((builder) => {
    const isHighPrecisionModelViewMatrix = builder.context.isHighPrecisionModelViewMatrix;
    return uniform("mat3").onObjectUpdate(({ object, camera }) => {
      if (isHighPrecisionModelViewMatrix !== true) {
        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
      }
      return object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
    });
  }).once()().toVar("highpModelNormalViewMatrix");
  var positionGeometry = /* @__PURE__ */ attribute("position", "vec3");
  var positionLocal = /* @__PURE__ */ positionGeometry.toVarying("positionLocal");
  var positionPrevious = /* @__PURE__ */ positionGeometry.toVarying("positionPrevious");
  var positionWorld = /* @__PURE__ */ Fn((builder) => {
    return modelWorldMatrix.mul(positionLocal).xyz.toVarying(builder.getNamespace("v_positionWorld"));
  }, "vec3").once("POSITION")();
  var positionWorldDirection = /* @__PURE__ */ Fn((builder) => {
    const vertexPWD = positionLocal.transformDirection(modelWorldMatrix).toVarying(builder.getNamespace("v_positionWorldDirection"));
    return vertexPWD.normalize().toVar("positionWorldDirection");
  }, "vec3").once("POSITION")();
  var positionView = /* @__PURE__ */ Fn((builder) => {
    return builder.context.setupPositionView().toVarying(builder.getNamespace("v_positionView"));
  }, "vec3").once("POSITION")();
  var positionViewDirection = /* @__PURE__ */ positionView.negate().toVarying("v_positionViewDirection").normalize().toVar("positionViewDirection");
  var FrontFacingNode = class extends Node {
    static get type() {
      return "FrontFacingNode";
    }
    /**
     * Constructs a new front facing node.
     */
    constructor() {
      super("bool");
      this.isFrontFacingNode = true;
    }
    generate(builder) {
      const { renderer, material: material2 } = builder;
      if (renderer.coordinateSystem === WebGLCoordinateSystem) {
        if (material2.side === BackSide) {
          return "false";
        }
      }
      return builder.getFrontFacing();
    }
  };
  var frontFacing = /* @__PURE__ */ nodeImmutable(FrontFacingNode);
  var faceDirection = /* @__PURE__ */ float(frontFacing).mul(2).sub(1);
  var normalGeometry = /* @__PURE__ */ attribute("normal", "vec3");
  var normalLocal = /* @__PURE__ */ Fn((builder) => {
    if (builder.geometry.hasAttribute("normal") === false) {
      console.warn('THREE.TSL: Vertex attribute "normal" not found on geometry.');
      return vec3(0, 1, 0);
    }
    return normalGeometry;
  }, "vec3").once()().toVar("normalLocal");
  var normalFlat = /* @__PURE__ */ positionView.dFdx().cross(positionView.dFdy()).normalize().toVar("normalFlat");
  var normalView = /* @__PURE__ */ Fn((builder) => {
    let node;
    if (builder.material.flatShading === true) {
      node = normalFlat;
    } else {
      node = varying(transformNormalToView(normalLocal), "v_normalView").normalize();
    }
    return node;
  }, "vec3").once()().toVar("normalView");
  var normalWorld = /* @__PURE__ */ Fn((builder) => {
    let normal2 = normalView.transformDirection(cameraViewMatrix);
    if (builder.material.flatShading !== true) {
      normal2 = varying(normal2, "v_normalWorld");
    }
    return normal2;
  }, "vec3").once()().normalize().toVar("normalWorld");
  var transformedNormalView = /* @__PURE__ */ Fn((builder) => {
    let node = builder.context.setupNormal().context({ getUV: null });
    if (builder.material.flatShading !== true) node = node.mul(faceDirection);
    return node;
  }, "vec3").once()().toVar("transformedNormalView");
  var transformedNormalWorld = /* @__PURE__ */ transformedNormalView.transformDirection(cameraViewMatrix).toVar("transformedNormalWorld");
  var transformedClearcoatNormalView = /* @__PURE__ */ Fn((builder) => {
    let node = builder.context.setupClearcoatNormal().context({ getUV: null });
    if (builder.material.flatShading !== true) node = node.mul(faceDirection);
    return node;
  }, "vec3").once()().toVar("transformedClearcoatNormalView");
  var transformNormal = /* @__PURE__ */ Fn(([normal2, matrix = modelWorldMatrix]) => {
    const m = mat3(matrix);
    const transformedNormal = normal2.div(vec3(m[0].dot(m[0]), m[1].dot(m[1]), m[2].dot(m[2])));
    return m.mul(transformedNormal).xyz;
  });
  var transformNormalToView = /* @__PURE__ */ Fn(([normal2], builder) => {
    const modelNormalViewMatrix = builder.renderer.overrideNodes.modelNormalViewMatrix;
    if (modelNormalViewMatrix !== null) {
      return modelNormalViewMatrix.transformDirection(normal2);
    }
    const transformedNormal = modelNormalMatrix.mul(normal2);
    return cameraViewMatrix.transformDirection(transformedNormal);
  });
  var _e1$1 = /* @__PURE__ */ new Euler();
  var _m1$12 = /* @__PURE__ */ new Matrix4();
  var materialRefractionRatio = /* @__PURE__ */ uniform(0).onReference(({ material: material2 }) => material2).onObjectUpdate(({ material: material2 }) => material2.refractionRatio);
  var materialEnvIntensity = /* @__PURE__ */ uniform(1).onReference(({ material: material2 }) => material2).onObjectUpdate(function({ material: material2, scene }) {
    return material2.envMap ? material2.envMapIntensity : scene.environmentIntensity;
  });
  var materialEnvRotation = /* @__PURE__ */ uniform(new Matrix4()).onReference(function(frame) {
    return frame.material;
  }).onObjectUpdate(function({ material: material2, scene }) {
    const rotation = scene.environment !== null && material2.envMap === null ? scene.environmentRotation : material2.envMapRotation;
    if (rotation) {
      _e1$1.copy(rotation);
      _m1$12.makeRotationFromEuler(_e1$1);
    } else {
      _m1$12.identity();
    }
    return _m1$12;
  });
  var reflectView = /* @__PURE__ */ positionViewDirection.negate().reflect(transformedNormalView);
  var refractView = /* @__PURE__ */ positionViewDirection.negate().refract(transformedNormalView, materialRefractionRatio);
  var reflectVector = /* @__PURE__ */ reflectView.transformDirection(cameraViewMatrix).toVar("reflectVector");
  var refractVector = /* @__PURE__ */ refractView.transformDirection(cameraViewMatrix).toVar("reflectVector");
  var EmptyTexture = /* @__PURE__ */ new CubeTexture();
  var CubeTextureNode = class extends TextureNode {
    static get type() {
      return "CubeTextureNode";
    }
    /**
     * Constructs a new cube texture node.
     *
     * @param {CubeTexture} value - The cube texture.
     * @param {?Node<vec3>} [uvNode=null] - The uv node.
     * @param {?Node<int>} [levelNode=null] - The level node.
     * @param {?Node<float>} [biasNode=null] - The bias node.
     */
    constructor(value, uvNode = null, levelNode = null, biasNode = null) {
      super(value, uvNode, levelNode, biasNode);
      this.isCubeTextureNode = true;
    }
    /**
     * Overwrites the default implementation to return a fixed value `'cubeTexture'`.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The input type.
     */
    getInputType() {
      return "cubeTexture";
    }
    /**
     * Returns a default uvs based on the mapping type of the cube texture.
     *
     * @return {Node<vec3>} The default uv attribute.
     */
    getDefaultUV() {
      const texture2 = this.value;
      if (texture2.mapping === CubeReflectionMapping) {
        return reflectVector;
      } else if (texture2.mapping === CubeRefractionMapping) {
        return refractVector;
      } else {
        console.error('THREE.CubeTextureNode: Mapping "%s" not supported.', texture2.mapping);
        return vec3(0, 0, 0);
      }
    }
    /**
     * Overwritten with an empty implementation since the `updateMatrix` flag is ignored
     * for cube textures. The uv transformation matrix is not applied to cube textures.
     *
     * @param {boolean} value - The update toggle.
     */
    setUpdateMatrix() {
    }
    // Ignore .updateMatrix for CubeTextureNode
    /**
     * Setups the uv node. Depending on the backend as well as the texture type, it might be necessary
     * to modify the uv node for correct sampling.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @param {Node} uvNode - The uv node to setup.
     * @return {Node} The updated uv node.
     */
    setupUV(builder, uvNode) {
      const texture2 = this.value;
      if (builder.renderer.coordinateSystem === WebGPUCoordinateSystem || !texture2.isRenderTargetTexture) {
        uvNode = vec3(uvNode.x.negate(), uvNode.yz);
      }
      return materialEnvRotation.mul(uvNode);
    }
    /**
     * Generates the uv code snippet.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @param {Node} cubeUV - The uv node to generate code for.
     * @return {string} The generated code snippet.
     */
    generateUV(builder, cubeUV) {
      return cubeUV.build(builder, "vec3");
    }
  };
  var cubeTextureBase = /* @__PURE__ */ nodeProxy(CubeTextureNode).setParameterLength(1, 4).setName("cubeTexture");
  var cubeTexture = (value = EmptyTexture, uvNode = null, levelNode = null, biasNode = null) => {
    let textureNode;
    if (value && value.isCubeTextureNode === true) {
      textureNode = nodeObject(value.clone());
      textureNode.referenceNode = value.getSelf();
      if (uvNode !== null) textureNode.uvNode = nodeObject(uvNode);
      if (levelNode !== null) textureNode.levelNode = nodeObject(levelNode);
      if (biasNode !== null) textureNode.biasNode = nodeObject(biasNode);
    } else {
      textureNode = cubeTextureBase(value, uvNode, levelNode, biasNode);
    }
    return textureNode;
  };
  var ReferenceElementNode2 = class extends ArrayElementNode {
    static get type() {
      return "ReferenceElementNode";
    }
    /**
     * Constructs a new reference element node.
     *
     * @param {?ReferenceNode} referenceNode - The reference node.
     * @param {Node} indexNode - The index node that defines the element access.
     */
    constructor(referenceNode, indexNode) {
      super(referenceNode, indexNode);
      this.referenceNode = referenceNode;
      this.isReferenceElementNode = true;
    }
    /**
     * This method is overwritten since the node type is inferred from
     * the uniform type of the reference node.
     *
     * @return {string} The node type.
     */
    getNodeType() {
      return this.referenceNode.uniformType;
    }
    generate(builder) {
      const snippet2 = super.generate(builder);
      const arrayType = this.referenceNode.getNodeType();
      const elementType = this.getNodeType();
      return builder.format(snippet2, arrayType, elementType);
    }
  };
  var ReferenceNode = class extends Node {
    static get type() {
      return "ReferenceNode";
    }
    /**
     * Constructs a new reference node.
     *
     * @param {string} property - The name of the property the node refers to.
     * @param {string} uniformType - The uniform type that should be used to represent the property value.
     * @param {?Object} [object=null] - The object the property belongs to.
     * @param {?number} [count=null] - When the linked property is an array-like, this parameter defines its length.
     */
    constructor(property2, uniformType, object = null, count = null) {
      super();
      this.property = property2;
      this.uniformType = uniformType;
      this.object = object;
      this.count = count;
      this.properties = property2.split(".");
      this.reference = object;
      this.node = null;
      this.group = null;
      this.name = null;
      this.updateType = NodeUpdateType.OBJECT;
    }
    /**
     * When the referred property is array-like, this method can be used
     * to access elements via an index node.
     *
     * @param {IndexNode} indexNode - indexNode.
     * @return {ReferenceElementNode} A reference to an element.
     */
    element(indexNode) {
      return nodeObject(new ReferenceElementNode2(this, nodeObject(indexNode)));
    }
    /**
     * Sets the uniform group for this reference node.
     *
     * @param {UniformGroupNode} group - The uniform group to set.
     * @return {ReferenceNode} A reference to this node.
     */
    setGroup(group) {
      this.group = group;
      return this;
    }
    /**
     * Sets the label for the internal uniform.
     *
     * @param {string} name - The label to set.
     * @return {ReferenceNode} A reference to this node.
     */
    label(name2) {
      this.name = name2;
      return this;
    }
    /**
     * Sets the node type which automatically defines the internal
     * uniform type.
     *
     * @param {string} uniformType - The type to set.
     */
    setNodeType(uniformType) {
      let node = null;
      if (this.count !== null) {
        node = buffer(null, uniformType, this.count);
      } else if (Array.isArray(this.getValueFromReference())) {
        node = uniformArray(null, uniformType);
      } else if (uniformType === "texture") {
        node = texture(null);
      } else if (uniformType === "cubeTexture") {
        node = cubeTexture(null);
      } else {
        node = uniform(null, uniformType);
      }
      if (this.group !== null) {
        node.setGroup(this.group);
      }
      if (this.name !== null) node.label(this.name);
      this.node = node.getSelf();
    }
    /**
     * This method is overwritten since the node type is inferred from
     * the type of the reference node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The node type.
     */
    getNodeType(builder) {
      if (this.node === null) {
        this.updateReference(builder);
        this.updateValue();
      }
      return this.node.getNodeType(builder);
    }
    /**
     * Returns the property value from the given referred object.
     *
     * @param {Object} [object=this.reference] - The object to retrieve the property value from.
     * @return {any} The value.
     */
    getValueFromReference(object = this.reference) {
      const { properties } = this;
      let value = object[properties[0]];
      for (let i = 1; i < properties.length; i++) {
        value = value[properties[i]];
      }
      return value;
    }
    /**
     * Allows to update the reference based on the given state. The state is only
     * evaluated {@link ReferenceNode#object} is not set.
     *
     * @param {(NodeFrame|NodeBuilder)} state - The current state.
     * @return {Object} The updated reference.
     */
    updateReference(state) {
      this.reference = this.object !== null ? this.object : state.object;
      return this.reference;
    }
    /**
     * The output of the reference node is the internal uniform node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {UniformNode} The output node.
     */
    setup() {
      this.updateValue();
      return this.node;
    }
    /**
     * Overwritten to update the internal uniform value.
     *
     * @param {NodeFrame} frame - A reference to the current node frame.
     */
    update() {
      this.updateValue();
    }
    /**
     * Retrieves the value from the referred object property and uses it
     * to updated the internal uniform.
     */
    updateValue() {
      if (this.node === null) this.setNodeType(this.uniformType);
      const value = this.getValueFromReference();
      if (Array.isArray(value)) {
        this.node.array = value;
      } else {
        this.node.value = value;
      }
    }
  };
  var reference = (name2, type, object) => nodeObject(new ReferenceNode(name2, type, object));
  var referenceBuffer = (name2, type, count, object) => nodeObject(new ReferenceNode(name2, type, object, count));
  var MaterialReferenceNode = class extends ReferenceNode {
    static get type() {
      return "MaterialReferenceNode";
    }
    /**
     * Constructs a new material reference node.
     *
     * @param {string} property - The name of the property the node refers to.
     * @param {string} inputType - The uniform type that should be used to represent the property value.
     * @param {?Material} [material=null] - The material the property belongs to. When no material is set,
     * the node refers to the material of the current rendered object.
     */
    constructor(property2, inputType, material2 = null) {
      super(property2, inputType, material2);
      this.material = material2;
      this.isMaterialReferenceNode = true;
    }
    /**
     * Updates the reference based on the given state. The state is only evaluated
     * {@link MaterialReferenceNode#material} is not set.
     *
     * @param {(NodeFrame|NodeBuilder)} state - The current state.
     * @return {Object} The updated reference.
     */
    updateReference(state) {
      this.reference = this.material !== null ? this.material : state.material;
      return this.reference;
    }
  };
  var materialReference = (name2, type, material2 = null) => nodeObject(new MaterialReferenceNode(name2, type, material2));
  var tangentGeometry = /* @__PURE__ */ Fn((builder) => {
    if (builder.geometry.hasAttribute("tangent") === false) {
      builder.geometry.computeTangents();
    }
    return attribute("tangent", "vec4");
  })();
  var tangentLocal = /* @__PURE__ */ tangentGeometry.xyz.toVar("tangentLocal");
  var tangentView = /* @__PURE__ */ modelViewMatrix.mul(vec4(tangentLocal, 0)).xyz.toVarying("v_tangentView").normalize().toVar("tangentView");
  var getBitangent = /* @__PURE__ */ Fn(([crossNormalTangent, varyingName], builder) => {
    let bitangent = crossNormalTangent.mul(tangentGeometry.w).xyz;
    if (builder.material.flatShading !== true) {
      bitangent = varying(bitangent, varyingName);
    }
    return bitangent;
  }).once();
  var bitangentView = getBitangent(normalView.cross(tangentView), "v_bitangentView").normalize().toVar("bitangentView");
  var TBNViewMatrix = /* @__PURE__ */ mat3(tangentView, bitangentView, normalView);
  var transformedBentNormalView = /* @__PURE__ */ (() => {
    let bentNormal = anisotropyB.cross(positionViewDirection);
    bentNormal = bentNormal.cross(anisotropyB).normalize();
    bentNormal = mix(bentNormal, transformedNormalView, anisotropy.mul(roughness.oneMinus()).oneMinus().pow2().pow2()).normalize();
    return bentNormal;
  })();
  var perturbNormal2Arb = /* @__PURE__ */ Fn((inputs) => {
    const { eye_pos, surf_norm, mapN, uv: uv2 } = inputs;
    const q0 = eye_pos.dFdx();
    const q1 = eye_pos.dFdy();
    const st0 = uv2.dFdx();
    const st1 = uv2.dFdy();
    const N = surf_norm;
    const q1perp = q1.cross(N);
    const q0perp = N.cross(q0);
    const T = q1perp.mul(st0.x).add(q0perp.mul(st1.x));
    const B = q1perp.mul(st0.y).add(q0perp.mul(st1.y));
    const det = T.dot(T).max(B.dot(B));
    const scale = faceDirection.mul(det.inverseSqrt());
    return add2(T.mul(mapN.x, scale), B.mul(mapN.y, scale), N.mul(mapN.z)).normalize();
  });
  var NormalMapNode = class extends TempNode {
    static get type() {
      return "NormalMapNode";
    }
    /**
     * Constructs a new normal map node.
     *
     * @param {Node<vec3>} node - Represents the normal map data.
     * @param {?Node<vec2>} [scaleNode=null] - Controls the intensity of the effect.
     */
    constructor(node, scaleNode = null) {
      super("vec3");
      this.node = node;
      this.scaleNode = scaleNode;
      this.normalMapType = TangentSpaceNormalMap;
    }
    setup(builder) {
      const { normalMapType, scaleNode } = this;
      let normalMap2 = this.node.mul(2).sub(1);
      if (scaleNode !== null) {
        normalMap2 = vec3(normalMap2.xy.mul(scaleNode), normalMap2.z);
      }
      let outputNode = null;
      if (normalMapType === ObjectSpaceNormalMap) {
        outputNode = transformNormalToView(normalMap2);
      } else if (normalMapType === TangentSpaceNormalMap) {
        const tangent = builder.hasGeometryAttribute("tangent");
        if (tangent === true) {
          outputNode = TBNViewMatrix.mul(normalMap2).normalize();
        } else {
          outputNode = perturbNormal2Arb({
            eye_pos: positionView,
            surf_norm: normalView,
            mapN: normalMap2,
            uv: uv()
          });
        }
      }
      return outputNode;
    }
  };
  var normalMap = /* @__PURE__ */ nodeProxy(NormalMapNode).setParameterLength(1, 2);
  var dHdxy_fwd = Fn(({ textureNode, bumpScale }) => {
    const sampleTexture = (callback) => textureNode.cache().context({ getUV: (texNode) => callback(texNode.uvNode || uv()), forceUVContext: true });
    const Hll = float(sampleTexture((uvNode) => uvNode));
    return vec2(
      float(sampleTexture((uvNode) => uvNode.add(uvNode.dFdx()))).sub(Hll),
      float(sampleTexture((uvNode) => uvNode.add(uvNode.dFdy()))).sub(Hll)
    ).mul(bumpScale);
  });
  var perturbNormalArb = Fn((inputs) => {
    const { surf_pos, surf_norm, dHdxy } = inputs;
    const vSigmaX = surf_pos.dFdx().normalize();
    const vSigmaY = surf_pos.dFdy().normalize();
    const vN = surf_norm;
    const R1 = vSigmaY.cross(vN);
    const R2 = vN.cross(vSigmaX);
    const fDet = vSigmaX.dot(R1).mul(faceDirection);
    const vGrad = fDet.sign().mul(dHdxy.x.mul(R1).add(dHdxy.y.mul(R2)));
    return fDet.abs().mul(surf_norm).sub(vGrad).normalize();
  });
  var BumpMapNode = class extends TempNode {
    static get type() {
      return "BumpMapNode";
    }
    /**
     * Constructs a new bump map node.
     *
     * @param {Node<float>} textureNode - Represents the bump map data.
     * @param {?Node<float>} [scaleNode=null] - Controls the intensity of the bump effect.
     */
    constructor(textureNode, scaleNode = null) {
      super("vec3");
      this.textureNode = textureNode;
      this.scaleNode = scaleNode;
    }
    setup() {
      const bumpScale = this.scaleNode !== null ? this.scaleNode : 1;
      const dHdxy = dHdxy_fwd({ textureNode: this.textureNode, bumpScale });
      return perturbNormalArb({
        surf_pos: positionView,
        surf_norm: normalView,
        dHdxy
      });
    }
  };
  var bumpMap = /* @__PURE__ */ nodeProxy(BumpMapNode).setParameterLength(1, 2);
  var _propertyCache = /* @__PURE__ */ new Map();
  var MaterialNode = class _MaterialNode extends Node {
    static get type() {
      return "MaterialNode";
    }
    /**
     * Constructs a new material node.
     *
     * @param {string} scope - The scope defines what kind of material property is referred by the node.
     */
    constructor(scope) {
      super();
      this.scope = scope;
    }
    /**
     * Returns a cached reference node for the given property and type.
     *
     * @param {string} property - The name of the material property.
     * @param {string} type - The uniform type of the property.
     * @return {MaterialReferenceNode} A material reference node representing the property access.
     */
    getCache(property2, type) {
      let node = _propertyCache.get(property2);
      if (node === void 0) {
        node = materialReference(property2, type);
        _propertyCache.set(property2, node);
      }
      return node;
    }
    /**
     * Returns a float-typed material reference node for the given property name.
     *
     * @param {string} property - The name of the material property.
     * @return {MaterialReferenceNode<float>} A material reference node representing the property access.
     */
    getFloat(property2) {
      return this.getCache(property2, "float");
    }
    /**
     * Returns a color-typed material reference node for the given property name.
     *
     * @param {string} property - The name of the material property.
     * @return {MaterialReferenceNode<color>} A material reference node representing the property access.
     */
    getColor(property2) {
      return this.getCache(property2, "color");
    }
    /**
     * Returns a texture-typed material reference node for the given property name.
     *
     * @param {string} property - The name of the material property.
     * @return {MaterialReferenceNode} A material reference node representing the property access.
     */
    getTexture(property2) {
      return this.getCache(property2 === "map" ? "map" : property2 + "Map", "texture");
    }
    /**
     * The node setup is done depending on the selected scope. Multiple material properties
     * might be grouped into a single node composition if they logically belong together.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {Node} The node representing the selected scope.
     */
    setup(builder) {
      const material2 = builder.context.material;
      const scope = this.scope;
      let node = null;
      if (scope === _MaterialNode.COLOR) {
        const colorNode = material2.color !== void 0 ? this.getColor(scope) : vec3();
        if (material2.map && material2.map.isTexture === true) {
          node = colorNode.mul(this.getTexture("map"));
        } else {
          node = colorNode;
        }
      } else if (scope === _MaterialNode.OPACITY) {
        const opacityNode = this.getFloat(scope);
        if (material2.alphaMap && material2.alphaMap.isTexture === true) {
          node = opacityNode.mul(this.getTexture("alpha"));
        } else {
          node = opacityNode;
        }
      } else if (scope === _MaterialNode.SPECULAR_STRENGTH) {
        if (material2.specularMap && material2.specularMap.isTexture === true) {
          node = this.getTexture("specular").r;
        } else {
          node = float(1);
        }
      } else if (scope === _MaterialNode.SPECULAR_INTENSITY) {
        const specularIntensityNode = this.getFloat(scope);
        if (material2.specularIntensityMap && material2.specularIntensityMap.isTexture === true) {
          node = specularIntensityNode.mul(this.getTexture(scope).a);
        } else {
          node = specularIntensityNode;
        }
      } else if (scope === _MaterialNode.SPECULAR_COLOR) {
        const specularColorNode = this.getColor(scope);
        if (material2.specularColorMap && material2.specularColorMap.isTexture === true) {
          node = specularColorNode.mul(this.getTexture(scope).rgb);
        } else {
          node = specularColorNode;
        }
      } else if (scope === _MaterialNode.ROUGHNESS) {
        const roughnessNode = this.getFloat(scope);
        if (material2.roughnessMap && material2.roughnessMap.isTexture === true) {
          node = roughnessNode.mul(this.getTexture(scope).g);
        } else {
          node = roughnessNode;
        }
      } else if (scope === _MaterialNode.METALNESS) {
        const metalnessNode = this.getFloat(scope);
        if (material2.metalnessMap && material2.metalnessMap.isTexture === true) {
          node = metalnessNode.mul(this.getTexture(scope).b);
        } else {
          node = metalnessNode;
        }
      } else if (scope === _MaterialNode.EMISSIVE) {
        const emissiveIntensityNode = this.getFloat("emissiveIntensity");
        const emissiveNode = this.getColor(scope).mul(emissiveIntensityNode);
        if (material2.emissiveMap && material2.emissiveMap.isTexture === true) {
          node = emissiveNode.mul(this.getTexture(scope));
        } else {
          node = emissiveNode;
        }
      } else if (scope === _MaterialNode.NORMAL) {
        if (material2.normalMap) {
          node = normalMap(this.getTexture("normal"), this.getCache("normalScale", "vec2"));
          node.normalMapType = material2.normalMapType;
        } else if (material2.bumpMap) {
          node = bumpMap(this.getTexture("bump").r, this.getFloat("bumpScale"));
        } else {
          node = normalView;
        }
      } else if (scope === _MaterialNode.CLEARCOAT) {
        const clearcoatNode = this.getFloat(scope);
        if (material2.clearcoatMap && material2.clearcoatMap.isTexture === true) {
          node = clearcoatNode.mul(this.getTexture(scope).r);
        } else {
          node = clearcoatNode;
        }
      } else if (scope === _MaterialNode.CLEARCOAT_ROUGHNESS) {
        const clearcoatRoughnessNode = this.getFloat(scope);
        if (material2.clearcoatRoughnessMap && material2.clearcoatRoughnessMap.isTexture === true) {
          node = clearcoatRoughnessNode.mul(this.getTexture(scope).r);
        } else {
          node = clearcoatRoughnessNode;
        }
      } else if (scope === _MaterialNode.CLEARCOAT_NORMAL) {
        if (material2.clearcoatNormalMap) {
          node = normalMap(this.getTexture(scope), this.getCache(scope + "Scale", "vec2"));
        } else {
          node = normalView;
        }
      } else if (scope === _MaterialNode.SHEEN) {
        const sheenNode = this.getColor("sheenColor").mul(this.getFloat("sheen"));
        if (material2.sheenColorMap && material2.sheenColorMap.isTexture === true) {
          node = sheenNode.mul(this.getTexture("sheenColor").rgb);
        } else {
          node = sheenNode;
        }
      } else if (scope === _MaterialNode.SHEEN_ROUGHNESS) {
        const sheenRoughnessNode = this.getFloat(scope);
        if (material2.sheenRoughnessMap && material2.sheenRoughnessMap.isTexture === true) {
          node = sheenRoughnessNode.mul(this.getTexture(scope).a);
        } else {
          node = sheenRoughnessNode;
        }
        node = node.clamp(0.07, 1);
      } else if (scope === _MaterialNode.ANISOTROPY) {
        if (material2.anisotropyMap && material2.anisotropyMap.isTexture === true) {
          const anisotropyPolar = this.getTexture(scope);
          const anisotropyMat = mat2(materialAnisotropyVector.x, materialAnisotropyVector.y, materialAnisotropyVector.y.negate(), materialAnisotropyVector.x);
          node = anisotropyMat.mul(anisotropyPolar.rg.mul(2).sub(vec2(1)).normalize().mul(anisotropyPolar.b));
        } else {
          node = materialAnisotropyVector;
        }
      } else if (scope === _MaterialNode.IRIDESCENCE_THICKNESS) {
        const iridescenceThicknessMaximum = reference("1", "float", material2.iridescenceThicknessRange);
        if (material2.iridescenceThicknessMap) {
          const iridescenceThicknessMinimum = reference("0", "float", material2.iridescenceThicknessRange);
          node = iridescenceThicknessMaximum.sub(iridescenceThicknessMinimum).mul(this.getTexture(scope).g).add(iridescenceThicknessMinimum);
        } else {
          node = iridescenceThicknessMaximum;
        }
      } else if (scope === _MaterialNode.TRANSMISSION) {
        const transmissionNode = this.getFloat(scope);
        if (material2.transmissionMap) {
          node = transmissionNode.mul(this.getTexture(scope).r);
        } else {
          node = transmissionNode;
        }
      } else if (scope === _MaterialNode.THICKNESS) {
        const thicknessNode = this.getFloat(scope);
        if (material2.thicknessMap) {
          node = thicknessNode.mul(this.getTexture(scope).g);
        } else {
          node = thicknessNode;
        }
      } else if (scope === _MaterialNode.IOR) {
        node = this.getFloat(scope);
      } else if (scope === _MaterialNode.LIGHT_MAP) {
        node = this.getTexture(scope).rgb.mul(this.getFloat("lightMapIntensity"));
      } else if (scope === _MaterialNode.AO) {
        node = this.getTexture(scope).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);
      } else if (scope === _MaterialNode.LINE_DASH_OFFSET) {
        node = material2.dashOffset ? this.getFloat(scope) : float(0);
      } else {
        const outputType = this.getNodeType(builder);
        node = this.getCache(scope, outputType);
      }
      return node;
    }
  };
  MaterialNode.ALPHA_TEST = "alphaTest";
  MaterialNode.COLOR = "color";
  MaterialNode.OPACITY = "opacity";
  MaterialNode.SHININESS = "shininess";
  MaterialNode.SPECULAR = "specular";
  MaterialNode.SPECULAR_STRENGTH = "specularStrength";
  MaterialNode.SPECULAR_INTENSITY = "specularIntensity";
  MaterialNode.SPECULAR_COLOR = "specularColor";
  MaterialNode.REFLECTIVITY = "reflectivity";
  MaterialNode.ROUGHNESS = "roughness";
  MaterialNode.METALNESS = "metalness";
  MaterialNode.NORMAL = "normal";
  MaterialNode.CLEARCOAT = "clearcoat";
  MaterialNode.CLEARCOAT_ROUGHNESS = "clearcoatRoughness";
  MaterialNode.CLEARCOAT_NORMAL = "clearcoatNormal";
  MaterialNode.EMISSIVE = "emissive";
  MaterialNode.ROTATION = "rotation";
  MaterialNode.SHEEN = "sheen";
  MaterialNode.SHEEN_ROUGHNESS = "sheenRoughness";
  MaterialNode.ANISOTROPY = "anisotropy";
  MaterialNode.IRIDESCENCE = "iridescence";
  MaterialNode.IRIDESCENCE_IOR = "iridescenceIOR";
  MaterialNode.IRIDESCENCE_THICKNESS = "iridescenceThickness";
  MaterialNode.IOR = "ior";
  MaterialNode.TRANSMISSION = "transmission";
  MaterialNode.THICKNESS = "thickness";
  MaterialNode.ATTENUATION_DISTANCE = "attenuationDistance";
  MaterialNode.ATTENUATION_COLOR = "attenuationColor";
  MaterialNode.LINE_SCALE = "scale";
  MaterialNode.LINE_DASH_SIZE = "dashSize";
  MaterialNode.LINE_GAP_SIZE = "gapSize";
  MaterialNode.LINE_WIDTH = "linewidth";
  MaterialNode.LINE_DASH_OFFSET = "dashOffset";
  MaterialNode.POINT_SIZE = "size";
  MaterialNode.DISPERSION = "dispersion";
  MaterialNode.LIGHT_MAP = "light";
  MaterialNode.AO = "ao";
  var materialAlphaTest = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.ALPHA_TEST);
  var materialColor = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.COLOR);
  var materialShininess = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.SHININESS);
  var materialEmissive = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.EMISSIVE);
  var materialOpacity = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.OPACITY);
  var materialSpecular = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.SPECULAR);
  var materialSpecularIntensity = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.SPECULAR_INTENSITY);
  var materialSpecularColor = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.SPECULAR_COLOR);
  var materialSpecularStrength = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.SPECULAR_STRENGTH);
  var materialReflectivity = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.REFLECTIVITY);
  var materialRoughness = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.ROUGHNESS);
  var materialMetalness = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.METALNESS);
  var materialNormal = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.NORMAL);
  var materialClearcoat = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT);
  var materialClearcoatRoughness = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT_ROUGHNESS);
  var materialClearcoatNormal = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT_NORMAL);
  var materialRotation = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.ROTATION);
  var materialSheen = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.SHEEN);
  var materialSheenRoughness = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.SHEEN_ROUGHNESS);
  var materialAnisotropy = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.ANISOTROPY);
  var materialIridescence = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE);
  var materialIridescenceIOR = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE_IOR);
  var materialIridescenceThickness = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE_THICKNESS);
  var materialTransmission = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.TRANSMISSION);
  var materialThickness = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.THICKNESS);
  var materialIOR = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.IOR);
  var materialAttenuationDistance = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.ATTENUATION_DISTANCE);
  var materialAttenuationColor = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.ATTENUATION_COLOR);
  var materialLineScale = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.LINE_SCALE);
  var materialLineDashSize = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.LINE_DASH_SIZE);
  var materialLineGapSize = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.LINE_GAP_SIZE);
  var materialLineWidth = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.LINE_WIDTH);
  var materialLineDashOffset = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.LINE_DASH_OFFSET);
  var materialPointSize = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.POINT_SIZE);
  var materialDispersion = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.DISPERSION);
  var materialLightMap = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.LIGHT_MAP);
  var materialAO = /* @__PURE__ */ nodeImmutable(MaterialNode, MaterialNode.AO);
  var materialAnisotropyVector = /* @__PURE__ */ uniform(new Vector2()).onReference(function(frame) {
    return frame.material;
  }).onRenderUpdate(function({ material: material2 }) {
    this.value.set(material2.anisotropy * Math.cos(material2.anisotropyRotation), material2.anisotropy * Math.sin(material2.anisotropyRotation));
  });
  var modelViewProjection = /* @__PURE__ */ Fn((builder) => {
    return builder.context.setupModelViewProjection();
  }, "vec4").once()().toVarying("v_modelViewProjection");
  var IndexNode = class _IndexNode extends Node {
    static get type() {
      return "IndexNode";
    }
    /**
     * Constructs a new index node.
     *
     * @param {('vertex'|'instance'|'subgroup'|'invocationLocal'|'invocationSubgroup'|'draw')} scope - The scope of the index node.
     */
    constructor(scope) {
      super("uint");
      this.scope = scope;
      this.isIndexNode = true;
    }
    generate(builder) {
      const nodeType = this.getNodeType(builder);
      const scope = this.scope;
      let propertyName2;
      if (scope === _IndexNode.VERTEX) {
        propertyName2 = builder.getVertexIndex();
      } else if (scope === _IndexNode.INSTANCE) {
        propertyName2 = builder.getInstanceIndex();
      } else if (scope === _IndexNode.DRAW) {
        propertyName2 = builder.getDrawIndex();
      } else if (scope === _IndexNode.INVOCATION_LOCAL) {
        propertyName2 = builder.getInvocationLocalIndex();
      } else if (scope === _IndexNode.INVOCATION_SUBGROUP) {
        propertyName2 = builder.getInvocationSubgroupIndex();
      } else if (scope === _IndexNode.SUBGROUP) {
        propertyName2 = builder.getSubgroupIndex();
      } else {
        throw new Error("THREE.IndexNode: Unknown scope: " + scope);
      }
      let output2;
      if (builder.shaderStage === "vertex" || builder.shaderStage === "compute") {
        output2 = propertyName2;
      } else {
        const nodeVarying = varying(this);
        output2 = nodeVarying.build(builder, nodeType);
      }
      return output2;
    }
  };
  IndexNode.VERTEX = "vertex";
  IndexNode.INSTANCE = "instance";
  IndexNode.SUBGROUP = "subgroup";
  IndexNode.INVOCATION_LOCAL = "invocationLocal";
  IndexNode.INVOCATION_SUBGROUP = "invocationSubgroup";
  IndexNode.DRAW = "draw";
  var vertexIndex = /* @__PURE__ */ nodeImmutable(IndexNode, IndexNode.VERTEX);
  var instanceIndex = /* @__PURE__ */ nodeImmutable(IndexNode, IndexNode.INSTANCE);
  var subgroupIndex = /* @__PURE__ */ nodeImmutable(IndexNode, IndexNode.SUBGROUP);
  var invocationSubgroupIndex = /* @__PURE__ */ nodeImmutable(IndexNode, IndexNode.INVOCATION_SUBGROUP);
  var invocationLocalIndex = /* @__PURE__ */ nodeImmutable(IndexNode, IndexNode.INVOCATION_LOCAL);
  var drawIndex = /* @__PURE__ */ nodeImmutable(IndexNode, IndexNode.DRAW);
  var InstanceNode = class extends Node {
    static get type() {
      return "InstanceNode";
    }
    /**
     * Constructs a new instance node.
     *
     * @param {number} count - The number of instances.
     * @param {InstancedBufferAttribute} instanceMatrix - Instanced buffer attribute representing the instance transformations.
     * @param {?InstancedBufferAttribute} instanceColor - Instanced buffer attribute representing the instance colors.
     */
    constructor(count, instanceMatrix, instanceColor = null) {
      super("void");
      this.count = count;
      this.instanceMatrix = instanceMatrix;
      this.instanceColor = instanceColor;
      this.instanceMatrixNode = null;
      this.instanceColorNode = null;
      this.updateType = NodeUpdateType.FRAME;
      this.buffer = null;
      this.bufferColor = null;
    }
    /**
     * Setups the internal buffers and nodes and assigns the transformed vertex data
     * to predefined node variables for accumulation. That follows the same patterns
     * like with morph and skinning nodes.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    setup(builder) {
      const { count, instanceMatrix, instanceColor } = this;
      let { instanceMatrixNode, instanceColorNode } = this;
      if (instanceMatrixNode === null) {
        if (count <= 1e3) {
          instanceMatrixNode = buffer(instanceMatrix.array, "mat4", Math.max(count, 1)).element(instanceIndex);
        } else {
          const buffer2 = new InstancedInterleavedBuffer(instanceMatrix.array, 16, 1);
          this.buffer = buffer2;
          const bufferFn = instanceMatrix.usage === DynamicDrawUsage ? instancedDynamicBufferAttribute : instancedBufferAttribute;
          const instanceBuffers = [
            // F.Signature -> bufferAttribute( array, type, stride, offset )
            bufferFn(buffer2, "vec4", 16, 0),
            bufferFn(buffer2, "vec4", 16, 4),
            bufferFn(buffer2, "vec4", 16, 8),
            bufferFn(buffer2, "vec4", 16, 12)
          ];
          instanceMatrixNode = mat4(...instanceBuffers);
        }
        this.instanceMatrixNode = instanceMatrixNode;
      }
      if (instanceColor && instanceColorNode === null) {
        const buffer2 = new InstancedBufferAttribute(instanceColor.array, 3);
        const bufferFn = instanceColor.usage === DynamicDrawUsage ? instancedDynamicBufferAttribute : instancedBufferAttribute;
        this.bufferColor = buffer2;
        instanceColorNode = vec3(bufferFn(buffer2, "vec3", 3, 0));
        this.instanceColorNode = instanceColorNode;
      }
      const instancePosition = instanceMatrixNode.mul(positionLocal).xyz;
      positionLocal.assign(instancePosition);
      if (builder.hasGeometryAttribute("normal")) {
        const instanceNormal = transformNormal(normalLocal, instanceMatrixNode);
        normalLocal.assign(instanceNormal);
      }
      if (this.instanceColorNode !== null) {
        varyingProperty("vec3", "vInstanceColor").assign(this.instanceColorNode);
      }
    }
    /**
     * Checks if the internal buffers required an update.
     *
     * @param {NodeFrame} frame - The current node frame.
     */
    update() {
      if (this.instanceMatrix.usage !== DynamicDrawUsage && this.buffer !== null && this.instanceMatrix.version !== this.buffer.version) {
        this.buffer.version = this.instanceMatrix.version;
      }
      if (this.instanceColor && this.instanceColor.usage !== DynamicDrawUsage && this.bufferColor !== null && this.instanceColor.version !== this.bufferColor.version) {
        this.bufferColor.version = this.instanceColor.version;
      }
    }
  };
  var InstancedMeshNode = class extends InstanceNode {
    static get type() {
      return "InstancedMeshNode";
    }
    /**
     * Constructs a new instanced mesh node.
     *
     * @param {InstancedMesh} instancedMesh - The instanced mesh.
     */
    constructor(instancedMesh2) {
      const { count, instanceMatrix, instanceColor } = instancedMesh2;
      super(count, instanceMatrix, instanceColor);
      this.instancedMesh = instancedMesh2;
    }
  };
  var instancedMesh = /* @__PURE__ */ nodeProxy(InstancedMeshNode).setParameterLength(1);
  var BatchNode = class extends Node {
    static get type() {
      return "BatchNode";
    }
    /**
     * Constructs a new batch node.
     *
     * @param {BatchedMesh} batchMesh - A reference to batched mesh.
     */
    constructor(batchMesh) {
      super("void");
      this.batchMesh = batchMesh;
      this.batchingIdNode = null;
    }
    /**
     * Setups the internal buffers and nodes and assigns the transformed vertex data
     * to predefined node variables for accumulation. That follows the same patterns
     * like with morph and skinning nodes.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    setup(builder) {
      if (this.batchingIdNode === null) {
        if (builder.getDrawIndex() === null) {
          this.batchingIdNode = instanceIndex;
        } else {
          this.batchingIdNode = drawIndex;
        }
      }
      const getIndirectIndex = Fn(([id2]) => {
        const size2 = int(textureSize(textureLoad(this.batchMesh._indirectTexture), 0).x);
        const x2 = int(id2).mod(size2);
        const y2 = int(id2).div(size2);
        return textureLoad(this.batchMesh._indirectTexture, ivec2(x2, y2)).x;
      }).setLayout({
        name: "getIndirectIndex",
        type: "uint",
        inputs: [
          { name: "id", type: "int" }
        ]
      });
      const indirectId = getIndirectIndex(int(this.batchingIdNode));
      const matricesTexture = this.batchMesh._matricesTexture;
      const size = int(textureSize(textureLoad(matricesTexture), 0).x);
      const j = float(indirectId).mul(4).toInt().toVar();
      const x = j.mod(size);
      const y = j.div(size);
      const batchingMatrix = mat4(
        textureLoad(matricesTexture, ivec2(x, y)),
        textureLoad(matricesTexture, ivec2(x.add(1), y)),
        textureLoad(matricesTexture, ivec2(x.add(2), y)),
        textureLoad(matricesTexture, ivec2(x.add(3), y))
      );
      const colorsTexture = this.batchMesh._colorsTexture;
      if (colorsTexture !== null) {
        const getBatchingColor = Fn(([id2]) => {
          const size2 = int(textureSize(textureLoad(colorsTexture), 0).x);
          const j2 = id2;
          const x2 = j2.mod(size2);
          const y2 = j2.div(size2);
          return textureLoad(colorsTexture, ivec2(x2, y2)).rgb;
        }).setLayout({
          name: "getBatchingColor",
          type: "vec3",
          inputs: [
            { name: "id", type: "int" }
          ]
        });
        const color2 = getBatchingColor(indirectId);
        varyingProperty("vec3", "vBatchColor").assign(color2);
      }
      const bm = mat3(batchingMatrix);
      positionLocal.assign(batchingMatrix.mul(positionLocal));
      const transformedNormal = normalLocal.div(vec3(bm[0].dot(bm[0]), bm[1].dot(bm[1]), bm[2].dot(bm[2])));
      const batchingNormal = bm.mul(transformedNormal).xyz;
      normalLocal.assign(batchingNormal);
      if (builder.hasGeometryAttribute("tangent")) {
        tangentLocal.mulAssign(bm);
      }
    }
  };
  var batch = /* @__PURE__ */ nodeProxy(BatchNode).setParameterLength(1);
  var _frameId = /* @__PURE__ */ new WeakMap();
  var SkinningNode = class extends Node {
    static get type() {
      return "SkinningNode";
    }
    /**
     * Constructs a new skinning node.
     *
     * @param {SkinnedMesh} skinnedMesh - The skinned mesh.
     */
    constructor(skinnedMesh) {
      super("void");
      this.skinnedMesh = skinnedMesh;
      this.updateType = NodeUpdateType.OBJECT;
      this.skinIndexNode = attribute("skinIndex", "uvec4");
      this.skinWeightNode = attribute("skinWeight", "vec4");
      this.bindMatrixNode = reference("bindMatrix", "mat4");
      this.bindMatrixInverseNode = reference("bindMatrixInverse", "mat4");
      this.boneMatricesNode = referenceBuffer("skeleton.boneMatrices", "mat4", skinnedMesh.skeleton.bones.length);
      this.positionNode = positionLocal;
      this.toPositionNode = positionLocal;
      this.previousBoneMatricesNode = null;
    }
    /**
     * Transforms the given vertex position via skinning.
     *
     * @param {Node} [boneMatrices=this.boneMatricesNode] - The bone matrices
     * @param {Node<vec3>} [position=this.positionNode] - The vertex position in local space.
     * @return {Node<vec3>} The transformed vertex position.
     */
    getSkinnedPosition(boneMatrices = this.boneMatricesNode, position = this.positionNode) {
      const { skinIndexNode, skinWeightNode, bindMatrixNode, bindMatrixInverseNode } = this;
      const boneMatX = boneMatrices.element(skinIndexNode.x);
      const boneMatY = boneMatrices.element(skinIndexNode.y);
      const boneMatZ = boneMatrices.element(skinIndexNode.z);
      const boneMatW = boneMatrices.element(skinIndexNode.w);
      const skinVertex = bindMatrixNode.mul(position);
      const skinned = add2(
        boneMatX.mul(skinWeightNode.x).mul(skinVertex),
        boneMatY.mul(skinWeightNode.y).mul(skinVertex),
        boneMatZ.mul(skinWeightNode.z).mul(skinVertex),
        boneMatW.mul(skinWeightNode.w).mul(skinVertex)
      );
      return bindMatrixInverseNode.mul(skinned).xyz;
    }
    /**
     * Transforms the given vertex normal via skinning.
     *
     * @param {Node} [boneMatrices=this.boneMatricesNode] - The bone matrices
     * @param {Node<vec3>} [normal=normalLocal] - The vertex normal in local space.
     * @return {Node<vec3>} The transformed vertex normal.
     */
    getSkinnedNormal(boneMatrices = this.boneMatricesNode, normal2 = normalLocal) {
      const { skinIndexNode, skinWeightNode, bindMatrixNode, bindMatrixInverseNode } = this;
      const boneMatX = boneMatrices.element(skinIndexNode.x);
      const boneMatY = boneMatrices.element(skinIndexNode.y);
      const boneMatZ = boneMatrices.element(skinIndexNode.z);
      const boneMatW = boneMatrices.element(skinIndexNode.w);
      let skinMatrix = add2(
        skinWeightNode.x.mul(boneMatX),
        skinWeightNode.y.mul(boneMatY),
        skinWeightNode.z.mul(boneMatZ),
        skinWeightNode.w.mul(boneMatW)
      );
      skinMatrix = bindMatrixInverseNode.mul(skinMatrix).mul(bindMatrixNode);
      return skinMatrix.transformDirection(normal2).xyz;
    }
    /**
     * Computes the transformed/skinned vertex position of the previous frame.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {Node<vec3>} The skinned position from the previous frame.
     */
    getPreviousSkinnedPosition(builder) {
      const skinnedMesh = builder.object;
      if (this.previousBoneMatricesNode === null) {
        skinnedMesh.skeleton.previousBoneMatrices = new Float32Array(skinnedMesh.skeleton.boneMatrices);
        this.previousBoneMatricesNode = referenceBuffer("skeleton.previousBoneMatrices", "mat4", skinnedMesh.skeleton.bones.length);
      }
      return this.getSkinnedPosition(this.previousBoneMatricesNode, positionPrevious);
    }
    /**
     * Returns `true` if bone matrices from the previous frame are required. Relevant
     * when computing motion vectors with {@link VelocityNode}.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {boolean} Whether bone matrices from the previous frame are required or not.
     */
    needsPreviousBoneMatrices(builder) {
      const mrt = builder.renderer.getMRT();
      return mrt && mrt.has("velocity") || getDataFromObject(builder.object).useVelocity === true;
    }
    /**
     * Setups the skinning node by assigning the transformed vertex data to predefined node variables.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {Node<vec3>} The transformed vertex position.
     */
    setup(builder) {
      if (this.needsPreviousBoneMatrices(builder)) {
        positionPrevious.assign(this.getPreviousSkinnedPosition(builder));
      }
      const skinPosition = this.getSkinnedPosition();
      if (this.toPositionNode) this.toPositionNode.assign(skinPosition);
      if (builder.hasGeometryAttribute("normal")) {
        const skinNormal = this.getSkinnedNormal();
        normalLocal.assign(skinNormal);
        if (builder.hasGeometryAttribute("tangent")) {
          tangentLocal.assign(skinNormal);
        }
      }
      return skinPosition;
    }
    /**
     * Generates the code snippet of the skinning node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @param {string} output - The current output.
     * @return {string} The generated code snippet.
     */
    generate(builder, output2) {
      if (output2 !== "void") {
        return super.generate(builder, output2);
      }
    }
    /**
     * Updates the state of the skinned mesh by updating the skeleton once per frame.
     *
     * @param {NodeFrame} frame - The current node frame.
     */
    update(frame) {
      const skeleton = frame.object && frame.object.skeleton ? frame.object.skeleton : this.skinnedMesh.skeleton;
      if (_frameId.get(skeleton) === frame.frameId) return;
      _frameId.set(skeleton, frame.frameId);
      if (this.previousBoneMatricesNode !== null) skeleton.previousBoneMatrices.set(skeleton.boneMatrices);
      skeleton.update();
    }
  };
  var skinning = (skinnedMesh) => nodeObject(new SkinningNode(skinnedMesh));
  var LoopNode = class extends Node {
    static get type() {
      return "LoopNode";
    }
    /**
     * Constructs a new loop node.
     *
     * @param {Array<any>} params - Depending on the loop type, array holds different parameterization values for the loop.
     */
    constructor(params = []) {
      super();
      this.params = params;
    }
    /**
     * Returns a loop variable name based on an index. The pattern is
     * `0` = `i`, `1`= `j`, `2`= `k` and so on.
     *
     * @param {number} index - The index.
     * @return {string} The loop variable name.
     */
    getVarName(index) {
      return String.fromCharCode("i".charCodeAt(0) + index);
    }
    /**
     * Returns properties about this node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {Object} The node properties.
     */
    getProperties(builder) {
      const properties = builder.getNodeProperties(this);
      if (properties.stackNode !== void 0) return properties;
      const inputs = {};
      for (let i = 0, l = this.params.length - 1; i < l; i++) {
        const param = this.params[i];
        const name2 = param.isNode !== true && param.name || this.getVarName(i);
        const type = param.isNode !== true && param.type || "int";
        inputs[name2] = expression(name2, type);
      }
      const stack2 = builder.addStack();
      properties.returnsNode = this.params[this.params.length - 1](inputs, builder);
      properties.stackNode = stack2;
      const baseParam = this.params[0];
      if (baseParam.isNode !== true && typeof baseParam.update === "function") {
        properties.updateNode = Fn(this.params[0].update)(inputs);
      }
      builder.removeStack();
      return properties;
    }
    /**
     * This method is overwritten since the node type is inferred based on the loop configuration.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The node type.
     */
    getNodeType(builder) {
      const { returnsNode } = this.getProperties(builder);
      return returnsNode ? returnsNode.getNodeType(builder) : "void";
    }
    setup(builder) {
      this.getProperties(builder);
    }
    generate(builder) {
      const properties = this.getProperties(builder);
      const params = this.params;
      const stackNode = properties.stackNode;
      for (let i = 0, l = params.length - 1; i < l; i++) {
        const param = params[i];
        let isWhile = false, start = null, end = null, name2 = null, type = null, condition = null, update = null;
        if (param.isNode) {
          if (param.getNodeType(builder) === "bool") {
            isWhile = true;
            type = "bool";
            end = param.build(builder, type);
          } else {
            type = "int";
            name2 = this.getVarName(i);
            start = "0";
            end = param.build(builder, type);
            condition = "<";
          }
        } else {
          type = param.type || "int";
          name2 = param.name || this.getVarName(i);
          start = param.start;
          end = param.end;
          condition = param.condition;
          update = param.update;
          if (typeof start === "number") start = builder.generateConst(type, start);
          else if (start && start.isNode) start = start.build(builder, type);
          if (typeof end === "number") end = builder.generateConst(type, end);
          else if (end && end.isNode) end = end.build(builder, type);
          if (start !== void 0 && end === void 0) {
            start = start + " - 1";
            end = "0";
            condition = ">=";
          } else if (end !== void 0 && start === void 0) {
            start = "0";
            condition = "<";
          }
          if (condition === void 0) {
            if (Number(start) > Number(end)) {
              condition = ">=";
            } else {
              condition = "<";
            }
          }
        }
        let loopSnippet;
        if (isWhile) {
          loopSnippet = `while ( ${end} )`;
        } else {
          const internalParam = { start, end };
          const startSnippet = internalParam.start;
          const endSnippet = internalParam.end;
          let updateSnippet;
          const deltaOperator = () => condition.includes("<") ? "+=" : "-=";
          if (update !== void 0 && update !== null) {
            switch (typeof update) {
              case "function":
                const flow = builder.flowStagesNode(properties.updateNode, "void");
                const snippet2 = flow.code.replace(/\t|;/g, "");
                updateSnippet = snippet2;
                break;
              case "number":
                updateSnippet = name2 + " " + deltaOperator() + " " + builder.generateConst(type, update);
                break;
              case "string":
                updateSnippet = name2 + " " + update;
                break;
              default:
                if (update.isNode) {
                  updateSnippet = name2 + " " + deltaOperator() + " " + update.build(builder);
                } else {
                  console.error("THREE.TSL: 'Loop( { update: ... } )' is not a function, string or number.");
                  updateSnippet = "break /* invalid update */";
                }
            }
          } else {
            if (type === "int" || type === "uint") {
              update = condition.includes("<") ? "++" : "--";
            } else {
              update = deltaOperator() + " 1.";
            }
            updateSnippet = name2 + " " + update;
          }
          const declarationSnippet = builder.getVar(type, name2) + " = " + startSnippet;
          const conditionalSnippet = name2 + " " + condition + " " + endSnippet;
          loopSnippet = `for ( ${declarationSnippet}; ${conditionalSnippet}; ${updateSnippet} )`;
        }
        builder.addFlowCode((i === 0 ? "\n" : "") + builder.tab + loopSnippet + " {\n\n").addFlowTab();
      }
      const stackSnippet = stackNode.build(builder, "void");
      const returnsSnippet = properties.returnsNode ? properties.returnsNode.build(builder) : "";
      builder.removeFlowTab().addFlowCode("\n" + builder.tab + stackSnippet);
      for (let i = 0, l = this.params.length - 1; i < l; i++) {
        builder.addFlowCode((i === 0 ? "" : builder.tab) + "}\n\n").removeFlowTab();
      }
      builder.addFlowTab();
      return returnsSnippet;
    }
  };
  var Loop = (...params) => nodeObject(new LoopNode(nodeArray(params, "int"))).toStack();
  var Break2 = () => expression("break").toStack();
  var _morphTextures = /* @__PURE__ */ new WeakMap();
  var _morphVec4 = /* @__PURE__ */ new Vector4();
  var getMorph = /* @__PURE__ */ Fn(({ bufferMap, influence, stride, width, depth: depth2, offset }) => {
    const texelIndex = int(vertexIndex).mul(stride).add(offset);
    const y = texelIndex.div(width);
    const x = texelIndex.sub(y.mul(width));
    const bufferAttrib = textureLoad(bufferMap, ivec2(x, y)).depth(depth2).xyz;
    return bufferAttrib.mul(influence);
  });
  function getEntry(geometry) {
    const hasMorphPosition = geometry.morphAttributes.position !== void 0;
    const hasMorphNormals = geometry.morphAttributes.normal !== void 0;
    const hasMorphColors = geometry.morphAttributes.color !== void 0;
    const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
    const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
    let entry = _morphTextures.get(geometry);
    if (entry === void 0 || entry.count !== morphTargetsCount) {
      let disposeTexture = function() {
        bufferTexture.dispose();
        _morphTextures.delete(geometry);
        geometry.removeEventListener("dispose", disposeTexture);
      };
      if (entry !== void 0) entry.texture.dispose();
      const morphTargets = geometry.morphAttributes.position || [];
      const morphNormals = geometry.morphAttributes.normal || [];
      const morphColors = geometry.morphAttributes.color || [];
      let vertexDataCount = 0;
      if (hasMorphPosition === true) vertexDataCount = 1;
      if (hasMorphNormals === true) vertexDataCount = 2;
      if (hasMorphColors === true) vertexDataCount = 3;
      let width = geometry.attributes.position.count * vertexDataCount;
      let height = 1;
      const maxTextureSize = 4096;
      if (width > maxTextureSize) {
        height = Math.ceil(width / maxTextureSize);
        width = maxTextureSize;
      }
      const buffer2 = new Float32Array(width * height * 4 * morphTargetsCount);
      const bufferTexture = new DataArrayTexture(buffer2, width, height, morphTargetsCount);
      bufferTexture.type = FloatType;
      bufferTexture.needsUpdate = true;
      const vertexDataStride = vertexDataCount * 4;
      for (let i = 0; i < morphTargetsCount; i++) {
        const morphTarget = morphTargets[i];
        const morphNormal = morphNormals[i];
        const morphColor = morphColors[i];
        const offset = width * height * 4 * i;
        for (let j = 0; j < morphTarget.count; j++) {
          const stride = j * vertexDataStride;
          if (hasMorphPosition === true) {
            _morphVec4.fromBufferAttribute(morphTarget, j);
            buffer2[offset + stride + 0] = _morphVec4.x;
            buffer2[offset + stride + 1] = _morphVec4.y;
            buffer2[offset + stride + 2] = _morphVec4.z;
            buffer2[offset + stride + 3] = 0;
          }
          if (hasMorphNormals === true) {
            _morphVec4.fromBufferAttribute(morphNormal, j);
            buffer2[offset + stride + 4] = _morphVec4.x;
            buffer2[offset + stride + 5] = _morphVec4.y;
            buffer2[offset + stride + 6] = _morphVec4.z;
            buffer2[offset + stride + 7] = 0;
          }
          if (hasMorphColors === true) {
            _morphVec4.fromBufferAttribute(morphColor, j);
            buffer2[offset + stride + 8] = _morphVec4.x;
            buffer2[offset + stride + 9] = _morphVec4.y;
            buffer2[offset + stride + 10] = _morphVec4.z;
            buffer2[offset + stride + 11] = morphColor.itemSize === 4 ? _morphVec4.w : 1;
          }
        }
      }
      entry = {
        count: morphTargetsCount,
        texture: bufferTexture,
        stride: vertexDataCount,
        size: new Vector2(width, height)
      };
      _morphTextures.set(geometry, entry);
      geometry.addEventListener("dispose", disposeTexture);
    }
    return entry;
  }
  var MorphNode = class extends Node {
    static get type() {
      return "MorphNode";
    }
    /**
     * Constructs a new morph node.
     *
     * @param {Mesh} mesh - The mesh holding the morph targets.
     */
    constructor(mesh) {
      super("void");
      this.mesh = mesh;
      this.morphBaseInfluence = uniform(1);
      this.updateType = NodeUpdateType.OBJECT;
    }
    /**
     * Setups the morph node by assigning the transformed vertex data to predefined node variables.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    setup(builder) {
      const { geometry } = builder;
      const hasMorphPosition = geometry.morphAttributes.position !== void 0;
      const hasMorphNormals = geometry.hasAttribute("normal") && geometry.morphAttributes.normal !== void 0;
      const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
      const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
      const { texture: bufferMap, stride, size } = getEntry(geometry);
      if (hasMorphPosition === true) positionLocal.mulAssign(this.morphBaseInfluence);
      if (hasMorphNormals === true) normalLocal.mulAssign(this.morphBaseInfluence);
      const width = int(size.width);
      Loop(morphTargetsCount, ({ i }) => {
        const influence = float(0).toVar();
        if (this.mesh.count > 1 && (this.mesh.morphTexture !== null && this.mesh.morphTexture !== void 0)) {
          influence.assign(textureLoad(this.mesh.morphTexture, ivec2(int(i).add(1), int(instanceIndex))).r);
        } else {
          influence.assign(reference("morphTargetInfluences", "float").element(i).toVar());
        }
        If(influence.notEqual(0), () => {
          if (hasMorphPosition === true) {
            positionLocal.addAssign(getMorph({
              bufferMap,
              influence,
              stride,
              width,
              depth: i,
              offset: int(0)
            }));
          }
          if (hasMorphNormals === true) {
            normalLocal.addAssign(getMorph({
              bufferMap,
              influence,
              stride,
              width,
              depth: i,
              offset: int(1)
            }));
          }
        });
      });
    }
    /**
     * Updates the state of the morphed mesh by updating the base influence.
     *
     * @param {NodeFrame} frame - The current node frame.
     */
    update() {
      const morphBaseInfluence = this.morphBaseInfluence;
      if (this.mesh.geometry.morphTargetsRelative) {
        morphBaseInfluence.value = 1;
      } else {
        morphBaseInfluence.value = 1 - this.mesh.morphTargetInfluences.reduce((a, b) => a + b, 0);
      }
    }
  };
  var morphReference = /* @__PURE__ */ nodeProxy(MorphNode).setParameterLength(1);
  var LightingNode = class extends Node {
    static get type() {
      return "LightingNode";
    }
    /**
     * Constructs a new lighting node.
     */
    constructor() {
      super("vec3");
      this.isLightingNode = true;
    }
  };
  var AONode = class extends LightingNode {
    static get type() {
      return "AONode";
    }
    /**
     * Constructs a new AO node.
     *
     * @param {?Node<float>} [aoNode=null] - The ambient occlusion node.
     */
    constructor(aoNode = null) {
      super();
      this.aoNode = aoNode;
    }
    setup(builder) {
      builder.context.ambientOcclusion.mulAssign(this.aoNode);
    }
  };
  var LightingContextNode = class extends ContextNode {
    static get type() {
      return "LightingContextNode";
    }
    /**
     * Constructs a new lighting context node.
     *
     * @param {LightsNode} lightsNode - The lights node.
     * @param {?LightingModel} [lightingModel=null] - The current lighting model.
     * @param {?Node<vec3>} [backdropNode=null] - A backdrop node.
     * @param {?Node<float>} [backdropAlphaNode=null] - A backdrop alpha node.
     */
    constructor(lightsNode, lightingModel = null, backdropNode = null, backdropAlphaNode = null) {
      super(lightsNode);
      this.lightingModel = lightingModel;
      this.backdropNode = backdropNode;
      this.backdropAlphaNode = backdropAlphaNode;
      this._value = null;
    }
    /**
     * Returns a lighting context object.
     *
     * @return {{
     * radiance: Node<vec3>,
     * irradiance: Node<vec3>,
     * iblIrradiance: Node<vec3>,
     * ambientOcclusion: Node<float>,
     * reflectedLight: {directDiffuse: Node<vec3>, directSpecular: Node<vec3>, indirectDiffuse: Node<vec3>, indirectSpecular: Node<vec3>},
     * backdrop: Node<vec3>,
     * backdropAlpha: Node<float>
     * }} The lighting context object.
     */
    getContext() {
      const { backdropNode, backdropAlphaNode } = this;
      const directDiffuse = vec3().toVar("directDiffuse"), directSpecular = vec3().toVar("directSpecular"), indirectDiffuse = vec3().toVar("indirectDiffuse"), indirectSpecular = vec3().toVar("indirectSpecular");
      const reflectedLight = {
        directDiffuse,
        directSpecular,
        indirectDiffuse,
        indirectSpecular
      };
      const context2 = {
        radiance: vec3().toVar("radiance"),
        irradiance: vec3().toVar("irradiance"),
        iblIrradiance: vec3().toVar("iblIrradiance"),
        ambientOcclusion: float(1).toVar("ambientOcclusion"),
        reflectedLight,
        backdrop: backdropNode,
        backdropAlpha: backdropAlphaNode
      };
      return context2;
    }
    setup(builder) {
      this.value = this._value || (this._value = this.getContext());
      this.value.lightingModel = this.lightingModel || builder.context.lightingModel;
      return super.setup(builder);
    }
  };
  var lightingContext = /* @__PURE__ */ nodeProxy(LightingContextNode);
  var IrradianceNode = class extends LightingNode {
    static get type() {
      return "IrradianceNode";
    }
    /**
     * Constructs a new irradiance node.
     *
     * @param {Node<vec3>} node - A node contributing irradiance.
     */
    constructor(node) {
      super();
      this.node = node;
    }
    setup(builder) {
      builder.context.irradiance.addAssign(this.node);
    }
  };
  var screenSizeVec;
  var viewportVec;
  var ScreenNode = class _ScreenNode extends Node {
    static get type() {
      return "ScreenNode";
    }
    /**
     * Constructs a new screen node.
     *
     * @param {('coordinate'|'viewport'|'size'|'uv')} scope - The node's scope.
     */
    constructor(scope) {
      super();
      this.scope = scope;
      this.isViewportNode = true;
    }
    /**
     * This method is overwritten since the node type depends on the selected scope.
     *
     * @return {('vec2'|'vec4')} The node type.
     */
    getNodeType() {
      if (this.scope === _ScreenNode.VIEWPORT) return "vec4";
      else return "vec2";
    }
    /**
     * This method is overwritten since the node's update type depends on the selected scope.
     *
     * @return {NodeUpdateType} The update type.
     */
    getUpdateType() {
      let updateType = NodeUpdateType.NONE;
      if (this.scope === _ScreenNode.SIZE || this.scope === _ScreenNode.VIEWPORT) {
        updateType = NodeUpdateType.RENDER;
      }
      this.updateType = updateType;
      return updateType;
    }
    /**
     * `ScreenNode` implements {@link Node#update} to retrieve viewport and size information
     * from the current renderer.
     *
     * @param {NodeFrame} frame - A reference to the current node frame.
     */
    update({ renderer }) {
      const renderTarget = renderer.getRenderTarget();
      if (this.scope === _ScreenNode.VIEWPORT) {
        if (renderTarget !== null) {
          viewportVec.copy(renderTarget.viewport);
        } else {
          renderer.getViewport(viewportVec);
          viewportVec.multiplyScalar(renderer.getPixelRatio());
        }
      } else {
        if (renderTarget !== null) {
          screenSizeVec.width = renderTarget.width;
          screenSizeVec.height = renderTarget.height;
        } else {
          renderer.getDrawingBufferSize(screenSizeVec);
        }
      }
    }
    setup() {
      const scope = this.scope;
      let output2 = null;
      if (scope === _ScreenNode.SIZE) {
        output2 = uniform(screenSizeVec || (screenSizeVec = new Vector2()));
      } else if (scope === _ScreenNode.VIEWPORT) {
        output2 = uniform(viewportVec || (viewportVec = new Vector4()));
      } else {
        output2 = vec2(screenCoordinate.div(screenSize));
      }
      return output2;
    }
    generate(builder) {
      if (this.scope === _ScreenNode.COORDINATE) {
        let coord = builder.getFragCoord();
        if (builder.isFlipY()) {
          const size = builder.getNodeProperties(screenSize).outputNode.build(builder);
          coord = `${builder.getType("vec2")}( ${coord}.x, ${size}.y - ${coord}.y )`;
        }
        return coord;
      }
      return super.generate(builder);
    }
  };
  ScreenNode.COORDINATE = "coordinate";
  ScreenNode.VIEWPORT = "viewport";
  ScreenNode.SIZE = "size";
  ScreenNode.UV = "uv";
  var screenUV = /* @__PURE__ */ nodeImmutable(ScreenNode, ScreenNode.UV);
  var screenSize = /* @__PURE__ */ nodeImmutable(ScreenNode, ScreenNode.SIZE);
  var screenCoordinate = /* @__PURE__ */ nodeImmutable(ScreenNode, ScreenNode.COORDINATE);
  var viewport = /* @__PURE__ */ nodeImmutable(ScreenNode, ScreenNode.VIEWPORT);
  var viewportSize = viewport.zw;
  var viewportCoordinate = /* @__PURE__ */ screenCoordinate.sub(viewport.xy);
  var _size$4 = /* @__PURE__ */ new Vector2();
  var ViewportTextureNode = class extends TextureNode {
    static get type() {
      return "ViewportTextureNode";
    }
    /**
     * Constructs a new viewport texture node.
     *
     * @param {Node} [uvNode=screenUV] - The uv node.
     * @param {?Node} [levelNode=null] - The level node.
     * @param {?Texture} [framebufferTexture=null] - A framebuffer texture holding the viewport data. If not provided, a framebuffer texture is created automatically.
     */
    constructor(uvNode = screenUV, levelNode = null, framebufferTexture = null) {
      if (framebufferTexture === null) {
        framebufferTexture = new FramebufferTexture();
        framebufferTexture.minFilter = LinearMipmapLinearFilter;
      }
      super(framebufferTexture, uvNode, levelNode);
      this.generateMipmaps = false;
      this.isOutputTextureNode = true;
      this.updateBeforeType = NodeUpdateType.FRAME;
    }
    updateBefore(frame) {
      const renderer = frame.renderer;
      renderer.getDrawingBufferSize(_size$4);
      const framebufferTexture = this.value;
      if (framebufferTexture.image.width !== _size$4.width || framebufferTexture.image.height !== _size$4.height) {
        framebufferTexture.image.width = _size$4.width;
        framebufferTexture.image.height = _size$4.height;
        framebufferTexture.needsUpdate = true;
      }
      const currentGenerateMipmaps = framebufferTexture.generateMipmaps;
      framebufferTexture.generateMipmaps = this.generateMipmaps;
      renderer.copyFramebufferToTexture(framebufferTexture);
      framebufferTexture.generateMipmaps = currentGenerateMipmaps;
    }
    clone() {
      const viewportTextureNode = new this.constructor(this.uvNode, this.levelNode, this.value);
      viewportTextureNode.generateMipmaps = this.generateMipmaps;
      return viewportTextureNode;
    }
  };
  var viewportMipTexture = /* @__PURE__ */ nodeProxy(ViewportTextureNode, null, null, { generateMipmaps: true }).setParameterLength(0, 3);
  var sharedDepthbuffer = null;
  var ViewportDepthTextureNode = class extends ViewportTextureNode {
    static get type() {
      return "ViewportDepthTextureNode";
    }
    /**
     * Constructs a new viewport depth texture node.
     *
     * @param {Node} [uvNode=screenUV] - The uv node.
     * @param {?Node} [levelNode=null] - The level node.
     */
    constructor(uvNode = screenUV, levelNode = null) {
      if (sharedDepthbuffer === null) {
        sharedDepthbuffer = new DepthTexture();
      }
      super(uvNode, levelNode, sharedDepthbuffer);
    }
  };
  var viewportDepthTexture = /* @__PURE__ */ nodeProxy(ViewportDepthTextureNode).setParameterLength(0, 2);
  var ViewportDepthNode = class _ViewportDepthNode extends Node {
    static get type() {
      return "ViewportDepthNode";
    }
    /**
     * Constructs a new viewport depth node.
     *
     * @param {('depth'|'depthBase'|'linearDepth')} scope - The node's scope.
     * @param {?Node} [valueNode=null] - The value node.
     */
    constructor(scope, valueNode = null) {
      super("float");
      this.scope = scope;
      this.valueNode = valueNode;
      this.isViewportDepthNode = true;
    }
    generate(builder) {
      const { scope } = this;
      if (scope === _ViewportDepthNode.DEPTH_BASE) {
        return builder.getFragDepth();
      }
      return super.generate(builder);
    }
    setup({ camera }) {
      const { scope } = this;
      const value = this.valueNode;
      let node = null;
      if (scope === _ViewportDepthNode.DEPTH_BASE) {
        if (value !== null) {
          node = depthBase().assign(value);
        }
      } else if (scope === _ViewportDepthNode.DEPTH) {
        if (camera.isPerspectiveCamera) {
          node = viewZToPerspectiveDepth(positionView.z, cameraNear, cameraFar);
        } else {
          node = viewZToOrthographicDepth(positionView.z, cameraNear, cameraFar);
        }
      } else if (scope === _ViewportDepthNode.LINEAR_DEPTH) {
        if (value !== null) {
          if (camera.isPerspectiveCamera) {
            const viewZ = perspectiveDepthToViewZ(value, cameraNear, cameraFar);
            node = viewZToOrthographicDepth(viewZ, cameraNear, cameraFar);
          } else {
            node = value;
          }
        } else {
          node = viewZToOrthographicDepth(positionView.z, cameraNear, cameraFar);
        }
      }
      return node;
    }
  };
  ViewportDepthNode.DEPTH_BASE = "depthBase";
  ViewportDepthNode.DEPTH = "depth";
  ViewportDepthNode.LINEAR_DEPTH = "linearDepth";
  var viewZToOrthographicDepth = (viewZ, near, far) => viewZ.add(near).div(near.sub(far));
  var viewZToPerspectiveDepth = (viewZ, near, far) => near.add(viewZ).mul(far).div(far.sub(near).mul(viewZ));
  var perspectiveDepthToViewZ = (depth2, near, far) => near.mul(far).div(far.sub(near).mul(depth2).sub(far));
  var viewZToLogarithmicDepth = (viewZ, near, far) => {
    near = near.max(1e-6).toVar();
    const numerator = log2(viewZ.negate().div(near));
    const denominator = log2(far.div(near));
    return numerator.div(denominator);
  };
  var depthBase = /* @__PURE__ */ nodeProxy(ViewportDepthNode, ViewportDepthNode.DEPTH_BASE);
  var depth = /* @__PURE__ */ nodeImmutable(ViewportDepthNode, ViewportDepthNode.DEPTH);
  var linearDepth = /* @__PURE__ */ nodeProxy(ViewportDepthNode, ViewportDepthNode.LINEAR_DEPTH).setParameterLength(0, 1);
  var viewportLinearDepth = /* @__PURE__ */ linearDepth(viewportDepthTexture());
  depth.assign = (value) => depthBase(value);
  var ClippingNode = class _ClippingNode extends Node {
    static get type() {
      return "ClippingNode";
    }
    /**
     * Constructs a new clipping node.
     *
     * @param {('default'|'hardware'|'alphaToCoverage')} [scope='default'] - The node's scope. Similar to other nodes,
     * the selected scope influences the behavior of the node and what type of code is generated.
     */
    constructor(scope = _ClippingNode.DEFAULT) {
      super();
      this.scope = scope;
    }
    /**
     * Setups the node depending on the selected scope.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {Node} The result node.
     */
    setup(builder) {
      super.setup(builder);
      const clippingContext = builder.clippingContext;
      const { intersectionPlanes, unionPlanes } = clippingContext;
      this.hardwareClipping = builder.material.hardwareClipping;
      if (this.scope === _ClippingNode.ALPHA_TO_COVERAGE) {
        return this.setupAlphaToCoverage(intersectionPlanes, unionPlanes);
      } else if (this.scope === _ClippingNode.HARDWARE) {
        return this.setupHardwareClipping(unionPlanes, builder);
      } else {
        return this.setupDefault(intersectionPlanes, unionPlanes);
      }
    }
    /**
     * Setups alpha to coverage.
     *
     * @param {Array<Vector4>} intersectionPlanes - The intersection planes.
     * @param {Array<Vector4>} unionPlanes - The union planes.
     * @return {Node} The result node.
     */
    setupAlphaToCoverage(intersectionPlanes, unionPlanes) {
      return Fn(() => {
        const distanceToPlane = float().toVar("distanceToPlane");
        const distanceGradient = float().toVar("distanceToGradient");
        const clipOpacity = float(1).toVar("clipOpacity");
        const numUnionPlanes = unionPlanes.length;
        if (this.hardwareClipping === false && numUnionPlanes > 0) {
          const clippingPlanes = uniformArray(unionPlanes);
          Loop(numUnionPlanes, ({ i }) => {
            const plane = clippingPlanes.element(i);
            distanceToPlane.assign(positionView.dot(plane.xyz).negate().add(plane.w));
            distanceGradient.assign(distanceToPlane.fwidth().div(2));
            clipOpacity.mulAssign(smoothstep2(distanceGradient.negate(), distanceGradient, distanceToPlane));
          });
        }
        const numIntersectionPlanes = intersectionPlanes.length;
        if (numIntersectionPlanes > 0) {
          const clippingPlanes = uniformArray(intersectionPlanes);
          const intersectionClipOpacity = float(1).toVar("intersectionClipOpacity");
          Loop(numIntersectionPlanes, ({ i }) => {
            const plane = clippingPlanes.element(i);
            distanceToPlane.assign(positionView.dot(plane.xyz).negate().add(plane.w));
            distanceGradient.assign(distanceToPlane.fwidth().div(2));
            intersectionClipOpacity.mulAssign(smoothstep2(distanceGradient.negate(), distanceGradient, distanceToPlane).oneMinus());
          });
          clipOpacity.mulAssign(intersectionClipOpacity.oneMinus());
        }
        diffuseColor.a.mulAssign(clipOpacity);
        diffuseColor.a.equal(0).discard();
      })();
    }
    /**
     * Setups the default clipping.
     *
     * @param {Array<Vector4>} intersectionPlanes - The intersection planes.
     * @param {Array<Vector4>} unionPlanes - The union planes.
     * @return {Node} The result node.
     */
    setupDefault(intersectionPlanes, unionPlanes) {
      return Fn(() => {
        const numUnionPlanes = unionPlanes.length;
        if (this.hardwareClipping === false && numUnionPlanes > 0) {
          const clippingPlanes = uniformArray(unionPlanes);
          Loop(numUnionPlanes, ({ i }) => {
            const plane = clippingPlanes.element(i);
            positionView.dot(plane.xyz).greaterThan(plane.w).discard();
          });
        }
        const numIntersectionPlanes = intersectionPlanes.length;
        if (numIntersectionPlanes > 0) {
          const clippingPlanes = uniformArray(intersectionPlanes);
          const clipped = bool(true).toVar("clipped");
          Loop(numIntersectionPlanes, ({ i }) => {
            const plane = clippingPlanes.element(i);
            clipped.assign(positionView.dot(plane.xyz).greaterThan(plane.w).and(clipped));
          });
          clipped.discard();
        }
      })();
    }
    /**
     * Setups hardware clipping.
     *
     * @param {Array<Vector4>} unionPlanes - The union planes.
     * @param {NodeBuilder} builder - The current node builder.
     * @return {Node} The result node.
     */
    setupHardwareClipping(unionPlanes, builder) {
      const numUnionPlanes = unionPlanes.length;
      builder.enableHardwareClipping(numUnionPlanes);
      return Fn(() => {
        const clippingPlanes = uniformArray(unionPlanes);
        const hw_clip_distances = builtin(builder.getClipDistance());
        Loop(numUnionPlanes, ({ i }) => {
          const plane = clippingPlanes.element(i);
          const distance2 = positionView.dot(plane.xyz).sub(plane.w).negate();
          hw_clip_distances.element(i).assign(distance2);
        });
      })();
    }
  };
  ClippingNode.ALPHA_TO_COVERAGE = "alphaToCoverage";
  ClippingNode.DEFAULT = "default";
  ClippingNode.HARDWARE = "hardware";
  var clipping = () => nodeObject(new ClippingNode());
  var clippingAlpha = () => nodeObject(new ClippingNode(ClippingNode.ALPHA_TO_COVERAGE));
  var hardwareClipping = () => nodeObject(new ClippingNode(ClippingNode.HARDWARE));
  var ALPHA_HASH_SCALE = 0.05;
  var hash2D = /* @__PURE__ */ Fn(([value]) => {
    return fract(mul(1e4, sin(mul(17, value.x).add(mul(0.1, value.y)))).mul(add2(0.1, abs(sin(mul(13, value.y).add(value.x))))));
  });
  var hash3D = /* @__PURE__ */ Fn(([value]) => {
    return hash2D(vec2(hash2D(value.xy), value.z));
  });
  var getAlphaHashThreshold = /* @__PURE__ */ Fn(([position]) => {
    const maxDeriv = max$1(
      length(dFdx(position.xyz)),
      length(dFdy(position.xyz))
    );
    const pixScale = float(1).div(float(ALPHA_HASH_SCALE).mul(maxDeriv)).toVar("pixScale");
    const pixScales = vec2(
      exp2(floor(log2(pixScale))),
      exp2(ceil(log2(pixScale)))
    );
    const alpha = vec2(
      hash3D(floor(pixScales.x.mul(position.xyz))),
      hash3D(floor(pixScales.y.mul(position.xyz)))
    );
    const lerpFactor = fract(log2(pixScale));
    const x = add2(mul(lerpFactor.oneMinus(), alpha.x), mul(lerpFactor, alpha.y));
    const a = min$1(lerpFactor, lerpFactor.oneMinus());
    const cases = vec3(
      x.mul(x).div(mul(2, a).mul(sub(1, a))),
      x.sub(mul(0.5, a)).div(sub(1, a)),
      sub(1, sub(1, x).mul(sub(1, x)).div(mul(2, a).mul(sub(1, a))))
    );
    const threshold = x.lessThan(a.oneMinus()).select(x.lessThan(a).select(cases.x, cases.y), cases.z);
    return clamp2(threshold, 1e-6, 1);
  }).setLayout({
    name: "getAlphaHashThreshold",
    type: "float",
    inputs: [
      { name: "position", type: "vec3" }
    ]
  });
  var VertexColorNode = class extends AttributeNode {
    static get type() {
      return "VertexColorNode";
    }
    /**
     * Constructs a new vertex color node.
     *
     * @param {number} index - The attribute index.
     */
    constructor(index) {
      super(null, "vec4");
      this.isVertexColorNode = true;
      this.index = index;
    }
    /**
     * Overwrites the default implementation by honoring the attribute index.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The attribute name.
     */
    getAttributeName() {
      const index = this.index;
      return "color" + (index > 0 ? index : "");
    }
    generate(builder) {
      const attributeName = this.getAttributeName(builder);
      const geometryAttribute = builder.hasGeometryAttribute(attributeName);
      let result;
      if (geometryAttribute === true) {
        result = super.generate(builder);
      } else {
        result = builder.generateConst(this.nodeType, new Vector4(1, 1, 1, 1));
      }
      return result;
    }
    serialize(data) {
      super.serialize(data);
      data.index = this.index;
    }
    deserialize(data) {
      super.deserialize(data);
      this.index = data.index;
    }
  };
  var vertexColor = (index = 0) => nodeObject(new VertexColorNode(index));
  var NodeMaterial = class extends Material {
    static get type() {
      return "NodeMaterial";
    }
    /**
     * Represents the type of the node material.
     *
     * @type {string}
     */
    get type() {
      return this.constructor.type;
    }
    set type(_value) {
    }
    /**
     * Constructs a new node material.
     */
    constructor() {
      super();
      this.isNodeMaterial = true;
      this.fog = true;
      this.lights = false;
      this.hardwareClipping = false;
      this.lightsNode = null;
      this.envNode = null;
      this.aoNode = null;
      this.colorNode = null;
      this.normalNode = null;
      this.opacityNode = null;
      this.backdropNode = null;
      this.backdropAlphaNode = null;
      this.alphaTestNode = null;
      this.maskNode = null;
      this.positionNode = null;
      this.geometryNode = null;
      this.depthNode = null;
      this.receivedShadowPositionNode = null;
      this.castShadowPositionNode = null;
      this.receivedShadowNode = null;
      this.castShadowNode = null;
      this.outputNode = null;
      this.mrtNode = null;
      this.fragmentNode = null;
      this.vertexNode = null;
      Object.defineProperty(this, "shadowPositionNode", {
        // @deprecated, r176
        get: () => {
          return this.receivedShadowPositionNode;
        },
        set: (value) => {
          console.warn('THREE.NodeMaterial: ".shadowPositionNode" was renamed to ".receivedShadowPositionNode".');
          this.receivedShadowPositionNode = value;
        }
      });
    }
    /**
     * Allows to define a custom cache key that influence the material key computation
     * for render objects.
     *
     * @return {string} The custom cache key.
     */
    customProgramCacheKey() {
      return this.type + getCacheKey$1(this);
    }
    /**
     * Builds this material with the given node builder.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    build(builder) {
      this.setup(builder);
    }
    /**
     * Setups a node material observer with the given builder.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {NodeMaterialObserver} The node material observer.
     */
    setupObserver(builder) {
      return new NodeMaterialObserver(builder);
    }
    /**
     * Setups the vertex and fragment stage of this node material.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    setup(builder) {
      builder.context.setupNormal = () => this.setupNormal(builder);
      builder.context.setupPositionView = () => this.setupPositionView(builder);
      builder.context.setupModelViewProjection = () => this.setupModelViewProjection(builder);
      const renderer = builder.renderer;
      const renderTarget = renderer.getRenderTarget();
      builder.addStack();
      const mvp = this.setupVertex(builder);
      const vertexNode = this.vertexNode || mvp;
      builder.stack.outputNode = vertexNode;
      this.setupHardwareClipping(builder);
      if (this.geometryNode !== null) {
        builder.stack.outputNode = builder.stack.outputNode.bypass(this.geometryNode);
      }
      builder.addFlow("vertex", builder.removeStack());
      builder.addStack();
      let resultNode;
      const clippingNode = this.setupClipping(builder);
      if (this.depthWrite === true || this.depthTest === true) {
        if (renderTarget !== null) {
          if (renderTarget.depthBuffer === true) this.setupDepth(builder);
        } else {
          if (renderer.depth === true) this.setupDepth(builder);
        }
      }
      if (this.fragmentNode === null) {
        this.setupDiffuseColor(builder);
        this.setupVariants(builder);
        const outgoingLightNode = this.setupLighting(builder);
        if (clippingNode !== null) builder.stack.add(clippingNode);
        const basicOutput = vec4(outgoingLightNode, diffuseColor.a).max(0);
        resultNode = this.setupOutput(builder, basicOutput);
        output.assign(resultNode);
        const isCustomOutput = this.outputNode !== null;
        if (isCustomOutput) resultNode = this.outputNode;
        if (renderTarget !== null) {
          const mrt = renderer.getMRT();
          const materialMRT = this.mrtNode;
          if (mrt !== null) {
            if (isCustomOutput) output.assign(resultNode);
            resultNode = mrt;
            if (materialMRT !== null) {
              resultNode = mrt.merge(materialMRT);
            }
          } else if (materialMRT !== null) {
            resultNode = materialMRT;
          }
        }
      } else {
        let fragmentNode = this.fragmentNode;
        if (fragmentNode.isOutputStructNode !== true) {
          fragmentNode = vec4(fragmentNode);
        }
        resultNode = this.setupOutput(builder, fragmentNode);
      }
      builder.stack.outputNode = resultNode;
      builder.addFlow("fragment", builder.removeStack());
      builder.observer = this.setupObserver(builder);
    }
    /**
     * Setups the clipping node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {ClippingNode} The clipping node.
     */
    setupClipping(builder) {
      if (builder.clippingContext === null) return null;
      const { unionPlanes, intersectionPlanes } = builder.clippingContext;
      let result = null;
      if (unionPlanes.length > 0 || intersectionPlanes.length > 0) {
        const samples = builder.renderer.samples;
        if (this.alphaToCoverage && samples > 1) {
          result = clippingAlpha();
        } else {
          builder.stack.add(clipping());
        }
      }
      return result;
    }
    /**
     * Setups the hardware clipping if available on the current device.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    setupHardwareClipping(builder) {
      this.hardwareClipping = false;
      if (builder.clippingContext === null) return;
      const candidateCount = builder.clippingContext.unionPlanes.length;
      if (candidateCount > 0 && candidateCount <= 8 && builder.isAvailable("clipDistance")) {
        builder.stack.add(hardwareClipping());
        this.hardwareClipping = true;
      }
      return;
    }
    /**
     * Setups the depth of this material.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    setupDepth(builder) {
      const { renderer, camera } = builder;
      let depthNode = this.depthNode;
      if (depthNode === null) {
        const mrt = renderer.getMRT();
        if (mrt && mrt.has("depth")) {
          depthNode = mrt.get("depth");
        } else if (renderer.logarithmicDepthBuffer === true) {
          if (camera.isPerspectiveCamera) {
            depthNode = viewZToLogarithmicDepth(positionView.z, cameraNear, cameraFar);
          } else {
            depthNode = viewZToOrthographicDepth(positionView.z, cameraNear, cameraFar);
          }
        }
      }
      if (depthNode !== null) {
        depth.assign(depthNode).toStack();
      }
    }
    /**
     * Setups the position node in view space. This method exists
     * so derived node materials can modify the implementation e.g. sprite materials.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {Node<vec3>} The position in view space.
     */
    setupPositionView() {
      return modelViewMatrix.mul(positionLocal).xyz;
    }
    /**
     * Setups the position in clip space.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {Node<vec4>} The position in view space.
     */
    setupModelViewProjection() {
      return cameraProjectionMatrix.mul(positionView);
    }
    /**
     * Setups the logic for the vertex stage.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {Node<vec4>} The position in clip space.
     */
    setupVertex(builder) {
      builder.addStack();
      this.setupPosition(builder);
      builder.context.vertex = builder.removeStack();
      return modelViewProjection;
    }
    /**
     * Setups the computation of the position in local space.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {Node<vec3>} The position in local space.
     */
    setupPosition(builder) {
      const { object, geometry } = builder;
      if (geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color) {
        morphReference(object).toStack();
      }
      if (object.isSkinnedMesh === true) {
        skinning(object).toStack();
      }
      if (this.displacementMap) {
        const displacementMap = materialReference("displacementMap", "texture");
        const displacementScale = materialReference("displacementScale", "float");
        const displacementBias = materialReference("displacementBias", "float");
        positionLocal.addAssign(normalLocal.normalize().mul(displacementMap.x.mul(displacementScale).add(displacementBias)));
      }
      if (object.isBatchedMesh) {
        batch(object).toStack();
      }
      if (object.isInstancedMesh && object.instanceMatrix && object.instanceMatrix.isInstancedBufferAttribute === true) {
        instancedMesh(object).toStack();
      }
      if (this.positionNode !== null) {
        positionLocal.assign(namespace(this.positionNode, "POSITION"));
      }
      return positionLocal;
    }
    /**
     * Setups the computation of the material's diffuse color.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @param {BufferGeometry} geometry - The geometry.
     */
    setupDiffuseColor({ object, geometry }) {
      if (this.maskNode !== null) {
        bool(this.maskNode).not().discard();
      }
      let colorNode = this.colorNode ? vec4(this.colorNode) : materialColor;
      if (this.vertexColors === true && geometry.hasAttribute("color")) {
        colorNode = colorNode.mul(vertexColor());
      }
      if (object.instanceColor) {
        const instanceColor = varyingProperty("vec3", "vInstanceColor");
        colorNode = instanceColor.mul(colorNode);
      }
      if (object.isBatchedMesh && object._colorsTexture) {
        const batchColor = varyingProperty("vec3", "vBatchColor");
        colorNode = batchColor.mul(colorNode);
      }
      diffuseColor.assign(colorNode);
      const opacityNode = this.opacityNode ? float(this.opacityNode) : materialOpacity;
      diffuseColor.a.assign(diffuseColor.a.mul(opacityNode));
      let alphaTestNode = null;
      if (this.alphaTestNode !== null || this.alphaTest > 0) {
        alphaTestNode = this.alphaTestNode !== null ? float(this.alphaTestNode) : materialAlphaTest;
        diffuseColor.a.lessThanEqual(alphaTestNode).discard();
      }
      if (this.alphaHash === true) {
        diffuseColor.a.lessThan(getAlphaHashThreshold(positionLocal)).discard();
      }
      const isOpaque = this.transparent === false && this.blending === NormalBlending && this.alphaToCoverage === false;
      if (isOpaque) {
        diffuseColor.a.assign(1);
      } else if (alphaTestNode === null) {
        diffuseColor.a.lessThanEqual(0).discard();
      }
    }
    /**
     * Abstract interface method that can be implemented by derived materials
     * to setup material-specific node variables.
     *
     * @abstract
     * @param {NodeBuilder} builder - The current node builder.
     */
    setupVariants() {
    }
    /**
     * Setups the outgoing light node variable
     *
     * @return {Node<vec3>} The outgoing light node.
     */
    setupOutgoingLight() {
      return this.lights === true ? vec3(0) : diffuseColor.rgb;
    }
    /**
     * Setups the normal node from the material.
     *
     * @return {Node<vec3>} The normal node.
     */
    setupNormal() {
      return this.normalNode ? vec3(this.normalNode) : materialNormal;
    }
    /**
     * Setups the environment node from the material.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {Node<vec4>} The environment node.
     */
    setupEnvironment() {
      let node = null;
      if (this.envNode) {
        node = this.envNode;
      } else if (this.envMap) {
        node = this.envMap.isCubeTexture ? materialReference("envMap", "cubeTexture") : materialReference("envMap", "texture");
      }
      return node;
    }
    /**
     * Setups the light map node from the material.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {Node<vec3>} The light map node.
     */
    setupLightMap(builder) {
      let node = null;
      if (builder.material.lightMap) {
        node = new IrradianceNode(materialLightMap);
      }
      return node;
    }
    /**
     * Setups the lights node based on the scene, environment and material.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {LightsNode} The lights node.
     */
    setupLights(builder) {
      const materialLightsNode = [];
      const envNode = this.setupEnvironment(builder);
      if (envNode && envNode.isLightingNode) {
        materialLightsNode.push(envNode);
      }
      const lightMapNode = this.setupLightMap(builder);
      if (lightMapNode && lightMapNode.isLightingNode) {
        materialLightsNode.push(lightMapNode);
      }
      if (this.aoNode !== null || builder.material.aoMap) {
        const aoNode = this.aoNode !== null ? this.aoNode : materialAO;
        materialLightsNode.push(new AONode(aoNode));
      }
      let lightsN = this.lightsNode || builder.lightsNode;
      if (materialLightsNode.length > 0) {
        lightsN = builder.renderer.lighting.createNode([...lightsN.getLights(), ...materialLightsNode]);
      }
      return lightsN;
    }
    /**
     * This method should be implemented by most derived materials
     * since it defines the material's lighting model.
     *
     * @abstract
     * @param {NodeBuilder} builder - The current node builder.
     * @return {LightingModel} The lighting model.
     */
    setupLightingModel() {
    }
    /**
     * Setups the outgoing light node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {Node<vec3>} The outgoing light node.
     */
    setupLighting(builder) {
      const { material: material2 } = builder;
      const { backdropNode, backdropAlphaNode, emissiveNode } = this;
      const lights = this.lights === true || this.lightsNode !== null;
      const lightsNode = lights ? this.setupLights(builder) : null;
      let outgoingLightNode = this.setupOutgoingLight(builder);
      if (lightsNode && lightsNode.getScope().hasLights) {
        const lightingModel = this.setupLightingModel(builder) || null;
        outgoingLightNode = lightingContext(lightsNode, lightingModel, backdropNode, backdropAlphaNode);
      } else if (backdropNode !== null) {
        outgoingLightNode = vec3(backdropAlphaNode !== null ? mix(outgoingLightNode, backdropNode, backdropAlphaNode) : backdropNode);
      }
      if (emissiveNode && emissiveNode.isNode === true || material2.emissive && material2.emissive.isColor === true) {
        emissive.assign(vec3(emissiveNode ? emissiveNode : materialEmissive));
        outgoingLightNode = outgoingLightNode.add(emissive);
      }
      return outgoingLightNode;
    }
    /**
     * Setup the fog.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @param {Node<vec4>} outputNode - The existing output node.
     * @return {Node<vec4>} The output node.
     */
    setupFog(builder, outputNode) {
      const fogNode = builder.fogNode;
      if (fogNode) {
        output.assign(outputNode);
        outputNode = vec4(fogNode);
      }
      return outputNode;
    }
    /**
     * Setups the output node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @param {Node<vec4>} outputNode - The existing output node.
     * @return {Node<vec4>} The output node.
     */
    setupOutput(builder, outputNode) {
      if (this.fog === true) {
        outputNode = this.setupFog(builder, outputNode);
      }
      return outputNode;
    }
    /**
     * Most classic material types have a node pendant e.g. for `MeshBasicMaterial`
     * there is `MeshBasicNodeMaterial`. This utility method is intended for
     * defining all material properties of the classic type in the node type.
     *
     * @param {Material} material - The material to copy properties with their values to this node material.
     */
    setDefaultValues(material2) {
      for (const property2 in material2) {
        const value = material2[property2];
        if (this[property2] === void 0) {
          this[property2] = value;
          if (value && value.clone) this[property2] = value.clone();
        }
      }
      const descriptors = Object.getOwnPropertyDescriptors(material2.constructor.prototype);
      for (const key in descriptors) {
        if (Object.getOwnPropertyDescriptor(this.constructor.prototype, key) === void 0 && descriptors[key].get !== void 0) {
          Object.defineProperty(this.constructor.prototype, key, descriptors[key]);
        }
      }
    }
    /**
     * Serializes this material to JSON.
     *
     * @param {?(Object|string)} meta - The meta information for serialization.
     * @return {Object} The serialized node.
     */
    toJSON(meta2) {
      const isRoot = meta2 === void 0 || typeof meta2 === "string";
      if (isRoot) {
        meta2 = {
          textures: {},
          images: {},
          nodes: {}
        };
      }
      const data = Material.prototype.toJSON.call(this, meta2);
      const nodeChildren = getNodeChildren(this);
      data.inputNodes = {};
      for (const { property: property2, childNode } of nodeChildren) {
        data.inputNodes[property2] = childNode.toJSON(meta2).uuid;
      }
      function extractFromCache(cache3) {
        const values = [];
        for (const key in cache3) {
          const data2 = cache3[key];
          delete data2.metadata;
          values.push(data2);
        }
        return values;
      }
      if (isRoot) {
        const textures = extractFromCache(meta2.textures);
        const images = extractFromCache(meta2.images);
        const nodes = extractFromCache(meta2.nodes);
        if (textures.length > 0) data.textures = textures;
        if (images.length > 0) data.images = images;
        if (nodes.length > 0) data.nodes = nodes;
      }
      return data;
    }
    /**
     * Copies the properties of the given node material to this instance.
     *
     * @param {NodeMaterial} source - The material to copy.
     * @return {NodeMaterial} A reference to this node material.
     */
    copy(source) {
      this.lightsNode = source.lightsNode;
      this.envNode = source.envNode;
      this.colorNode = source.colorNode;
      this.normalNode = source.normalNode;
      this.opacityNode = source.opacityNode;
      this.backdropNode = source.backdropNode;
      this.backdropAlphaNode = source.backdropAlphaNode;
      this.alphaTestNode = source.alphaTestNode;
      this.maskNode = source.maskNode;
      this.positionNode = source.positionNode;
      this.geometryNode = source.geometryNode;
      this.depthNode = source.depthNode;
      this.receivedShadowPositionNode = source.receivedShadowPositionNode;
      this.castShadowPositionNode = source.castShadowPositionNode;
      this.receivedShadowNode = source.receivedShadowNode;
      this.castShadowNode = source.castShadowNode;
      this.outputNode = source.outputNode;
      this.mrtNode = source.mrtNode;
      this.fragmentNode = source.fragmentNode;
      this.vertexNode = source.vertexNode;
      return super.copy(source);
    }
  };
  var _defaultValues$d = /* @__PURE__ */ new LineBasicMaterial();
  var LineBasicNodeMaterial = class extends NodeMaterial {
    static get type() {
      return "LineBasicNodeMaterial";
    }
    /**
     * Constructs a new line basic node material.
     *
     * @param {Object} [parameters] - The configuration parameter.
     */
    constructor(parameters) {
      super();
      this.isLineBasicNodeMaterial = true;
      this.setDefaultValues(_defaultValues$d);
      this.setValues(parameters);
    }
  };
  var _defaultValues$c = /* @__PURE__ */ new LineDashedMaterial();
  var LineDashedNodeMaterial = class extends NodeMaterial {
    static get type() {
      return "LineDashedNodeMaterial";
    }
    /**
     * Constructs a new line dashed node material.
     *
     * @param {Object} [parameters] - The configuration parameter.
     */
    constructor(parameters) {
      super();
      this.isLineDashedNodeMaterial = true;
      this.setDefaultValues(_defaultValues$c);
      this.dashOffset = 0;
      this.offsetNode = null;
      this.dashScaleNode = null;
      this.dashSizeNode = null;
      this.gapSizeNode = null;
      this.setValues(parameters);
    }
    /**
     * Setups the dash specific node variables.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    setupVariants() {
      const offsetNode = this.offsetNode ? float(this.offsetNode) : materialLineDashOffset;
      const dashScaleNode = this.dashScaleNode ? float(this.dashScaleNode) : materialLineScale;
      const dashSizeNode = this.dashSizeNode ? float(this.dashSizeNode) : materialLineDashSize;
      const gapSizeNode = this.gapSizeNode ? float(this.gapSizeNode) : materialLineGapSize;
      dashSize.assign(dashSizeNode);
      gapSize.assign(gapSizeNode);
      const vLineDistance = varying(attribute("lineDistance").mul(dashScaleNode));
      const vLineDistanceOffset = offsetNode ? vLineDistance.add(offsetNode) : vLineDistance;
      vLineDistanceOffset.mod(dashSize.add(gapSize)).greaterThan(dashSize).discard();
    }
  };
  var directionToColor = (node) => nodeObject(node).mul(0.5).add(0.5);
  var _defaultValues$a = /* @__PURE__ */ new MeshNormalMaterial();
  var MeshNormalNodeMaterial = class extends NodeMaterial {
    static get type() {
      return "MeshNormalNodeMaterial";
    }
    /**
     * Constructs a new mesh normal node material.
     *
     * @param {Object} [parameters] - The configuration parameter.
     */
    constructor(parameters) {
      super();
      this.isMeshNormalNodeMaterial = true;
      this.setDefaultValues(_defaultValues$a);
      this.setValues(parameters);
    }
    /**
     * Overwrites the default implementation by computing the diffuse color
     * based on the normal data.
     */
    setupDiffuseColor() {
      const opacityNode = this.opacityNode ? float(this.opacityNode) : materialOpacity;
      diffuseColor.assign(colorSpaceToWorking(vec4(directionToColor(transformedNormalView), opacityNode), SRGBColorSpace));
    }
  };
  var EquirectUVNode = class extends TempNode {
    static get type() {
      return "EquirectUVNode";
    }
    /**
     * Constructs a new equirect uv node.
     *
     * @param {Node<vec3>} [dirNode=positionWorldDirection] - A direction vector for sampling which is by default `positionWorldDirection`.
     */
    constructor(dirNode = positionWorldDirection) {
      super("vec2");
      this.dirNode = dirNode;
    }
    setup() {
      const dir = this.dirNode;
      const u = dir.z.atan(dir.x).mul(1 / (Math.PI * 2)).add(0.5);
      const v = dir.y.clamp(-1, 1).asin().mul(1 / Math.PI).add(0.5);
      return vec2(u, v);
    }
  };
  var equirectUV = /* @__PURE__ */ nodeProxy(EquirectUVNode).setParameterLength(0, 1);
  var CubeRenderTarget = class extends WebGLCubeRenderTarget {
    /**
     * Constructs a new cube render target.
     *
     * @param {number} [size=1] - The size of the render target.
     * @param {RenderTarget~Options} [options] - The configuration object.
     */
    constructor(size = 1, options = {}) {
      super(size, options);
      this.isCubeRenderTarget = true;
    }
    /**
     * Converts the given equirectangular texture to a cube map.
     *
     * @param {Renderer} renderer - The renderer.
     * @param {Texture} texture - The equirectangular texture.
     * @return {CubeRenderTarget} A reference to this cube render target.
     */
    fromEquirectangularTexture(renderer, texture$1) {
      const currentMinFilter = texture$1.minFilter;
      const currentGenerateMipmaps = texture$1.generateMipmaps;
      texture$1.generateMipmaps = true;
      this.texture.type = texture$1.type;
      this.texture.colorSpace = texture$1.colorSpace;
      this.texture.generateMipmaps = texture$1.generateMipmaps;
      this.texture.minFilter = texture$1.minFilter;
      this.texture.magFilter = texture$1.magFilter;
      const geometry = new BoxGeometry(5, 5, 5);
      const uvNode = equirectUV(positionWorldDirection);
      const material2 = new NodeMaterial();
      material2.colorNode = texture(texture$1, uvNode, 0);
      material2.side = BackSide;
      material2.blending = NoBlending;
      const mesh = new Mesh(geometry, material2);
      const scene = new Scene();
      scene.add(mesh);
      if (texture$1.minFilter === LinearMipmapLinearFilter) texture$1.minFilter = LinearFilter;
      const camera = new CubeCamera(1, 10, this);
      const currentMRT = renderer.getMRT();
      renderer.setMRT(null);
      camera.update(renderer, scene);
      renderer.setMRT(currentMRT);
      texture$1.minFilter = currentMinFilter;
      texture$1.currentGenerateMipmaps = currentGenerateMipmaps;
      mesh.geometry.dispose();
      mesh.material.dispose();
      return this;
    }
  };
  var _cache$1 = /* @__PURE__ */ new WeakMap();
  var CubeMapNode = class extends TempNode {
    static get type() {
      return "CubeMapNode";
    }
    /**
     * Constructs a new cube map node.
     *
     * @param {Node} envNode - The node representing the environment map.
     */
    constructor(envNode) {
      super("vec3");
      this.envNode = envNode;
      this._cubeTexture = null;
      this._cubeTextureNode = cubeTexture(null);
      const defaultTexture = new CubeTexture();
      defaultTexture.isRenderTargetTexture = true;
      this._defaultTexture = defaultTexture;
      this.updateBeforeType = NodeUpdateType.RENDER;
    }
    updateBefore(frame) {
      const { renderer, material: material2 } = frame;
      const envNode = this.envNode;
      if (envNode.isTextureNode || envNode.isMaterialReferenceNode) {
        const texture2 = envNode.isTextureNode ? envNode.value : material2[envNode.property];
        if (texture2 && texture2.isTexture) {
          const mapping = texture2.mapping;
          if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
            if (_cache$1.has(texture2)) {
              const cubeMap = _cache$1.get(texture2);
              mapTextureMapping(cubeMap, texture2.mapping);
              this._cubeTexture = cubeMap;
            } else {
              const image = texture2.image;
              if (isEquirectangularMapReady$1(image)) {
                const renderTarget = new CubeRenderTarget(image.height);
                renderTarget.fromEquirectangularTexture(renderer, texture2);
                mapTextureMapping(renderTarget.texture, texture2.mapping);
                this._cubeTexture = renderTarget.texture;
                _cache$1.set(texture2, renderTarget.texture);
                texture2.addEventListener("dispose", onTextureDispose);
              } else {
                this._cubeTexture = this._defaultTexture;
              }
            }
            this._cubeTextureNode.value = this._cubeTexture;
          } else {
            this._cubeTextureNode = this.envNode;
          }
        }
      }
    }
    setup(builder) {
      this.updateBefore(builder);
      return this._cubeTextureNode;
    }
  };
  function isEquirectangularMapReady$1(image) {
    if (image === null || image === void 0) return false;
    return image.height > 0;
  }
  function onTextureDispose(event) {
    const texture2 = event.target;
    texture2.removeEventListener("dispose", onTextureDispose);
    const renderTarget = _cache$1.get(texture2);
    if (renderTarget !== void 0) {
      _cache$1.delete(texture2);
      renderTarget.dispose();
    }
  }
  function mapTextureMapping(texture2, mapping) {
    if (mapping === EquirectangularReflectionMapping) {
      texture2.mapping = CubeReflectionMapping;
    } else if (mapping === EquirectangularRefractionMapping) {
      texture2.mapping = CubeRefractionMapping;
    }
  }
  var cubeMapNode = /* @__PURE__ */ nodeProxy(CubeMapNode).setParameterLength(1);
  var BasicEnvironmentNode = class extends LightingNode {
    static get type() {
      return "BasicEnvironmentNode";
    }
    /**
     * Constructs a new basic environment node.
     *
     * @param {Node} [envNode=null] - A node representing the environment.
     */
    constructor(envNode = null) {
      super();
      this.envNode = envNode;
    }
    setup(builder) {
      builder.context.environment = cubeMapNode(this.envNode);
    }
  };
  var BasicLightMapNode = class extends LightingNode {
    static get type() {
      return "BasicLightMapNode";
    }
    /**
     * Constructs a new basic light map node.
     *
     * @param {?Node<vec3>} [lightMapNode=null] - The light map node.
     */
    constructor(lightMapNode = null) {
      super();
      this.lightMapNode = lightMapNode;
    }
    setup(builder) {
      const RECIPROCAL_PI2 = float(1 / Math.PI);
      builder.context.irradianceLightMap = this.lightMapNode.mul(RECIPROCAL_PI2);
    }
  };
  var LightingModel = class {
    /**
     * This method is intended for setting up lighting model and context data
     * which are later used in the evaluation process.
     *
     * @abstract
     * @param {NodeBuilder} builder - The current node builder.
     */
    start(builder) {
      builder.lightsNode.setupLights(builder, builder.lightsNode.getLightNodes(builder));
      this.indirect(builder);
    }
    /**
     * This method is intended for executing final tasks like final updates
     * to the outgoing light.
     *
     * @abstract
     * @param {NodeBuilder} builder - The current node builder.
     */
    finish() {
    }
    /**
     * This method is intended for implementing the direct light term and
     * executed during the build process of directional, point and spot light nodes.
     *
     * @abstract
     * @param {Object} lightData - The light data.
     * @param {NodeBuilder} builder - The current node builder.
     */
    direct() {
    }
    /**
     * This method is intended for implementing the direct light term for
     * rect area light nodes.
     *
     * @abstract
     * @param {Object} lightData - The light data.
     * @param {NodeBuilder} builder - The current node builder.
     */
    directRectArea() {
    }
    /**
     * This method is intended for implementing the indirect light term.
     *
     * @abstract
     * @param {NodeBuilder} builder - The current node builder.
     */
    indirect() {
    }
    /**
     * This method is intended for implementing the ambient occlusion term.
     * Unlike other methods, this method must be called manually by the lighting
     * model in its indirect term.
     *
     * @abstract
     * @param {NodeBuilder} builder - The current node builder.
     */
    ambientOcclusion() {
    }
  };
  var BasicLightingModel = class extends LightingModel {
    /**
     * Constructs a new basic lighting model.
     */
    constructor() {
      super();
    }
    /**
     * Implements the baked indirect lighting with its modulation.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    indirect({ context: context2 }) {
      const ambientOcclusion = context2.ambientOcclusion;
      const reflectedLight = context2.reflectedLight;
      const irradianceLightMap = context2.irradianceLightMap;
      reflectedLight.indirectDiffuse.assign(vec4(0));
      if (irradianceLightMap) {
        reflectedLight.indirectDiffuse.addAssign(irradianceLightMap);
      } else {
        reflectedLight.indirectDiffuse.addAssign(vec4(1, 1, 1, 0));
      }
      reflectedLight.indirectDiffuse.mulAssign(ambientOcclusion);
      reflectedLight.indirectDiffuse.mulAssign(diffuseColor.rgb);
    }
    /**
     * Implements the environment mapping.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    finish(builder) {
      const { material: material2, context: context2 } = builder;
      const outgoingLight = context2.outgoingLight;
      const envNode = builder.context.environment;
      if (envNode) {
        switch (material2.combine) {
          case MultiplyOperation:
            outgoingLight.rgb.assign(mix(outgoingLight.rgb, outgoingLight.rgb.mul(envNode.rgb), materialSpecularStrength.mul(materialReflectivity)));
            break;
          case MixOperation:
            outgoingLight.rgb.assign(mix(outgoingLight.rgb, envNode.rgb, materialSpecularStrength.mul(materialReflectivity)));
            break;
          case AddOperation:
            outgoingLight.rgb.addAssign(envNode.rgb.mul(materialSpecularStrength.mul(materialReflectivity)));
            break;
          default:
            console.warn("THREE.BasicLightingModel: Unsupported .combine value:", material2.combine);
            break;
        }
      }
    }
  };
  var _defaultValues$9 = /* @__PURE__ */ new MeshBasicMaterial();
  var MeshBasicNodeMaterial = class extends NodeMaterial {
    static get type() {
      return "MeshBasicNodeMaterial";
    }
    /**
     * Constructs a new mesh basic node material.
     *
     * @param {Object} [parameters] - The configuration parameter.
     */
    constructor(parameters) {
      super();
      this.isMeshBasicNodeMaterial = true;
      this.lights = true;
      this.setDefaultValues(_defaultValues$9);
      this.setValues(parameters);
    }
    /**
     * Basic materials are not affected by normal and bump maps so we
     * return by default {@link normalView}.
     *
     * @return {Node<vec3>} The normal node.
     */
    setupNormal() {
      return normalView;
    }
    /**
     * Overwritten since this type of material uses {@link BasicEnvironmentNode}
     * to implement the default environment mapping.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {?BasicEnvironmentNode<vec3>} The environment node.
     */
    setupEnvironment(builder) {
      const envNode = super.setupEnvironment(builder);
      return envNode ? new BasicEnvironmentNode(envNode) : null;
    }
    /**
     * This method must be overwritten since light maps are evaluated
     * with a special scaling factor for basic materials.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {?BasicLightMapNode<vec3>} The light map node.
     */
    setupLightMap(builder) {
      let node = null;
      if (builder.material.lightMap) {
        node = new BasicLightMapNode(materialLightMap);
      }
      return node;
    }
    /**
     * The material overwrites this method because `lights` is set to `true` but
     * we still want to return the diffuse color as the outgoing light.
     *
     * @return {Node<vec3>} The outgoing light node.
     */
    setupOutgoingLight() {
      return diffuseColor.rgb;
    }
    /**
     * Setups the lighting model.
     *
     * @return {BasicLightingModel} The lighting model.
     */
    setupLightingModel() {
      return new BasicLightingModel();
    }
  };
  var F_Schlick = /* @__PURE__ */ Fn(({ f0, f90, dotVH }) => {
    const fresnel = dotVH.mul(-5.55473).sub(6.98316).mul(dotVH).exp2();
    return f0.mul(fresnel.oneMinus()).add(f90.mul(fresnel));
  });
  var BRDF_Lambert = /* @__PURE__ */ Fn((inputs) => {
    return inputs.diffuseColor.mul(1 / Math.PI);
  });
  var G_BlinnPhong_Implicit = () => float(0.25);
  var D_BlinnPhong = /* @__PURE__ */ Fn(({ dotNH }) => {
    return shininess.mul(float(0.5)).add(1).mul(float(1 / Math.PI)).mul(dotNH.pow(shininess));
  });
  var BRDF_BlinnPhong = /* @__PURE__ */ Fn(({ lightDirection }) => {
    const halfDir = lightDirection.add(positionViewDirection).normalize();
    const dotNH = transformedNormalView.dot(halfDir).clamp();
    const dotVH = positionViewDirection.dot(halfDir).clamp();
    const F = F_Schlick({ f0: specularColor, f90: 1, dotVH });
    const G = G_BlinnPhong_Implicit();
    const D = D_BlinnPhong({ dotNH });
    return F.mul(G).mul(D);
  });
  var PhongLightingModel = class extends BasicLightingModel {
    /**
     * Constructs a new phong lighting model.
     *
     * @param {boolean} [specular=true] - Whether specular is supported or not.
     */
    constructor(specular = true) {
      super();
      this.specular = specular;
    }
    /**
     * Implements the direct lighting. The specular portion is optional an can be controlled
     * with the {@link PhongLightingModel#specular} flag.
     *
     * @param {Object} lightData - The light data.
     */
    direct({ lightDirection, lightColor, reflectedLight }) {
      const dotNL = transformedNormalView.dot(lightDirection).clamp();
      const irradiance = dotNL.mul(lightColor);
      reflectedLight.directDiffuse.addAssign(irradiance.mul(BRDF_Lambert({ diffuseColor: diffuseColor.rgb })));
      if (this.specular === true) {
        reflectedLight.directSpecular.addAssign(irradiance.mul(BRDF_BlinnPhong({ lightDirection })).mul(materialSpecularStrength));
      }
    }
    /**
     * Implements the indirect lighting.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    indirect(builder) {
      const { ambientOcclusion, irradiance, reflectedLight } = builder.context;
      reflectedLight.indirectDiffuse.addAssign(irradiance.mul(BRDF_Lambert({ diffuseColor })));
      reflectedLight.indirectDiffuse.mulAssign(ambientOcclusion);
    }
  };
  var _defaultValues$8 = /* @__PURE__ */ new MeshLambertMaterial();
  var MeshLambertNodeMaterial = class extends NodeMaterial {
    static get type() {
      return "MeshLambertNodeMaterial";
    }
    /**
     * Constructs a new mesh lambert node material.
     *
     * @param {Object} [parameters] - The configuration parameter.
     */
    constructor(parameters) {
      super();
      this.isMeshLambertNodeMaterial = true;
      this.lights = true;
      this.setDefaultValues(_defaultValues$8);
      this.setValues(parameters);
    }
    /**
     * Overwritten since this type of material uses {@link BasicEnvironmentNode}
     * to implement the default environment mapping.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {?BasicEnvironmentNode<vec3>} The environment node.
     */
    setupEnvironment(builder) {
      const envNode = super.setupEnvironment(builder);
      return envNode ? new BasicEnvironmentNode(envNode) : null;
    }
    /**
     * Setups the lighting model.
     *
     * @return {PhongLightingModel} The lighting model.
     */
    setupLightingModel() {
      return new PhongLightingModel(false);
    }
  };
  var _defaultValues$7 = /* @__PURE__ */ new MeshPhongMaterial();
  var MeshPhongNodeMaterial = class extends NodeMaterial {
    static get type() {
      return "MeshPhongNodeMaterial";
    }
    /**
     * Constructs a new mesh lambert node material.
     *
     * @param {Object} [parameters] - The configuration parameter.
     */
    constructor(parameters) {
      super();
      this.isMeshPhongNodeMaterial = true;
      this.lights = true;
      this.shininessNode = null;
      this.specularNode = null;
      this.setDefaultValues(_defaultValues$7);
      this.setValues(parameters);
    }
    /**
     * Overwritten since this type of material uses {@link BasicEnvironmentNode}
     * to implement the default environment mapping.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {?BasicEnvironmentNode<vec3>} The environment node.
     */
    setupEnvironment(builder) {
      const envNode = super.setupEnvironment(builder);
      return envNode ? new BasicEnvironmentNode(envNode) : null;
    }
    /**
     * Setups the lighting model.
     *
     * @return {PhongLightingModel} The lighting model.
     */
    setupLightingModel() {
      return new PhongLightingModel();
    }
    /**
     * Setups the phong specific node variables.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    setupVariants() {
      const shininessNode = (this.shininessNode ? float(this.shininessNode) : materialShininess).max(1e-4);
      shininess.assign(shininessNode);
      const specularNode = this.specularNode || materialSpecular;
      specularColor.assign(specularNode);
    }
    copy(source) {
      this.shininessNode = source.shininessNode;
      this.specularNode = source.specularNode;
      return super.copy(source);
    }
  };
  var getGeometryRoughness = /* @__PURE__ */ Fn((builder) => {
    if (builder.geometry.hasAttribute("normal") === false) {
      return float(0);
    }
    const dxy = normalView.dFdx().abs().max(normalView.dFdy().abs());
    const geometryRoughness = dxy.x.max(dxy.y).max(dxy.z);
    return geometryRoughness;
  });
  var getRoughness = /* @__PURE__ */ Fn((inputs) => {
    const { roughness: roughness2 } = inputs;
    const geometryRoughness = getGeometryRoughness();
    let roughnessFactor = roughness2.max(0.0525);
    roughnessFactor = roughnessFactor.add(geometryRoughness);
    roughnessFactor = roughnessFactor.min(1);
    return roughnessFactor;
  });
  var V_GGX_SmithCorrelated = /* @__PURE__ */ Fn(({ alpha, dotNL, dotNV }) => {
    const a2 = alpha.pow2();
    const gv = dotNL.mul(a2.add(a2.oneMinus().mul(dotNV.pow2())).sqrt());
    const gl = dotNV.mul(a2.add(a2.oneMinus().mul(dotNL.pow2())).sqrt());
    return div(0.5, gv.add(gl).max(EPSILON));
  }).setLayout({
    name: "V_GGX_SmithCorrelated",
    type: "float",
    inputs: [
      { name: "alpha", type: "float" },
      { name: "dotNL", type: "float" },
      { name: "dotNV", type: "float" }
    ]
  });
  var V_GGX_SmithCorrelated_Anisotropic = /* @__PURE__ */ Fn(({ alphaT: alphaT2, alphaB, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL }) => {
    const gv = dotNL.mul(vec3(alphaT2.mul(dotTV), alphaB.mul(dotBV), dotNV).length());
    const gl = dotNV.mul(vec3(alphaT2.mul(dotTL), alphaB.mul(dotBL), dotNL).length());
    const v = div(0.5, gv.add(gl));
    return v.saturate();
  }).setLayout({
    name: "V_GGX_SmithCorrelated_Anisotropic",
    type: "float",
    inputs: [
      { name: "alphaT", type: "float", qualifier: "in" },
      { name: "alphaB", type: "float", qualifier: "in" },
      { name: "dotTV", type: "float", qualifier: "in" },
      { name: "dotBV", type: "float", qualifier: "in" },
      { name: "dotTL", type: "float", qualifier: "in" },
      { name: "dotBL", type: "float", qualifier: "in" },
      { name: "dotNV", type: "float", qualifier: "in" },
      { name: "dotNL", type: "float", qualifier: "in" }
    ]
  });
  var D_GGX = /* @__PURE__ */ Fn(({ alpha, dotNH }) => {
    const a2 = alpha.pow2();
    const denom = dotNH.pow2().mul(a2.oneMinus()).oneMinus();
    return a2.div(denom.pow2()).mul(1 / Math.PI);
  }).setLayout({
    name: "D_GGX",
    type: "float",
    inputs: [
      { name: "alpha", type: "float" },
      { name: "dotNH", type: "float" }
    ]
  });
  var RECIPROCAL_PI = /* @__PURE__ */ float(1 / Math.PI);
  var D_GGX_Anisotropic = /* @__PURE__ */ Fn(({ alphaT: alphaT2, alphaB, dotNH, dotTH, dotBH }) => {
    const a2 = alphaT2.mul(alphaB);
    const v = vec3(alphaB.mul(dotTH), alphaT2.mul(dotBH), a2.mul(dotNH));
    const v2 = v.dot(v);
    const w22 = a2.div(v2);
    return RECIPROCAL_PI.mul(a2.mul(w22.pow2()));
  }).setLayout({
    name: "D_GGX_Anisotropic",
    type: "float",
    inputs: [
      { name: "alphaT", type: "float", qualifier: "in" },
      { name: "alphaB", type: "float", qualifier: "in" },
      { name: "dotNH", type: "float", qualifier: "in" },
      { name: "dotTH", type: "float", qualifier: "in" },
      { name: "dotBH", type: "float", qualifier: "in" }
    ]
  });
  var BRDF_GGX = /* @__PURE__ */ Fn((inputs) => {
    const { lightDirection, f0, f90, roughness: roughness2, f, USE_IRIDESCENCE, USE_ANISOTROPY } = inputs;
    const normalView2 = inputs.normalView || transformedNormalView;
    const alpha = roughness2.pow2();
    const halfDir = lightDirection.add(positionViewDirection).normalize();
    const dotNL = normalView2.dot(lightDirection).clamp();
    const dotNV = normalView2.dot(positionViewDirection).clamp();
    const dotNH = normalView2.dot(halfDir).clamp();
    const dotVH = positionViewDirection.dot(halfDir).clamp();
    let F = F_Schlick({ f0, f90, dotVH });
    let V, D;
    if (defined(USE_IRIDESCENCE)) {
      F = iridescence.mix(F, f);
    }
    if (defined(USE_ANISOTROPY)) {
      const dotTL = anisotropyT.dot(lightDirection);
      const dotTV = anisotropyT.dot(positionViewDirection);
      const dotTH = anisotropyT.dot(halfDir);
      const dotBL = anisotropyB.dot(lightDirection);
      const dotBV = anisotropyB.dot(positionViewDirection);
      const dotBH = anisotropyB.dot(halfDir);
      V = V_GGX_SmithCorrelated_Anisotropic({ alphaT, alphaB: alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL });
      D = D_GGX_Anisotropic({ alphaT, alphaB: alpha, dotNH, dotTH, dotBH });
    } else {
      V = V_GGX_SmithCorrelated({ alpha, dotNL, dotNV });
      D = D_GGX({ alpha, dotNH });
    }
    return F.mul(V).mul(D);
  });
  var DFGApprox = /* @__PURE__ */ Fn(({ roughness: roughness2, dotNV }) => {
    const c0 = vec4(-1, -0.0275, -0.572, 0.022);
    const c1 = vec4(1, 0.0425, 1.04, -0.04);
    const r = roughness2.mul(c0).add(c1);
    const a004 = r.x.mul(r.x).min(dotNV.mul(-9.28).exp2()).mul(r.x).add(r.y);
    const fab = vec2(-1.04, 1.04).mul(a004).add(r.zw);
    return fab;
  }).setLayout({
    name: "DFGApprox",
    type: "vec2",
    inputs: [
      { name: "roughness", type: "float" },
      { name: "dotNV", type: "vec3" }
    ]
  });
  var EnvironmentBRDF = /* @__PURE__ */ Fn((inputs) => {
    const { dotNV, specularColor: specularColor2, specularF90: specularF902, roughness: roughness2 } = inputs;
    const fab = DFGApprox({ dotNV, roughness: roughness2 });
    return specularColor2.mul(fab.x).add(specularF902.mul(fab.y));
  });
  var Schlick_to_F0 = /* @__PURE__ */ Fn(({ f, f90, dotVH }) => {
    const x = dotVH.oneMinus().saturate();
    const x2 = x.mul(x);
    const x5 = x.mul(x2, x2).clamp(0, 0.9999);
    return f.sub(vec3(f90).mul(x5)).div(x5.oneMinus());
  }).setLayout({
    name: "Schlick_to_F0",
    type: "vec3",
    inputs: [
      { name: "f", type: "vec3" },
      { name: "f90", type: "float" },
      { name: "dotVH", type: "float" }
    ]
  });
  var D_Charlie = /* @__PURE__ */ Fn(({ roughness: roughness2, dotNH }) => {
    const alpha = roughness2.pow2();
    const invAlpha = float(1).div(alpha);
    const cos2h = dotNH.pow2();
    const sin2h = cos2h.oneMinus().max(78125e-7);
    return float(2).add(invAlpha).mul(sin2h.pow(invAlpha.mul(0.5))).div(2 * Math.PI);
  }).setLayout({
    name: "D_Charlie",
    type: "float",
    inputs: [
      { name: "roughness", type: "float" },
      { name: "dotNH", type: "float" }
    ]
  });
  var V_Neubelt = /* @__PURE__ */ Fn(({ dotNV, dotNL }) => {
    return float(1).div(float(4).mul(dotNL.add(dotNV).sub(dotNL.mul(dotNV))));
  }).setLayout({
    name: "V_Neubelt",
    type: "float",
    inputs: [
      { name: "dotNV", type: "float" },
      { name: "dotNL", type: "float" }
    ]
  });
  var BRDF_Sheen = /* @__PURE__ */ Fn(({ lightDirection }) => {
    const halfDir = lightDirection.add(positionViewDirection).normalize();
    const dotNL = transformedNormalView.dot(lightDirection).clamp();
    const dotNV = transformedNormalView.dot(positionViewDirection).clamp();
    const dotNH = transformedNormalView.dot(halfDir).clamp();
    const D = D_Charlie({ roughness: sheenRoughness, dotNH });
    const V = V_Neubelt({ dotNV, dotNL });
    return sheen.mul(D).mul(V);
  });
  var LTC_Uv = /* @__PURE__ */ Fn(({ N, V, roughness: roughness2 }) => {
    const LUT_SIZE = 64;
    const LUT_SCALE = (LUT_SIZE - 1) / LUT_SIZE;
    const LUT_BIAS = 0.5 / LUT_SIZE;
    const dotNV = N.dot(V).saturate();
    const uv2 = vec2(roughness2, dotNV.oneMinus().sqrt());
    uv2.assign(uv2.mul(LUT_SCALE).add(LUT_BIAS));
    return uv2;
  }).setLayout({
    name: "LTC_Uv",
    type: "vec2",
    inputs: [
      { name: "N", type: "vec3" },
      { name: "V", type: "vec3" },
      { name: "roughness", type: "float" }
    ]
  });
  var LTC_ClippedSphereFormFactor = /* @__PURE__ */ Fn(({ f }) => {
    const l = f.length();
    return max$1(l.mul(l).add(f.z).div(l.add(1)), 0);
  }).setLayout({
    name: "LTC_ClippedSphereFormFactor",
    type: "float",
    inputs: [
      { name: "f", type: "vec3" }
    ]
  });
  var LTC_EdgeVectorFormFactor = /* @__PURE__ */ Fn(({ v1, v2 }) => {
    const x = v1.dot(v2);
    const y = x.abs().toVar();
    const a = y.mul(0.0145206).add(0.4965155).mul(y).add(0.8543985).toVar();
    const b = y.add(4.1616724).mul(y).add(3.417594).toVar();
    const v = a.div(b);
    const theta_sintheta = x.greaterThan(0).select(v, max$1(x.mul(x).oneMinus(), 1e-7).inverseSqrt().mul(0.5).sub(v));
    return v1.cross(v2).mul(theta_sintheta);
  }).setLayout({
    name: "LTC_EdgeVectorFormFactor",
    type: "vec3",
    inputs: [
      { name: "v1", type: "vec3" },
      { name: "v2", type: "vec3" }
    ]
  });
  var LTC_Evaluate = /* @__PURE__ */ Fn(({ N, V, P, mInv, p0, p1, p2, p3 }) => {
    const v1 = p1.sub(p0).toVar();
    const v2 = p3.sub(p0).toVar();
    const lightNormal = v1.cross(v2);
    const result = vec3().toVar();
    If(lightNormal.dot(P.sub(p0)).greaterThanEqual(0), () => {
      const T1 = V.sub(N.mul(V.dot(N))).normalize();
      const T2 = N.cross(T1).negate();
      const mat = mInv.mul(mat3(T1, T2, N).transpose()).toVar();
      const coords0 = mat.mul(p0.sub(P)).normalize().toVar();
      const coords1 = mat.mul(p1.sub(P)).normalize().toVar();
      const coords2 = mat.mul(p2.sub(P)).normalize().toVar();
      const coords3 = mat.mul(p3.sub(P)).normalize().toVar();
      const vectorFormFactor = vec3(0).toVar();
      vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({ v1: coords0, v2: coords1 }));
      vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({ v1: coords1, v2: coords2 }));
      vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({ v1: coords2, v2: coords3 }));
      vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({ v1: coords3, v2: coords0 }));
      result.assign(vec3(LTC_ClippedSphereFormFactor({ f: vectorFormFactor })));
    });
    return result;
  }).setLayout({
    name: "LTC_Evaluate",
    type: "vec3",
    inputs: [
      { name: "N", type: "vec3" },
      { name: "V", type: "vec3" },
      { name: "P", type: "vec3" },
      { name: "mInv", type: "mat3" },
      { name: "p0", type: "vec3" },
      { name: "p1", type: "vec3" },
      { name: "p2", type: "vec3" },
      { name: "p3", type: "vec3" }
    ]
  });
  var bC = 1 / 6;
  var w0 = (a) => mul(bC, mul(a, mul(a, a.negate().add(3)).sub(3)).add(1));
  var w1 = (a) => mul(bC, mul(a, mul(a, mul(3, a).sub(6))).add(4));
  var w2 = (a) => mul(bC, mul(a, mul(a, mul(-3, a).add(3)).add(3)).add(1));
  var w3 = (a) => mul(bC, pow(a, 3));
  var g0 = (a) => w0(a).add(w1(a));
  var g1 = (a) => w2(a).add(w3(a));
  var h0 = (a) => add2(-1, w1(a).div(w0(a).add(w1(a))));
  var h1 = (a) => add2(1, w3(a).div(w2(a).add(w3(a))));
  var bicubic = (textureNode, texelSize, lod) => {
    const uv2 = textureNode.uvNode;
    const uvScaled = mul(uv2, texelSize.zw).add(0.5);
    const iuv = floor(uvScaled);
    const fuv = fract(uvScaled);
    const g0x = g0(fuv.x);
    const g1x = g1(fuv.x);
    const h0x = h0(fuv.x);
    const h1x = h1(fuv.x);
    const h0y = h0(fuv.y);
    const h1y = h1(fuv.y);
    const p0 = vec2(iuv.x.add(h0x), iuv.y.add(h0y)).sub(0.5).mul(texelSize.xy);
    const p1 = vec2(iuv.x.add(h1x), iuv.y.add(h0y)).sub(0.5).mul(texelSize.xy);
    const p2 = vec2(iuv.x.add(h0x), iuv.y.add(h1y)).sub(0.5).mul(texelSize.xy);
    const p3 = vec2(iuv.x.add(h1x), iuv.y.add(h1y)).sub(0.5).mul(texelSize.xy);
    const a = g0(fuv.y).mul(add2(g0x.mul(textureNode.sample(p0).level(lod)), g1x.mul(textureNode.sample(p1).level(lod))));
    const b = g1(fuv.y).mul(add2(g0x.mul(textureNode.sample(p2).level(lod)), g1x.mul(textureNode.sample(p3).level(lod))));
    return a.add(b);
  };
  var textureBicubic = /* @__PURE__ */ Fn(([textureNode, lodNode = float(3)]) => {
    const fLodSize = vec2(textureNode.size(int(lodNode)));
    const cLodSize = vec2(textureNode.size(int(lodNode.add(1))));
    const fLodSizeInv = div(1, fLodSize);
    const cLodSizeInv = div(1, cLodSize);
    const fSample = bicubic(textureNode, vec4(fLodSizeInv, fLodSize), floor(lodNode));
    const cSample = bicubic(textureNode, vec4(cLodSizeInv, cLodSize), ceil(lodNode));
    return fract(lodNode).mix(fSample, cSample);
  });
  var getVolumeTransmissionRay = /* @__PURE__ */ Fn(([n, v, thickness2, ior2, modelMatrix]) => {
    const refractionVector = vec3(refract(v.negate(), normalize2(n), div(1, ior2)));
    const modelScale2 = vec3(
      length(modelMatrix[0].xyz),
      length(modelMatrix[1].xyz),
      length(modelMatrix[2].xyz)
    );
    return normalize2(refractionVector).mul(thickness2.mul(modelScale2));
  }).setLayout({
    name: "getVolumeTransmissionRay",
    type: "vec3",
    inputs: [
      { name: "n", type: "vec3" },
      { name: "v", type: "vec3" },
      { name: "thickness", type: "float" },
      { name: "ior", type: "float" },
      { name: "modelMatrix", type: "mat4" }
    ]
  });
  var applyIorToRoughness = /* @__PURE__ */ Fn(([roughness2, ior2]) => {
    return roughness2.mul(clamp2(ior2.mul(2).sub(2), 0, 1));
  }).setLayout({
    name: "applyIorToRoughness",
    type: "float",
    inputs: [
      { name: "roughness", type: "float" },
      { name: "ior", type: "float" }
    ]
  });
  var viewportBackSideTexture = /* @__PURE__ */ viewportMipTexture();
  var viewportFrontSideTexture = /* @__PURE__ */ viewportMipTexture();
  var getTransmissionSample = /* @__PURE__ */ Fn(([fragCoord, roughness2, ior2], { material: material2 }) => {
    const vTexture = material2.side === BackSide ? viewportBackSideTexture : viewportFrontSideTexture;
    const transmissionSample = vTexture.sample(fragCoord);
    const lod = log2(screenSize.x).mul(applyIorToRoughness(roughness2, ior2));
    return textureBicubic(transmissionSample, lod);
  });
  var volumeAttenuation = /* @__PURE__ */ Fn(([transmissionDistance, attenuationColor2, attenuationDistance2]) => {
    If(attenuationDistance2.notEqual(0), () => {
      const attenuationCoefficient = log(attenuationColor2).negate().div(attenuationDistance2);
      const transmittance = exp(attenuationCoefficient.negate().mul(transmissionDistance));
      return transmittance;
    });
    return vec3(1);
  }).setLayout({
    name: "volumeAttenuation",
    type: "vec3",
    inputs: [
      { name: "transmissionDistance", type: "float" },
      { name: "attenuationColor", type: "vec3" },
      { name: "attenuationDistance", type: "float" }
    ]
  });
  var getIBLVolumeRefraction = /* @__PURE__ */ Fn(([n, v, roughness2, diffuseColor2, specularColor2, specularF902, position, modelMatrix, viewMatrix, projMatrix, ior2, thickness2, attenuationColor2, attenuationDistance2, dispersion2]) => {
    let transmittedLight, transmittance;
    if (dispersion2) {
      transmittedLight = vec4().toVar();
      transmittance = vec3().toVar();
      const halfSpread = ior2.sub(1).mul(dispersion2.mul(0.025));
      const iors = vec3(ior2.sub(halfSpread), ior2, ior2.add(halfSpread));
      Loop({ start: 0, end: 3 }, ({ i }) => {
        const ior3 = iors.element(i);
        const transmissionRay = getVolumeTransmissionRay(n, v, thickness2, ior3, modelMatrix);
        const refractedRayExit = position.add(transmissionRay);
        const ndcPos = projMatrix.mul(viewMatrix.mul(vec4(refractedRayExit, 1)));
        const refractionCoords = vec2(ndcPos.xy.div(ndcPos.w)).toVar();
        refractionCoords.addAssign(1);
        refractionCoords.divAssign(2);
        refractionCoords.assign(vec2(refractionCoords.x, refractionCoords.y.oneMinus()));
        const transmissionSample = getTransmissionSample(refractionCoords, roughness2, ior3);
        transmittedLight.element(i).assign(transmissionSample.element(i));
        transmittedLight.a.addAssign(transmissionSample.a);
        transmittance.element(i).assign(diffuseColor2.element(i).mul(volumeAttenuation(length(transmissionRay), attenuationColor2, attenuationDistance2).element(i)));
      });
      transmittedLight.a.divAssign(3);
    } else {
      const transmissionRay = getVolumeTransmissionRay(n, v, thickness2, ior2, modelMatrix);
      const refractedRayExit = position.add(transmissionRay);
      const ndcPos = projMatrix.mul(viewMatrix.mul(vec4(refractedRayExit, 1)));
      const refractionCoords = vec2(ndcPos.xy.div(ndcPos.w)).toVar();
      refractionCoords.addAssign(1);
      refractionCoords.divAssign(2);
      refractionCoords.assign(vec2(refractionCoords.x, refractionCoords.y.oneMinus()));
      transmittedLight = getTransmissionSample(refractionCoords, roughness2, ior2);
      transmittance = diffuseColor2.mul(volumeAttenuation(length(transmissionRay), attenuationColor2, attenuationDistance2));
    }
    const attenuatedColor = transmittance.rgb.mul(transmittedLight.rgb);
    const dotNV = n.dot(v).clamp();
    const F = vec3(EnvironmentBRDF({
      // n, v, specularColor, specularF90, roughness
      dotNV,
      specularColor: specularColor2,
      specularF90: specularF902,
      roughness: roughness2
    }));
    const transmittanceFactor = transmittance.r.add(transmittance.g, transmittance.b).div(3);
    return vec4(F.oneMinus().mul(attenuatedColor), transmittedLight.a.oneMinus().mul(transmittanceFactor).oneMinus());
  });
  var XYZ_TO_REC709 = /* @__PURE__ */ mat3(
    3.2404542,
    -0.969266,
    0.0556434,
    -1.5371385,
    1.8760108,
    -0.2040259,
    -0.4985314,
    0.041556,
    1.0572252
  );
  var Fresnel0ToIor = (fresnel0) => {
    const sqrtF0 = fresnel0.sqrt();
    return vec3(1).add(sqrtF0).div(vec3(1).sub(sqrtF0));
  };
  var IorToFresnel0 = (transmittedIor, incidentIor) => {
    return transmittedIor.sub(incidentIor).div(transmittedIor.add(incidentIor)).pow2();
  };
  var evalSensitivity = (OPD, shift2) => {
    const phase = OPD.mul(2 * Math.PI * 1e-9);
    const val = vec3(54856e-17, 44201e-17, 52481e-17);
    const pos = vec3(1681e3, 1795300, 2208400);
    const VAR = vec3(43278e5, 93046e5, 66121e5);
    const x = float(9747e-17 * Math.sqrt(2 * Math.PI * 45282e5)).mul(phase.mul(2239900).add(shift2.x).cos()).mul(phase.pow2().mul(-45282e5).exp());
    let xyz = val.mul(VAR.mul(2 * Math.PI).sqrt()).mul(pos.mul(phase).add(shift2).cos()).mul(phase.pow2().negate().mul(VAR).exp());
    xyz = vec3(xyz.x.add(x), xyz.y, xyz.z).div(10685e-11);
    const rgb = XYZ_TO_REC709.mul(xyz);
    return rgb;
  };
  var evalIridescence = /* @__PURE__ */ Fn(({ outsideIOR, eta2, cosTheta1, thinFilmThickness, baseF0 }) => {
    const iridescenceIOR2 = mix(outsideIOR, eta2, smoothstep2(0, 0.03, thinFilmThickness));
    const sinTheta2Sq = outsideIOR.div(iridescenceIOR2).pow2().mul(cosTheta1.pow2().oneMinus());
    const cosTheta2Sq = sinTheta2Sq.oneMinus();
    If(cosTheta2Sq.lessThan(0), () => {
      return vec3(1);
    });
    const cosTheta2 = cosTheta2Sq.sqrt();
    const R0 = IorToFresnel0(iridescenceIOR2, outsideIOR);
    const R12 = F_Schlick({ f0: R0, f90: 1, dotVH: cosTheta1 });
    const T121 = R12.oneMinus();
    const phi12 = iridescenceIOR2.lessThan(outsideIOR).select(Math.PI, 0);
    const phi21 = float(Math.PI).sub(phi12);
    const baseIOR = Fresnel0ToIor(baseF0.clamp(0, 0.9999));
    const R1 = IorToFresnel0(baseIOR, iridescenceIOR2.toVec3());
    const R23 = F_Schlick({ f0: R1, f90: 1, dotVH: cosTheta2 });
    const phi23 = vec3(
      baseIOR.x.lessThan(iridescenceIOR2).select(Math.PI, 0),
      baseIOR.y.lessThan(iridescenceIOR2).select(Math.PI, 0),
      baseIOR.z.lessThan(iridescenceIOR2).select(Math.PI, 0)
    );
    const OPD = iridescenceIOR2.mul(thinFilmThickness, cosTheta2, 2);
    const phi = vec3(phi21).add(phi23);
    const R123 = R12.mul(R23).clamp(1e-5, 0.9999);
    const r123 = R123.sqrt();
    const Rs = T121.pow2().mul(R23).div(vec3(1).sub(R123));
    const C0 = R12.add(Rs);
    const I = C0.toVar();
    const Cm = Rs.sub(T121).toVar();
    Loop({ start: 1, end: 2, condition: "<=", name: "m" }, ({ m }) => {
      Cm.mulAssign(r123);
      const Sm = evalSensitivity(float(m).mul(OPD), float(m).mul(phi)).mul(2);
      I.addAssign(Cm.mul(Sm));
    });
    return I.max(vec3(0));
  }).setLayout({
    name: "evalIridescence",
    type: "vec3",
    inputs: [
      { name: "outsideIOR", type: "float" },
      { name: "eta2", type: "float" },
      { name: "cosTheta1", type: "float" },
      { name: "thinFilmThickness", type: "float" },
      { name: "baseF0", type: "vec3" }
    ]
  });
  var IBLSheenBRDF = /* @__PURE__ */ Fn(({ normal: normal2, viewDir, roughness: roughness2 }) => {
    const dotNV = normal2.dot(viewDir).saturate();
    const r2 = roughness2.pow2();
    const a = select(
      roughness2.lessThan(0.25),
      float(-339.2).mul(r2).add(float(161.4).mul(roughness2)).sub(25.9),
      float(-8.48).mul(r2).add(float(14.3).mul(roughness2)).sub(9.95)
    );
    const b = select(
      roughness2.lessThan(0.25),
      float(44).mul(r2).sub(float(23.7).mul(roughness2)).add(3.26),
      float(1.97).mul(r2).sub(float(3.27).mul(roughness2)).add(0.72)
    );
    const DG = select(roughness2.lessThan(0.25), 0, float(0.1).mul(roughness2).sub(0.025)).add(a.mul(dotNV).add(b).exp());
    return DG.mul(1 / Math.PI).saturate();
  });
  var clearcoatF0 = vec3(0.04);
  var clearcoatF90 = float(1);
  var PhysicalLightingModel = class extends LightingModel {
    /**
     * Constructs a new physical lighting model.
     *
     * @param {boolean} [clearcoat=false] - Whether clearcoat is supported or not.
     * @param {boolean} [sheen=false] - Whether sheen is supported or not.
     * @param {boolean} [iridescence=false] - Whether iridescence is supported or not.
     * @param {boolean} [anisotropy=false] - Whether anisotropy is supported or not.
     * @param {boolean} [transmission=false] - Whether transmission is supported or not.
     * @param {boolean} [dispersion=false] - Whether dispersion is supported or not.
     */
    constructor(clearcoat2 = false, sheen2 = false, iridescence2 = false, anisotropy2 = false, transmission2 = false, dispersion2 = false) {
      super();
      this.clearcoat = clearcoat2;
      this.sheen = sheen2;
      this.iridescence = iridescence2;
      this.anisotropy = anisotropy2;
      this.transmission = transmission2;
      this.dispersion = dispersion2;
      this.clearcoatRadiance = null;
      this.clearcoatSpecularDirect = null;
      this.clearcoatSpecularIndirect = null;
      this.sheenSpecularDirect = null;
      this.sheenSpecularIndirect = null;
      this.iridescenceFresnel = null;
      this.iridescenceF0 = null;
    }
    /**
     * Depending on what features are requested, the method prepares certain node variables
     * which are later used for lighting computations.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    start(builder) {
      if (this.clearcoat === true) {
        this.clearcoatRadiance = vec3().toVar("clearcoatRadiance");
        this.clearcoatSpecularDirect = vec3().toVar("clearcoatSpecularDirect");
        this.clearcoatSpecularIndirect = vec3().toVar("clearcoatSpecularIndirect");
      }
      if (this.sheen === true) {
        this.sheenSpecularDirect = vec3().toVar("sheenSpecularDirect");
        this.sheenSpecularIndirect = vec3().toVar("sheenSpecularIndirect");
      }
      if (this.iridescence === true) {
        const dotNVi = transformedNormalView.dot(positionViewDirection).clamp();
        this.iridescenceFresnel = evalIridescence({
          outsideIOR: float(1),
          eta2: iridescenceIOR,
          cosTheta1: dotNVi,
          thinFilmThickness: iridescenceThickness,
          baseF0: specularColor
        });
        this.iridescenceF0 = Schlick_to_F0({ f: this.iridescenceFresnel, f90: 1, dotVH: dotNVi });
      }
      if (this.transmission === true) {
        const position = positionWorld;
        const v = cameraPosition.sub(positionWorld).normalize();
        const n = transformedNormalWorld;
        const context2 = builder.context;
        context2.backdrop = getIBLVolumeRefraction(
          n,
          v,
          roughness,
          diffuseColor,
          specularColor,
          specularF90,
          // specularF90
          position,
          // positionWorld
          modelWorldMatrix,
          // modelMatrix
          cameraViewMatrix,
          // viewMatrix
          cameraProjectionMatrix,
          // projMatrix
          ior,
          thickness,
          attenuationColor,
          attenuationDistance,
          this.dispersion ? dispersion : null
        );
        context2.backdropAlpha = transmission;
        diffuseColor.a.mulAssign(mix(1, context2.backdrop.a, transmission));
      }
      super.start(builder);
    }
    // Fdez-Agüera's "Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting"
    // Approximates multi-scattering in order to preserve energy.
    // http://www.jcgt.org/published/0008/01/03/
    computeMultiscattering(singleScatter, multiScatter, specularF902) {
      const dotNV = transformedNormalView.dot(positionViewDirection).clamp();
      const fab = DFGApprox({ roughness, dotNV });
      const Fr = this.iridescenceF0 ? iridescence.mix(specularColor, this.iridescenceF0) : specularColor;
      const FssEss = Fr.mul(fab.x).add(specularF902.mul(fab.y));
      const Ess = fab.x.add(fab.y);
      const Ems = Ess.oneMinus();
      const Favg = specularColor.add(specularColor.oneMinus().mul(0.047619));
      const Fms = FssEss.mul(Favg).div(Ems.mul(Favg).oneMinus());
      singleScatter.addAssign(FssEss);
      multiScatter.addAssign(Fms.mul(Ems));
    }
    /**
     * Implements the direct light.
     *
     * @param {Object} lightData - The light data.
     * @param {NodeBuilder} builder - The current node builder.
     */
    direct({ lightDirection, lightColor, reflectedLight }) {
      const dotNL = transformedNormalView.dot(lightDirection).clamp();
      const irradiance = dotNL.mul(lightColor);
      if (this.sheen === true) {
        this.sheenSpecularDirect.addAssign(irradiance.mul(BRDF_Sheen({ lightDirection })));
      }
      if (this.clearcoat === true) {
        const dotNLcc = transformedClearcoatNormalView.dot(lightDirection).clamp();
        const ccIrradiance = dotNLcc.mul(lightColor);
        this.clearcoatSpecularDirect.addAssign(ccIrradiance.mul(BRDF_GGX({ lightDirection, f0: clearcoatF0, f90: clearcoatF90, roughness: clearcoatRoughness, normalView: transformedClearcoatNormalView })));
      }
      reflectedLight.directDiffuse.addAssign(irradiance.mul(BRDF_Lambert({ diffuseColor: diffuseColor.rgb })));
      reflectedLight.directSpecular.addAssign(irradiance.mul(BRDF_GGX({ lightDirection, f0: specularColor, f90: 1, roughness, iridescence: this.iridescence, f: this.iridescenceFresnel, USE_IRIDESCENCE: this.iridescence, USE_ANISOTROPY: this.anisotropy })));
    }
    /**
     * This method is intended for implementing the direct light term for
     * rect area light nodes.
     *
     * @param {Object} input - The input data.
     * @param {NodeBuilder} builder - The current node builder.
     */
    directRectArea({ lightColor, lightPosition: lightPosition2, halfWidth, halfHeight, reflectedLight, ltc_1, ltc_2 }) {
      const p0 = lightPosition2.add(halfWidth).sub(halfHeight);
      const p1 = lightPosition2.sub(halfWidth).sub(halfHeight);
      const p2 = lightPosition2.sub(halfWidth).add(halfHeight);
      const p3 = lightPosition2.add(halfWidth).add(halfHeight);
      const N = transformedNormalView;
      const V = positionViewDirection;
      const P = positionView.toVar();
      const uv2 = LTC_Uv({ N, V, roughness });
      const t1 = ltc_1.sample(uv2).toVar();
      const t2 = ltc_2.sample(uv2).toVar();
      const mInv = mat3(
        vec3(t1.x, 0, t1.y),
        vec3(0, 1, 0),
        vec3(t1.z, 0, t1.w)
      ).toVar();
      const fresnel = specularColor.mul(t2.x).add(specularColor.oneMinus().mul(t2.y)).toVar();
      reflectedLight.directSpecular.addAssign(lightColor.mul(fresnel).mul(LTC_Evaluate({ N, V, P, mInv, p0, p1, p2, p3 })));
      reflectedLight.directDiffuse.addAssign(lightColor.mul(diffuseColor).mul(LTC_Evaluate({ N, V, P, mInv: mat3(1, 0, 0, 0, 1, 0, 0, 0, 1), p0, p1, p2, p3 })));
    }
    /**
     * Implements the indirect lighting.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    indirect(builder) {
      this.indirectDiffuse(builder);
      this.indirectSpecular(builder);
      this.ambientOcclusion(builder);
    }
    /**
     * Implements the indirect diffuse term.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    indirectDiffuse(builder) {
      const { irradiance, reflectedLight } = builder.context;
      reflectedLight.indirectDiffuse.addAssign(irradiance.mul(BRDF_Lambert({ diffuseColor })));
    }
    /**
     * Implements the indirect specular term.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    indirectSpecular(builder) {
      const { radiance, iblIrradiance, reflectedLight } = builder.context;
      if (this.sheen === true) {
        this.sheenSpecularIndirect.addAssign(iblIrradiance.mul(
          sheen,
          IBLSheenBRDF({
            normal: transformedNormalView,
            viewDir: positionViewDirection,
            roughness: sheenRoughness
          })
        ));
      }
      if (this.clearcoat === true) {
        const dotNVcc = transformedClearcoatNormalView.dot(positionViewDirection).clamp();
        const clearcoatEnv = EnvironmentBRDF({
          dotNV: dotNVcc,
          specularColor: clearcoatF0,
          specularF90: clearcoatF90,
          roughness: clearcoatRoughness
        });
        this.clearcoatSpecularIndirect.addAssign(this.clearcoatRadiance.mul(clearcoatEnv));
      }
      const singleScattering = vec3().toVar("singleScattering");
      const multiScattering = vec3().toVar("multiScattering");
      const cosineWeightedIrradiance = iblIrradiance.mul(1 / Math.PI);
      this.computeMultiscattering(singleScattering, multiScattering, specularF90);
      const totalScattering = singleScattering.add(multiScattering);
      const diffuse = diffuseColor.mul(totalScattering.r.max(totalScattering.g).max(totalScattering.b).oneMinus());
      reflectedLight.indirectSpecular.addAssign(radiance.mul(singleScattering));
      reflectedLight.indirectSpecular.addAssign(multiScattering.mul(cosineWeightedIrradiance));
      reflectedLight.indirectDiffuse.addAssign(diffuse.mul(cosineWeightedIrradiance));
    }
    /**
     * Implements the ambient occlusion term.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    ambientOcclusion(builder) {
      const { ambientOcclusion, reflectedLight } = builder.context;
      const dotNV = transformedNormalView.dot(positionViewDirection).clamp();
      const aoNV = dotNV.add(ambientOcclusion);
      const aoExp = roughness.mul(-16).oneMinus().negate().exp2();
      const aoNode = ambientOcclusion.sub(aoNV.pow(aoExp).oneMinus()).clamp();
      if (this.clearcoat === true) {
        this.clearcoatSpecularIndirect.mulAssign(ambientOcclusion);
      }
      if (this.sheen === true) {
        this.sheenSpecularIndirect.mulAssign(ambientOcclusion);
      }
      reflectedLight.indirectDiffuse.mulAssign(ambientOcclusion);
      reflectedLight.indirectSpecular.mulAssign(aoNode);
    }
    /**
     * Used for final lighting accumulations depending on the requested features.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    finish({ context: context2 }) {
      const { outgoingLight } = context2;
      if (this.clearcoat === true) {
        const dotNVcc = transformedClearcoatNormalView.dot(positionViewDirection).clamp();
        const Fcc = F_Schlick({
          dotVH: dotNVcc,
          f0: clearcoatF0,
          f90: clearcoatF90
        });
        const clearcoatLight = outgoingLight.mul(clearcoat.mul(Fcc).oneMinus()).add(this.clearcoatSpecularDirect.add(this.clearcoatSpecularIndirect).mul(clearcoat));
        outgoingLight.assign(clearcoatLight);
      }
      if (this.sheen === true) {
        const sheenEnergyComp = sheen.r.max(sheen.g).max(sheen.b).mul(0.157).oneMinus();
        const sheenLight = outgoingLight.mul(sheenEnergyComp).add(this.sheenSpecularDirect, this.sheenSpecularIndirect);
        outgoingLight.assign(sheenLight);
      }
    }
  };
  var cubeUV_r0 = /* @__PURE__ */ float(1);
  var cubeUV_m0 = /* @__PURE__ */ float(-2);
  var cubeUV_r1 = /* @__PURE__ */ float(0.8);
  var cubeUV_m1 = /* @__PURE__ */ float(-1);
  var cubeUV_r4 = /* @__PURE__ */ float(0.4);
  var cubeUV_m4 = /* @__PURE__ */ float(2);
  var cubeUV_r5 = /* @__PURE__ */ float(0.305);
  var cubeUV_m5 = /* @__PURE__ */ float(3);
  var cubeUV_r6 = /* @__PURE__ */ float(0.21);
  var cubeUV_m6 = /* @__PURE__ */ float(4);
  var cubeUV_minMipLevel = /* @__PURE__ */ float(4);
  var cubeUV_minTileSize = /* @__PURE__ */ float(16);
  var getFace = /* @__PURE__ */ Fn(([direction]) => {
    const absDirection = vec3(abs(direction)).toVar();
    const face = float(-1).toVar();
    If(absDirection.x.greaterThan(absDirection.z), () => {
      If(absDirection.x.greaterThan(absDirection.y), () => {
        face.assign(select(direction.x.greaterThan(0), 0, 3));
      }).Else(() => {
        face.assign(select(direction.y.greaterThan(0), 1, 4));
      });
    }).Else(() => {
      If(absDirection.z.greaterThan(absDirection.y), () => {
        face.assign(select(direction.z.greaterThan(0), 2, 5));
      }).Else(() => {
        face.assign(select(direction.y.greaterThan(0), 1, 4));
      });
    });
    return face;
  }).setLayout({
    name: "getFace",
    type: "float",
    inputs: [
      { name: "direction", type: "vec3" }
    ]
  });
  var getUV = /* @__PURE__ */ Fn(([direction, face]) => {
    const uv2 = vec2().toVar();
    If(face.equal(0), () => {
      uv2.assign(vec2(direction.z, direction.y).div(abs(direction.x)));
    }).ElseIf(face.equal(1), () => {
      uv2.assign(vec2(direction.x.negate(), direction.z.negate()).div(abs(direction.y)));
    }).ElseIf(face.equal(2), () => {
      uv2.assign(vec2(direction.x.negate(), direction.y).div(abs(direction.z)));
    }).ElseIf(face.equal(3), () => {
      uv2.assign(vec2(direction.z.negate(), direction.y).div(abs(direction.x)));
    }).ElseIf(face.equal(4), () => {
      uv2.assign(vec2(direction.x.negate(), direction.z).div(abs(direction.y)));
    }).Else(() => {
      uv2.assign(vec2(direction.x, direction.y).div(abs(direction.z)));
    });
    return mul(0.5, uv2.add(1));
  }).setLayout({
    name: "getUV",
    type: "vec2",
    inputs: [
      { name: "direction", type: "vec3" },
      { name: "face", type: "float" }
    ]
  });
  var roughnessToMip = /* @__PURE__ */ Fn(([roughness2]) => {
    const mip = float(0).toVar();
    If(roughness2.greaterThanEqual(cubeUV_r1), () => {
      mip.assign(cubeUV_r0.sub(roughness2).mul(cubeUV_m1.sub(cubeUV_m0)).div(cubeUV_r0.sub(cubeUV_r1)).add(cubeUV_m0));
    }).ElseIf(roughness2.greaterThanEqual(cubeUV_r4), () => {
      mip.assign(cubeUV_r1.sub(roughness2).mul(cubeUV_m4.sub(cubeUV_m1)).div(cubeUV_r1.sub(cubeUV_r4)).add(cubeUV_m1));
    }).ElseIf(roughness2.greaterThanEqual(cubeUV_r5), () => {
      mip.assign(cubeUV_r4.sub(roughness2).mul(cubeUV_m5.sub(cubeUV_m4)).div(cubeUV_r4.sub(cubeUV_r5)).add(cubeUV_m4));
    }).ElseIf(roughness2.greaterThanEqual(cubeUV_r6), () => {
      mip.assign(cubeUV_r5.sub(roughness2).mul(cubeUV_m6.sub(cubeUV_m5)).div(cubeUV_r5.sub(cubeUV_r6)).add(cubeUV_m5));
    }).Else(() => {
      mip.assign(float(-2).mul(log2(mul(1.16, roughness2))));
    });
    return mip;
  }).setLayout({
    name: "roughnessToMip",
    type: "float",
    inputs: [
      { name: "roughness", type: "float" }
    ]
  });
  var getDirection = /* @__PURE__ */ Fn(([uv_immutable, face]) => {
    const uv2 = uv_immutable.toVar();
    uv2.assign(mul(2, uv2).sub(1));
    const direction = vec3(uv2, 1).toVar();
    If(face.equal(0), () => {
      direction.assign(direction.zyx);
    }).ElseIf(face.equal(1), () => {
      direction.assign(direction.xzy);
      direction.xz.mulAssign(-1);
    }).ElseIf(face.equal(2), () => {
      direction.x.mulAssign(-1);
    }).ElseIf(face.equal(3), () => {
      direction.assign(direction.zyx);
      direction.xz.mulAssign(-1);
    }).ElseIf(face.equal(4), () => {
      direction.assign(direction.xzy);
      direction.xy.mulAssign(-1);
    }).ElseIf(face.equal(5), () => {
      direction.z.mulAssign(-1);
    });
    return direction;
  }).setLayout({
    name: "getDirection",
    type: "vec3",
    inputs: [
      { name: "uv", type: "vec2" },
      { name: "face", type: "float" }
    ]
  });
  var textureCubeUV = /* @__PURE__ */ Fn(([envMap, sampleDir_immutable, roughness_immutable, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP]) => {
    const roughness2 = float(roughness_immutable);
    const sampleDir = vec3(sampleDir_immutable);
    const mip = clamp2(roughnessToMip(roughness2), cubeUV_m0, CUBEUV_MAX_MIP);
    const mipF = fract(mip);
    const mipInt = floor(mip);
    const color0 = vec3(bilinearCubeUV(envMap, sampleDir, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP)).toVar();
    If(mipF.notEqual(0), () => {
      const color1 = vec3(bilinearCubeUV(envMap, sampleDir, mipInt.add(1), CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP)).toVar();
      color0.assign(mix(color0, color1, mipF));
    });
    return color0;
  });
  var bilinearCubeUV = /* @__PURE__ */ Fn(([envMap, direction_immutable, mipInt_immutable, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP]) => {
    const mipInt = float(mipInt_immutable).toVar();
    const direction = vec3(direction_immutable);
    const face = float(getFace(direction)).toVar();
    const filterInt = float(max$1(cubeUV_minMipLevel.sub(mipInt), 0)).toVar();
    mipInt.assign(max$1(mipInt, cubeUV_minMipLevel));
    const faceSize = float(exp2(mipInt)).toVar();
    const uv2 = vec2(getUV(direction, face).mul(faceSize.sub(2)).add(1)).toVar();
    If(face.greaterThan(2), () => {
      uv2.y.addAssign(faceSize);
      face.subAssign(3);
    });
    uv2.x.addAssign(face.mul(faceSize));
    uv2.x.addAssign(filterInt.mul(mul(3, cubeUV_minTileSize)));
    uv2.y.addAssign(mul(4, exp2(CUBEUV_MAX_MIP).sub(faceSize)));
    uv2.x.mulAssign(CUBEUV_TEXEL_WIDTH);
    uv2.y.mulAssign(CUBEUV_TEXEL_HEIGHT);
    return envMap.sample(uv2).grad(vec2(), vec2());
  });
  var getSample = /* @__PURE__ */ Fn(({ envMap, mipInt, outputDirection, theta, axis, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP }) => {
    const cosTheta = cos(theta);
    const sampleDirection = outputDirection.mul(cosTheta).add(axis.cross(outputDirection).mul(sin(theta))).add(axis.mul(axis.dot(outputDirection).mul(cosTheta.oneMinus())));
    return bilinearCubeUV(envMap, sampleDirection, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP);
  });
  var blur = /* @__PURE__ */ Fn(({ n, latitudinal, poleAxis, outputDirection, weights, samples, dTheta, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP }) => {
    const axis = vec3(select(latitudinal, poleAxis, cross(poleAxis, outputDirection))).toVar();
    If(axis.equal(vec3(0)), () => {
      axis.assign(vec3(outputDirection.z, 0, outputDirection.x.negate()));
    });
    axis.assign(normalize2(axis));
    const gl_FragColor = vec3().toVar();
    gl_FragColor.addAssign(weights.element(0).mul(getSample({ theta: 0, axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP })));
    Loop({ start: int(1), end: n }, ({ i }) => {
      If(i.greaterThanEqual(samples), () => {
        Break2();
      });
      const theta = float(dTheta.mul(float(i))).toVar();
      gl_FragColor.addAssign(weights.element(i).mul(getSample({ theta: theta.mul(-1), axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP })));
      gl_FragColor.addAssign(weights.element(i).mul(getSample({ theta, axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP })));
    });
    return vec4(gl_FragColor, 1);
  });
  var LOD_MIN = 4;
  var EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
  var MAX_SAMPLES = 20;
  var _flatCamera = /* @__PURE__ */ new OrthographicCamera(-1, 1, 1, -1, 0, 1);
  var _cubeCamera = /* @__PURE__ */ new PerspectiveCamera(90, 1);
  var _clearColor$2 = /* @__PURE__ */ new Color();
  var _oldTarget = null;
  var _oldActiveCubeFace = 0;
  var _oldActiveMipmapLevel = 0;
  var PHI = (1 + Math.sqrt(5)) / 2;
  var INV_PHI = 1 / PHI;
  var _axisDirections = [
    /* @__PURE__ */ new Vector3(-PHI, INV_PHI, 0),
    /* @__PURE__ */ new Vector3(PHI, INV_PHI, 0),
    /* @__PURE__ */ new Vector3(-INV_PHI, 0, PHI),
    /* @__PURE__ */ new Vector3(INV_PHI, 0, PHI),
    /* @__PURE__ */ new Vector3(0, PHI, -INV_PHI),
    /* @__PURE__ */ new Vector3(0, PHI, INV_PHI),
    /* @__PURE__ */ new Vector3(-1, 1, -1),
    /* @__PURE__ */ new Vector3(1, 1, -1),
    /* @__PURE__ */ new Vector3(-1, 1, 1),
    /* @__PURE__ */ new Vector3(1, 1, 1)
  ];
  var _origin = /* @__PURE__ */ new Vector3();
  var _uniformsMap = /* @__PURE__ */ new WeakMap();
  var _faceLib = [
    3,
    1,
    5,
    0,
    4,
    2
  ];
  var _direction = /* @__PURE__ */ getDirection(uv(), attribute("faceIndex")).normalize();
  var _outputDirection = /* @__PURE__ */ vec3(_direction.x, _direction.y, _direction.z);
  var PMREMGenerator = class {
    /**
     * Constructs a new PMREM generator.
     *
     * @param {Renderer} renderer - The renderer.
     */
    constructor(renderer) {
      this._renderer = renderer;
      this._pingPongRenderTarget = null;
      this._lodMax = 0;
      this._cubeSize = 0;
      this._lodPlanes = [];
      this._sizeLods = [];
      this._sigmas = [];
      this._lodMeshes = [];
      this._blurMaterial = null;
      this._cubemapMaterial = null;
      this._equirectMaterial = null;
      this._backgroundBox = null;
    }
    get _hasInitialized() {
      return this._renderer.hasInitialized();
    }
    /**
     * Generates a PMREM from a supplied Scene, which can be faster than using an
     * image if networking bandwidth is low. Optional sigma specifies a blur radius
     * in radians to be applied to the scene before PMREM generation. Optional near
     * and far planes ensure the scene is rendered in its entirety.
     *
     * @param {Scene} scene - The scene to be captured.
     * @param {number} [sigma=0] - The blur radius in radians.
     * @param {number} [near=0.1] - The near plane distance.
     * @param {number} [far=100] - The far plane distance.
     * @param {Object} [options={}] - The configuration options.
     * @param {number} [options.size=256] - The texture size of the PMREM.
     * @param {Vector3} [options.renderTarget=origin] - The position of the internal cube camera that renders the scene.
     * @param {?RenderTarget} [options.renderTarget=null] - The render target to use.
     * @return {RenderTarget} The resulting PMREM.
     * @see {@link PMREMGenerator#fromSceneAsync}
     */
    fromScene(scene, sigma = 0, near = 0.1, far = 100, options = {}) {
      const {
        size = 256,
        position = _origin,
        renderTarget = null
      } = options;
      this._setSize(size);
      if (this._hasInitialized === false) {
        console.warn("THREE.PMREMGenerator: .fromScene() called before the backend is initialized. Try using .fromSceneAsync() instead.");
        const cubeUVRenderTarget2 = renderTarget || this._allocateTarget();
        options.renderTarget = cubeUVRenderTarget2;
        this.fromSceneAsync(scene, sigma, near, far, options);
        return cubeUVRenderTarget2;
      }
      _oldTarget = this._renderer.getRenderTarget();
      _oldActiveCubeFace = this._renderer.getActiveCubeFace();
      _oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();
      const cubeUVRenderTarget = renderTarget || this._allocateTarget();
      cubeUVRenderTarget.depthBuffer = true;
      this._init(cubeUVRenderTarget);
      this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget, position);
      if (sigma > 0) {
        this._blur(cubeUVRenderTarget, 0, 0, sigma);
      }
      this._applyPMREM(cubeUVRenderTarget);
      this._cleanup(cubeUVRenderTarget);
      return cubeUVRenderTarget;
    }
    /**
     * Generates a PMREM from a supplied Scene, which can be faster than using an
     * image if networking bandwidth is low. Optional sigma specifies a blur radius
     * in radians to be applied to the scene before PMREM generation. Optional near
     * and far planes ensure the scene is rendered in its entirety (the cubeCamera
     * is placed at the origin).
     *
     * @param {Scene} scene - The scene to be captured.
     * @param {number} [sigma=0] - The blur radius in radians.
     * @param {number} [near=0.1] - The near plane distance.
     * @param {number} [far=100] - The far plane distance.
     * @param {Object} [options={}] - The configuration options.
     * @param {number} [options.size=256] - The texture size of the PMREM.
     * @param {Vector3} [options.position=origin] - The position of the internal cube camera that renders the scene.
     * @param {?RenderTarget} [options.renderTarget=null] - The render target to use.
     * @return {Promise<RenderTarget>} A Promise that resolve with the PMREM when the generation has been finished.
     * @see {@link PMREMGenerator#fromScene}
     */
    async fromSceneAsync(scene, sigma = 0, near = 0.1, far = 100, options = {}) {
      if (this._hasInitialized === false) await this._renderer.init();
      return this.fromScene(scene, sigma, near, far, options);
    }
    /**
     * Generates a PMREM from an equirectangular texture, which can be either LDR
     * or HDR. The ideal input image size is 1k (1024 x 512),
     * as this matches best with the 256 x 256 cubemap output.
     *
     * @param {Texture} equirectangular - The equirectangular texture to be converted.
     * @param {?RenderTarget} [renderTarget=null] - The render target to use.
     * @return {RenderTarget} The resulting PMREM.
     * @see {@link PMREMGenerator#fromEquirectangularAsync}
     */
    fromEquirectangular(equirectangular, renderTarget = null) {
      if (this._hasInitialized === false) {
        console.warn("THREE.PMREMGenerator: .fromEquirectangular() called before the backend is initialized. Try using .fromEquirectangularAsync() instead.");
        this._setSizeFromTexture(equirectangular);
        const cubeUVRenderTarget = renderTarget || this._allocateTarget();
        this.fromEquirectangularAsync(equirectangular, cubeUVRenderTarget);
        return cubeUVRenderTarget;
      }
      return this._fromTexture(equirectangular, renderTarget);
    }
    /**
     * Generates a PMREM from an equirectangular texture, which can be either LDR
     * or HDR. The ideal input image size is 1k (1024 x 512),
     * as this matches best with the 256 x 256 cubemap output.
     *
     * @param {Texture} equirectangular - The equirectangular texture to be converted.
     * @param {?RenderTarget} [renderTarget=null] - The render target to use.
     * @return {Promise<RenderTarget>} The resulting PMREM.
     * @see {@link PMREMGenerator#fromEquirectangular}
     */
    async fromEquirectangularAsync(equirectangular, renderTarget = null) {
      if (this._hasInitialized === false) await this._renderer.init();
      return this._fromTexture(equirectangular, renderTarget);
    }
    /**
     * Generates a PMREM from an cubemap texture, which can be either LDR
     * or HDR. The ideal input cube size is 256 x 256,
     * as this matches best with the 256 x 256 cubemap output.
     *
     * @param {Texture} cubemap - The cubemap texture to be converted.
     * @param {?RenderTarget} [renderTarget=null] - The render target to use.
     * @return {RenderTarget} The resulting PMREM.
     * @see {@link PMREMGenerator#fromCubemapAsync}
     */
    fromCubemap(cubemap, renderTarget = null) {
      if (this._hasInitialized === false) {
        console.warn("THREE.PMREMGenerator: .fromCubemap() called before the backend is initialized. Try using .fromCubemapAsync() instead.");
        this._setSizeFromTexture(cubemap);
        const cubeUVRenderTarget = renderTarget || this._allocateTarget();
        this.fromCubemapAsync(cubemap, renderTarget);
        return cubeUVRenderTarget;
      }
      return this._fromTexture(cubemap, renderTarget);
    }
    /**
     * Generates a PMREM from an cubemap texture, which can be either LDR
     * or HDR. The ideal input cube size is 256 x 256,
     * with the 256 x 256 cubemap output.
     *
     * @param {Texture} cubemap - The cubemap texture to be converted.
     * @param {?RenderTarget} [renderTarget=null] - The render target to use.
     * @return {Promise<RenderTarget>} The resulting PMREM.
     * @see {@link PMREMGenerator#fromCubemap}
     */
    async fromCubemapAsync(cubemap, renderTarget = null) {
      if (this._hasInitialized === false) await this._renderer.init();
      return this._fromTexture(cubemap, renderTarget);
    }
    /**
     * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
     * your texture's network fetch for increased concurrency.
     *
     * @returns {Promise}
     */
    async compileCubemapShader() {
      if (this._cubemapMaterial === null) {
        this._cubemapMaterial = _getCubemapMaterial();
        await this._compileMaterial(this._cubemapMaterial);
      }
    }
    /**
     * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
     * your texture's network fetch for increased concurrency.
     *
     * @returns {Promise}
     */
    async compileEquirectangularShader() {
      if (this._equirectMaterial === null) {
        this._equirectMaterial = _getEquirectMaterial();
        await this._compileMaterial(this._equirectMaterial);
      }
    }
    /**
     * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
     * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
     * one of them will cause any others to also become unusable.
     */
    dispose() {
      this._dispose();
      if (this._cubemapMaterial !== null) this._cubemapMaterial.dispose();
      if (this._equirectMaterial !== null) this._equirectMaterial.dispose();
      if (this._backgroundBox !== null) {
        this._backgroundBox.geometry.dispose();
        this._backgroundBox.material.dispose();
      }
    }
    // private interface
    _setSizeFromTexture(texture2) {
      if (texture2.mapping === CubeReflectionMapping || texture2.mapping === CubeRefractionMapping) {
        this._setSize(texture2.image.length === 0 ? 16 : texture2.image[0].width || texture2.image[0].image.width);
      } else {
        this._setSize(texture2.image.width / 4);
      }
    }
    _setSize(cubeSize) {
      this._lodMax = Math.floor(Math.log2(cubeSize));
      this._cubeSize = Math.pow(2, this._lodMax);
    }
    _dispose() {
      if (this._blurMaterial !== null) this._blurMaterial.dispose();
      if (this._pingPongRenderTarget !== null) this._pingPongRenderTarget.dispose();
      for (let i = 0; i < this._lodPlanes.length; i++) {
        this._lodPlanes[i].dispose();
      }
    }
    _cleanup(outputTarget) {
      this._renderer.setRenderTarget(_oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel);
      outputTarget.scissorTest = false;
      _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
    }
    _fromTexture(texture2, renderTarget) {
      this._setSizeFromTexture(texture2);
      _oldTarget = this._renderer.getRenderTarget();
      _oldActiveCubeFace = this._renderer.getActiveCubeFace();
      _oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();
      const cubeUVRenderTarget = renderTarget || this._allocateTarget();
      this._init(cubeUVRenderTarget);
      this._textureToCubeUV(texture2, cubeUVRenderTarget);
      this._applyPMREM(cubeUVRenderTarget);
      this._cleanup(cubeUVRenderTarget);
      return cubeUVRenderTarget;
    }
    _allocateTarget() {
      const width = 3 * Math.max(this._cubeSize, 16 * 7);
      const height = 4 * this._cubeSize;
      const cubeUVRenderTarget = _createRenderTarget(width, height);
      return cubeUVRenderTarget;
    }
    _init(renderTarget) {
      if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== renderTarget.width || this._pingPongRenderTarget.height !== renderTarget.height) {
        if (this._pingPongRenderTarget !== null) {
          this._dispose();
        }
        this._pingPongRenderTarget = _createRenderTarget(renderTarget.width, renderTarget.height);
        const { _lodMax } = this;
        ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas, lodMeshes: this._lodMeshes } = _createPlanes(_lodMax));
        this._blurMaterial = _getBlurShader(_lodMax, renderTarget.width, renderTarget.height);
      }
    }
    async _compileMaterial(material2) {
      const tmpMesh = new Mesh(this._lodPlanes[0], material2);
      await this._renderer.compile(tmpMesh, _flatCamera);
    }
    _sceneToCubeUV(scene, near, far, cubeUVRenderTarget, position) {
      const cubeCamera = _cubeCamera;
      cubeCamera.near = near;
      cubeCamera.far = far;
      const upSign = [1, 1, 1, 1, -1, 1];
      const forwardSign = [1, -1, 1, -1, 1, -1];
      const renderer = this._renderer;
      const originalAutoClear = renderer.autoClear;
      renderer.getClearColor(_clearColor$2);
      renderer.autoClear = false;
      let backgroundBox = this._backgroundBox;
      if (backgroundBox === null) {
        const backgroundMaterial = new MeshBasicMaterial({
          name: "PMREM.Background",
          side: BackSide,
          depthWrite: false,
          depthTest: false
        });
        backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);
      }
      let useSolidColor = false;
      const background = scene.background;
      if (background) {
        if (background.isColor) {
          backgroundBox.material.color.copy(background);
          scene.background = null;
          useSolidColor = true;
        }
      } else {
        backgroundBox.material.color.copy(_clearColor$2);
        useSolidColor = true;
      }
      renderer.setRenderTarget(cubeUVRenderTarget);
      renderer.clear();
      if (useSolidColor) {
        renderer.render(backgroundBox, cubeCamera);
      }
      for (let i = 0; i < 6; i++) {
        const col = i % 3;
        if (col === 0) {
          cubeCamera.up.set(0, upSign[i], 0);
          cubeCamera.position.set(position.x, position.y, position.z);
          cubeCamera.lookAt(position.x + forwardSign[i], position.y, position.z);
        } else if (col === 1) {
          cubeCamera.up.set(0, 0, upSign[i]);
          cubeCamera.position.set(position.x, position.y, position.z);
          cubeCamera.lookAt(position.x, position.y + forwardSign[i], position.z);
        } else {
          cubeCamera.up.set(0, upSign[i], 0);
          cubeCamera.position.set(position.x, position.y, position.z);
          cubeCamera.lookAt(position.x, position.y, position.z + forwardSign[i]);
        }
        const size = this._cubeSize;
        _setViewport(cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size);
        renderer.render(scene, cubeCamera);
      }
      renderer.autoClear = originalAutoClear;
      scene.background = background;
    }
    _textureToCubeUV(texture2, cubeUVRenderTarget) {
      const renderer = this._renderer;
      const isCubeTexture = texture2.mapping === CubeReflectionMapping || texture2.mapping === CubeRefractionMapping;
      if (isCubeTexture) {
        if (this._cubemapMaterial === null) {
          this._cubemapMaterial = _getCubemapMaterial(texture2);
        }
      } else {
        if (this._equirectMaterial === null) {
          this._equirectMaterial = _getEquirectMaterial(texture2);
        }
      }
      const material2 = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
      material2.fragmentNode.value = texture2;
      const mesh = this._lodMeshes[0];
      mesh.material = material2;
      const size = this._cubeSize;
      _setViewport(cubeUVRenderTarget, 0, 0, 3 * size, 2 * size);
      renderer.setRenderTarget(cubeUVRenderTarget);
      renderer.render(mesh, _flatCamera);
    }
    _applyPMREM(cubeUVRenderTarget) {
      const renderer = this._renderer;
      const autoClear = renderer.autoClear;
      renderer.autoClear = false;
      const n = this._lodPlanes.length;
      for (let i = 1; i < n; i++) {
        const sigma = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]);
        const poleAxis = _axisDirections[(n - i - 1) % _axisDirections.length];
        this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);
      }
      renderer.autoClear = autoClear;
    }
    /**
     * This is a two-pass Gaussian blur for a cubemap. Normally this is done
     * vertically and horizontally, but this breaks down on a cube. Here we apply
     * the blur latitudinally (around the poles), and then longitudinally (towards
     * the poles) to approximate the orthogonally-separable blur. It is least
     * accurate at the poles, but still does a decent job.
     *
     * @private
     * @param {RenderTarget} cubeUVRenderTarget - The cubemap render target.
     * @param {number} lodIn - The input level-of-detail.
     * @param {number} lodOut - The output level-of-detail.
     * @param {number} sigma - The blur radius in radians.
     * @param {Vector3} [poleAxis] - The pole axis.
     */
    _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
      const pingPongRenderTarget = this._pingPongRenderTarget;
      this._halfBlur(
        cubeUVRenderTarget,
        pingPongRenderTarget,
        lodIn,
        lodOut,
        sigma,
        "latitudinal",
        poleAxis
      );
      this._halfBlur(
        pingPongRenderTarget,
        cubeUVRenderTarget,
        lodOut,
        lodOut,
        sigma,
        "longitudinal",
        poleAxis
      );
    }
    _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
      const renderer = this._renderer;
      const blurMaterial = this._blurMaterial;
      if (direction !== "latitudinal" && direction !== "longitudinal") {
        console.error("blur direction must be either latitudinal or longitudinal!");
      }
      const STANDARD_DEVIATIONS = 3;
      const blurMesh = this._lodMeshes[lodOut];
      blurMesh.material = blurMaterial;
      const blurUniforms = _uniformsMap.get(blurMaterial);
      const pixels = this._sizeLods[lodIn] - 1;
      const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
      const sigmaPixels = sigmaRadians / radiansPerPixel;
      const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;
      if (samples > MAX_SAMPLES) {
        console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);
      }
      const weights = [];
      let sum = 0;
      for (let i = 0; i < MAX_SAMPLES; ++i) {
        const x2 = i / sigmaPixels;
        const weight = Math.exp(-x2 * x2 / 2);
        weights.push(weight);
        if (i === 0) {
          sum += weight;
        } else if (i < samples) {
          sum += 2 * weight;
        }
      }
      for (let i = 0; i < weights.length; i++) {
        weights[i] = weights[i] / sum;
      }
      targetIn.texture.frame = (targetIn.texture.frame || 0) + 1;
      blurUniforms.envMap.value = targetIn.texture;
      blurUniforms.samples.value = samples;
      blurUniforms.weights.array = weights;
      blurUniforms.latitudinal.value = direction === "latitudinal" ? 1 : 0;
      if (poleAxis) {
        blurUniforms.poleAxis.value = poleAxis;
      }
      const { _lodMax } = this;
      blurUniforms.dTheta.value = radiansPerPixel;
      blurUniforms.mipInt.value = _lodMax - lodIn;
      const outputSize = this._sizeLods[lodOut];
      const x = 3 * outputSize * (lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0);
      const y = 4 * (this._cubeSize - outputSize);
      _setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);
      renderer.setRenderTarget(targetOut);
      renderer.render(blurMesh, _flatCamera);
    }
  };
  function _createPlanes(lodMax) {
    const lodPlanes = [];
    const sizeLods = [];
    const sigmas = [];
    const lodMeshes = [];
    let lod = lodMax;
    const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
    for (let i = 0; i < totalLods; i++) {
      const sizeLod = Math.pow(2, lod);
      sizeLods.push(sizeLod);
      let sigma = 1 / sizeLod;
      if (i > lodMax - LOD_MIN) {
        sigma = EXTRA_LOD_SIGMA[i - lodMax + LOD_MIN - 1];
      } else if (i === 0) {
        sigma = 0;
      }
      sigmas.push(sigma);
      const texelSize = 1 / (sizeLod - 2);
      const min = -texelSize;
      const max = 1 + texelSize;
      const uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];
      const cubeFaces = 6;
      const vertices = 6;
      const positionSize = 3;
      const uvSize = 2;
      const faceIndexSize = 1;
      const position = new Float32Array(positionSize * vertices * cubeFaces);
      const uv2 = new Float32Array(uvSize * vertices * cubeFaces);
      const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
      for (let face = 0; face < cubeFaces; face++) {
        const x = face % 3 * 2 / 3 - 1;
        const y = face > 2 ? 0 : -1;
        const coordinates = [
          x,
          y,
          0,
          x + 2 / 3,
          y,
          0,
          x + 2 / 3,
          y + 1,
          0,
          x,
          y,
          0,
          x + 2 / 3,
          y + 1,
          0,
          x,
          y + 1,
          0
        ];
        const faceIdx = _faceLib[face];
        position.set(coordinates, positionSize * vertices * faceIdx);
        uv2.set(uv1, uvSize * vertices * faceIdx);
        const fill = [faceIdx, faceIdx, faceIdx, faceIdx, faceIdx, faceIdx];
        faceIndex.set(fill, faceIndexSize * vertices * faceIdx);
      }
      const planes = new BufferGeometry();
      planes.setAttribute("position", new BufferAttribute(position, positionSize));
      planes.setAttribute("uv", new BufferAttribute(uv2, uvSize));
      planes.setAttribute("faceIndex", new BufferAttribute(faceIndex, faceIndexSize));
      lodPlanes.push(planes);
      lodMeshes.push(new Mesh(planes, null));
      if (lod > LOD_MIN) {
        lod--;
      }
    }
    return { lodPlanes, sizeLods, sigmas, lodMeshes };
  }
  function _createRenderTarget(width, height) {
    const params = {
      magFilter: LinearFilter,
      minFilter: LinearFilter,
      generateMipmaps: false,
      type: HalfFloatType,
      format: RGBAFormat,
      colorSpace: LinearSRGBColorSpace
      //depthBuffer: false
    };
    const cubeUVRenderTarget = new RenderTarget(width, height, params);
    cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
    cubeUVRenderTarget.texture.name = "PMREM.cubeUv";
    cubeUVRenderTarget.texture.isPMREMTexture = true;
    cubeUVRenderTarget.scissorTest = true;
    return cubeUVRenderTarget;
  }
  function _setViewport(target, x, y, width, height) {
    target.viewport.set(x, y, width, height);
    target.scissor.set(x, y, width, height);
  }
  function _getMaterial(type) {
    const material2 = new NodeMaterial();
    material2.depthTest = false;
    material2.depthWrite = false;
    material2.blending = NoBlending;
    material2.name = `PMREM_${type}`;
    return material2;
  }
  function _getBlurShader(lodMax, width, height) {
    const weights = uniformArray(new Array(MAX_SAMPLES).fill(0));
    const poleAxis = uniform(new Vector3(0, 1, 0));
    const dTheta = uniform(0);
    const n = float(MAX_SAMPLES);
    const latitudinal = uniform(0);
    const samples = uniform(1);
    const envMap = texture(null);
    const mipInt = uniform(0);
    const CUBEUV_TEXEL_WIDTH = float(1 / width);
    const CUBEUV_TEXEL_HEIGHT = float(1 / height);
    const CUBEUV_MAX_MIP = float(lodMax);
    const materialUniforms = {
      n,
      latitudinal,
      weights,
      poleAxis,
      outputDirection: _outputDirection,
      dTheta,
      samples,
      envMap,
      mipInt,
      CUBEUV_TEXEL_WIDTH,
      CUBEUV_TEXEL_HEIGHT,
      CUBEUV_MAX_MIP
    };
    const material2 = _getMaterial("blur");
    material2.fragmentNode = blur({ ...materialUniforms, latitudinal: latitudinal.equal(1) });
    _uniformsMap.set(material2, materialUniforms);
    return material2;
  }
  function _getCubemapMaterial(envTexture) {
    const material2 = _getMaterial("cubemap");
    material2.fragmentNode = cubeTexture(envTexture, _outputDirection);
    return material2;
  }
  function _getEquirectMaterial(envTexture) {
    const material2 = _getMaterial("equirect");
    material2.fragmentNode = texture(envTexture, equirectUV(_outputDirection), 0);
    return material2;
  }
  var _cache2 = /* @__PURE__ */ new WeakMap();
  function _generateCubeUVSize(imageHeight) {
    const maxMip = Math.log2(imageHeight) - 2;
    const texelHeight = 1 / imageHeight;
    const texelWidth = 1 / (3 * Math.max(Math.pow(2, maxMip), 7 * 16));
    return { texelWidth, texelHeight, maxMip };
  }
  function _getPMREMFromTexture(texture2, renderer, generator) {
    const cache3 = _getCache(renderer);
    let cacheTexture = cache3.get(texture2);
    const pmremVersion = cacheTexture !== void 0 ? cacheTexture.pmremVersion : -1;
    if (pmremVersion !== texture2.pmremVersion) {
      const image = texture2.image;
      if (texture2.isCubeTexture) {
        if (isCubeMapReady(image)) {
          cacheTexture = generator.fromCubemap(texture2, cacheTexture);
        } else {
          return null;
        }
      } else {
        if (isEquirectangularMapReady(image)) {
          cacheTexture = generator.fromEquirectangular(texture2, cacheTexture);
        } else {
          return null;
        }
      }
      cacheTexture.pmremVersion = texture2.pmremVersion;
      cache3.set(texture2, cacheTexture);
    }
    return cacheTexture.texture;
  }
  function _getCache(renderer) {
    let rendererCache2 = _cache2.get(renderer);
    if (rendererCache2 === void 0) {
      rendererCache2 = /* @__PURE__ */ new WeakMap();
      _cache2.set(renderer, rendererCache2);
    }
    return rendererCache2;
  }
  var PMREMNode = class extends TempNode {
    static get type() {
      return "PMREMNode";
    }
    /**
     * Constructs a new function overloading node.
     *
     * @param {Texture} value - The input texture.
     * @param {Node<vec2>} [uvNode=null] - The uv node.
     * @param {Node<float>} [levelNode=null] - The level node.
     */
    constructor(value, uvNode = null, levelNode = null) {
      super("vec3");
      this._value = value;
      this._pmrem = null;
      this.uvNode = uvNode;
      this.levelNode = levelNode;
      this._generator = null;
      const defaultTexture = new Texture();
      defaultTexture.isRenderTargetTexture = true;
      this._texture = texture(defaultTexture);
      this._width = uniform(0);
      this._height = uniform(0);
      this._maxMip = uniform(0);
      this.updateBeforeType = NodeUpdateType.RENDER;
    }
    set value(value) {
      this._value = value;
      this._pmrem = null;
    }
    /**
     * The node's texture value.
     *
     * @type {Texture}
     */
    get value() {
      return this._value;
    }
    /**
     * Uses the given PMREM texture to update internal values.
     *
     * @param {Texture} texture - The PMREM texture.
     */
    updateFromTexture(texture2) {
      const cubeUVSize = _generateCubeUVSize(texture2.image.height);
      this._texture.value = texture2;
      this._width.value = cubeUVSize.texelWidth;
      this._height.value = cubeUVSize.texelHeight;
      this._maxMip.value = cubeUVSize.maxMip;
    }
    updateBefore(frame) {
      let pmrem = this._pmrem;
      const pmremVersion = pmrem ? pmrem.pmremVersion : -1;
      const texture2 = this._value;
      if (pmremVersion !== texture2.pmremVersion) {
        if (texture2.isPMREMTexture === true) {
          pmrem = texture2;
        } else {
          pmrem = _getPMREMFromTexture(texture2, frame.renderer, this._generator);
        }
        if (pmrem !== null) {
          this._pmrem = pmrem;
          this.updateFromTexture(pmrem);
        }
      }
    }
    setup(builder) {
      if (this._generator === null) {
        this._generator = new PMREMGenerator(builder.renderer);
      }
      this.updateBefore(builder);
      let uvNode = this.uvNode;
      if (uvNode === null && builder.context.getUV) {
        uvNode = builder.context.getUV(this);
      }
      uvNode = materialEnvRotation.mul(vec3(uvNode.x, uvNode.y.negate(), uvNode.z));
      let levelNode = this.levelNode;
      if (levelNode === null && builder.context.getTextureLevel) {
        levelNode = builder.context.getTextureLevel(this);
      }
      return textureCubeUV(this._texture, uvNode, levelNode, this._width, this._height, this._maxMip);
    }
    dispose() {
      super.dispose();
      if (this._generator !== null) this._generator.dispose();
    }
  };
  function isCubeMapReady(image) {
    if (image === null || image === void 0) return false;
    let count = 0;
    const length2 = 6;
    for (let i = 0; i < length2; i++) {
      if (image[i] !== void 0) count++;
    }
    return count === length2;
  }
  function isEquirectangularMapReady(image) {
    if (image === null || image === void 0) return false;
    return image.height > 0;
  }
  var pmremTexture = /* @__PURE__ */ nodeProxy(PMREMNode).setParameterLength(1, 3);
  var _envNodeCache = /* @__PURE__ */ new WeakMap();
  var EnvironmentNode = class extends LightingNode {
    static get type() {
      return "EnvironmentNode";
    }
    /**
     * Constructs a new environment node.
     *
     * @param {Node} [envNode=null] - A node representing the environment.
     */
    constructor(envNode = null) {
      super();
      this.envNode = envNode;
    }
    setup(builder) {
      const { material: material2 } = builder;
      let envNode = this.envNode;
      if (envNode.isTextureNode || envNode.isMaterialReferenceNode) {
        const value = envNode.isTextureNode ? envNode.value : material2[envNode.property];
        let cacheEnvNode = _envNodeCache.get(value);
        if (cacheEnvNode === void 0) {
          cacheEnvNode = pmremTexture(value);
          _envNodeCache.set(value, cacheEnvNode);
        }
        envNode = cacheEnvNode;
      }
      const useAnisotropy = material2.useAnisotropy === true || material2.anisotropy > 0;
      const radianceNormalView = useAnisotropy ? transformedBentNormalView : transformedNormalView;
      const radiance = envNode.context(createRadianceContext(roughness, radianceNormalView)).mul(materialEnvIntensity);
      const irradiance = envNode.context(createIrradianceContext(transformedNormalWorld)).mul(Math.PI).mul(materialEnvIntensity);
      const isolateRadiance = cache2(radiance);
      const isolateIrradiance = cache2(irradiance);
      builder.context.radiance.addAssign(isolateRadiance);
      builder.context.iblIrradiance.addAssign(isolateIrradiance);
      const clearcoatRadiance = builder.context.lightingModel.clearcoatRadiance;
      if (clearcoatRadiance) {
        const clearcoatRadianceContext = envNode.context(createRadianceContext(clearcoatRoughness, transformedClearcoatNormalView)).mul(materialEnvIntensity);
        const isolateClearcoatRadiance = cache2(clearcoatRadianceContext);
        clearcoatRadiance.addAssign(isolateClearcoatRadiance);
      }
    }
  };
  var createRadianceContext = (roughnessNode, normalViewNode) => {
    let reflectVec = null;
    return {
      getUV: () => {
        if (reflectVec === null) {
          reflectVec = positionViewDirection.negate().reflect(normalViewNode);
          reflectVec = roughnessNode.mul(roughnessNode).mix(reflectVec, normalViewNode).normalize();
          reflectVec = reflectVec.transformDirection(cameraViewMatrix);
        }
        return reflectVec;
      },
      getTextureLevel: () => {
        return roughnessNode;
      }
    };
  };
  var createIrradianceContext = (normalWorldNode) => {
    return {
      getUV: () => {
        return normalWorldNode;
      },
      getTextureLevel: () => {
        return float(1);
      }
    };
  };
  var _defaultValues$6 = /* @__PURE__ */ new MeshStandardMaterial();
  var MeshStandardNodeMaterial = class extends NodeMaterial {
    static get type() {
      return "MeshStandardNodeMaterial";
    }
    /**
     * Constructs a new mesh standard node material.
     *
     * @param {Object} [parameters] - The configuration parameter.
     */
    constructor(parameters) {
      super();
      this.isMeshStandardNodeMaterial = true;
      this.lights = true;
      this.emissiveNode = null;
      this.metalnessNode = null;
      this.roughnessNode = null;
      this.setDefaultValues(_defaultValues$6);
      this.setValues(parameters);
    }
    /**
     * Overwritten since this type of material uses {@link EnvironmentNode}
     * to implement the PBR (PMREM based) environment mapping. Besides, the
     * method honors `Scene.environment`.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {?EnvironmentNode<vec3>} The environment node.
     */
    setupEnvironment(builder) {
      let envNode = super.setupEnvironment(builder);
      if (envNode === null && builder.environmentNode) {
        envNode = builder.environmentNode;
      }
      return envNode ? new EnvironmentNode(envNode) : null;
    }
    /**
     * Setups the lighting model.
     *
     * @return {PhysicalLightingModel} The lighting model.
     */
    setupLightingModel() {
      return new PhysicalLightingModel();
    }
    /**
     * Setups the specular related node variables.
     */
    setupSpecular() {
      const specularColorNode = mix(vec3(0.04), diffuseColor.rgb, metalness);
      specularColor.assign(specularColorNode);
      specularF90.assign(1);
    }
    /**
     * Setups the standard specific node variables.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    setupVariants() {
      const metalnessNode = this.metalnessNode ? float(this.metalnessNode) : materialMetalness;
      metalness.assign(metalnessNode);
      let roughnessNode = this.roughnessNode ? float(this.roughnessNode) : materialRoughness;
      roughnessNode = getRoughness({ roughness: roughnessNode });
      roughness.assign(roughnessNode);
      this.setupSpecular();
      diffuseColor.assign(vec4(diffuseColor.rgb.mul(metalnessNode.oneMinus()), diffuseColor.a));
    }
    copy(source) {
      this.emissiveNode = source.emissiveNode;
      this.metalnessNode = source.metalnessNode;
      this.roughnessNode = source.roughnessNode;
      return super.copy(source);
    }
  };
  var _defaultValues$5 = /* @__PURE__ */ new MeshPhysicalMaterial();
  var MeshPhysicalNodeMaterial = class extends MeshStandardNodeMaterial {
    static get type() {
      return "MeshPhysicalNodeMaterial";
    }
    /**
     * Constructs a new mesh physical node material.
     *
     * @param {Object} [parameters] - The configuration parameter.
     */
    constructor(parameters) {
      super();
      this.isMeshPhysicalNodeMaterial = true;
      this.clearcoatNode = null;
      this.clearcoatRoughnessNode = null;
      this.clearcoatNormalNode = null;
      this.sheenNode = null;
      this.sheenRoughnessNode = null;
      this.iridescenceNode = null;
      this.iridescenceIORNode = null;
      this.iridescenceThicknessNode = null;
      this.specularIntensityNode = null;
      this.specularColorNode = null;
      this.iorNode = null;
      this.transmissionNode = null;
      this.thicknessNode = null;
      this.attenuationDistanceNode = null;
      this.attenuationColorNode = null;
      this.dispersionNode = null;
      this.anisotropyNode = null;
      this.setDefaultValues(_defaultValues$5);
      this.setValues(parameters);
    }
    /**
     * Whether the lighting model should use clearcoat or not.
     *
     * @type {boolean}
     * @default true
     */
    get useClearcoat() {
      return this.clearcoat > 0 || this.clearcoatNode !== null;
    }
    /**
     * Whether the lighting model should use iridescence or not.
     *
     * @type {boolean}
     * @default true
     */
    get useIridescence() {
      return this.iridescence > 0 || this.iridescenceNode !== null;
    }
    /**
     * Whether the lighting model should use sheen or not.
     *
     * @type {boolean}
     * @default true
     */
    get useSheen() {
      return this.sheen > 0 || this.sheenNode !== null;
    }
    /**
     * Whether the lighting model should use anisotropy or not.
     *
     * @type {boolean}
     * @default true
     */
    get useAnisotropy() {
      return this.anisotropy > 0 || this.anisotropyNode !== null;
    }
    /**
     * Whether the lighting model should use transmission or not.
     *
     * @type {boolean}
     * @default true
     */
    get useTransmission() {
      return this.transmission > 0 || this.transmissionNode !== null;
    }
    /**
     * Whether the lighting model should use dispersion or not.
     *
     * @type {boolean}
     * @default true
     */
    get useDispersion() {
      return this.dispersion > 0 || this.dispersionNode !== null;
    }
    /**
     * Setups the specular related node variables.
     */
    setupSpecular() {
      const iorNode = this.iorNode ? float(this.iorNode) : materialIOR;
      ior.assign(iorNode);
      specularColor.assign(mix(min$1(pow2(ior.sub(1).div(ior.add(1))).mul(materialSpecularColor), vec3(1)).mul(materialSpecularIntensity), diffuseColor.rgb, metalness));
      specularF90.assign(mix(materialSpecularIntensity, 1, metalness));
    }
    /**
     * Setups the lighting model.
     *
     * @return {PhysicalLightingModel} The lighting model.
     */
    setupLightingModel() {
      return new PhysicalLightingModel(this.useClearcoat, this.useSheen, this.useIridescence, this.useAnisotropy, this.useTransmission, this.useDispersion);
    }
    /**
     * Setups the physical specific node variables.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    setupVariants(builder) {
      super.setupVariants(builder);
      if (this.useClearcoat) {
        const clearcoatNode = this.clearcoatNode ? float(this.clearcoatNode) : materialClearcoat;
        const clearcoatRoughnessNode = this.clearcoatRoughnessNode ? float(this.clearcoatRoughnessNode) : materialClearcoatRoughness;
        clearcoat.assign(clearcoatNode);
        clearcoatRoughness.assign(getRoughness({ roughness: clearcoatRoughnessNode }));
      }
      if (this.useSheen) {
        const sheenNode = this.sheenNode ? vec3(this.sheenNode) : materialSheen;
        const sheenRoughnessNode = this.sheenRoughnessNode ? float(this.sheenRoughnessNode) : materialSheenRoughness;
        sheen.assign(sheenNode);
        sheenRoughness.assign(sheenRoughnessNode);
      }
      if (this.useIridescence) {
        const iridescenceNode = this.iridescenceNode ? float(this.iridescenceNode) : materialIridescence;
        const iridescenceIORNode = this.iridescenceIORNode ? float(this.iridescenceIORNode) : materialIridescenceIOR;
        const iridescenceThicknessNode = this.iridescenceThicknessNode ? float(this.iridescenceThicknessNode) : materialIridescenceThickness;
        iridescence.assign(iridescenceNode);
        iridescenceIOR.assign(iridescenceIORNode);
        iridescenceThickness.assign(iridescenceThicknessNode);
      }
      if (this.useAnisotropy) {
        const anisotropyV = (this.anisotropyNode ? vec2(this.anisotropyNode) : materialAnisotropy).toVar();
        anisotropy.assign(anisotropyV.length());
        If(anisotropy.equal(0), () => {
          anisotropyV.assign(vec2(1, 0));
        }).Else(() => {
          anisotropyV.divAssign(vec2(anisotropy));
          anisotropy.assign(anisotropy.saturate());
        });
        alphaT.assign(anisotropy.pow2().mix(roughness.pow2(), 1));
        anisotropyT.assign(TBNViewMatrix[0].mul(anisotropyV.x).add(TBNViewMatrix[1].mul(anisotropyV.y)));
        anisotropyB.assign(TBNViewMatrix[1].mul(anisotropyV.x).sub(TBNViewMatrix[0].mul(anisotropyV.y)));
      }
      if (this.useTransmission) {
        const transmissionNode = this.transmissionNode ? float(this.transmissionNode) : materialTransmission;
        const thicknessNode = this.thicknessNode ? float(this.thicknessNode) : materialThickness;
        const attenuationDistanceNode = this.attenuationDistanceNode ? float(this.attenuationDistanceNode) : materialAttenuationDistance;
        const attenuationColorNode = this.attenuationColorNode ? vec3(this.attenuationColorNode) : materialAttenuationColor;
        transmission.assign(transmissionNode);
        thickness.assign(thicknessNode);
        attenuationDistance.assign(attenuationDistanceNode);
        attenuationColor.assign(attenuationColorNode);
        if (this.useDispersion) {
          const dispersionNode = this.dispersionNode ? float(this.dispersionNode) : materialDispersion;
          dispersion.assign(dispersionNode);
        }
      }
    }
    /**
     * Setups the clearcoat normal node.
     *
     * @return {Node<vec3>} The clearcoat normal.
     */
    setupClearcoatNormal() {
      return this.clearcoatNormalNode ? vec3(this.clearcoatNormalNode) : materialClearcoatNormal;
    }
    setup(builder) {
      builder.context.setupClearcoatNormal = () => this.setupClearcoatNormal(builder);
      super.setup(builder);
    }
    copy(source) {
      this.clearcoatNode = source.clearcoatNode;
      this.clearcoatRoughnessNode = source.clearcoatRoughnessNode;
      this.clearcoatNormalNode = source.clearcoatNormalNode;
      this.sheenNode = source.sheenNode;
      this.sheenRoughnessNode = source.sheenRoughnessNode;
      this.iridescenceNode = source.iridescenceNode;
      this.iridescenceIORNode = source.iridescenceIORNode;
      this.iridescenceThicknessNode = source.iridescenceThicknessNode;
      this.specularIntensityNode = source.specularIntensityNode;
      this.specularColorNode = source.specularColorNode;
      this.transmissionNode = source.transmissionNode;
      this.thicknessNode = source.thicknessNode;
      this.attenuationDistanceNode = source.attenuationDistanceNode;
      this.attenuationColorNode = source.attenuationColorNode;
      this.dispersionNode = source.dispersionNode;
      this.anisotropyNode = source.anisotropyNode;
      return super.copy(source);
    }
  };
  var getGradientIrradiance = /* @__PURE__ */ Fn(({ normal: normal2, lightDirection, builder }) => {
    const dotNL = normal2.dot(lightDirection);
    const coord = vec2(dotNL.mul(0.5).add(0.5), 0);
    if (builder.material.gradientMap) {
      const gradientMap = materialReference("gradientMap", "texture").context({ getUV: () => coord });
      return vec3(gradientMap.r);
    } else {
      const fw = coord.fwidth().mul(0.5);
      return mix(vec3(0.7), vec3(1), smoothstep2(float(0.7).sub(fw.x), float(0.7).add(fw.x), coord.x));
    }
  });
  var ToonLightingModel = class extends LightingModel {
    /**
     * Implements the direct lighting. Instead of using a conventional smooth irradiance, the irradiance is
     * reduced to a small number of discrete shades to create a comic-like, flat look.
     *
     * @param {Object} lightData - The light data.
     * @param {NodeBuilder} builder - The current node builder.
     */
    direct({ lightDirection, lightColor, reflectedLight }, builder) {
      const irradiance = getGradientIrradiance({ normal: normalGeometry, lightDirection, builder }).mul(lightColor);
      reflectedLight.directDiffuse.addAssign(irradiance.mul(BRDF_Lambert({ diffuseColor: diffuseColor.rgb })));
    }
    /**
     * Implements the indirect lighting.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    indirect(builder) {
      const { ambientOcclusion, irradiance, reflectedLight } = builder.context;
      reflectedLight.indirectDiffuse.addAssign(irradiance.mul(BRDF_Lambert({ diffuseColor })));
      reflectedLight.indirectDiffuse.mulAssign(ambientOcclusion);
    }
  };
  var _defaultValues$4 = /* @__PURE__ */ new MeshToonMaterial();
  var MeshToonNodeMaterial = class extends NodeMaterial {
    static get type() {
      return "MeshToonNodeMaterial";
    }
    /**
     * Constructs a new mesh toon node material.
     *
     * @param {Object} [parameters] - The configuration parameter.
     */
    constructor(parameters) {
      super();
      this.isMeshToonNodeMaterial = true;
      this.lights = true;
      this.setDefaultValues(_defaultValues$4);
      this.setValues(parameters);
    }
    /**
     * Setups the lighting model.
     *
     * @return {ToonLightingModel} The lighting model.
     */
    setupLightingModel() {
      return new ToonLightingModel();
    }
  };
  var MatcapUVNode = class extends TempNode {
    static get type() {
      return "MatcapUVNode";
    }
    /**
     * Constructs a new matcap uv node.
     */
    constructor() {
      super("vec2");
    }
    setup() {
      const x = vec3(positionViewDirection.z, 0, positionViewDirection.x.negate()).normalize();
      const y = positionViewDirection.cross(x);
      return vec2(x.dot(transformedNormalView), y.dot(transformedNormalView)).mul(0.495).add(0.5);
    }
  };
  var matcapUV = /* @__PURE__ */ nodeImmutable(MatcapUVNode);
  var _defaultValues$3 = /* @__PURE__ */ new MeshMatcapMaterial();
  var MeshMatcapNodeMaterial = class extends NodeMaterial {
    static get type() {
      return "MeshMatcapNodeMaterial";
    }
    /**
     * Constructs a new mesh normal node material.
     *
     * @param {Object} [parameters] - The configuration parameter.
     */
    constructor(parameters) {
      super();
      this.isMeshMatcapNodeMaterial = true;
      this.setDefaultValues(_defaultValues$3);
      this.setValues(parameters);
    }
    /**
     * Setups the matcap specific node variables.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    setupVariants(builder) {
      const uv2 = matcapUV;
      let matcapColor;
      if (builder.material.matcap) {
        matcapColor = materialReference("matcap", "texture").context({ getUV: () => uv2 });
      } else {
        matcapColor = vec3(mix(0.2, 0.8, uv2.y));
      }
      diffuseColor.rgb.mulAssign(matcapColor.rgb);
    }
  };
  var RotateNode = class extends TempNode {
    static get type() {
      return "RotateNode";
    }
    /**
     * Constructs a new rotate node.
     *
     * @param {Node} positionNode - The position node.
     * @param {Node} rotationNode - Represents the rotation that is applied to the position node. Depending
     * on whether the position data are 2D or 3D, the rotation is expressed a single float value or an Euler value.
     */
    constructor(positionNode, rotationNode) {
      super();
      this.positionNode = positionNode;
      this.rotationNode = rotationNode;
    }
    /**
     * The type of the {@link RotateNode#positionNode} defines the node's type.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The node's type.
     */
    getNodeType(builder) {
      return this.positionNode.getNodeType(builder);
    }
    setup(builder) {
      const { rotationNode, positionNode } = this;
      const nodeType = this.getNodeType(builder);
      if (nodeType === "vec2") {
        const cosAngle = rotationNode.cos();
        const sinAngle = rotationNode.sin();
        const rotationMatrix = mat2(
          cosAngle,
          sinAngle,
          sinAngle.negate(),
          cosAngle
        );
        return rotationMatrix.mul(positionNode);
      } else {
        const rotation = rotationNode;
        const rotationXMatrix = mat4(vec4(1, 0, 0, 0), vec4(0, cos(rotation.x), sin(rotation.x).negate(), 0), vec4(0, sin(rotation.x), cos(rotation.x), 0), vec4(0, 0, 0, 1));
        const rotationYMatrix = mat4(vec4(cos(rotation.y), 0, sin(rotation.y), 0), vec4(0, 1, 0, 0), vec4(sin(rotation.y).negate(), 0, cos(rotation.y), 0), vec4(0, 0, 0, 1));
        const rotationZMatrix = mat4(vec4(cos(rotation.z), sin(rotation.z).negate(), 0, 0), vec4(sin(rotation.z), cos(rotation.z), 0, 0), vec4(0, 0, 1, 0), vec4(0, 0, 0, 1));
        return rotationXMatrix.mul(rotationYMatrix).mul(rotationZMatrix).mul(vec4(positionNode, 1)).xyz;
      }
    }
  };
  var rotate = /* @__PURE__ */ nodeProxy(RotateNode).setParameterLength(2);
  var _defaultValues$2 = /* @__PURE__ */ new SpriteMaterial();
  var SpriteNodeMaterial = class extends NodeMaterial {
    static get type() {
      return "SpriteNodeMaterial";
    }
    /**
     * Constructs a new sprite node material.
     *
     * @param {Object} [parameters] - The configuration parameter.
     */
    constructor(parameters) {
      super();
      this.isSpriteNodeMaterial = true;
      this._useSizeAttenuation = true;
      this.positionNode = null;
      this.rotationNode = null;
      this.scaleNode = null;
      this.transparent = true;
      this.setDefaultValues(_defaultValues$2);
      this.setValues(parameters);
    }
    /**
     * Setups the position node in view space. This method implements
     * the sprite specific vertex shader.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {Node<vec3>} The position in view space.
     */
    setupPositionView(builder) {
      const { object, camera } = builder;
      const sizeAttenuation = this.sizeAttenuation;
      const { positionNode, rotationNode, scaleNode } = this;
      const mvPosition = modelViewMatrix.mul(vec3(positionNode || 0));
      let scale = vec2(modelWorldMatrix[0].xyz.length(), modelWorldMatrix[1].xyz.length());
      if (scaleNode !== null) {
        scale = scale.mul(vec2(scaleNode));
      }
      if (sizeAttenuation === false) {
        if (camera.isPerspectiveCamera) {
          scale = scale.mul(mvPosition.z.negate());
        } else {
          const orthoScale = float(2).div(cameraProjectionMatrix.element(1).element(1));
          scale = scale.mul(orthoScale.mul(2));
        }
      }
      let alignedPosition = positionGeometry.xy;
      if (object.center && object.center.isVector2 === true) {
        const center = reference$1("center", "vec2", object);
        alignedPosition = alignedPosition.sub(center.sub(0.5));
      }
      alignedPosition = alignedPosition.mul(scale);
      const rotation = float(rotationNode || materialRotation);
      const rotatedPosition = rotate(alignedPosition, rotation);
      return vec4(mvPosition.xy.add(rotatedPosition), mvPosition.zw);
    }
    copy(source) {
      this.positionNode = source.positionNode;
      this.rotationNode = source.rotationNode;
      this.scaleNode = source.scaleNode;
      return super.copy(source);
    }
    /**
     * Whether to use size attenuation or not.
     *
     * @type {boolean}
     * @default true
     */
    get sizeAttenuation() {
      return this._useSizeAttenuation;
    }
    set sizeAttenuation(value) {
      if (this._useSizeAttenuation !== value) {
        this._useSizeAttenuation = value;
        this.needsUpdate = true;
      }
    }
  };
  var _defaultValues$1 = /* @__PURE__ */ new PointsMaterial();
  var PointsNodeMaterial = class extends SpriteNodeMaterial {
    static get type() {
      return "PointsNodeMaterial";
    }
    /**
     * Constructs a new points node material.
     *
     * @param {Object} [parameters] - The configuration parameter.
     */
    constructor(parameters) {
      super();
      this.sizeNode = null;
      this.isPointsNodeMaterial = true;
      this.setDefaultValues(_defaultValues$1);
      this.setValues(parameters);
    }
    setupPositionView() {
      const { positionNode } = this;
      return modelViewMatrix.mul(vec3(positionNode || positionLocal)).xyz;
    }
    setupVertex(builder) {
      const mvp = super.setupVertex(builder);
      if (builder.material.isNodeMaterial !== true) {
        return mvp;
      }
      const { rotationNode, scaleNode, sizeNode } = this;
      const alignedPosition = positionGeometry.xy.toVar();
      const aspect2 = viewport.z.div(viewport.w);
      if (rotationNode && rotationNode.isNode) {
        const rotation = float(rotationNode);
        alignedPosition.assign(rotate(alignedPosition, rotation));
      }
      let pointSize = sizeNode !== null ? vec2(sizeNode) : materialPointSize;
      if (this.sizeAttenuation === true) {
        pointSize = pointSize.mul(pointSize.div(positionView.z.negate()));
      }
      if (scaleNode && scaleNode.isNode) {
        pointSize = pointSize.mul(vec2(scaleNode));
      }
      alignedPosition.mulAssign(pointSize.mul(2));
      alignedPosition.assign(alignedPosition.div(viewport.z));
      alignedPosition.y.assign(alignedPosition.y.mul(aspect2));
      alignedPosition.assign(alignedPosition.mul(mvp.w));
      mvp.addAssign(vec4(alignedPosition, 0, 0));
      return mvp;
    }
    /**
     * Whether alpha to coverage should be used or not.
     *
     * @type {boolean}
     * @default true
     */
    get alphaToCoverage() {
      return this._useAlphaToCoverage;
    }
    set alphaToCoverage(value) {
      if (this._useAlphaToCoverage !== value) {
        this._useAlphaToCoverage = value;
        this.needsUpdate = true;
      }
    }
  };
  var ShadowMaskModel = class extends LightingModel {
    /**
     * Constructs a new shadow mask model.
     */
    constructor() {
      super();
      this.shadowNode = float(1).toVar("shadowMask");
    }
    /**
     * Only used to save the shadow mask.
     *
     * @param {Object} input - The input data.
     */
    direct({ lightNode }) {
      if (lightNode.shadowNode !== null) {
        this.shadowNode.mulAssign(lightNode.shadowNode);
      }
    }
    /**
     * Uses the shadow mask to produce the final color.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    finish({ context: context2 }) {
      diffuseColor.a.mulAssign(this.shadowNode.oneMinus());
      context2.outgoingLight.rgb.assign(diffuseColor.rgb);
    }
  };
  var _defaultValues = /* @__PURE__ */ new ShadowMaterial();
  var ShadowNodeMaterial = class extends NodeMaterial {
    static get type() {
      return "ShadowNodeMaterial";
    }
    /**
     * Constructs a new shadow node material.
     *
     * @param {Object} [parameters] - The configuration parameter.
     */
    constructor(parameters) {
      super();
      this.isShadowNodeMaterial = true;
      this.lights = true;
      this.transparent = true;
      this.setDefaultValues(_defaultValues);
      this.setValues(parameters);
    }
    /**
     * Setups the lighting model.
     *
     * @return {ShadowMaskModel} The lighting model.
     */
    setupLightingModel() {
      return new ShadowMaskModel();
    }
  };
  var scatteringDensity = property("vec3");
  var linearDepthRay = property("vec3");
  var outgoingRayLight = property("vec3");
  var Animation = class {
    /**
     * Constructs a new animation loop management component.
     *
     * @param {Nodes} nodes - Renderer component for managing nodes related logic.
     * @param {Info} info - Renderer component for managing metrics and monitoring data.
     */
    constructor(nodes, info) {
      this.nodes = nodes;
      this.info = info;
      this._context = typeof self !== "undefined" ? self : null;
      this._animationLoop = null;
      this._requestId = null;
    }
    /**
     * Starts the internal animation loop.
     */
    start() {
      const update = (time, xrFrame) => {
        this._requestId = this._context.requestAnimationFrame(update);
        if (this.info.autoReset === true) this.info.reset();
        this.nodes.nodeFrame.update();
        this.info.frame = this.nodes.nodeFrame.frameId;
        if (this._animationLoop !== null) this._animationLoop(time, xrFrame);
      };
      update();
    }
    /**
     * Stops the internal animation loop.
     */
    stop() {
      this._context.cancelAnimationFrame(this._requestId);
      this._requestId = null;
    }
    /**
     * Returns the user-level animation loop.
     *
     * @return {?Function} The animation loop.
     */
    getAnimationLoop() {
      return this._animationLoop;
    }
    /**
     * Defines the user-level animation loop.
     *
     * @param {?Function} callback - The animation loop.
     */
    setAnimationLoop(callback) {
      this._animationLoop = callback;
    }
    /**
     * Returns the animation context.
     *
     * @return {Window|XRSession} The animation context.
     */
    getContext() {
      return this._context;
    }
    /**
     * Defines the context in which `requestAnimationFrame()` is executed.
     *
     * @param {Window|XRSession} context - The context to set.
     */
    setContext(context2) {
      this._context = context2;
    }
    /**
     * Frees all internal resources and stops the animation loop.
     */
    dispose() {
      this.stop();
    }
  };
  var ChainMap = class {
    /**
     * Constructs a new Chain Map.
     */
    constructor() {
      this.weakMap = /* @__PURE__ */ new WeakMap();
    }
    /**
     * Returns the value for the given array of keys.
     *
     * @param {Array<Object>} keys - List of keys.
     * @return {any} The value. Returns `undefined` if no value was found.
     */
    get(keys2) {
      let map = this.weakMap;
      for (let i = 0; i < keys2.length - 1; i++) {
        map = map.get(keys2[i]);
        if (map === void 0) return void 0;
      }
      return map.get(keys2[keys2.length - 1]);
    }
    /**
     * Sets the value for the given keys.
     *
     * @param {Array<Object>} keys - List of keys.
     * @param {any} value - The value to set.
     * @return {ChainMap} A reference to this Chain Map.
     */
    set(keys2, value) {
      let map = this.weakMap;
      for (let i = 0; i < keys2.length - 1; i++) {
        const key = keys2[i];
        if (map.has(key) === false) map.set(key, /* @__PURE__ */ new WeakMap());
        map = map.get(key);
      }
      map.set(keys2[keys2.length - 1], value);
      return this;
    }
    /**
     * Deletes a value for the given keys.
     *
     * @param {Array<Object>} keys - The keys.
     * @return {boolean} Returns `true` if the value has been removed successfully and `false` if the value has not be found.
     */
    delete(keys2) {
      let map = this.weakMap;
      for (let i = 0; i < keys2.length - 1; i++) {
        map = map.get(keys2[i]);
        if (map === void 0) return false;
      }
      return map.delete(keys2[keys2.length - 1]);
    }
  };
  var _id$9 = 0;
  function getKeys(obj) {
    const keys2 = Object.keys(obj);
    let proto = Object.getPrototypeOf(obj);
    while (proto) {
      const descriptors = Object.getOwnPropertyDescriptors(proto);
      for (const key in descriptors) {
        if (descriptors[key] !== void 0) {
          const descriptor = descriptors[key];
          if (descriptor && typeof descriptor.get === "function") {
            keys2.push(key);
          }
        }
      }
      proto = Object.getPrototypeOf(proto);
    }
    return keys2;
  }
  var RenderObject = class {
    /**
     * Constructs a new render object.
     *
     * @param {Nodes} nodes - Renderer component for managing nodes related logic.
     * @param {Geometries} geometries - Renderer component for managing geometries.
     * @param {Renderer} renderer - The renderer.
     * @param {Object3D} object - The 3D object.
     * @param {Material} material - The 3D object's material.
     * @param {Scene} scene - The scene the 3D object belongs to.
     * @param {Camera} camera - The camera the object should be rendered with.
     * @param {LightsNode} lightsNode - The lights node.
     * @param {RenderContext} renderContext - The render context.
     * @param {ClippingContext} clippingContext - The clipping context.
     */
    constructor(nodes, geometries, renderer, object, material2, scene, camera, lightsNode, renderContext, clippingContext) {
      this.id = _id$9++;
      this._nodes = nodes;
      this._geometries = geometries;
      this.renderer = renderer;
      this.object = object;
      this.material = material2;
      this.scene = scene;
      this.camera = camera;
      this.lightsNode = lightsNode;
      this.context = renderContext;
      this.geometry = object.geometry;
      this.version = material2.version;
      this.drawRange = null;
      this.attributes = null;
      this.pipeline = null;
      this.group = null;
      this.vertexBuffers = null;
      this.drawParams = null;
      this.bundle = null;
      this.clippingContext = clippingContext;
      this.clippingContextCacheKey = clippingContext !== null ? clippingContext.cacheKey : "";
      this.initialNodesCacheKey = this.getDynamicCacheKey();
      this.initialCacheKey = this.getCacheKey();
      this._nodeBuilderState = null;
      this._bindings = null;
      this._monitor = null;
      this.onDispose = null;
      this.isRenderObject = true;
      this.onMaterialDispose = () => {
        this.dispose();
      };
      this.material.addEventListener("dispose", this.onMaterialDispose);
    }
    /**
     * Updates the clipping context.
     *
     * @param {ClippingContext} context - The clipping context to set.
     */
    updateClipping(context2) {
      this.clippingContext = context2;
    }
    /**
     * Whether the clipping requires an update or not.
     *
     * @type {boolean}
     * @readonly
     */
    get clippingNeedsUpdate() {
      if (this.clippingContext === null || this.clippingContext.cacheKey === this.clippingContextCacheKey) return false;
      this.clippingContextCacheKey = this.clippingContext.cacheKey;
      return true;
    }
    /**
     * The number of clipping planes defined in context of hardware clipping.
     *
     * @type {number}
     * @readonly
     */
    get hardwareClippingPlanes() {
      return this.material.hardwareClipping === true ? this.clippingContext.unionClippingCount : 0;
    }
    /**
     * Returns the node builder state of this render object.
     *
     * @return {NodeBuilderState} The node builder state.
     */
    getNodeBuilderState() {
      return this._nodeBuilderState || (this._nodeBuilderState = this._nodes.getForRender(this));
    }
    /**
     * Returns the node material observer of this render object.
     *
     * @return {NodeMaterialObserver} The node material observer.
     */
    getMonitor() {
      return this._monitor || (this._monitor = this.getNodeBuilderState().observer);
    }
    /**
     * Returns an array of bind groups of this render object.
     *
     * @return {Array<BindGroup>} The bindings.
     */
    getBindings() {
      return this._bindings || (this._bindings = this.getNodeBuilderState().createBindings());
    }
    /**
     * Returns a binding group by group name of this render object.
     *
     * @param {string} name - The name of the binding group.
     * @return {?BindGroup} The bindings.
     */
    getBindingGroup(name2) {
      for (const bindingGroup of this.getBindings()) {
        if (bindingGroup.name === name2) {
          return bindingGroup;
        }
      }
    }
    /**
     * Returns the index of the render object's geometry.
     *
     * @return {?BufferAttribute} The index. Returns `null` for non-indexed geometries.
     */
    getIndex() {
      return this._geometries.getIndex(this);
    }
    /**
     * Returns the indirect buffer attribute.
     *
     * @return {?BufferAttribute} The indirect attribute. `null` if no indirect drawing is used.
     */
    getIndirect() {
      return this._geometries.getIndirect(this);
    }
    /**
     * Returns an array that acts as a key for identifying the render object in a chain map.
     *
     * @return {Array<Object>} An array with object references.
     */
    getChainArray() {
      return [this.object, this.material, this.context, this.lightsNode];
    }
    /**
     * This method is used when the geometry of a 3D object has been exchanged and the
     * respective render object now requires an update.
     *
     * @param {BufferGeometry} geometry - The geometry to set.
     */
    setGeometry(geometry) {
      this.geometry = geometry;
      this.attributes = null;
    }
    /**
     * Returns the buffer attributes of the render object. The returned array holds
     * attribute definitions on geometry and node level.
     *
     * @return {Array<BufferAttribute>} An array with buffer attributes.
     */
    getAttributes() {
      if (this.attributes !== null) return this.attributes;
      const nodeAttributes = this.getNodeBuilderState().nodeAttributes;
      const geometry = this.geometry;
      const attributes = [];
      const vertexBuffers = /* @__PURE__ */ new Set();
      for (const nodeAttribute of nodeAttributes) {
        const attribute2 = nodeAttribute.node && nodeAttribute.node.attribute ? nodeAttribute.node.attribute : geometry.getAttribute(nodeAttribute.name);
        if (attribute2 === void 0) continue;
        attributes.push(attribute2);
        const bufferAttribute2 = attribute2.isInterleavedBufferAttribute ? attribute2.data : attribute2;
        vertexBuffers.add(bufferAttribute2);
      }
      this.attributes = attributes;
      this.vertexBuffers = Array.from(vertexBuffers.values());
      return attributes;
    }
    /**
     * Returns the vertex buffers of the render object.
     *
     * @return {Array<BufferAttribute|InterleavedBuffer>} An array with buffer attribute or interleaved buffers.
     */
    getVertexBuffers() {
      if (this.vertexBuffers === null) this.getAttributes();
      return this.vertexBuffers;
    }
    /**
     * Returns the draw parameters for the render object.
     *
     * @return {?{vertexCount: number, firstVertex: number, instanceCount: number, firstInstance: number}} The draw parameters.
     */
    getDrawParameters() {
      const { object, material: material2, geometry, group, drawRange } = this;
      const drawParams = this.drawParams || (this.drawParams = {
        vertexCount: 0,
        firstVertex: 0,
        instanceCount: 0,
        firstInstance: 0
      });
      const index = this.getIndex();
      const hasIndex = index !== null;
      let instanceCount = 1;
      if (geometry.isInstancedBufferGeometry === true) {
        instanceCount = geometry.instanceCount;
      } else if (object.count !== void 0) {
        instanceCount = Math.max(0, object.count);
      }
      if (instanceCount === 0) return null;
      drawParams.instanceCount = instanceCount;
      if (object.isBatchedMesh === true) return drawParams;
      let rangeFactor = 1;
      if (material2.wireframe === true && !object.isPoints && !object.isLineSegments && !object.isLine && !object.isLineLoop) {
        rangeFactor = 2;
      }
      let firstVertex = drawRange.start * rangeFactor;
      let lastVertex = (drawRange.start + drawRange.count) * rangeFactor;
      if (group !== null) {
        firstVertex = Math.max(firstVertex, group.start * rangeFactor);
        lastVertex = Math.min(lastVertex, (group.start + group.count) * rangeFactor);
      }
      const position = geometry.attributes.position;
      let itemCount = Infinity;
      if (hasIndex) {
        itemCount = index.count;
      } else if (position !== void 0 && position !== null) {
        itemCount = position.count;
      }
      firstVertex = Math.max(firstVertex, 0);
      lastVertex = Math.min(lastVertex, itemCount);
      const count = lastVertex - firstVertex;
      if (count < 0 || count === Infinity) return null;
      drawParams.vertexCount = count;
      drawParams.firstVertex = firstVertex;
      return drawParams;
    }
    /**
     * Returns the render object's geometry cache key.
     *
     * The geometry cache key is part of the material cache key.
     *
     * @return {string} The geometry cache key.
     */
    getGeometryCacheKey() {
      const { geometry } = this;
      let cacheKey = "";
      for (const name2 of Object.keys(geometry.attributes).sort()) {
        const attribute2 = geometry.attributes[name2];
        cacheKey += name2 + ",";
        if (attribute2.data) cacheKey += attribute2.data.stride + ",";
        if (attribute2.offset) cacheKey += attribute2.offset + ",";
        if (attribute2.itemSize) cacheKey += attribute2.itemSize + ",";
        if (attribute2.normalized) cacheKey += "n,";
      }
      for (const name2 of Object.keys(geometry.morphAttributes).sort()) {
        const targets = geometry.morphAttributes[name2];
        cacheKey += "morph-" + name2 + ",";
        for (let i = 0, l = targets.length; i < l; i++) {
          const attribute2 = targets[i];
          cacheKey += attribute2.id + ",";
        }
      }
      if (geometry.index) {
        cacheKey += "index,";
      }
      return cacheKey;
    }
    /**
     * Returns the render object's material cache key.
     *
     * The material cache key is part of the render object cache key.
     *
     * @return {number} The material cache key.
     */
    getMaterialCacheKey() {
      const { object, material: material2 } = this;
      let cacheKey = material2.customProgramCacheKey();
      for (const property2 of getKeys(material2)) {
        if (/^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test(property2)) continue;
        const value = material2[property2];
        let valueKey;
        if (value !== null) {
          const type = typeof value;
          if (type === "number") {
            valueKey = value !== 0 ? "1" : "0";
          } else if (type === "object") {
            valueKey = "{";
            if (value.isTexture) {
              valueKey += value.mapping;
            }
            valueKey += "}";
          } else {
            valueKey = String(value);
          }
        } else {
          valueKey = String(value);
        }
        cacheKey += /*property + ':' +*/
        valueKey + ",";
      }
      cacheKey += this.clippingContextCacheKey + ",";
      if (object.geometry) {
        cacheKey += this.getGeometryCacheKey();
      }
      if (object.skeleton) {
        cacheKey += object.skeleton.bones.length + ",";
      }
      if (object.isBatchedMesh) {
        cacheKey += object._matricesTexture.uuid + ",";
        if (object._colorsTexture !== null) {
          cacheKey += object._colorsTexture.uuid + ",";
        }
      }
      if (object.count > 1) {
        cacheKey += object.uuid + ",";
      }
      cacheKey += object.receiveShadow + ",";
      return hashString(cacheKey);
    }
    /**
     * Whether the geometry requires an update or not.
     *
     * @type {boolean}
     * @readonly
     */
    get needsGeometryUpdate() {
      return this.geometry.id !== this.object.geometry.id;
    }
    /**
     * Whether the render object requires an update or not.
     *
     * Note: There are two distinct places where render objects are checked for an update.
     *
     * 1. In `RenderObjects.get()` which is executed when the render object is request. This
     * method checks the `needsUpdate` flag and recreates the render object if necessary.
     * 2. In `Renderer._renderObjectDirect()` right after getting the render object via
     * `RenderObjects.get()`. The render object's NodeMaterialObserver is then used to detect
     * a need for a refresh due to material, geometry or object related value changes.
     *
     * TODO: Investigate if it's possible to merge both steps so there is only a single place
     * that performs the 'needsUpdate' check.
     *
     * @type {boolean}
     * @readonly
     */
    get needsUpdate() {
      return (
        /*this.object.static !== true &&*/
        this.initialNodesCacheKey !== this.getDynamicCacheKey() || this.clippingNeedsUpdate
      );
    }
    /**
     * Returns the dynamic cache key which represents a key that is computed per draw command.
     *
     * @return {number} The cache key.
     */
    getDynamicCacheKey() {
      let cacheKey = 0;
      if (this.material.isShadowPassMaterial !== true) {
        cacheKey = this._nodes.getCacheKey(this.scene, this.lightsNode);
      }
      if (this.camera.isArrayCamera) {
        cacheKey = hash$1(cacheKey, this.camera.cameras.length);
      }
      if (this.object.receiveShadow) {
        cacheKey = hash$1(cacheKey, 1);
      }
      return cacheKey;
    }
    /**
     * Returns the render object's cache key.
     *
     * @return {number} The cache key.
     */
    getCacheKey() {
      return this.getMaterialCacheKey() + this.getDynamicCacheKey();
    }
    /**
     * Frees internal resources.
     */
    dispose() {
      this.material.removeEventListener("dispose", this.onMaterialDispose);
      this.onDispose();
    }
  };
  var _chainKeys$5 = [];
  var RenderObjects = class {
    /**
     * Constructs a new render object management component.
     *
     * @param {Renderer} renderer - The renderer.
     * @param {Nodes} nodes - Renderer component for managing nodes related logic.
     * @param {Geometries} geometries - Renderer component for managing geometries.
     * @param {Pipelines} pipelines - Renderer component for managing pipelines.
     * @param {Bindings} bindings - Renderer component for managing bindings.
     * @param {Info} info - Renderer component for managing metrics and monitoring data.
     */
    constructor(renderer, nodes, geometries, pipelines, bindings, info) {
      this.renderer = renderer;
      this.nodes = nodes;
      this.geometries = geometries;
      this.pipelines = pipelines;
      this.bindings = bindings;
      this.info = info;
      this.chainMaps = {};
    }
    /**
     * Returns a render object for the given object and state data.
     *
     * @param {Object3D} object - The 3D object.
     * @param {Material} material - The 3D object's material.
     * @param {Scene} scene - The scene the 3D object belongs to.
     * @param {Camera} camera - The camera the 3D object should be rendered with.
     * @param {LightsNode} lightsNode - The lights node.
     * @param {RenderContext} renderContext - The render context.
     * @param {ClippingContext} clippingContext - The clipping context.
     * @param {string} [passId] - An optional ID for identifying the pass.
     * @return {RenderObject} The render object.
     */
    get(object, material2, scene, camera, lightsNode, renderContext, clippingContext, passId) {
      const chainMap = this.getChainMap(passId);
      _chainKeys$5[0] = object;
      _chainKeys$5[1] = material2;
      _chainKeys$5[2] = renderContext;
      _chainKeys$5[3] = lightsNode;
      let renderObject = chainMap.get(_chainKeys$5);
      if (renderObject === void 0) {
        renderObject = this.createRenderObject(this.nodes, this.geometries, this.renderer, object, material2, scene, camera, lightsNode, renderContext, clippingContext, passId);
        chainMap.set(_chainKeys$5, renderObject);
      } else {
        renderObject.updateClipping(clippingContext);
        if (renderObject.needsGeometryUpdate) {
          renderObject.setGeometry(object.geometry);
        }
        if (renderObject.version !== material2.version || renderObject.needsUpdate) {
          if (renderObject.initialCacheKey !== renderObject.getCacheKey()) {
            renderObject.dispose();
            renderObject = this.get(object, material2, scene, camera, lightsNode, renderContext, clippingContext, passId);
          } else {
            renderObject.version = material2.version;
          }
        }
      }
      _chainKeys$5.length = 0;
      return renderObject;
    }
    /**
     * Returns a chain map for the given pass ID.
     *
     * @param {string} [passId='default'] - The pass ID.
     * @return {ChainMap} The chain map.
     */
    getChainMap(passId = "default") {
      return this.chainMaps[passId] || (this.chainMaps[passId] = new ChainMap());
    }
    /**
     * Frees internal resources.
     */
    dispose() {
      this.chainMaps = {};
    }
    /**
     * Factory method for creating render objects with the given list of parameters.
     *
     * @param {Nodes} nodes - Renderer component for managing nodes related logic.
     * @param {Geometries} geometries - Renderer component for managing geometries.
     * @param {Renderer} renderer - The renderer.
     * @param {Object3D} object - The 3D object.
     * @param {Material} material - The object's material.
     * @param {Scene} scene - The scene the 3D object belongs to.
     * @param {Camera} camera - The camera the object should be rendered with.
     * @param {LightsNode} lightsNode - The lights node.
     * @param {RenderContext} renderContext - The render context.
     * @param {ClippingContext} clippingContext - The clipping context.
     * @param {string} [passId] - An optional ID for identifying the pass.
     * @return {RenderObject} The render object.
     */
    createRenderObject(nodes, geometries, renderer, object, material2, scene, camera, lightsNode, renderContext, clippingContext, passId) {
      const chainMap = this.getChainMap(passId);
      const renderObject = new RenderObject(nodes, geometries, renderer, object, material2, scene, camera, lightsNode, renderContext, clippingContext);
      renderObject.onDispose = () => {
        this.pipelines.delete(renderObject);
        this.bindings.delete(renderObject);
        this.nodes.delete(renderObject);
        chainMap.delete(renderObject.getChainArray());
      };
      return renderObject;
    }
  };
  var DataMap = class {
    /**
     * Constructs a new data map.
     */
    constructor() {
      this.data = /* @__PURE__ */ new WeakMap();
    }
    /**
     * Returns the dictionary for the given object.
     *
     * @param {Object} object - The object.
     * @return {Object} The dictionary.
     */
    get(object) {
      let map = this.data.get(object);
      if (map === void 0) {
        map = {};
        this.data.set(object, map);
      }
      return map;
    }
    /**
     * Deletes the dictionary for the given object.
     *
     * @param {Object} object - The object.
     * @return {?Object} The deleted dictionary.
     */
    delete(object) {
      let map = null;
      if (this.data.has(object)) {
        map = this.data.get(object);
        this.data.delete(object);
      }
      return map;
    }
    /**
     * Returns `true` if the given object has a dictionary defined.
     *
     * @param {Object} object - The object to test.
     * @return {boolean} Whether a dictionary is defined or not.
     */
    has(object) {
      return this.data.has(object);
    }
    /**
     * Frees internal resources.
     */
    dispose() {
      this.data = /* @__PURE__ */ new WeakMap();
    }
  };
  var AttributeType = {
    VERTEX: 1,
    INDEX: 2,
    STORAGE: 3,
    INDIRECT: 4
  };
  var GPU_CHUNK_BYTES = 16;
  var BlendColorFactor = 211;
  var OneMinusBlendColorFactor = 212;
  var Attributes = class extends DataMap {
    /**
     * Constructs a new attribute management component.
     *
     * @param {Backend} backend - The renderer's backend.
     */
    constructor(backend) {
      super();
      this.backend = backend;
    }
    /**
     * Deletes the data for the given attribute.
     *
     * @param {BufferAttribute} attribute - The attribute.
     * @return {Object|null} The deleted attribute data.
     */
    delete(attribute2) {
      const attributeData = super.delete(attribute2);
      if (attributeData !== null) {
        this.backend.destroyAttribute(attribute2);
      }
      return attributeData;
    }
    /**
     * Updates the given attribute. This method creates attribute buffers
     * for new attributes and updates data for existing ones.
     *
     * @param {BufferAttribute} attribute - The attribute to update.
     * @param {number} type - The attribute type.
     */
    update(attribute2, type) {
      const data = this.get(attribute2);
      if (data.version === void 0) {
        if (type === AttributeType.VERTEX) {
          this.backend.createAttribute(attribute2);
        } else if (type === AttributeType.INDEX) {
          this.backend.createIndexAttribute(attribute2);
        } else if (type === AttributeType.STORAGE) {
          this.backend.createStorageAttribute(attribute2);
        } else if (type === AttributeType.INDIRECT) {
          this.backend.createIndirectStorageAttribute(attribute2);
        }
        data.version = this._getBufferAttribute(attribute2).version;
      } else {
        const bufferAttribute2 = this._getBufferAttribute(attribute2);
        if (data.version < bufferAttribute2.version || bufferAttribute2.usage === DynamicDrawUsage) {
          this.backend.updateAttribute(attribute2);
          data.version = bufferAttribute2.version;
        }
      }
    }
    /**
     * Utility method for handling interleaved buffer attributes correctly.
     * To process them, their `InterleavedBuffer` is returned.
     *
     * @param {BufferAttribute} attribute - The attribute.
     * @return {BufferAttribute|InterleavedBuffer}
     */
    _getBufferAttribute(attribute2) {
      if (attribute2.isInterleavedBufferAttribute) attribute2 = attribute2.data;
      return attribute2;
    }
  };
  function getWireframeVersion(geometry) {
    return geometry.index !== null ? geometry.index.version : geometry.attributes.position.version;
  }
  function getWireframeIndex(geometry) {
    const indices = [];
    const geometryIndex = geometry.index;
    const geometryPosition = geometry.attributes.position;
    if (geometryIndex !== null) {
      const array2 = geometryIndex.array;
      for (let i = 0, l = array2.length; i < l; i += 3) {
        const a = array2[i + 0];
        const b = array2[i + 1];
        const c = array2[i + 2];
        indices.push(a, b, b, c, c, a);
      }
    } else {
      const array2 = geometryPosition.array;
      for (let i = 0, l = array2.length / 3 - 1; i < l; i += 3) {
        const a = i + 0;
        const b = i + 1;
        const c = i + 2;
        indices.push(a, b, b, c, c, a);
      }
    }
    const attribute2 = new (arrayNeedsUint32(indices) ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
    attribute2.version = getWireframeVersion(geometry);
    return attribute2;
  }
  var Geometries = class extends DataMap {
    /**
     * Constructs a new geometry management component.
     *
     * @param {Attributes} attributes - Renderer component for managing attributes.
     * @param {Info} info - Renderer component for managing metrics and monitoring data.
     */
    constructor(attributes, info) {
      super();
      this.attributes = attributes;
      this.info = info;
      this.wireframes = /* @__PURE__ */ new WeakMap();
      this.attributeCall = /* @__PURE__ */ new WeakMap();
    }
    /**
     * Returns `true` if the given render object has an initialized geometry.
     *
     * @param {RenderObject} renderObject - The render object.
     * @return {boolean} Whether if the given render object has an initialized geometry or not.
     */
    has(renderObject) {
      const geometry = renderObject.geometry;
      return super.has(geometry) && this.get(geometry).initialized === true;
    }
    /**
     * Prepares the geometry of the given render object for rendering.
     *
     * @param {RenderObject} renderObject - The render object.
     */
    updateForRender(renderObject) {
      if (this.has(renderObject) === false) this.initGeometry(renderObject);
      this.updateAttributes(renderObject);
    }
    /**
     * Initializes the geometry of the given render object.
     *
     * @param {RenderObject} renderObject - The render object.
     */
    initGeometry(renderObject) {
      const geometry = renderObject.geometry;
      const geometryData = this.get(geometry);
      geometryData.initialized = true;
      this.info.memory.geometries++;
      const onDispose = () => {
        this.info.memory.geometries--;
        const index = geometry.index;
        const geometryAttributes = renderObject.getAttributes();
        if (index !== null) {
          this.attributes.delete(index);
        }
        for (const geometryAttribute of geometryAttributes) {
          this.attributes.delete(geometryAttribute);
        }
        const wireframeAttribute = this.wireframes.get(geometry);
        if (wireframeAttribute !== void 0) {
          this.attributes.delete(wireframeAttribute);
        }
        geometry.removeEventListener("dispose", onDispose);
      };
      geometry.addEventListener("dispose", onDispose);
    }
    /**
     * Updates the geometry attributes of the given render object.
     *
     * @param {RenderObject} renderObject - The render object.
     */
    updateAttributes(renderObject) {
      const attributes = renderObject.getAttributes();
      for (const attribute2 of attributes) {
        if (attribute2.isStorageBufferAttribute || attribute2.isStorageInstancedBufferAttribute) {
          this.updateAttribute(attribute2, AttributeType.STORAGE);
        } else {
          this.updateAttribute(attribute2, AttributeType.VERTEX);
        }
      }
      const index = this.getIndex(renderObject);
      if (index !== null) {
        this.updateAttribute(index, AttributeType.INDEX);
      }
      const indirect = renderObject.geometry.indirect;
      if (indirect !== null) {
        this.updateAttribute(indirect, AttributeType.INDIRECT);
      }
    }
    /**
     * Updates the given attribute.
     *
     * @param {BufferAttribute} attribute - The attribute to update.
     * @param {number} type - The attribute type.
     */
    updateAttribute(attribute2, type) {
      const callId = this.info.render.calls;
      if (!attribute2.isInterleavedBufferAttribute) {
        if (this.attributeCall.get(attribute2) !== callId) {
          this.attributes.update(attribute2, type);
          this.attributeCall.set(attribute2, callId);
        }
      } else {
        if (this.attributeCall.get(attribute2) === void 0) {
          this.attributes.update(attribute2, type);
          this.attributeCall.set(attribute2, callId);
        } else if (this.attributeCall.get(attribute2.data) !== callId) {
          this.attributes.update(attribute2, type);
          this.attributeCall.set(attribute2.data, callId);
          this.attributeCall.set(attribute2, callId);
        }
      }
    }
    /**
     * Returns the indirect buffer attribute of the given render object.
     *
     * @param {RenderObject} renderObject - The render object.
     * @return {?BufferAttribute} The indirect attribute. `null` if no indirect drawing is used.
     */
    getIndirect(renderObject) {
      return renderObject.geometry.indirect;
    }
    /**
     * Returns the index of the given render object's geometry. This is implemented
     * in a method to return a wireframe index if necessary.
     *
     * @param {RenderObject} renderObject - The render object.
     * @return {?BufferAttribute} The index. Returns `null` for non-indexed geometries.
     */
    getIndex(renderObject) {
      const { geometry, material: material2 } = renderObject;
      let index = geometry.index;
      if (material2.wireframe === true) {
        const wireframes = this.wireframes;
        let wireframeAttribute = wireframes.get(geometry);
        if (wireframeAttribute === void 0) {
          wireframeAttribute = getWireframeIndex(geometry);
          wireframes.set(geometry, wireframeAttribute);
        } else if (wireframeAttribute.version !== getWireframeVersion(geometry)) {
          this.attributes.delete(wireframeAttribute);
          wireframeAttribute = getWireframeIndex(geometry);
          wireframes.set(geometry, wireframeAttribute);
        }
        index = wireframeAttribute;
      }
      return index;
    }
  };
  var Info = class {
    /**
     * Constructs a new info component.
     */
    constructor() {
      this.autoReset = true;
      this.frame = 0;
      this.calls = 0;
      this.render = {
        calls: 0,
        frameCalls: 0,
        drawCalls: 0,
        triangles: 0,
        points: 0,
        lines: 0,
        timestamp: 0
      };
      this.compute = {
        calls: 0,
        frameCalls: 0,
        timestamp: 0
      };
      this.memory = {
        geometries: 0,
        textures: 0
      };
    }
    /**
     * This method should be executed per draw call and updates the corresponding metrics.
     *
     * @param {Object3D} object - The 3D object that is going to be rendered.
     * @param {number} count - The vertex or index count.
     * @param {number} instanceCount - The instance count.
     */
    update(object, count, instanceCount) {
      this.render.drawCalls++;
      if (object.isMesh || object.isSprite) {
        this.render.triangles += instanceCount * (count / 3);
      } else if (object.isPoints) {
        this.render.points += instanceCount * count;
      } else if (object.isLineSegments) {
        this.render.lines += instanceCount * (count / 2);
      } else if (object.isLine) {
        this.render.lines += instanceCount * (count - 1);
      } else {
        console.error("THREE.WebGPUInfo: Unknown object type.");
      }
    }
    /**
     * Resets frame related metrics.
     */
    reset() {
      this.render.drawCalls = 0;
      this.render.frameCalls = 0;
      this.compute.frameCalls = 0;
      this.render.triangles = 0;
      this.render.points = 0;
      this.render.lines = 0;
    }
    /**
     * Performs a complete reset of the object.
     */
    dispose() {
      this.reset();
      this.calls = 0;
      this.render.calls = 0;
      this.compute.calls = 0;
      this.render.timestamp = 0;
      this.compute.timestamp = 0;
      this.memory.geometries = 0;
      this.memory.textures = 0;
    }
  };
  var Pipeline = class {
    /**
     * Constructs a new pipeline.
     *
     * @param {string} cacheKey - The pipeline's cache key.
     */
    constructor(cacheKey) {
      this.cacheKey = cacheKey;
      this.usedTimes = 0;
    }
  };
  var RenderPipeline = class extends Pipeline {
    /**
     * Constructs a new render pipeline.
     *
     * @param {string} cacheKey - The pipeline's cache key.
     * @param {ProgrammableStage} vertexProgram - The pipeline's vertex shader.
     * @param {ProgrammableStage} fragmentProgram - The pipeline's fragment shader.
     */
    constructor(cacheKey, vertexProgram, fragmentProgram) {
      super(cacheKey);
      this.vertexProgram = vertexProgram;
      this.fragmentProgram = fragmentProgram;
    }
  };
  var ComputePipeline = class extends Pipeline {
    /**
     * Constructs a new render pipeline.
     *
     * @param {string} cacheKey - The pipeline's cache key.
     * @param {ProgrammableStage} computeProgram - The pipeline's compute shader.
     */
    constructor(cacheKey, computeProgram) {
      super(cacheKey);
      this.computeProgram = computeProgram;
      this.isComputePipeline = true;
    }
  };
  var _id$8 = 0;
  var ProgrammableStage = class {
    /**
     * Constructs a new programmable stage.
     *
     * @param {string} code - The shader code.
     * @param {('vertex'|'fragment'|'compute')} stage - The type of stage.
     * @param {string} name - The name of the shader.
     * @param {?Array<Object>} [transforms=null] - The transforms (only relevant for compute stages with WebGL 2 which uses Transform Feedback).
     * @param {?Array<Object>} [attributes=null] - The attributes (only relevant for compute stages with WebGL 2 which uses Transform Feedback).
     */
    constructor(code, stage, name2, transforms = null, attributes = null) {
      this.id = _id$8++;
      this.code = code;
      this.stage = stage;
      this.name = name2;
      this.transforms = transforms;
      this.attributes = attributes;
      this.usedTimes = 0;
    }
  };
  var Pipelines = class extends DataMap {
    /**
     * Constructs a new pipeline management component.
     *
     * @param {Backend} backend - The renderer's backend.
     * @param {Nodes} nodes - Renderer component for managing nodes related logic.
     */
    constructor(backend, nodes) {
      super();
      this.backend = backend;
      this.nodes = nodes;
      this.bindings = null;
      this.caches = /* @__PURE__ */ new Map();
      this.programs = {
        vertex: /* @__PURE__ */ new Map(),
        fragment: /* @__PURE__ */ new Map(),
        compute: /* @__PURE__ */ new Map()
      };
    }
    /**
     * Returns a compute pipeline for the given compute node.
     *
     * @param {Node} computeNode - The compute node.
     * @param {Array<BindGroup>} bindings - The bindings.
     * @return {ComputePipeline} The compute pipeline.
     */
    getForCompute(computeNode, bindings) {
      const { backend } = this;
      const data = this.get(computeNode);
      if (this._needsComputeUpdate(computeNode)) {
        const previousPipeline = data.pipeline;
        if (previousPipeline) {
          previousPipeline.usedTimes--;
          previousPipeline.computeProgram.usedTimes--;
        }
        const nodeBuilderState = this.nodes.getForCompute(computeNode);
        let stageCompute = this.programs.compute.get(nodeBuilderState.computeShader);
        if (stageCompute === void 0) {
          if (previousPipeline && previousPipeline.computeProgram.usedTimes === 0) this._releaseProgram(previousPipeline.computeProgram);
          stageCompute = new ProgrammableStage(nodeBuilderState.computeShader, "compute", computeNode.name, nodeBuilderState.transforms, nodeBuilderState.nodeAttributes);
          this.programs.compute.set(nodeBuilderState.computeShader, stageCompute);
          backend.createProgram(stageCompute);
        }
        const cacheKey = this._getComputeCacheKey(computeNode, stageCompute);
        let pipeline = this.caches.get(cacheKey);
        if (pipeline === void 0) {
          if (previousPipeline && previousPipeline.usedTimes === 0) this._releasePipeline(previousPipeline);
          pipeline = this._getComputePipeline(computeNode, stageCompute, cacheKey, bindings);
        }
        pipeline.usedTimes++;
        stageCompute.usedTimes++;
        data.version = computeNode.version;
        data.pipeline = pipeline;
      }
      return data.pipeline;
    }
    /**
     * Returns a render pipeline for the given render object.
     *
     * @param {RenderObject} renderObject - The render object.
     * @param {?Array<Promise>} [promises=null] - An array of compilation promises which is only relevant in context of `Renderer.compileAsync()`.
     * @return {RenderPipeline} The render pipeline.
     */
    getForRender(renderObject, promises = null) {
      const { backend } = this;
      const data = this.get(renderObject);
      if (this._needsRenderUpdate(renderObject)) {
        const previousPipeline = data.pipeline;
        if (previousPipeline) {
          previousPipeline.usedTimes--;
          previousPipeline.vertexProgram.usedTimes--;
          previousPipeline.fragmentProgram.usedTimes--;
        }
        const nodeBuilderState = renderObject.getNodeBuilderState();
        const name2 = renderObject.material ? renderObject.material.name : "";
        let stageVertex = this.programs.vertex.get(nodeBuilderState.vertexShader);
        if (stageVertex === void 0) {
          if (previousPipeline && previousPipeline.vertexProgram.usedTimes === 0) this._releaseProgram(previousPipeline.vertexProgram);
          stageVertex = new ProgrammableStage(nodeBuilderState.vertexShader, "vertex", name2);
          this.programs.vertex.set(nodeBuilderState.vertexShader, stageVertex);
          backend.createProgram(stageVertex);
        }
        let stageFragment = this.programs.fragment.get(nodeBuilderState.fragmentShader);
        if (stageFragment === void 0) {
          if (previousPipeline && previousPipeline.fragmentProgram.usedTimes === 0) this._releaseProgram(previousPipeline.fragmentProgram);
          stageFragment = new ProgrammableStage(nodeBuilderState.fragmentShader, "fragment", name2);
          this.programs.fragment.set(nodeBuilderState.fragmentShader, stageFragment);
          backend.createProgram(stageFragment);
        }
        const cacheKey = this._getRenderCacheKey(renderObject, stageVertex, stageFragment);
        let pipeline = this.caches.get(cacheKey);
        if (pipeline === void 0) {
          if (previousPipeline && previousPipeline.usedTimes === 0) this._releasePipeline(previousPipeline);
          pipeline = this._getRenderPipeline(renderObject, stageVertex, stageFragment, cacheKey, promises);
        } else {
          renderObject.pipeline = pipeline;
        }
        pipeline.usedTimes++;
        stageVertex.usedTimes++;
        stageFragment.usedTimes++;
        data.pipeline = pipeline;
      }
      return data.pipeline;
    }
    /**
     * Deletes the pipeline for the given render object.
     *
     * @param {RenderObject} object - The render object.
     * @return {?Object} The deleted dictionary.
     */
    delete(object) {
      const pipeline = this.get(object).pipeline;
      if (pipeline) {
        pipeline.usedTimes--;
        if (pipeline.usedTimes === 0) this._releasePipeline(pipeline);
        if (pipeline.isComputePipeline) {
          pipeline.computeProgram.usedTimes--;
          if (pipeline.computeProgram.usedTimes === 0) this._releaseProgram(pipeline.computeProgram);
        } else {
          pipeline.fragmentProgram.usedTimes--;
          pipeline.vertexProgram.usedTimes--;
          if (pipeline.vertexProgram.usedTimes === 0) this._releaseProgram(pipeline.vertexProgram);
          if (pipeline.fragmentProgram.usedTimes === 0) this._releaseProgram(pipeline.fragmentProgram);
        }
      }
      return super.delete(object);
    }
    /**
     * Frees internal resources.
     */
    dispose() {
      super.dispose();
      this.caches = /* @__PURE__ */ new Map();
      this.programs = {
        vertex: /* @__PURE__ */ new Map(),
        fragment: /* @__PURE__ */ new Map(),
        compute: /* @__PURE__ */ new Map()
      };
    }
    /**
     * Updates the pipeline for the given render object.
     *
     * @param {RenderObject} renderObject - The render object.
     */
    updateForRender(renderObject) {
      this.getForRender(renderObject);
    }
    /**
     * Returns a compute pipeline for the given parameters.
     *
     * @private
     * @param {Node} computeNode - The compute node.
     * @param {ProgrammableStage} stageCompute - The programmable stage representing the compute shader.
     * @param {string} cacheKey - The cache key.
     * @param {Array<BindGroup>} bindings - The bindings.
     * @return {ComputePipeline} The compute pipeline.
     */
    _getComputePipeline(computeNode, stageCompute, cacheKey, bindings) {
      cacheKey = cacheKey || this._getComputeCacheKey(computeNode, stageCompute);
      let pipeline = this.caches.get(cacheKey);
      if (pipeline === void 0) {
        pipeline = new ComputePipeline(cacheKey, stageCompute);
        this.caches.set(cacheKey, pipeline);
        this.backend.createComputePipeline(pipeline, bindings);
      }
      return pipeline;
    }
    /**
     * Returns a render pipeline for the given parameters.
     *
     * @private
     * @param {RenderObject} renderObject - The render object.
     * @param {ProgrammableStage} stageVertex - The programmable stage representing the vertex shader.
     * @param {ProgrammableStage} stageFragment - The programmable stage representing the fragment shader.
     * @param {string} cacheKey - The cache key.
     * @param {?Array<Promise>} promises - An array of compilation promises which is only relevant in context of `Renderer.compileAsync()`.
     * @return {ComputePipeline} The compute pipeline.
     */
    _getRenderPipeline(renderObject, stageVertex, stageFragment, cacheKey, promises) {
      cacheKey = cacheKey || this._getRenderCacheKey(renderObject, stageVertex, stageFragment);
      let pipeline = this.caches.get(cacheKey);
      if (pipeline === void 0) {
        pipeline = new RenderPipeline(cacheKey, stageVertex, stageFragment);
        this.caches.set(cacheKey, pipeline);
        renderObject.pipeline = pipeline;
        this.backend.createRenderPipeline(renderObject, promises);
      }
      return pipeline;
    }
    /**
     * Computes a cache key representing a compute pipeline.
     *
     * @private
     * @param {Node} computeNode - The compute node.
     * @param {ProgrammableStage} stageCompute - The programmable stage representing the compute shader.
     * @return {string} The cache key.
     */
    _getComputeCacheKey(computeNode, stageCompute) {
      return computeNode.id + "," + stageCompute.id;
    }
    /**
     * Computes a cache key representing a render pipeline.
     *
     * @private
     * @param {RenderObject} renderObject - The render object.
     * @param {ProgrammableStage} stageVertex - The programmable stage representing the vertex shader.
     * @param {ProgrammableStage} stageFragment - The programmable stage representing the fragment shader.
     * @return {string} The cache key.
     */
    _getRenderCacheKey(renderObject, stageVertex, stageFragment) {
      return stageVertex.id + "," + stageFragment.id + "," + this.backend.getRenderCacheKey(renderObject);
    }
    /**
     * Releases the given pipeline.
     *
     * @private
     * @param {Pipeline} pipeline - The pipeline to release.
     */
    _releasePipeline(pipeline) {
      this.caches.delete(pipeline.cacheKey);
    }
    /**
     * Releases the shader program.
     *
     * @private
     * @param {Object} program - The shader program to release.
     */
    _releaseProgram(program) {
      const code = program.code;
      const stage = program.stage;
      this.programs[stage].delete(code);
    }
    /**
     * Returns `true` if the compute pipeline for the given compute node requires an update.
     *
     * @private
     * @param {Node} computeNode - The compute node.
     * @return {boolean} Whether the compute pipeline for the given compute node requires an update or not.
     */
    _needsComputeUpdate(computeNode) {
      const data = this.get(computeNode);
      return data.pipeline === void 0 || data.version !== computeNode.version;
    }
    /**
     * Returns `true` if the render pipeline for the given render object requires an update.
     *
     * @private
     * @param {RenderObject} renderObject - The render object.
     * @return {boolean} Whether the render object for the given render object requires an update or not.
     */
    _needsRenderUpdate(renderObject) {
      const data = this.get(renderObject);
      return data.pipeline === void 0 || this.backend.needsRenderUpdate(renderObject);
    }
  };
  var Bindings = class extends DataMap {
    /**
     * Constructs a new bindings management component.
     *
     * @param {Backend} backend - The renderer's backend.
     * @param {Nodes} nodes - Renderer component for managing nodes related logic.
     * @param {Textures} textures - Renderer component for managing textures.
     * @param {Attributes} attributes - Renderer component for managing attributes.
     * @param {Pipelines} pipelines - Renderer component for managing pipelines.
     * @param {Info} info - Renderer component for managing metrics and monitoring data.
     */
    constructor(backend, nodes, textures, attributes, pipelines, info) {
      super();
      this.backend = backend;
      this.textures = textures;
      this.pipelines = pipelines;
      this.attributes = attributes;
      this.nodes = nodes;
      this.info = info;
      this.pipelines.bindings = this;
    }
    /**
     * Returns the bind groups for the given render object.
     *
     * @param {RenderObject} renderObject - The render object.
     * @return {Array<BindGroup>} The bind groups.
     */
    getForRender(renderObject) {
      const bindings = renderObject.getBindings();
      for (const bindGroup of bindings) {
        const groupData = this.get(bindGroup);
        if (groupData.bindGroup === void 0) {
          this._init(bindGroup);
          this.backend.createBindings(bindGroup, bindings, 0);
          groupData.bindGroup = bindGroup;
        }
      }
      return bindings;
    }
    /**
     * Returns the bind groups for the given compute node.
     *
     * @param {Node} computeNode - The compute node.
     * @return {Array<BindGroup>} The bind groups.
     */
    getForCompute(computeNode) {
      const bindings = this.nodes.getForCompute(computeNode).bindings;
      for (const bindGroup of bindings) {
        const groupData = this.get(bindGroup);
        if (groupData.bindGroup === void 0) {
          this._init(bindGroup);
          this.backend.createBindings(bindGroup, bindings, 0);
          groupData.bindGroup = bindGroup;
        }
      }
      return bindings;
    }
    /**
     * Updates the bindings for the given compute node.
     *
     * @param {Node} computeNode - The compute node.
     */
    updateForCompute(computeNode) {
      this._updateBindings(this.getForCompute(computeNode));
    }
    /**
     * Updates the bindings for the given render object.
     *
     * @param {RenderObject} renderObject - The render object.
     */
    updateForRender(renderObject) {
      this._updateBindings(this.getForRender(renderObject));
    }
    /**
     * Updates the given array of bindings.
     *
     * @param {Array<BindGroup>} bindings - The bind groups.
     */
    _updateBindings(bindings) {
      for (const bindGroup of bindings) {
        this._update(bindGroup, bindings);
      }
    }
    /**
     * Initializes the given bind group.
     *
     * @param {BindGroup} bindGroup - The bind group to initialize.
     */
    _init(bindGroup) {
      for (const binding of bindGroup.bindings) {
        if (binding.isSampledTexture) {
          this.textures.updateTexture(binding.texture);
        } else if (binding.isStorageBuffer) {
          const attribute2 = binding.attribute;
          const attributeType = attribute2.isIndirectStorageBufferAttribute ? AttributeType.INDIRECT : AttributeType.STORAGE;
          this.attributes.update(attribute2, attributeType);
        }
      }
    }
    /**
     * Updates the given bind group.
     *
     * @param {BindGroup} bindGroup - The bind group to update.
     * @param {Array<BindGroup>} bindings - The bind groups.
     */
    _update(bindGroup, bindings) {
      const { backend } = this;
      let needsBindingsUpdate = false;
      let cacheBindings = true;
      let cacheIndex = 0;
      let version = 0;
      for (const binding of bindGroup.bindings) {
        if (binding.isNodeUniformsGroup) {
          const updated = this.nodes.updateGroup(binding);
          if (updated === false) continue;
        }
        if (binding.isStorageBuffer) {
          const attribute2 = binding.attribute;
          const attributeType = attribute2.isIndirectStorageBufferAttribute ? AttributeType.INDIRECT : AttributeType.STORAGE;
          this.attributes.update(attribute2, attributeType);
        }
        if (binding.isUniformBuffer) {
          const updated = binding.update();
          if (updated) {
            backend.updateBinding(binding);
          }
        } else if (binding.isSampler) {
          binding.update();
        } else if (binding.isSampledTexture) {
          const texturesTextureData = this.textures.get(binding.texture);
          if (binding.needsBindingsUpdate(texturesTextureData.generation)) needsBindingsUpdate = true;
          const updated = binding.update();
          const texture2 = binding.texture;
          if (updated) {
            this.textures.updateTexture(texture2);
          }
          const textureData = backend.get(texture2);
          if (textureData.externalTexture !== void 0 || texturesTextureData.isDefaultTexture) {
            cacheBindings = false;
          } else {
            cacheIndex = cacheIndex * 10 + texture2.id;
            version += texture2.version;
          }
          if (backend.isWebGPUBackend === true && textureData.texture === void 0 && textureData.externalTexture === void 0) {
            console.error("Bindings._update: binding should be available:", binding, updated, texture2, binding.textureNode.value, needsBindingsUpdate);
            this.textures.updateTexture(texture2);
            needsBindingsUpdate = true;
          }
          if (texture2.isStorageTexture === true) {
            const textureData2 = this.get(texture2);
            if (binding.store === true) {
              textureData2.needsMipmap = true;
            } else if (this.textures.needsMipmaps(texture2) && textureData2.needsMipmap === true) {
              this.backend.generateMipmaps(texture2);
              textureData2.needsMipmap = false;
            }
          }
        }
      }
      if (needsBindingsUpdate === true) {
        this.backend.updateBindings(bindGroup, bindings, cacheBindings ? cacheIndex : 0, version);
      }
    }
  };
  function painterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) {
      return a.groupOrder - b.groupOrder;
    } else if (a.renderOrder !== b.renderOrder) {
      return a.renderOrder - b.renderOrder;
    } else if (a.z !== b.z) {
      return a.z - b.z;
    } else {
      return a.id - b.id;
    }
  }
  function reversePainterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) {
      return a.groupOrder - b.groupOrder;
    } else if (a.renderOrder !== b.renderOrder) {
      return a.renderOrder - b.renderOrder;
    } else if (a.z !== b.z) {
      return b.z - a.z;
    } else {
      return a.id - b.id;
    }
  }
  function needsDoublePass(material2) {
    const hasTransmission = material2.transmission > 0 || material2.transmissionNode;
    return hasTransmission && material2.side === DoubleSide && material2.forceSinglePass === false;
  }
  var RenderList = class {
    /**
     * Constructs a render list.
     *
     * @param {Lighting} lighting - The lighting management component.
     * @param {Scene} scene - The scene.
     * @param {Camera} camera - The camera the scene is rendered with.
     */
    constructor(lighting, scene, camera) {
      this.renderItems = [];
      this.renderItemsIndex = 0;
      this.opaque = [];
      this.transparentDoublePass = [];
      this.transparent = [];
      this.bundles = [];
      this.lightsNode = lighting.getNode(scene, camera);
      this.lightsArray = [];
      this.scene = scene;
      this.camera = camera;
      this.occlusionQueryCount = 0;
    }
    /**
     * This method is called right at the beginning of a render call
     * before the scene is analyzed. It prepares the internal data
     * structures for the upcoming render lists generation.
     *
     * @return {RenderList} A reference to this render list.
     */
    begin() {
      this.renderItemsIndex = 0;
      this.opaque.length = 0;
      this.transparentDoublePass.length = 0;
      this.transparent.length = 0;
      this.bundles.length = 0;
      this.lightsArray.length = 0;
      this.occlusionQueryCount = 0;
      return this;
    }
    /**
     * Returns a render item for the giving render item state. The state is defined
     * by a series of object-related parameters.
     *
     * The method avoids object creation by holding render items and reusing them in
     * subsequent render calls (just with different property values).
     *
     * @param {Object3D} object - The 3D object.
     * @param {BufferGeometry} geometry - The 3D object's geometry.
     * @param {Material} material - The 3D object's material.
     * @param {number} groupOrder - The current group order.
     * @param {number} z - Th 3D object's depth value (z value in clip space).
     * @param {?number} group - {?Object} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.
     * @param {ClippingContext} clippingContext - The current clipping context.
     * @return {Object} The render item.
     */
    getNextRenderItem(object, geometry, material2, groupOrder, z, group, clippingContext) {
      let renderItem = this.renderItems[this.renderItemsIndex];
      if (renderItem === void 0) {
        renderItem = {
          id: object.id,
          object,
          geometry,
          material: material2,
          groupOrder,
          renderOrder: object.renderOrder,
          z,
          group,
          clippingContext
        };
        this.renderItems[this.renderItemsIndex] = renderItem;
      } else {
        renderItem.id = object.id;
        renderItem.object = object;
        renderItem.geometry = geometry;
        renderItem.material = material2;
        renderItem.groupOrder = groupOrder;
        renderItem.renderOrder = object.renderOrder;
        renderItem.z = z;
        renderItem.group = group;
        renderItem.clippingContext = clippingContext;
      }
      this.renderItemsIndex++;
      return renderItem;
    }
    /**
     * Pushes the given object as a render item to the internal render lists.
     * The selected lists depend on the object properties.
     *
     * @param {Object3D} object - The 3D object.
     * @param {BufferGeometry} geometry - The 3D object's geometry.
     * @param {Material} material - The 3D object's material.
     * @param {number} groupOrder - The current group order.
     * @param {number} z - Th 3D object's depth value (z value in clip space).
     * @param {?number} group - {?Object} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.
     * @param {ClippingContext} clippingContext - The current clipping context.
     */
    push(object, geometry, material2, groupOrder, z, group, clippingContext) {
      const renderItem = this.getNextRenderItem(object, geometry, material2, groupOrder, z, group, clippingContext);
      if (object.occlusionTest === true) this.occlusionQueryCount++;
      if (material2.transparent === true || material2.transmission > 0) {
        if (needsDoublePass(material2)) this.transparentDoublePass.push(renderItem);
        this.transparent.push(renderItem);
      } else {
        this.opaque.push(renderItem);
      }
    }
    /**
     * Inserts the given object as a render item at the start of the internal render lists.
     * The selected lists depend on the object properties.
     *
     * @param {Object3D} object - The 3D object.
     * @param {BufferGeometry} geometry - The 3D object's geometry.
     * @param {Material} material - The 3D object's material.
     * @param {number} groupOrder - The current group order.
     * @param {number} z - Th 3D object's depth value (z value in clip space).
     * @param {?number} group - {?Object} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.
     * @param {ClippingContext} clippingContext - The current clipping context.
     */
    unshift(object, geometry, material2, groupOrder, z, group, clippingContext) {
      const renderItem = this.getNextRenderItem(object, geometry, material2, groupOrder, z, group, clippingContext);
      if (material2.transparent === true || material2.transmission > 0) {
        if (needsDoublePass(material2)) this.transparentDoublePass.unshift(renderItem);
        this.transparent.unshift(renderItem);
      } else {
        this.opaque.unshift(renderItem);
      }
    }
    /**
     * Pushes render bundle group data into the render list.
     *
     * @param {Object} group - Bundle group data.
     */
    pushBundle(group) {
      this.bundles.push(group);
    }
    /**
     * Pushes a light into the render list.
     *
     * @param {Light} light - The light.
     */
    pushLight(light) {
      this.lightsArray.push(light);
    }
    /**
     * Sorts the internal render lists.
     *
     * @param {?function(any, any): number} customOpaqueSort - A custom sort function for opaque objects.
     * @param {?function(any, any): number} customTransparentSort -  A custom sort function for transparent objects.
     */
    sort(customOpaqueSort, customTransparentSort) {
      if (this.opaque.length > 1) this.opaque.sort(customOpaqueSort || painterSortStable);
      if (this.transparentDoublePass.length > 1) this.transparentDoublePass.sort(customTransparentSort || reversePainterSortStable);
      if (this.transparent.length > 1) this.transparent.sort(customTransparentSort || reversePainterSortStable);
    }
    /**
     * This method performs finalizing tasks right after the render lists
     * have been generated.
     */
    finish() {
      this.lightsNode.setLights(this.lightsArray);
      for (let i = this.renderItemsIndex, il = this.renderItems.length; i < il; i++) {
        const renderItem = this.renderItems[i];
        if (renderItem.id === null) break;
        renderItem.id = null;
        renderItem.object = null;
        renderItem.geometry = null;
        renderItem.material = null;
        renderItem.groupOrder = null;
        renderItem.renderOrder = null;
        renderItem.z = null;
        renderItem.group = null;
        renderItem.clippingContext = null;
      }
    }
  };
  var _chainKeys$4 = [];
  var RenderLists = class {
    /**
     * Constructs a render lists management component.
     *
     * @param {Lighting} lighting - The lighting management component.
     */
    constructor(lighting) {
      this.lighting = lighting;
      this.lists = new ChainMap();
    }
    /**
     * Returns a render list for the given scene and camera.
     *
     * @param {Scene} scene - The scene.
     * @param {Camera} camera - The camera.
     * @return {RenderList} The render list.
     */
    get(scene, camera) {
      const lists = this.lists;
      _chainKeys$4[0] = scene;
      _chainKeys$4[1] = camera;
      let list = lists.get(_chainKeys$4);
      if (list === void 0) {
        list = new RenderList(this.lighting, scene, camera);
        lists.set(_chainKeys$4, list);
      }
      _chainKeys$4.length = 0;
      return list;
    }
    /**
     * Frees all internal resources.
     */
    dispose() {
      this.lists = new ChainMap();
    }
  };
  var _id$7 = 0;
  var RenderContext = class {
    /**
     * Constructs a new render context.
     */
    constructor() {
      this.id = _id$7++;
      this.color = true;
      this.clearColor = true;
      this.clearColorValue = { r: 0, g: 0, b: 0, a: 1 };
      this.depth = true;
      this.clearDepth = true;
      this.clearDepthValue = 1;
      this.stencil = false;
      this.clearStencil = true;
      this.clearStencilValue = 1;
      this.viewport = false;
      this.viewportValue = new Vector4();
      this.scissor = false;
      this.scissorValue = new Vector4();
      this.renderTarget = null;
      this.textures = null;
      this.depthTexture = null;
      this.activeCubeFace = 0;
      this.activeMipmapLevel = 0;
      this.sampleCount = 1;
      this.width = 0;
      this.height = 0;
      this.occlusionQueryCount = 0;
      this.clippingContext = null;
      this.isRenderContext = true;
    }
    /**
     * Returns the cache key of this render context.
     *
     * @return {number} The cache key.
     */
    getCacheKey() {
      return getCacheKey(this);
    }
  };
  function getCacheKey(renderContext) {
    const { textures, activeCubeFace } = renderContext;
    const values = [activeCubeFace];
    for (const texture2 of textures) {
      values.push(texture2.id);
    }
    return hashArray(values);
  }
  var _chainKeys$3 = [];
  var _defaultScene = /* @__PURE__ */ new Scene();
  var _defaultCamera = /* @__PURE__ */ new Camera();
  var RenderContexts = class {
    /**
     * Constructs a new render context management component.
     */
    constructor() {
      this.chainMaps = {};
    }
    /**
     * Returns a render context for the given scene, camera and render target.
     *
     * @param {Scene} scene - The scene.
     * @param {Camera} camera - The camera that is used to render the scene.
     * @param {?RenderTarget} [renderTarget=null] - The active render target.
     * @return {RenderContext} The render context.
     */
    get(scene, camera, renderTarget = null) {
      _chainKeys$3[0] = scene;
      _chainKeys$3[1] = camera;
      let attachmentState;
      if (renderTarget === null) {
        attachmentState = "default";
      } else {
        const format = renderTarget.texture.format;
        const count = renderTarget.textures.length;
        attachmentState = `${count}:${format}:${renderTarget.samples}:${renderTarget.depthBuffer}:${renderTarget.stencilBuffer}`;
      }
      const chainMap = this._getChainMap(attachmentState);
      let renderState = chainMap.get(_chainKeys$3);
      if (renderState === void 0) {
        renderState = new RenderContext();
        chainMap.set(_chainKeys$3, renderState);
      }
      _chainKeys$3.length = 0;
      if (renderTarget !== null) renderState.sampleCount = renderTarget.samples === 0 ? 1 : renderTarget.samples;
      return renderState;
    }
    /**
     * Returns a render context intended for clear operations.
     *
     * @param {?RenderTarget} [renderTarget=null] - The active render target.
     * @return {RenderContext} The render context.
     */
    getForClear(renderTarget = null) {
      return this.get(_defaultScene, _defaultCamera, renderTarget);
    }
    /**
     * Returns a chain map for the given attachment state.
     *
     * @private
     * @param {string} attachmentState - The attachment state.
     * @return {ChainMap} The chain map.
     */
    _getChainMap(attachmentState) {
      return this.chainMaps[attachmentState] || (this.chainMaps[attachmentState] = new ChainMap());
    }
    /**
     * Frees internal resources.
     */
    dispose() {
      this.chainMaps = {};
    }
  };
  var _size$3 = /* @__PURE__ */ new Vector3();
  var Textures = class extends DataMap {
    /**
     * Constructs a new texture management component.
     *
     * @param {Renderer} renderer - The renderer.
     * @param {Backend} backend - The renderer's backend.
     * @param {Info} info - Renderer component for managing metrics and monitoring data.
     */
    constructor(renderer, backend, info) {
      super();
      this.renderer = renderer;
      this.backend = backend;
      this.info = info;
    }
    /**
     * Updates the given render target. Based on the given render target configuration,
     * it updates the texture states representing the attachments of the framebuffer.
     *
     * @param {RenderTarget} renderTarget - The render target to update.
     * @param {number} [activeMipmapLevel=0] - The active mipmap level.
     */
    updateRenderTarget(renderTarget, activeMipmapLevel = 0) {
      const renderTargetData = this.get(renderTarget);
      const sampleCount = renderTarget.samples === 0 ? 1 : renderTarget.samples;
      const depthTextureMips = renderTargetData.depthTextureMips || (renderTargetData.depthTextureMips = {});
      const textures = renderTarget.textures;
      const size = this.getSize(textures[0]);
      const mipWidth = size.width >> activeMipmapLevel;
      const mipHeight = size.height >> activeMipmapLevel;
      let depthTexture = renderTarget.depthTexture || depthTextureMips[activeMipmapLevel];
      const useDepthTexture = renderTarget.depthBuffer === true || renderTarget.stencilBuffer === true;
      let textureNeedsUpdate = false;
      if (depthTexture === void 0 && useDepthTexture) {
        depthTexture = new DepthTexture();
        depthTexture.format = renderTarget.stencilBuffer ? DepthStencilFormat : DepthFormat;
        depthTexture.type = renderTarget.stencilBuffer ? UnsignedInt248Type : UnsignedIntType;
        depthTexture.image.width = mipWidth;
        depthTexture.image.height = mipHeight;
        depthTexture.image.depth = size.depth;
        depthTexture.isArrayTexture = renderTarget.multiview === true && size.depth > 1;
        depthTextureMips[activeMipmapLevel] = depthTexture;
      }
      if (renderTargetData.width !== size.width || size.height !== renderTargetData.height) {
        textureNeedsUpdate = true;
        if (depthTexture) {
          depthTexture.needsUpdate = true;
          depthTexture.image.width = mipWidth;
          depthTexture.image.height = mipHeight;
          depthTexture.image.depth = depthTexture.isArrayTexture ? depthTexture.image.depth : 1;
        }
      }
      renderTargetData.width = size.width;
      renderTargetData.height = size.height;
      renderTargetData.textures = textures;
      renderTargetData.depthTexture = depthTexture || null;
      renderTargetData.depth = renderTarget.depthBuffer;
      renderTargetData.stencil = renderTarget.stencilBuffer;
      renderTargetData.renderTarget = renderTarget;
      if (renderTargetData.sampleCount !== sampleCount) {
        textureNeedsUpdate = true;
        if (depthTexture) {
          depthTexture.needsUpdate = true;
        }
        renderTargetData.sampleCount = sampleCount;
      }
      const options = { sampleCount };
      if (renderTarget.isXRRenderTarget !== true) {
        for (let i = 0; i < textures.length; i++) {
          const texture2 = textures[i];
          if (textureNeedsUpdate) texture2.needsUpdate = true;
          this.updateTexture(texture2, options);
        }
        if (depthTexture) {
          this.updateTexture(depthTexture, options);
        }
      }
      if (renderTargetData.initialized !== true) {
        renderTargetData.initialized = true;
        const onDispose = () => {
          renderTarget.removeEventListener("dispose", onDispose);
          for (let i = 0; i < textures.length; i++) {
            this._destroyTexture(textures[i]);
          }
          if (depthTexture) {
            this._destroyTexture(depthTexture);
          }
          this.delete(renderTarget);
        };
        renderTarget.addEventListener("dispose", onDispose);
      }
    }
    /**
     * Updates the given texture. Depending on the texture state, this method
     * triggers the upload of texture data to the GPU memory. If the texture data are
     * not yet ready for the upload, it uses default texture data for as a placeholder.
     *
     * @param {Texture} texture - The texture to update.
     * @param {Object} [options={}] - The options.
     */
    updateTexture(texture2, options = {}) {
      const textureData = this.get(texture2);
      if (textureData.initialized === true && textureData.version === texture2.version) return;
      const isRenderTarget = texture2.isRenderTargetTexture || texture2.isDepthTexture || texture2.isFramebufferTexture;
      const backend = this.backend;
      if (isRenderTarget && textureData.initialized === true) {
        backend.destroySampler(texture2);
        backend.destroyTexture(texture2);
      }
      if (texture2.isFramebufferTexture) {
        const renderTarget = this.renderer.getRenderTarget();
        if (renderTarget) {
          texture2.type = renderTarget.texture.type;
        } else {
          texture2.type = UnsignedByteType;
        }
      }
      const { width, height, depth: depth2 } = this.getSize(texture2);
      options.width = width;
      options.height = height;
      options.depth = depth2;
      options.needsMipmaps = this.needsMipmaps(texture2);
      options.levels = options.needsMipmaps ? this.getMipLevels(texture2, width, height) : 1;
      if (isRenderTarget || texture2.isStorageTexture === true) {
        backend.createSampler(texture2);
        backend.createTexture(texture2, options);
        textureData.generation = texture2.version;
      } else {
        const needsCreate = textureData.initialized !== true;
        if (needsCreate) backend.createSampler(texture2);
        if (texture2.version > 0) {
          const image = texture2.image;
          if (image === void 0) {
            console.warn("THREE.Renderer: Texture marked for update but image is undefined.");
          } else if (image.complete === false) {
            console.warn("THREE.Renderer: Texture marked for update but image is incomplete.");
          } else {
            if (texture2.images) {
              const images = [];
              for (const image2 of texture2.images) {
                images.push(image2);
              }
              options.images = images;
            } else {
              options.image = image;
            }
            if (textureData.isDefaultTexture === void 0 || textureData.isDefaultTexture === true) {
              backend.createTexture(texture2, options);
              textureData.isDefaultTexture = false;
              textureData.generation = texture2.version;
            }
            if (texture2.source.dataReady === true) backend.updateTexture(texture2, options);
            if (options.needsMipmaps && texture2.mipmaps.length === 0) backend.generateMipmaps(texture2);
          }
        } else {
          backend.createDefaultTexture(texture2);
          textureData.isDefaultTexture = true;
          textureData.generation = texture2.version;
        }
      }
      if (textureData.initialized !== true) {
        textureData.initialized = true;
        textureData.generation = texture2.version;
        this.info.memory.textures++;
        const onDispose = () => {
          texture2.removeEventListener("dispose", onDispose);
          this._destroyTexture(texture2);
        };
        texture2.addEventListener("dispose", onDispose);
      }
      textureData.version = texture2.version;
    }
    /**
     * Computes the size of the given texture and writes the result
     * into the target vector. This vector is also returned by the
     * method.
     *
     * If no texture data are available for the compute yet, the method
     * returns default size values.
     *
     * @param {Texture} texture - The texture to compute the size for.
     * @param {Vector3} target - The target vector.
     * @return {Vector3} The target vector.
     */
    getSize(texture2, target = _size$3) {
      let image = texture2.images ? texture2.images[0] : texture2.image;
      if (image) {
        if (image.image !== void 0) image = image.image;
        target.width = image.width || 1;
        target.height = image.height || 1;
        target.depth = texture2.isCubeTexture ? 6 : image.depth || 1;
      } else {
        target.width = target.height = target.depth = 1;
      }
      return target;
    }
    /**
     * Computes the number of mipmap levels for the given texture.
     *
     * @param {Texture} texture - The texture.
     * @param {number} width - The texture's width.
     * @param {number} height - The texture's height.
     * @return {number} The number of mipmap levels.
     */
    getMipLevels(texture2, width, height) {
      let mipLevelCount;
      if (texture2.isCompressedTexture) {
        if (texture2.mipmaps) {
          mipLevelCount = texture2.mipmaps.length;
        } else {
          mipLevelCount = 1;
        }
      } else {
        mipLevelCount = Math.floor(Math.log2(Math.max(width, height))) + 1;
      }
      return mipLevelCount;
    }
    /**
     * Returns `true` if the given texture requires mipmaps.
     *
     * @param {Texture} texture - The texture.
     * @return {boolean} Whether mipmaps are required or not.
     */
    needsMipmaps(texture2) {
      return texture2.isCompressedTexture === true || texture2.generateMipmaps;
    }
    /**
     * Frees internal resource when the given texture isn't
     * required anymore.
     *
     * @param {Texture} texture - The texture to destroy.
     */
    _destroyTexture(texture2) {
      if (this.has(texture2) === true) {
        this.backend.destroySampler(texture2);
        this.backend.destroyTexture(texture2);
        this.delete(texture2);
        this.info.memory.textures--;
      }
    }
  };
  var Color4 = class extends Color {
    /**
     * Constructs a new four-component color.
     * You can also pass a single THREE.Color, hex or
     * string argument to this constructor.
     *
     * @param {number|string} [r=1] - The red value.
     * @param {number} [g=1] - The green value.
     * @param {number} [b=1] - The blue value.
     * @param {number} [a=1] - The alpha value.
     */
    constructor(r, g, b, a = 1) {
      super(r, g, b);
      this.a = a;
    }
    /**
     * Overwrites the default to honor alpha.
     * You can also pass a single THREE.Color, hex or
     * string argument to this method.
     *
     * @param {number|string|Color} r - The red value.
     * @param {number} g - The green value.
     * @param {number} b - The blue value.
     * @param {number} [a=1] - The alpha value.
     * @return {Color4} A reference to this object.
     */
    set(r, g, b, a = 1) {
      this.a = a;
      return super.set(r, g, b);
    }
    /**
     * Overwrites the default to honor alpha.
     *
     * @param {Color4} color - The color to copy.
     * @return {Color4} A reference to this object.
     */
    copy(color2) {
      if (color2.a !== void 0) this.a = color2.a;
      return super.copy(color2);
    }
    /**
     * Overwrites the default to honor alpha.
     *
     * @return {Color4} The cloned color.
     */
    clone() {
      return new this.constructor(this.r, this.g, this.b, this.a);
    }
  };
  var ParameterNode = class extends PropertyNode {
    static get type() {
      return "ParameterNode";
    }
    /**
     * Constructs a new parameter node.
     *
     * @param {string} nodeType - The type of the node.
     * @param {?string} [name=null] - The name of the parameter in the shader.
     */
    constructor(nodeType, name2 = null) {
      super(nodeType, name2);
      this.isParameterNode = true;
    }
    getHash() {
      return this.uuid;
    }
    generate() {
      return this.name;
    }
  };
  var StackNode = class extends Node {
    static get type() {
      return "StackNode";
    }
    /**
     * Constructs a new stack node.
     *
     * @param {?StackNode} [parent=null] - The parent stack node.
     */
    constructor(parent = null) {
      super();
      this.nodes = [];
      this.outputNode = null;
      this.parent = parent;
      this._currentCond = null;
      this._expressionNode = null;
      this.isStackNode = true;
    }
    getNodeType(builder) {
      return this.outputNode ? this.outputNode.getNodeType(builder) : "void";
    }
    getMemberType(builder, name2) {
      return this.outputNode ? this.outputNode.getMemberType(builder, name2) : "void";
    }
    /**
     * Adds a node to this stack.
     *
     * @param {Node} node - The node to add.
     * @return {StackNode} A reference to this stack node.
     */
    add(node) {
      this.nodes.push(node);
      return this;
    }
    /**
     * Represent an `if` statement in TSL.
     *
     * @param {Node} boolNode - Represents the condition.
     * @param {Function} method - TSL code which is executed if the condition evaluates to `true`.
     * @return {StackNode} A reference to this stack node.
     */
    If(boolNode, method) {
      const methodNode = new ShaderNode(method);
      this._currentCond = select(boolNode, methodNode);
      return this.add(this._currentCond);
    }
    /**
     * Represent an `elseif` statement in TSL.
     *
     * @param {Node} boolNode - Represents the condition.
     * @param {Function} method - TSL code which is executed if the condition evaluates to `true`.
     * @return {StackNode} A reference to this stack node.
     */
    ElseIf(boolNode, method) {
      const methodNode = new ShaderNode(method);
      const ifNode = select(boolNode, methodNode);
      this._currentCond.elseNode = ifNode;
      this._currentCond = ifNode;
      return this;
    }
    /**
     * Represent an `else` statement in TSL.
     *
     * @param {Function} method - TSL code which is executed in the `else` case.
     * @return {StackNode} A reference to this stack node.
     */
    Else(method) {
      this._currentCond.elseNode = new ShaderNode(method);
      return this;
    }
    /**
     * Represents a `switch` statement in TSL.
     *
     * @param {any} expression - Represents the expression.
     * @param {Function} method - TSL code which is executed if the condition evaluates to `true`.
     * @return {StackNode} A reference to this stack node.
     */
    Switch(expression2) {
      this._expressionNode = nodeObject(expression2);
      return this;
    }
    /**
     * Represents a `case` statement in TSL. The TSL version accepts an arbitrary numbers of values.
     * The last parameter must be the callback method that should be executed in the `true` case.
     *
     * @param {...any} params - The values of the `Case()` statement as well as the callback method.
     * @return {StackNode} A reference to this stack node.
     */
    Case(...params) {
      const caseNodes = [];
      if (params.length >= 2) {
        for (let i = 0; i < params.length - 1; i++) {
          caseNodes.push(this._expressionNode.equal(nodeObject(params[i])));
        }
      } else {
        throw new Error("TSL: Invalid parameter length. Case() requires at least two parameters.");
      }
      const method = params[params.length - 1];
      const methodNode = new ShaderNode(method);
      let caseNode = caseNodes[0];
      for (let i = 1; i < caseNodes.length; i++) {
        caseNode = caseNode.or(caseNodes[i]);
      }
      const condNode = select(caseNode, methodNode);
      if (this._currentCond === null) {
        this._currentCond = condNode;
        return this.add(this._currentCond);
      } else {
        this._currentCond.elseNode = condNode;
        this._currentCond = condNode;
        return this;
      }
    }
    /**
     * Represents the default code block of a Switch/Case statement.
     *
     * @param {Function} method - TSL code which is executed in the `else` case.
     * @return {StackNode} A reference to this stack node.
     */
    Default(method) {
      this.Else(method);
      return this;
    }
    build(builder, ...params) {
      const previousStack = getCurrentStack();
      setCurrentStack(this);
      const buildStage = builder.buildStage;
      for (const node of this.nodes) {
        if (buildStage === "setup") {
          node.build(builder);
        } else if (buildStage === "analyze") {
          node.build(builder, this);
        } else if (buildStage === "generate") {
          const stages = builder.getDataFromNode(node, "any").stages;
          const parents = stages && stages[builder.shaderStage];
          if (node.isVarNode && parents && parents.length === 1 && parents[0] && parents[0].isStackNode) {
            continue;
          }
          node.build(builder, "void");
        }
      }
      setCurrentStack(previousStack);
      return this.outputNode ? this.outputNode.build(builder, ...params) : super.build(builder, ...params);
    }
    // Deprecated
    /**
     * @function
     * @deprecated since r168. Use {@link StackNode#Else} instead.
     *
     * @param {...any} params
     * @returns {StackNode}
     */
    else(...params) {
      console.warn("THREE.TSL: .else() has been renamed to .Else().");
      return this.Else(...params);
    }
    /**
     * @deprecated since r168. Use {@link StackNode#ElseIf} instead.
     *
     * @param {...any} params
     * @returns {StackNode}
     */
    elseif(...params) {
      console.warn("THREE.TSL: .elseif() has been renamed to .ElseIf().");
      return this.ElseIf(...params);
    }
  };
  var stack = /* @__PURE__ */ nodeProxy(StackNode).setParameterLength(0, 1);
  var _reflectorPlane = new Plane();
  var _normal = new Vector3();
  var _reflectorWorldPosition = new Vector3();
  var _cameraWorldPosition = new Vector3();
  var _rotationMatrix = new Matrix4();
  var _lookAtPosition = new Vector3(0, 0, -1);
  var clipPlane = new Vector4();
  var _view = new Vector3();
  var _target2 = new Vector3();
  var _q = new Vector4();
  var _size$2 = new Vector2();
  var _defaultRT = new RenderTarget();
  var _defaultUV = screenUV.flipX();
  _defaultRT.depthTexture = new DepthTexture(1, 1);
  var _camera = /* @__PURE__ */ new OrthographicCamera(-1, 1, 1, -1, 0, 1);
  var QuadGeometry = class extends BufferGeometry {
    /**
     * Constructs a new quad geometry.
     *
     * @param {boolean} [flipY=false] - Whether the uv coordinates should be flipped along the vertical axis or not.
     */
    constructor(flipY = false) {
      super();
      const uv2 = flipY === false ? [0, -1, 0, 1, 2, 1] : [0, 2, 0, 0, 2, 0];
      this.setAttribute("position", new Float32BufferAttribute([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));
      this.setAttribute("uv", new Float32BufferAttribute(uv2, 2));
    }
  };
  var _geometry = /* @__PURE__ */ new QuadGeometry();
  var QuadMesh = class extends Mesh {
    /**
     * Constructs a new quad mesh.
     *
     * @param {?Material} [material=null] - The material to render the quad mesh with.
     */
    constructor(material2 = null) {
      super(_geometry, material2);
      this.camera = _camera;
      this.isQuadMesh = true;
    }
    /**
     * Async version of `render()`.
     *
     * @async
     * @param {Renderer} renderer - The renderer.
     * @return {Promise} A Promise that resolves when the render has been finished.
     */
    async renderAsync(renderer) {
      return renderer.renderAsync(this, _camera);
    }
    /**
     * Renders the quad mesh
     *
     * @param {Renderer} renderer - The renderer.
     */
    render(renderer) {
      renderer.render(this, _camera);
    }
  };
  var _e1 = /* @__PURE__ */ new Euler();
  var _m12 = /* @__PURE__ */ new Matrix4();
  var SceneNode = class _SceneNode extends Node {
    static get type() {
      return "SceneNode";
    }
    /**
     * Constructs a new scene node.
     *
     * @param {('backgroundBlurriness'|'backgroundIntensity'|'backgroundRotation')} scope - The scope defines the type of scene property that is accessed.
     * @param {?Scene} [scene=null] - A reference to the scene.
     */
    constructor(scope = _SceneNode.BACKGROUND_BLURRINESS, scene = null) {
      super();
      this.scope = scope;
      this.scene = scene;
    }
    /**
     * Depending on the scope, the method returns a different type of node that represents
     * the respective scene property.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {Node} The output node.
     */
    setup(builder) {
      const scope = this.scope;
      const scene = this.scene !== null ? this.scene : builder.scene;
      let output2;
      if (scope === _SceneNode.BACKGROUND_BLURRINESS) {
        output2 = reference("backgroundBlurriness", "float", scene);
      } else if (scope === _SceneNode.BACKGROUND_INTENSITY) {
        output2 = reference("backgroundIntensity", "float", scene);
      } else if (scope === _SceneNode.BACKGROUND_ROTATION) {
        output2 = uniform("mat4").label("backgroundRotation").setGroup(renderGroup).onRenderUpdate(() => {
          const background = scene.background;
          if (background !== null && background.isTexture && background.mapping !== UVMapping) {
            _e1.copy(scene.backgroundRotation);
            _e1.x *= -1;
            _e1.y *= -1;
            _e1.z *= -1;
            _m12.makeRotationFromEuler(_e1);
          } else {
            _m12.identity();
          }
          return _m12;
        });
      } else {
        console.error("THREE.SceneNode: Unknown scope:", scope);
      }
      return output2;
    }
  };
  SceneNode.BACKGROUND_BLURRINESS = "backgroundBlurriness";
  SceneNode.BACKGROUND_INTENSITY = "backgroundIntensity";
  SceneNode.BACKGROUND_ROTATION = "backgroundRotation";
  var backgroundBlurriness = /* @__PURE__ */ nodeImmutable(SceneNode, SceneNode.BACKGROUND_BLURRINESS);
  var backgroundIntensity = /* @__PURE__ */ nodeImmutable(SceneNode, SceneNode.BACKGROUND_INTENSITY);
  var backgroundRotation = /* @__PURE__ */ nodeImmutable(SceneNode, SceneNode.BACKGROUND_ROTATION);
  var normal = Fn(({ texture: texture2, uv: uv2 }) => {
    const epsilon = 1e-4;
    const ret = vec3().toVar();
    If(uv2.x.lessThan(epsilon), () => {
      ret.assign(vec3(1, 0, 0));
    }).ElseIf(uv2.y.lessThan(epsilon), () => {
      ret.assign(vec3(0, 1, 0));
    }).ElseIf(uv2.z.lessThan(epsilon), () => {
      ret.assign(vec3(0, 0, 1));
    }).ElseIf(uv2.x.greaterThan(1 - epsilon), () => {
      ret.assign(vec3(-1, 0, 0));
    }).ElseIf(uv2.y.greaterThan(1 - epsilon), () => {
      ret.assign(vec3(0, -1, 0));
    }).ElseIf(uv2.z.greaterThan(1 - epsilon), () => {
      ret.assign(vec3(0, 0, -1));
    }).Else(() => {
      const step2 = 0.01;
      const x = texture2.sample(uv2.add(vec3(-0.01, 0, 0))).r.sub(texture2.sample(uv2.add(vec3(step2, 0, 0))).r);
      const y = texture2.sample(uv2.add(vec3(0, -0.01, 0))).r.sub(texture2.sample(uv2.add(vec3(0, step2, 0))).r);
      const z = texture2.sample(uv2.add(vec3(0, 0, -0.01))).r.sub(texture2.sample(uv2.add(vec3(0, 0, step2))).r);
      ret.assign(vec3(x, y, z));
    });
    return ret.normalize();
  });
  var Texture3DNode = class extends TextureNode {
    static get type() {
      return "Texture3DNode";
    }
    /**
     * Constructs a new 3D texture node.
     *
     * @param {Data3DTexture} value - The 3D texture.
     * @param {?Node<vec2|vec3>} [uvNode=null] - The uv node.
     * @param {?Node<int>} [levelNode=null] - The level node.
     */
    constructor(value, uvNode = null, levelNode = null) {
      super(value, uvNode, levelNode);
      this.isTexture3DNode = true;
    }
    /**
     * Overwrites the default implementation to return a fixed value `'texture3D'`.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The input type.
     */
    getInputType() {
      return "texture3D";
    }
    /**
     * Returns a default uv node which is in context of 3D textures a three-dimensional
     * uv node.
     *
     * @return {Node<vec3>} The default uv node.
     */
    getDefaultUV() {
      return vec3(0.5, 0.5, 0.5);
    }
    /**
     * Overwritten with an empty implementation since the `updateMatrix` flag is ignored
     * for 3D textures. The uv transformation matrix is not applied to 3D textures.
     *
     * @param {boolean} value - The update toggle.
     */
    setUpdateMatrix() {
    }
    // Ignore .updateMatrix for 3d TextureNode
    /**
     * Overwrites the default implementation to return the unmodified uv node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @param {Node} uvNode - The uv node to setup.
     * @return {Node} The unmodified uv node.
     */
    setupUV(builder, uvNode) {
      const texture2 = this.value;
      if (builder.isFlipY() && (texture2.isRenderTargetTexture === true || texture2.isFramebufferTexture === true)) {
        if (this.sampler) {
          uvNode = uvNode.flipY();
        } else {
          uvNode = uvNode.setY(int(textureSize(this, this.levelNode).y).sub(uvNode.y).sub(1));
        }
      }
      return uvNode;
    }
    /**
     * Generates the uv code snippet.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @param {Node} uvNode - The uv node to generate code for.
     * @return {string} The generated code snippet.
     */
    generateUV(builder, uvNode) {
      return uvNode.build(builder, "vec3");
    }
    /**
     * TODO.
     *
     * @param {Node<vec3>} uvNode - The uv node .
     * @return {Node<vec3>} TODO.
     */
    normal(uvNode) {
      return normal({ texture: this, uv: uvNode });
    }
  };
  var texture3D = /* @__PURE__ */ nodeProxy(Texture3DNode).setParameterLength(1, 3);
  var _size = /* @__PURE__ */ new Vector2();
  var PassTextureNode = class extends TextureNode {
    static get type() {
      return "PassTextureNode";
    }
    /**
     * Constructs a new pass texture node.
     *
     * @param {PassNode} passNode - The pass node.
     * @param {Texture} texture - The output texture.
     */
    constructor(passNode, texture2) {
      super(texture2);
      this.passNode = passNode;
      this.setUpdateMatrix(false);
    }
    setup(builder) {
      if (builder.object.isQuadMesh) this.passNode.build(builder);
      return super.setup(builder);
    }
    clone() {
      return new this.constructor(this.passNode, this.value);
    }
  };
  var PassMultipleTextureNode = class extends PassTextureNode {
    static get type() {
      return "PassMultipleTextureNode";
    }
    /**
     * Constructs a new pass texture node.
     *
     * @param {PassNode} passNode - The pass node.
     * @param {string} textureName - The output texture name.
     * @param {boolean} [previousTexture=false] - Whether previous frame data should be used or not.
     */
    constructor(passNode, textureName, previousTexture = false) {
      super(passNode, null);
      this.textureName = textureName;
      this.previousTexture = previousTexture;
    }
    /**
     * Updates the texture reference of this node.
     */
    updateTexture() {
      this.value = this.previousTexture ? this.passNode.getPreviousTexture(this.textureName) : this.passNode.getTexture(this.textureName);
    }
    setup(builder) {
      this.updateTexture();
      return super.setup(builder);
    }
    clone() {
      return new this.constructor(this.passNode, this.textureName, this.previousTexture);
    }
  };
  var PassNode = class _PassNode extends TempNode {
    static get type() {
      return "PassNode";
    }
    /**
     * Constructs a new pass node.
     *
     * @param {('color'|'depth')} scope - The scope of the pass. The scope determines whether the node outputs color or depth.
     * @param {Scene} scene - A reference to the scene.
     * @param {Camera} camera - A reference to the camera.
     * @param {Object} options - Options for the internal render target.
     */
    constructor(scope, scene, camera, options = {}) {
      super("vec4");
      this.scope = scope;
      this.scene = scene;
      this.camera = camera;
      this.options = options;
      this._pixelRatio = 1;
      this._width = 1;
      this._height = 1;
      const depthTexture = new DepthTexture();
      depthTexture.isRenderTargetTexture = true;
      depthTexture.name = "depth";
      const renderTarget = new RenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType, ...options });
      renderTarget.texture.name = "output";
      renderTarget.depthTexture = depthTexture;
      this.renderTarget = renderTarget;
      this._textures = {
        output: renderTarget.texture,
        depth: depthTexture
      };
      this._textureNodes = {};
      this._linearDepthNodes = {};
      this._viewZNodes = {};
      this._previousTextures = {};
      this._previousTextureNodes = {};
      this._cameraNear = uniform(0);
      this._cameraFar = uniform(0);
      this._mrt = null;
      this._layers = null;
      this._resolution = 1;
      this.isPassNode = true;
      this.updateBeforeType = NodeUpdateType.FRAME;
      this.global = true;
    }
    /**
     * Sets the resolution for the pass.
     * The resolution is a factor that is multiplied with the renderer's width and height.
     *
     * @param {number} resolution - The resolution to set. A value of `1` means full resolution.
     * @return {PassNode} A reference to this pass.
     */
    setResolution(resolution) {
      this._resolution = resolution;
      return this;
    }
    /**
     * Gets the current resolution of the pass.
     *
     * @return {number} The current resolution. A value of `1` means full resolution.
     * @default 1
     */
    getResolution() {
      return this._resolution;
    }
    setLayers(layers) {
      this._layers = layers;
      return this;
    }
    getLayers() {
      return this._layers;
    }
    /**
     * Sets the given MRT node to setup MRT for this pass.
     *
     * @param {MRTNode} mrt - The MRT object.
     * @return {PassNode} A reference to this pass.
     */
    setMRT(mrt) {
      this._mrt = mrt;
      return this;
    }
    /**
     * Returns the current MRT node.
     *
     * @return {MRTNode} The current MRT node.
     */
    getMRT() {
      return this._mrt;
    }
    /**
     * Returns the texture for the given output name.
     *
     * @param {string} name - The output name to get the texture for.
     * @return {Texture} The texture.
     */
    getTexture(name2) {
      let texture2 = this._textures[name2];
      if (texture2 === void 0) {
        const refTexture = this.renderTarget.texture;
        texture2 = refTexture.clone();
        texture2.name = name2;
        this._textures[name2] = texture2;
        this.renderTarget.textures.push(texture2);
      }
      return texture2;
    }
    /**
     * Returns the texture holding the data of the previous frame for the given output name.
     *
     * @param {string} name - The output name to get the texture for.
     * @return {Texture} The texture holding the data of the previous frame.
     */
    getPreviousTexture(name2) {
      let texture2 = this._previousTextures[name2];
      if (texture2 === void 0) {
        texture2 = this.getTexture(name2).clone();
        this._previousTextures[name2] = texture2;
      }
      return texture2;
    }
    /**
     * Switches current and previous textures for the given output name.
     *
     * @param {string} name - The output name.
     */
    toggleTexture(name2) {
      const prevTexture = this._previousTextures[name2];
      if (prevTexture !== void 0) {
        const texture2 = this._textures[name2];
        const index = this.renderTarget.textures.indexOf(texture2);
        this.renderTarget.textures[index] = prevTexture;
        this._textures[name2] = prevTexture;
        this._previousTextures[name2] = texture2;
        this._textureNodes[name2].updateTexture();
        this._previousTextureNodes[name2].updateTexture();
      }
    }
    /**
     * Returns the texture node for the given output name.
     *
     * @param {string} [name='output'] - The output name to get the texture node for.
     * @return {TextureNode} The texture node.
     */
    getTextureNode(name2 = "output") {
      let textureNode = this._textureNodes[name2];
      if (textureNode === void 0) {
        textureNode = nodeObject(new PassMultipleTextureNode(this, name2));
        textureNode.updateTexture();
        this._textureNodes[name2] = textureNode;
      }
      return textureNode;
    }
    /**
     * Returns the previous texture node for the given output name.
     *
     * @param {string} [name='output'] - The output name to get the previous texture node for.
     * @return {TextureNode} The previous texture node.
     */
    getPreviousTextureNode(name2 = "output") {
      let textureNode = this._previousTextureNodes[name2];
      if (textureNode === void 0) {
        if (this._textureNodes[name2] === void 0) this.getTextureNode(name2);
        textureNode = nodeObject(new PassMultipleTextureNode(this, name2, true));
        textureNode.updateTexture();
        this._previousTextureNodes[name2] = textureNode;
      }
      return textureNode;
    }
    /**
     * Returns a viewZ node of this pass.
     *
     * @param {string} [name='depth'] - The output name to get the viewZ node for. In most cases the default `'depth'` can be used however the parameter exists for custom depth outputs.
     * @return {Node} The viewZ node.
     */
    getViewZNode(name2 = "depth") {
      let viewZNode = this._viewZNodes[name2];
      if (viewZNode === void 0) {
        const cameraNear2 = this._cameraNear;
        const cameraFar2 = this._cameraFar;
        this._viewZNodes[name2] = viewZNode = perspectiveDepthToViewZ(this.getTextureNode(name2), cameraNear2, cameraFar2);
      }
      return viewZNode;
    }
    /**
     * Returns a linear depth node of this pass.
     *
     * @param {string} [name='depth'] - The output name to get the linear depth node for. In most cases the default `'depth'` can be used however the parameter exists for custom depth outputs.
     * @return {Node} The linear depth node.
     */
    getLinearDepthNode(name2 = "depth") {
      let linearDepthNode = this._linearDepthNodes[name2];
      if (linearDepthNode === void 0) {
        const cameraNear2 = this._cameraNear;
        const cameraFar2 = this._cameraFar;
        const viewZNode = this.getViewZNode(name2);
        this._linearDepthNodes[name2] = linearDepthNode = viewZToOrthographicDepth(viewZNode, cameraNear2, cameraFar2);
      }
      return linearDepthNode;
    }
    setup({ renderer }) {
      this.renderTarget.samples = this.options.samples === void 0 ? renderer.samples : this.options.samples;
      if (renderer.backend.isWebGLBackend === true) {
        this.renderTarget.samples = 0;
      }
      this.renderTarget.texture.type = renderer.getColorBufferType();
      return this.scope === _PassNode.COLOR ? this.getTextureNode() : this.getLinearDepthNode();
    }
    updateBefore(frame) {
      const { renderer } = frame;
      const { scene } = this;
      let camera;
      let pixelRatio;
      const outputRenderTarget = renderer.getOutputRenderTarget();
      if (outputRenderTarget && outputRenderTarget.isXRRenderTarget === true) {
        pixelRatio = 1;
        camera = renderer.xr.getCamera();
        renderer.xr.updateCamera(camera);
        _size.set(outputRenderTarget.width, outputRenderTarget.height);
      } else {
        camera = this.camera;
        pixelRatio = renderer.getPixelRatio();
        renderer.getSize(_size);
      }
      this._pixelRatio = pixelRatio;
      this.setSize(_size.width, _size.height);
      const currentRenderTarget = renderer.getRenderTarget();
      const currentMRT = renderer.getMRT();
      const currentMask = camera.layers.mask;
      this._cameraNear.value = camera.near;
      this._cameraFar.value = camera.far;
      if (this._layers !== null) {
        camera.layers.mask = this._layers.mask;
      }
      for (const name2 in this._previousTextures) {
        this.toggleTexture(name2);
      }
      renderer.setRenderTarget(this.renderTarget);
      renderer.setMRT(this._mrt);
      renderer.render(scene, camera);
      renderer.setRenderTarget(currentRenderTarget);
      renderer.setMRT(currentMRT);
      camera.layers.mask = currentMask;
    }
    /**
     * Sets the size of the pass's render target. Honors the pixel ratio.
     *
     * @param {number} width - The width to set.
     * @param {number} height - The height to set.
     */
    setSize(width, height) {
      this._width = width;
      this._height = height;
      const effectiveWidth = this._width * this._pixelRatio * this._resolution;
      const effectiveHeight = this._height * this._pixelRatio * this._resolution;
      this.renderTarget.setSize(effectiveWidth, effectiveHeight);
    }
    /**
     * Sets the pixel ratio the pass's render target and updates the size.
     *
     * @param {number} pixelRatio - The pixel ratio to set.
     */
    setPixelRatio(pixelRatio) {
      this._pixelRatio = pixelRatio;
      this.setSize(this._width, this._height);
    }
    /**
     * Frees internal resources. Should be called when the node is no longer in use.
     */
    dispose() {
      this.renderTarget.dispose();
    }
  };
  PassNode.COLOR = "color";
  PassNode.DEPTH = "depth";
  var linearToneMapping = /* @__PURE__ */ Fn(([color2, exposure]) => {
    return color2.mul(exposure).clamp();
  }).setLayout({
    name: "linearToneMapping",
    type: "vec3",
    inputs: [
      { name: "color", type: "vec3" },
      { name: "exposure", type: "float" }
    ]
  });
  var reinhardToneMapping = /* @__PURE__ */ Fn(([color2, exposure]) => {
    color2 = color2.mul(exposure);
    return color2.div(color2.add(1)).clamp();
  }).setLayout({
    name: "reinhardToneMapping",
    type: "vec3",
    inputs: [
      { name: "color", type: "vec3" },
      { name: "exposure", type: "float" }
    ]
  });
  var cineonToneMapping = /* @__PURE__ */ Fn(([color2, exposure]) => {
    color2 = color2.mul(exposure);
    color2 = color2.sub(4e-3).max(0);
    const a = color2.mul(color2.mul(6.2).add(0.5));
    const b = color2.mul(color2.mul(6.2).add(1.7)).add(0.06);
    return a.div(b).pow(2.2);
  }).setLayout({
    name: "cineonToneMapping",
    type: "vec3",
    inputs: [
      { name: "color", type: "vec3" },
      { name: "exposure", type: "float" }
    ]
  });
  var RRTAndODTFit = /* @__PURE__ */ Fn(([color2]) => {
    const a = color2.mul(color2.add(0.0245786)).sub(90537e-9);
    const b = color2.mul(color2.add(0.432951).mul(0.983729)).add(0.238081);
    return a.div(b);
  });
  var acesFilmicToneMapping = /* @__PURE__ */ Fn(([color2, exposure]) => {
    const ACESInputMat = mat3(
      0.59719,
      0.35458,
      0.04823,
      0.076,
      0.90834,
      0.01566,
      0.0284,
      0.13383,
      0.83777
    );
    const ACESOutputMat = mat3(
      1.60475,
      -0.53108,
      -0.07367,
      -0.10208,
      1.10813,
      -605e-5,
      -327e-5,
      -0.07276,
      1.07602
    );
    color2 = color2.mul(exposure).div(0.6);
    color2 = ACESInputMat.mul(color2);
    color2 = RRTAndODTFit(color2);
    color2 = ACESOutputMat.mul(color2);
    return color2.clamp();
  }).setLayout({
    name: "acesFilmicToneMapping",
    type: "vec3",
    inputs: [
      { name: "color", type: "vec3" },
      { name: "exposure", type: "float" }
    ]
  });
  var LINEAR_REC2020_TO_LINEAR_SRGB = /* @__PURE__ */ mat3(vec3(1.6605, -0.1246, -0.0182), vec3(-0.5876, 1.1329, -0.1006), vec3(-0.0728, -83e-4, 1.1187));
  var LINEAR_SRGB_TO_LINEAR_REC2020 = /* @__PURE__ */ mat3(vec3(0.6274, 0.0691, 0.0164), vec3(0.3293, 0.9195, 0.088), vec3(0.0433, 0.0113, 0.8956));
  var agxDefaultContrastApprox = /* @__PURE__ */ Fn(([x_immutable]) => {
    const x = vec3(x_immutable).toVar();
    const x2 = vec3(x.mul(x)).toVar();
    const x4 = vec3(x2.mul(x2)).toVar();
    return float(15.5).mul(x4.mul(x2)).sub(mul(40.14, x4.mul(x))).add(mul(31.96, x4).sub(mul(6.868, x2.mul(x))).add(mul(0.4298, x2).add(mul(0.1191, x).sub(232e-5))));
  });
  var agxToneMapping = /* @__PURE__ */ Fn(([color2, exposure]) => {
    const colortone = vec3(color2).toVar();
    const AgXInsetMatrix = mat3(vec3(0.856627153315983, 0.137318972929847, 0.11189821299995), vec3(0.0951212405381588, 0.761241990602591, 0.0767994186031903), vec3(0.0482516061458583, 0.101439036467562, 0.811302368396859));
    const AgXOutsetMatrix = mat3(vec3(1.1271005818144368, -0.1413297634984383, -0.14132976349843826), vec3(-0.11060664309660323, 1.157823702216272, -0.11060664309660294), vec3(-0.016493938717834573, -0.016493938717834257, 1.2519364065950405));
    const AgxMinEv = float(-12.47393);
    const AgxMaxEv = float(4.026069);
    colortone.mulAssign(exposure);
    colortone.assign(LINEAR_SRGB_TO_LINEAR_REC2020.mul(colortone));
    colortone.assign(AgXInsetMatrix.mul(colortone));
    colortone.assign(max$1(colortone, 1e-10));
    colortone.assign(log2(colortone));
    colortone.assign(colortone.sub(AgxMinEv).div(AgxMaxEv.sub(AgxMinEv)));
    colortone.assign(clamp2(colortone, 0, 1));
    colortone.assign(agxDefaultContrastApprox(colortone));
    colortone.assign(AgXOutsetMatrix.mul(colortone));
    colortone.assign(pow(max$1(vec3(0), colortone), vec3(2.2)));
    colortone.assign(LINEAR_REC2020_TO_LINEAR_SRGB.mul(colortone));
    colortone.assign(clamp2(colortone, 0, 1));
    return colortone;
  }).setLayout({
    name: "agxToneMapping",
    type: "vec3",
    inputs: [
      { name: "color", type: "vec3" },
      { name: "exposure", type: "float" }
    ]
  });
  var neutralToneMapping = /* @__PURE__ */ Fn(([color2, exposure]) => {
    const StartCompression = float(0.8 - 0.04);
    const Desaturation = float(0.15);
    color2 = color2.mul(exposure);
    const x = min$1(color2.r, min$1(color2.g, color2.b));
    const offset = select(x.lessThan(0.08), x.sub(mul(6.25, x.mul(x))), 0.04);
    color2.subAssign(offset);
    const peak = max$1(color2.r, max$1(color2.g, color2.b));
    If(peak.lessThan(StartCompression), () => {
      return color2;
    });
    const d = sub(1, StartCompression);
    const newPeak = sub(1, d.mul(d).div(peak.add(d.sub(StartCompression))));
    color2.mulAssign(newPeak.div(peak));
    const g = sub(1, div(1, Desaturation.mul(peak.sub(newPeak)).add(1)));
    return mix(color2, vec3(newPeak), g);
  }).setLayout({
    name: "neutralToneMapping",
    type: "vec3",
    inputs: [
      { name: "color", type: "vec3" },
      { name: "exposure", type: "float" }
    ]
  });
  var CodeNode = class extends Node {
    static get type() {
      return "CodeNode";
    }
    /**
     * Constructs a new code node.
     *
     * @param {string} [code=''] - The native code.
     * @param {Array<Node>} [includes=[]] - An array of includes.
     * @param {('js'|'wgsl'|'glsl')} [language=''] - The used language.
     */
    constructor(code = "", includes = [], language2 = "") {
      super("code");
      this.isCodeNode = true;
      this.global = true;
      this.code = code;
      this.includes = includes;
      this.language = language2;
    }
    /**
     * Sets the includes of this code node.
     *
     * @param {Array<Node>} includes - The includes to set.
     * @return {CodeNode} A reference to this node.
     */
    setIncludes(includes) {
      this.includes = includes;
      return this;
    }
    /**
     * Returns the includes of this code node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {Array<Node>} The includes.
     */
    getIncludes() {
      return this.includes;
    }
    generate(builder) {
      const includes = this.getIncludes(builder);
      for (const include of includes) {
        include.build(builder);
      }
      const nodeCode = builder.getCodeFromNode(this, this.getNodeType(builder));
      nodeCode.code = this.code;
      return nodeCode.code;
    }
    serialize(data) {
      super.serialize(data);
      data.code = this.code;
      data.language = this.language;
    }
    deserialize(data) {
      super.deserialize(data);
      this.code = data.code;
      this.language = data.language;
    }
  };
  var FunctionNode = class extends CodeNode {
    static get type() {
      return "FunctionNode";
    }
    /**
     * Constructs a new function node.
     *
     * @param {string} [code=''] - The native code.
     * @param {Array<Node>} [includes=[]] - An array of includes.
     * @param {('js'|'wgsl'|'glsl')} [language=''] - The used language.
     */
    constructor(code = "", includes = [], language2 = "") {
      super(code, includes, language2);
    }
    getNodeType(builder) {
      return this.getNodeFunction(builder).type;
    }
    /**
     * Returns the inputs of this function node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {Array<NodeFunctionInput>} The inputs.
     */
    getInputs(builder) {
      return this.getNodeFunction(builder).inputs;
    }
    /**
     * Returns the node function for this function node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {NodeFunction} The node function.
     */
    getNodeFunction(builder) {
      const nodeData = builder.getDataFromNode(this);
      let nodeFunction = nodeData.nodeFunction;
      if (nodeFunction === void 0) {
        nodeFunction = builder.parser.parseFunction(this.code);
        nodeData.nodeFunction = nodeFunction;
      }
      return nodeFunction;
    }
    generate(builder, output2) {
      super.generate(builder);
      const nodeFunction = this.getNodeFunction(builder);
      const name2 = nodeFunction.name;
      const type = nodeFunction.type;
      const nodeCode = builder.getCodeFromNode(this, type);
      if (name2 !== "") {
        nodeCode.name = name2;
      }
      const propertyName2 = builder.getPropertyName(nodeCode);
      const code = this.getNodeFunction(builder).getCode(propertyName2);
      nodeCode.code = code + "\n";
      if (output2 === "property") {
        return propertyName2;
      } else {
        return builder.format(`${propertyName2}()`, type, output2);
      }
    }
  };
  var Resources = class extends Map {
    get(key, callback = null, ...params) {
      if (this.has(key)) return super.get(key);
      if (callback !== null) {
        const value = callback(...params);
        this.set(key, value);
        return value;
      }
    }
  };
  var ScriptableNodeResources = new Resources();
  function getViewZNode(builder) {
    let viewZ;
    const getViewZ = builder.context.getViewZ;
    if (getViewZ !== void 0) {
      viewZ = getViewZ(this);
    }
    return (viewZ || positionView.z).negate();
  }
  var rangeFogFactor = Fn(([near, far], builder) => {
    const viewZ = getViewZNode(builder);
    return smoothstep2(near, far, viewZ);
  });
  var densityFogFactor = Fn(([density], builder) => {
    const viewZ = getViewZNode(builder);
    return density.mul(density, viewZ, viewZ).negate().exp().oneMinus();
  });
  var fog = Fn(([color2, factor]) => {
    return vec4(factor.toFloat().mix(output.rgb, color2.toVec3()), output.a);
  });
  var BarrierNode = class extends Node {
    /**
     * Constructs a new barrier node.
     *
     * @param {string} scope - The scope defines the behavior of the node.
     */
    constructor(scope) {
      super();
      this.scope = scope;
    }
    generate(builder) {
      const { scope } = this;
      const { renderer } = builder;
      if (renderer.backend.isWebGLBackend === true) {
        builder.addFlowCode(`	// ${scope}Barrier 
`);
      } else {
        builder.addLineFlowCode(`${scope}Barrier()`, this);
      }
    }
  };
  var barrier = nodeProxy(BarrierNode);
  var AtomicFunctionNode = class extends Node {
    static get type() {
      return "AtomicFunctionNode";
    }
    /**
     * Constructs a new atomic function node.
     *
     * @param {string} method - The signature of the atomic function to construct.
     * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.
     * @param {Node} valueNode - The value that mutates the atomic variable.
     */
    constructor(method, pointerNode, valueNode) {
      super("uint");
      this.method = method;
      this.pointerNode = pointerNode;
      this.valueNode = valueNode;
      this.parents = true;
    }
    /**
     * Overwrites the default implementation to return the type of
     * the pointer node.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The input type.
     */
    getInputType(builder) {
      return this.pointerNode.getNodeType(builder);
    }
    /**
     * Overwritten since the node type is inferred from the input type.
     *
     * @param {NodeBuilder} builder - The current node builder.
     * @return {string} The node type.
     */
    getNodeType(builder) {
      return this.getInputType(builder);
    }
    generate(builder) {
      const properties = builder.getNodeProperties(this);
      const parents = properties.parents;
      const method = this.method;
      const type = this.getNodeType(builder);
      const inputType = this.getInputType(builder);
      const a = this.pointerNode;
      const b = this.valueNode;
      const params = [];
      params.push(`&${a.build(builder, inputType)}`);
      if (b !== null) {
        params.push(b.build(builder, inputType));
      }
      const methodSnippet = `${builder.getMethod(method, type)}( ${params.join(", ")} )`;
      const isVoid = parents.length === 1 && parents[0].isStackNode === true;
      if (isVoid) {
        builder.addLineFlowCode(methodSnippet, this);
      } else {
        if (properties.constNode === void 0) {
          properties.constNode = expression(methodSnippet, type).toConst();
        }
        return properties.constNode.build(builder);
      }
    }
  };
  AtomicFunctionNode.ATOMIC_LOAD = "atomicLoad";
  AtomicFunctionNode.ATOMIC_STORE = "atomicStore";
  AtomicFunctionNode.ATOMIC_ADD = "atomicAdd";
  AtomicFunctionNode.ATOMIC_SUB = "atomicSub";
  AtomicFunctionNode.ATOMIC_MAX = "atomicMax";
  AtomicFunctionNode.ATOMIC_MIN = "atomicMin";
  AtomicFunctionNode.ATOMIC_AND = "atomicAnd";
  AtomicFunctionNode.ATOMIC_OR = "atomicOr";
  AtomicFunctionNode.ATOMIC_XOR = "atomicXor";
  var atomicNode = nodeProxy(AtomicFunctionNode);
  var uniformsLib;
  function getLightData(light) {
    uniformsLib = uniformsLib || /* @__PURE__ */ new WeakMap();
    let uniforms = uniformsLib.get(light);
    if (uniforms === void 0) uniformsLib.set(light, uniforms = {});
    return uniforms;
  }
  function lightShadowMatrix(light) {
    const data = getLightData(light);
    return data.shadowMatrix || (data.shadowMatrix = uniform("mat4").setGroup(renderGroup).onRenderUpdate((frame) => {
      if (light.castShadow !== true || frame.renderer.shadowMap.enabled === false) {
        light.shadow.updateMatrices(light);
      }
      return light.shadow.matrix;
    }));
  }
  function lightProjectionUV(light, position = positionWorld) {
    const spotLightCoord = lightShadowMatrix(light).mul(position);
    const projectionUV = spotLightCoord.xyz.div(spotLightCoord.w);
    return projectionUV;
  }
  function lightPosition(light) {
    const data = getLightData(light);
    return data.position || (data.position = uniform(new Vector3()).setGroup(renderGroup).onRenderUpdate((_, self2) => self2.value.setFromMatrixPosition(light.matrixWorld)));
  }
  function lightTargetPosition(light) {
    const data = getLightData(light);
    return data.targetPosition || (data.targetPosition = uniform(new Vector3()).setGroup(renderGroup).onRenderUpdate((_, self2) => self2.value.setFromMatrixPosition(light.target.matrixWorld)));
  }
  function lightViewPosition(light) {
    const data = getLightData(light);
    return data.viewPosition || (data.viewPosition = uniform(new Vector3()).setGroup(renderGroup).onRenderUpdate(({ camera }, self2) => {
      self2.value = self2.value || new Vector3();
      self2.value.setFromMatrixPosition(light.matrixWorld);
      self2.value.applyMatrix4(camera.matrixWorldInverse);
    }));
  }
  var lightTargetDirection = (light) => cameraViewMatrix.transformDirection(lightPosition(light).sub(lightTargetPosition(light)));
  var sortLights = (lights) => {
    return lights.sort((a, b) => a.id - b.id);
  };
  var getLightNodeById = (id2, lightNodes) => {
    for (const lightNode of lightNodes) {
      if (lightNode.isAnalyticLightNode && lightNode.light.id === id2) {
        return lightNode;
      }
    }
    return null;
  };
  var _lightsNodeRef = /* @__PURE__ */ new WeakMap();
  var _hashData = [];
  var LightsNode = class extends Node {
    static get type() {
      return "LightsNode";
    }
    /**
     * Constructs a new lights node.
     */
    constructor() {
      super("vec3");
      this.totalDiffuseNode = vec3().toVar();
      this.totalSpecularNode = vec3().toVar();
      this.outgoingLightNode = vec3().toVar();
      this._lights = [];
      this._lightNodes = null;
      this._lightNodesHash = null;
      this.global = true;
    }
    /**
     * Overwrites the default {@link Node#customCacheKey} implementation by including
     * light data into the cache key.
     *
     * @return {number} The custom cache key.
     */
    customCacheKey() {
      const lights = this._lights;
      for (let i = 0; i < lights.length; i++) {
        const light = lights[i];
        _hashData.push(light.id);
        _hashData.push(light.castShadow ? 1 : 0);
        if (light.isSpotLight === true) {
          const hashMap = light.map !== null ? light.map.id : -1;
          const hashColorNode = light.colorNode ? light.colorNode.getCacheKey() : -1;
          _hashData.push(hashMap, hashColorNode);
        }
      }
      const cacheKey = hashArray(_hashData);
      _hashData.length = 0;
      return cacheKey;
    }
    /**
     * Computes a hash value for identifying the current light nodes setup.
     *
     * @param {NodeBuilder} builder - A reference to the current node builder.
     * @return {string} The computed hash.
     */
    getHash(builder) {
      if (this._lightNodesHash === null) {
        if (this._lightNodes === null) this.setupLightsNode(builder);
        const hash = [];
        for (const lightNode of this._lightNodes) {
          hash.push(lightNode.getSelf().getHash());
        }
        this._lightNodesHash = "lights-" + hash.join(",");
      }
      return this._lightNodesHash;
    }
    analyze(builder) {
      const properties = builder.getNodeProperties(this);
      for (const node of properties.nodes) {
        node.build(builder);
      }
      properties.outputNode.build(builder);
    }
    /**
     * Creates lighting nodes for each scene light. This makes it possible to further
     * process lights in the node system.
     *
     * @param {NodeBuilder} builder - A reference to the current node builder.
     */
    setupLightsNode(builder) {
      const lightNodes = [];
      const previousLightNodes = this._lightNodes;
      const lights = sortLights(this._lights);
      const nodeLibrary = builder.renderer.library;
      for (const light of lights) {
        if (light.isNode) {
          lightNodes.push(nodeObject(light));
        } else {
          let lightNode = null;
          if (previousLightNodes !== null) {
            lightNode = getLightNodeById(light.id, previousLightNodes);
          }
          if (lightNode === null) {
            const lightNodeClass = nodeLibrary.getLightNodeClass(light.constructor);
            if (lightNodeClass === null) {
              console.warn(`LightsNode.setupNodeLights: Light node not found for ${light.constructor.name}`);
              continue;
            }
            let lightNode2 = null;
            if (!_lightsNodeRef.has(light)) {
              lightNode2 = nodeObject(new lightNodeClass(light));
              _lightsNodeRef.set(light, lightNode2);
            } else {
              lightNode2 = _lightsNodeRef.get(light);
            }
            lightNodes.push(lightNode2);
          }
        }
      }
      this._lightNodes = lightNodes;
    }
    /**
     * Sets up a direct light in the lighting model.
     *
     * @param {Object} builder - The builder object containing the context and stack.
     * @param {Object} lightNode - The light node.
     * @param {Object} lightData - The light object containing color and direction properties.
     */
    setupDirectLight(builder, lightNode, lightData) {
      const { lightingModel, reflectedLight } = builder.context;
      lightingModel.direct({
        ...lightData,
        lightNode,
        reflectedLight
      }, builder);
    }
    setupDirectRectAreaLight(builder, lightNode, lightData) {
      const { lightingModel, reflectedLight } = builder.context;
      lightingModel.directRectArea({
        ...lightData,
        lightNode,
        reflectedLight
      }, builder);
    }
    /**
     * Setups the internal lights by building all respective
     * light nodes.
     *
     * @param {NodeBuilder} builder - A reference to the current node builder.
     * @param {Array<LightingNode>} lightNodes - An array of lighting nodes.
     */
    setupLights(builder, lightNodes) {
      for (const lightNode of lightNodes) {
        lightNode.build(builder);
      }
    }
    getLightNodes(builder) {
      if (this._lightNodes === null) this.setupLightsNode(builder);
      return this._lightNodes;
    }
    /**
     * The implementation makes sure that for each light in the scene
     * there is a corresponding light node. By building the light nodes
     * and evaluating the lighting model the outgoing light is computed.
     *
     * @param {NodeBuilder} builder - A reference to the current node builder.
     * @return {Node<vec3>} A node representing the outgoing light.
     */
    setup(builder) {
      const currentLightsNode = builder.lightsNode;
      builder.lightsNode = this;
      let outgoingLightNode = this.outgoingLightNode;
      const context2 = builder.context;
      const lightingModel = context2.lightingModel;
      const properties = builder.getNodeProperties(this);
      if (lightingModel) {
        const { totalDiffuseNode, totalSpecularNode } = this;
        context2.outgoingLight = outgoingLightNode;
        const stack2 = builder.addStack();
        properties.nodes = stack2.nodes;
        lightingModel.start(builder);
        const { backdrop, backdropAlpha } = context2;
        const { directDiffuse, directSpecular, indirectDiffuse, indirectSpecular } = context2.reflectedLight;
        let totalDiffuse = directDiffuse.add(indirectDiffuse);
        if (backdrop !== null) {
          if (backdropAlpha !== null) {
            totalDiffuse = vec3(backdropAlpha.mix(totalDiffuse, backdrop));
          } else {
            totalDiffuse = vec3(backdrop);
          }
          context2.material.transparent = true;
        }
        totalDiffuseNode.assign(totalDiffuse);
        totalSpecularNode.assign(directSpecular.add(indirectSpecular));
        outgoingLightNode.assign(totalDiffuseNode.add(totalSpecularNode));
        lightingModel.finish(builder);
        outgoingLightNode = outgoingLightNode.bypass(builder.removeStack());
      } else {
        properties.nodes = [];
      }
      builder.lightsNode = currentLightsNode;
      return outgoingLightNode;
    }
    /**
     * Configures this node with an array of lights.
     *
     * @param {Array<Light>} lights - An array of lights.
     * @return {LightsNode} A reference to this node.
     */
    setLights(lights) {
      this._lights = lights;
      this._lightNodes = null;
      this._lightNodesHash = null;
      return this;
    }
    /**
     * Returns an array of the scene's lights.
     *
     * @return {Array<Light>} The scene's lights.
     */
    getLights() {
      return this._lights;
    }
    /**
     * Whether the scene has lights or not.
     *
     * @type {boolean}
     */
    get hasLights() {
      return this._lights.length > 0;
    }
  };
  var ShadowBaseNode = class extends Node {
    static get type() {
      return "ShadowBaseNode";
    }
    /**
     * Constructs a new shadow base node.
     *
     * @param {Light} light - The shadow casting light.
     */
    constructor(light) {
      super();
      this.light = light;
      this.updateBeforeType = NodeUpdateType.RENDER;
      this.isShadowBaseNode = true;
    }
    /**
     * Setups the shadow position node which is by default the predefined TSL node object `shadowPositionWorld`.
     *
     * @param {NodeBuilder} object - A configuration object that must at least hold a material reference.
     */
    setupShadowPosition({ context: context2, material: material2 }) {
      shadowPositionWorld.assign(material2.receivedShadowPositionNode || context2.shadowPositionWorld || positionWorld);
    }
  };
  var shadowPositionWorld = /* @__PURE__ */ property("vec3", "shadowPositionWorld");
  function saveRendererState(renderer, state = {}) {
    state.toneMapping = renderer.toneMapping;
    state.toneMappingExposure = renderer.toneMappingExposure;
    state.outputColorSpace = renderer.outputColorSpace;
    state.renderTarget = renderer.getRenderTarget();
    state.activeCubeFace = renderer.getActiveCubeFace();
    state.activeMipmapLevel = renderer.getActiveMipmapLevel();
    state.renderObjectFunction = renderer.getRenderObjectFunction();
    state.pixelRatio = renderer.getPixelRatio();
    state.mrt = renderer.getMRT();
    state.clearColor = renderer.getClearColor(state.clearColor || new Color());
    state.clearAlpha = renderer.getClearAlpha();
    state.autoClear = renderer.autoClear;
    state.scissorTest = renderer.getScissorTest();
    return state;
  }
  function resetRendererState(renderer, state) {
    state = saveRendererState(renderer, state);
    renderer.setMRT(null);
    renderer.setRenderObjectFunction(null);
    renderer.setClearColor(0, 1);
    renderer.autoClear = true;
    return state;
  }
  function restoreRendererState(renderer, state) {
    renderer.toneMapping = state.toneMapping;
    renderer.toneMappingExposure = state.toneMappingExposure;
    renderer.outputColorSpace = state.outputColorSpace;
    renderer.setRenderTarget(state.renderTarget, state.activeCubeFace, state.activeMipmapLevel);
    renderer.setRenderObjectFunction(state.renderObjectFunction);
    renderer.setPixelRatio(state.pixelRatio);
    renderer.setMRT(state.mrt);
    renderer.setClearColor(state.clearColor, state.clearAlpha);
    renderer.autoClear = state.autoClear;
    renderer.setScissorTest(state.scissorTest);
  }
  function saveSceneState(scene, state = {}) {
    state.background = scene.background;
    state.backgroundNode = scene.backgroundNode;
    state.overrideMaterial = scene.overrideMaterial;
    return state;
  }
  function resetSceneState(scene, state) {
    state = saveSceneState(scene, state);
    scene.background = null;
    scene.backgroundNode = null;
    scene.overrideMaterial = null;
    return state;
  }
  function restoreSceneState(scene, state) {
    scene.background = state.background;
    scene.backgroundNode = state.backgroundNode;
    scene.overrideMaterial = state.overrideMaterial;
  }
  function resetRendererAndSceneState(renderer, scene, state) {
    state = resetRendererState(renderer, state);
    state = resetSceneState(scene, state);
    return state;
  }
  function restoreRendererAndSceneState(renderer, scene, state) {
    restoreRendererState(renderer, state);
    restoreSceneState(scene, state);
  }
  var shadowMaterialLib = /* @__PURE__ */ new WeakMap();
  var BasicShadowFilter = /* @__PURE__ */ Fn(({ depthTexture, shadowCoord, depthLayer }) => {
    let basic = texture(depthTexture, shadowCoord.xy).label("t_basic");
    if (depthTexture.isArrayTexture) {
      basic = basic.depth(depthLayer);
    }
    return basic.compare(shadowCoord.z);
  });
  var PCFShadowFilter = /* @__PURE__ */ Fn(({ depthTexture, shadowCoord, shadow: shadow2, depthLayer }) => {
    const depthCompare = (uv2, compare2) => {
      let depth2 = texture(depthTexture, uv2);
      if (depthTexture.isArrayTexture) {
        depth2 = depth2.depth(depthLayer);
      }
      return depth2.compare(compare2);
    };
    const mapSize = reference("mapSize", "vec2", shadow2).setGroup(renderGroup);
    const radius = reference("radius", "float", shadow2).setGroup(renderGroup);
    const texelSize = vec2(1).div(mapSize);
    const dx0 = texelSize.x.negate().mul(radius);
    const dy0 = texelSize.y.negate().mul(radius);
    const dx1 = texelSize.x.mul(radius);
    const dy1 = texelSize.y.mul(radius);
    const dx2 = dx0.div(2);
    const dy2 = dy0.div(2);
    const dx3 = dx1.div(2);
    const dy3 = dy1.div(2);
    return add2(
      depthCompare(shadowCoord.xy.add(vec2(dx0, dy0)), shadowCoord.z),
      depthCompare(shadowCoord.xy.add(vec2(0, dy0)), shadowCoord.z),
      depthCompare(shadowCoord.xy.add(vec2(dx1, dy0)), shadowCoord.z),
      depthCompare(shadowCoord.xy.add(vec2(dx2, dy2)), shadowCoord.z),
      depthCompare(shadowCoord.xy.add(vec2(0, dy2)), shadowCoord.z),
      depthCompare(shadowCoord.xy.add(vec2(dx3, dy2)), shadowCoord.z),
      depthCompare(shadowCoord.xy.add(vec2(dx0, 0)), shadowCoord.z),
      depthCompare(shadowCoord.xy.add(vec2(dx2, 0)), shadowCoord.z),
      depthCompare(shadowCoord.xy, shadowCoord.z),
      depthCompare(shadowCoord.xy.add(vec2(dx3, 0)), shadowCoord.z),
      depthCompare(shadowCoord.xy.add(vec2(dx1, 0)), shadowCoord.z),
      depthCompare(shadowCoord.xy.add(vec2(dx2, dy3)), shadowCoord.z),
      depthCompare(shadowCoord.xy.add(vec2(0, dy3)), shadowCoord.z),
      depthCompare(shadowCoord.xy.add(vec2(dx3, dy3)), shadowCoord.z),
      depthCompare(shadowCoord.xy.add(vec2(dx0, dy1)), shadowCoord.z),
      depthCompare(shadowCoord.xy.add(vec2(0, dy1)), shadowCoord.z),
      depthCompare(shadowCoord.xy.add(vec2(dx1, dy1)), shadowCoord.z)
    ).mul(1 / 17);
  });
  var PCFSoftShadowFilter = /* @__PURE__ */ Fn(({ depthTexture, shadowCoord, shadow: shadow2, depthLayer }) => {
    const depthCompare = (uv3, compare2) => {
      let depth2 = texture(depthTexture, uv3);
      if (depthTexture.isArrayTexture) {
        depth2 = depth2.depth(depthLayer);
      }
      return depth2.compare(compare2);
    };
    const mapSize = reference("mapSize", "vec2", shadow2).setGroup(renderGroup);
    const texelSize = vec2(1).div(mapSize);
    const dx = texelSize.x;
    const dy = texelSize.y;
    const uv2 = shadowCoord.xy;
    const f = fract(uv2.mul(mapSize).add(0.5));
    uv2.subAssign(f.mul(texelSize));
    return add2(
      depthCompare(uv2, shadowCoord.z),
      depthCompare(uv2.add(vec2(dx, 0)), shadowCoord.z),
      depthCompare(uv2.add(vec2(0, dy)), shadowCoord.z),
      depthCompare(uv2.add(texelSize), shadowCoord.z),
      mix(
        depthCompare(uv2.add(vec2(dx.negate(), 0)), shadowCoord.z),
        depthCompare(uv2.add(vec2(dx.mul(2), 0)), shadowCoord.z),
        f.x
      ),
      mix(
        depthCompare(uv2.add(vec2(dx.negate(), dy)), shadowCoord.z),
        depthCompare(uv2.add(vec2(dx.mul(2), dy)), shadowCoord.z),
        f.x
      ),
      mix(
        depthCompare(uv2.add(vec2(0, dy.negate())), shadowCoord.z),
        depthCompare(uv2.add(vec2(0, dy.mul(2))), shadowCoord.z),
        f.y
      ),
      mix(
        depthCompare(uv2.add(vec2(dx, dy.negate())), shadowCoord.z),
        depthCompare(uv2.add(vec2(dx, dy.mul(2))), shadowCoord.z),
        f.y
      ),
      mix(
        mix(
          depthCompare(uv2.add(vec2(dx.negate(), dy.negate())), shadowCoord.z),
          depthCompare(uv2.add(vec2(dx.mul(2), dy.negate())), shadowCoord.z),
          f.x
        ),
        mix(
          depthCompare(uv2.add(vec2(dx.negate(), dy.mul(2))), shadowCoord.z),
          depthCompare(uv2.add(vec2(dx.mul(2), dy.mul(2))), shadowCoord.z),
          f.x
        ),
        f.y
      )
    ).mul(1 / 9);
  });
  var VSMShadowFilter = /* @__PURE__ */ Fn(({ depthTexture, shadowCoord, depthLayer }) => {
    const occlusion = float(1).toVar();
    let distribution = texture(depthTexture).sample(shadowCoord.xy);
    if (depthTexture.isArrayTexture) {
      distribution = distribution.depth(depthLayer);
    }
    distribution = distribution.rg;
    const hardShadow = step(shadowCoord.z, distribution.x);
    If(hardShadow.notEqual(float(1)), () => {
      const distance2 = shadowCoord.z.sub(distribution.x);
      const variance = max$1(0, distribution.y.mul(distribution.y));
      let softnessProbability = variance.div(variance.add(distance2.mul(distance2)));
      softnessProbability = clamp2(sub(softnessProbability, 0.3).div(0.95 - 0.3));
      occlusion.assign(clamp2(max$1(hardShadow, softnessProbability)));
    });
    return occlusion;
  });
  var linearDistance = /* @__PURE__ */ Fn(([position, cameraNear2, cameraFar2]) => {
    let dist2 = positionWorld.sub(position).length();
    dist2 = dist2.sub(cameraNear2).div(cameraFar2.sub(cameraNear2));
    dist2 = dist2.saturate();
    return dist2;
  });
  var linearShadowDistance = (light) => {
    const camera = light.shadow.camera;
    const nearDistance = reference("near", "float", camera).setGroup(renderGroup);
    const farDistance = reference("far", "float", camera).setGroup(renderGroup);
    const referencePosition = objectPosition(light);
    return linearDistance(referencePosition, nearDistance, farDistance);
  };
  var getShadowMaterial = (light) => {
    let material2 = shadowMaterialLib.get(light);
    if (material2 === void 0) {
      const depthNode = light.isPointLight ? linearShadowDistance(light) : null;
      material2 = new NodeMaterial();
      material2.colorNode = vec4(0, 0, 0, 1);
      material2.depthNode = depthNode;
      material2.isShadowPassMaterial = true;
      material2.name = "ShadowMaterial";
      material2.fog = false;
      shadowMaterialLib.set(light, material2);
    }
    return material2;
  };
  var _shadowRenderObjectLibrary = /* @__PURE__ */ new ChainMap();
  var _shadowRenderObjectKeys = [];
  var getShadowRenderObjectFunction = (renderer, shadow2, shadowType, useVelocity) => {
    _shadowRenderObjectKeys[0] = renderer;
    _shadowRenderObjectKeys[1] = shadow2;
    let renderObjectFunction = _shadowRenderObjectLibrary.get(_shadowRenderObjectKeys);
    if (renderObjectFunction === void 0 || (renderObjectFunction.shadowType !== shadowType || renderObjectFunction.useVelocity !== useVelocity)) {
      renderObjectFunction = (object, scene, _camera2, geometry, material2, group, ...params) => {
        if (object.castShadow === true || object.receiveShadow && shadowType === VSMShadowMap) {
          if (useVelocity) {
            getDataFromObject(object).useVelocity = true;
          }
          object.onBeforeShadow(renderer, object, _camera2, shadow2.camera, geometry, scene.overrideMaterial, group);
          renderer.renderObject(object, scene, _camera2, geometry, material2, group, ...params);
          object.onAfterShadow(renderer, object, _camera2, shadow2.camera, geometry, scene.overrideMaterial, group);
        }
      };
      renderObjectFunction.shadowType = shadowType;
      renderObjectFunction.useVelocity = useVelocity;
      _shadowRenderObjectLibrary.set(_shadowRenderObjectKeys, renderObjectFunction);
    }
    _shadowRenderObjectKeys[0] = null;
    _shadowRenderObjectKeys[1] = null;
    return renderObjectFunction;
  };
  var VSMPassVertical = /* @__PURE__ */ Fn(({ samples, radius, size, shadowPass, depthLayer }) => {
    const mean = float(0).toVar("meanVertical");
    const squaredMean = float(0).toVar("squareMeanVertical");
    const uvStride = samples.lessThanEqual(float(1)).select(float(0), float(2).div(samples.sub(1)));
    const uvStart = samples.lessThanEqual(float(1)).select(float(0), float(-1));
    Loop({ start: int(0), end: int(samples), type: "int", condition: "<" }, ({ i }) => {
      const uvOffset = uvStart.add(float(i).mul(uvStride));
      let depth2 = shadowPass.sample(add2(screenCoordinate.xy, vec2(0, uvOffset).mul(radius)).div(size));
      if (shadowPass.value.isArrayTexture) {
        depth2 = depth2.depth(depthLayer);
      }
      depth2 = depth2.x;
      mean.addAssign(depth2);
      squaredMean.addAssign(depth2.mul(depth2));
    });
    mean.divAssign(samples);
    squaredMean.divAssign(samples);
    const std_dev = sqrt(squaredMean.sub(mean.mul(mean)));
    return vec2(mean, std_dev);
  });
  var VSMPassHorizontal = /* @__PURE__ */ Fn(({ samples, radius, size, shadowPass, depthLayer }) => {
    const mean = float(0).toVar("meanHorizontal");
    const squaredMean = float(0).toVar("squareMeanHorizontal");
    const uvStride = samples.lessThanEqual(float(1)).select(float(0), float(2).div(samples.sub(1)));
    const uvStart = samples.lessThanEqual(float(1)).select(float(0), float(-1));
    Loop({ start: int(0), end: int(samples), type: "int", condition: "<" }, ({ i }) => {
      const uvOffset = uvStart.add(float(i).mul(uvStride));
      let distribution = shadowPass.sample(add2(screenCoordinate.xy, vec2(uvOffset, 0).mul(radius)).div(size));
      if (shadowPass.value.isArrayTexture) {
        distribution = distribution.depth(depthLayer);
      }
      mean.addAssign(distribution.x);
      squaredMean.addAssign(add2(distribution.y.mul(distribution.y), distribution.x.mul(distribution.x)));
    });
    mean.divAssign(samples);
    squaredMean.divAssign(samples);
    const std_dev = sqrt(squaredMean.sub(mean.mul(mean)));
    return vec2(mean, std_dev);
  });
  var _shadowFilterLib = [BasicShadowFilter, PCFShadowFilter, PCFSoftShadowFilter, VSMShadowFilter];
  var _rendererState;
  var _quadMesh = /* @__PURE__ */ new QuadMesh();
  var ShadowNode = class extends ShadowBaseNode {
    static get type() {
      return "ShadowNode";
    }
    /**
     * Constructs a new shadow node.
     *
     * @param {Light} light - The shadow casting light.
     * @param {?LightShadow} [shadow=null] - An optional light shadow.
     */
    constructor(light, shadow2 = null) {
      super(light);
      this.shadow = shadow2 || light.shadow;
      this.shadowMap = null;
      this.vsmShadowMapVertical = null;
      this.vsmShadowMapHorizontal = null;
      this.vsmMaterialVertical = null;
      this.vsmMaterialHorizontal = null;
      this._node = null;
      this._cameraFrameId = /* @__PURE__ */ new WeakMap();
      this.isShadowNode = true;
      this.depthLayer = 0;
    }
    /**
     * Setups the shadow filtering.
     *
     * @param {NodeBuilder} builder - A reference to the current node builder.
     * @param {Object} inputs - A configuration object that defines the shadow filtering.
     * @param {Function} inputs.filterFn - This function defines the filtering type of the shadow map e.g. PCF.
     * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.
     * @param {Node<vec3>} inputs.shadowCoord - Shadow coordinates which are used to sample from the shadow map.
     * @param {LightShadow} inputs.shadow - The light shadow.
     * @return {Node<float>} The result node of the shadow filtering.
     */
    setupShadowFilter(builder, { filterFn, depthTexture, shadowCoord, shadow: shadow2, depthLayer }) {
      const frustumTest = shadowCoord.x.greaterThanEqual(0).and(shadowCoord.x.lessThanEqual(1)).and(shadowCoord.y.greaterThanEqual(0)).and(shadowCoord.y.lessThanEqual(1)).and(shadowCoord.z.lessThanEqual(1));
      const shadowNode = filterFn({ depthTexture, shadowCoord, shadow: shadow2, depthLayer });
      return frustumTest.select(shadowNode, float(1));
    }
    /**
     * Setups the shadow coordinates.
     *
     * @param {NodeBuilder} builder - A reference to the current node builder.
     * @param {Node<vec3>} shadowPosition - A node representing the shadow position.
     * @return {Node<vec3>} The shadow coordinates.
     */
    setupShadowCoord(builder, shadowPosition) {
      const { shadow: shadow2 } = this;
      const { renderer } = builder;
      const bias = reference("bias", "float", shadow2).setGroup(renderGroup);
      let shadowCoord = shadowPosition;
      let coordZ;
      if (shadow2.camera.isOrthographicCamera || renderer.logarithmicDepthBuffer !== true) {
        shadowCoord = shadowCoord.xyz.div(shadowCoord.w);
        coordZ = shadowCoord.z;
        if (renderer.coordinateSystem === WebGPUCoordinateSystem) {
          coordZ = coordZ.mul(2).sub(1);
        }
      } else {
        const w = shadowCoord.w;
        shadowCoord = shadowCoord.xy.div(w);
        const cameraNearLocal = reference("near", "float", shadow2.camera).setGroup(renderGroup);
        const cameraFarLocal = reference("far", "float", shadow2.camera).setGroup(renderGroup);
        coordZ = viewZToLogarithmicDepth(w.negate(), cameraNearLocal, cameraFarLocal);
      }
      shadowCoord = vec3(
        shadowCoord.x,
        shadowCoord.y.oneMinus(),
        // follow webgpu standards
        coordZ.add(bias)
      );
      return shadowCoord;
    }
    /**
     * Returns the shadow filtering function for the given shadow type.
     *
     * @param {number} type - The shadow type.
     * @return {Function} The filtering function.
     */
    getShadowFilterFn(type) {
      return _shadowFilterLib[type];
    }
    setupRenderTarget(shadow2, builder) {
      const depthTexture = new DepthTexture(shadow2.mapSize.width, shadow2.mapSize.height);
      depthTexture.name = "ShadowDepthTexture";
      depthTexture.compareFunction = LessCompare;
      const shadowMap = builder.createRenderTarget(shadow2.mapSize.width, shadow2.mapSize.height);
      shadowMap.texture.name = "ShadowMap";
      shadowMap.texture.type = shadow2.mapType;
      shadowMap.depthTexture = depthTexture;
      return { shadowMap, depthTexture };
    }
    /**
     * Setups the shadow output node.
     *
     * @param {NodeBuilder} builder - A reference to the current node builder.
     * @return {Node<vec3>} The shadow output node.
     */
    setupShadow(builder) {
      const { renderer } = builder;
      const { light, shadow: shadow2 } = this;
      const shadowMapType = renderer.shadowMap.type;
      const { depthTexture, shadowMap } = this.setupRenderTarget(shadow2, builder);
      shadow2.camera.updateProjectionMatrix();
      if (shadowMapType === VSMShadowMap && shadow2.isPointLightShadow !== true) {
        depthTexture.compareFunction = null;
        if (shadowMap.depth > 1) {
          if (!shadowMap._vsmShadowMapVertical) {
            shadowMap._vsmShadowMapVertical = builder.createRenderTarget(shadow2.mapSize.width, shadow2.mapSize.height, { format: RGFormat, type: HalfFloatType, depth: shadowMap.depth, depthBuffer: false });
            shadowMap._vsmShadowMapVertical.texture.name = "VSMVertical";
          }
          this.vsmShadowMapVertical = shadowMap._vsmShadowMapVertical;
          if (!shadowMap._vsmShadowMapHorizontal) {
            shadowMap._vsmShadowMapHorizontal = builder.createRenderTarget(shadow2.mapSize.width, shadow2.mapSize.height, { format: RGFormat, type: HalfFloatType, depth: shadowMap.depth, depthBuffer: false });
            shadowMap._vsmShadowMapHorizontal.texture.name = "VSMHorizontal";
          }
          this.vsmShadowMapHorizontal = shadowMap._vsmShadowMapHorizontal;
        } else {
          this.vsmShadowMapVertical = builder.createRenderTarget(shadow2.mapSize.width, shadow2.mapSize.height, { format: RGFormat, type: HalfFloatType, depthBuffer: false });
          this.vsmShadowMapHorizontal = builder.createRenderTarget(shadow2.mapSize.width, shadow2.mapSize.height, { format: RGFormat, type: HalfFloatType, depthBuffer: false });
        }
        let shadowPassVertical = texture(depthTexture);
        if (depthTexture.isArrayTexture) {
          shadowPassVertical = shadowPassVertical.depth(this.depthLayer);
        }
        let shadowPassHorizontal = texture(this.vsmShadowMapVertical.texture);
        if (depthTexture.isArrayTexture) {
          shadowPassHorizontal = shadowPassHorizontal.depth(this.depthLayer);
        }
        const samples = reference("blurSamples", "float", shadow2).setGroup(renderGroup);
        const radius = reference("radius", "float", shadow2).setGroup(renderGroup);
        const size = reference("mapSize", "vec2", shadow2).setGroup(renderGroup);
        let material2 = this.vsmMaterialVertical || (this.vsmMaterialVertical = new NodeMaterial());
        material2.fragmentNode = VSMPassVertical({ samples, radius, size, shadowPass: shadowPassVertical, depthLayer: this.depthLayer }).context(builder.getSharedContext());
        material2.name = "VSMVertical";
        material2 = this.vsmMaterialHorizontal || (this.vsmMaterialHorizontal = new NodeMaterial());
        material2.fragmentNode = VSMPassHorizontal({ samples, radius, size, shadowPass: shadowPassHorizontal, depthLayer: this.depthLayer }).context(builder.getSharedContext());
        material2.name = "VSMHorizontal";
      }
      const shadowIntensity = reference("intensity", "float", shadow2).setGroup(renderGroup);
      const normalBias = reference("normalBias", "float", shadow2).setGroup(renderGroup);
      const shadowPosition = lightShadowMatrix(light).mul(shadowPositionWorld.add(transformedNormalWorld.mul(normalBias)));
      const shadowCoord = this.setupShadowCoord(builder, shadowPosition);
      const filterFn = shadow2.filterNode || this.getShadowFilterFn(renderer.shadowMap.type) || null;
      if (filterFn === null) {
        throw new Error("THREE.WebGPURenderer: Shadow map type not supported yet.");
      }
      const shadowDepthTexture = shadowMapType === VSMShadowMap && shadow2.isPointLightShadow !== true ? this.vsmShadowMapHorizontal.texture : depthTexture;
      const shadowNode = this.setupShadowFilter(builder, { filterFn, shadowTexture: shadowMap.texture, depthTexture: shadowDepthTexture, shadowCoord, shadow: shadow2, depthLayer: this.depthLayer });
      let shadowColor = texture(shadowMap.texture, shadowCoord);
      if (depthTexture.isArrayTexture) {
        shadowColor = shadowColor.depth(this.depthLayer);
      }
      const shadowOutput = mix(1, shadowNode.rgb.mix(shadowColor, 1), shadowIntensity.mul(shadowColor.a)).toVar();
      this.shadowMap = shadowMap;
      this.shadow.map = shadowMap;
      return shadowOutput;
    }
    /**
     * The implementation performs the setup of the output node. An output is only
     * produces if shadow mapping is globally enabled in the renderer.
     *
     * @param {NodeBuilder} builder - A reference to the current node builder.
     * @return {ShaderCallNodeInternal} The output node.
     */
    setup(builder) {
      if (builder.renderer.shadowMap.enabled === false) return;
      return Fn(() => {
        let node = this._node;
        this.setupShadowPosition(builder);
        if (node === null) {
          this._node = node = this.setupShadow(builder);
        }
        if (builder.material.shadowNode) {
          console.warn('THREE.NodeMaterial: ".shadowNode" is deprecated. Use ".castShadowNode" instead.');
        }
        if (builder.material.receivedShadowNode) {
          node = builder.material.receivedShadowNode(node);
        }
        return node;
      })();
    }
    /**
     * Renders the shadow. The logic of this function could be included
     * into {@link ShadowNode#updateShadow} however more specialized shadow
     * nodes might require a custom shadow map rendering. By having a
     * dedicated method, it's easier to overwrite the default behavior.
     *
     * @param {NodeFrame} frame - A reference to the current node frame.
     */
    renderShadow(frame) {
      const { shadow: shadow2, shadowMap, light } = this;
      const { renderer, scene } = frame;
      shadow2.updateMatrices(light);
      shadowMap.setSize(shadow2.mapSize.width, shadow2.mapSize.height, shadowMap.depth);
      renderer.render(scene, shadow2.camera);
    }
    /**
     * Updates the shadow.
     *
     * @param {NodeFrame} frame - A reference to the current node frame.
     */
    updateShadow(frame) {
      const { shadowMap, light, shadow: shadow2 } = this;
      const { renderer, scene, camera } = frame;
      const shadowType = renderer.shadowMap.type;
      const depthVersion = shadowMap.depthTexture.version;
      this._depthVersionCached = depthVersion;
      const _shadowCameraLayer = shadow2.camera.layers.mask;
      if ((shadow2.camera.layers.mask & 4294967294) === 0) {
        shadow2.camera.layers.mask = camera.layers.mask;
      }
      const currentRenderObjectFunction = renderer.getRenderObjectFunction();
      const currentMRT = renderer.getMRT();
      const useVelocity = currentMRT ? currentMRT.has("velocity") : false;
      _rendererState = resetRendererAndSceneState(renderer, scene, _rendererState);
      scene.overrideMaterial = getShadowMaterial(light);
      renderer.setRenderObjectFunction(getShadowRenderObjectFunction(renderer, shadow2, shadowType, useVelocity));
      renderer.setClearColor(0, 0);
      renderer.setRenderTarget(shadowMap);
      this.renderShadow(frame);
      renderer.setRenderObjectFunction(currentRenderObjectFunction);
      if (shadowType === VSMShadowMap && shadow2.isPointLightShadow !== true) {
        this.vsmPass(renderer);
      }
      shadow2.camera.layers.mask = _shadowCameraLayer;
      restoreRendererAndSceneState(renderer, scene, _rendererState);
    }
    /**
     * For VSM additional render passes are required.
     *
     * @param {Renderer} renderer - A reference to the current renderer.
     */
    vsmPass(renderer) {
      const { shadow: shadow2 } = this;
      const depth2 = this.shadowMap.depth;
      this.vsmShadowMapVertical.setSize(shadow2.mapSize.width, shadow2.mapSize.height, depth2);
      this.vsmShadowMapHorizontal.setSize(shadow2.mapSize.width, shadow2.mapSize.height, depth2);
      renderer.setRenderTarget(this.vsmShadowMapVertical);
      _quadMesh.material = this.vsmMaterialVertical;
      _quadMesh.render(renderer);
      renderer.setRenderTarget(this.vsmShadowMapHorizontal);
      _quadMesh.material = this.vsmMaterialHorizontal;
      _quadMesh.render(renderer);
    }
    /**
     * Frees the internal resources of this shadow node.
     */
    dispose() {
      this.shadowMap.dispose();
      this.shadowMap = null;
      if (this.vsmShadowMapVertical !== null) {
        this.vsmShadowMapVertical.dispose();
        this.vsmShadowMapVertical = null;
        this.vsmMaterialVertical.dispose();
        this.vsmMaterialVertical = null;
      }
      if (this.vsmShadowMapHorizontal !== null) {
        this.vsmShadowMapHorizontal.dispose();
        this.vsmShadowMapHorizontal = null;
        this.vsmMaterialHorizontal.dispose();
        this.vsmMaterialHorizontal = null;
      }
      super.dispose();
    }
    /**
     * The implementation performs the update of the shadow map if necessary.
     *
     * @param {NodeFrame} frame - A reference to the current node frame.
     */
    updateBefore(frame) {
      const { shadow: shadow2 } = this;
      let needsUpdate = shadow2.needsUpdate || shadow2.autoUpdate;
      if (needsUpdate) {
        if (this._cameraFrameId[frame.camera] === frame.frameId) {
          needsUpdate = false;
        }
        this._cameraFrameId[frame.camera] = frame.frameId;
      }
      if (needsUpdate) {
        this.updateShadow(frame);
        if (this.shadowMap.depthTexture.version === this._depthVersionCached) {
          shadow2.needsUpdate = false;
        }
      }
    }
  };
  var shadow = (light, shadow2) => nodeObject(new ShadowNode(light, shadow2));
  var _clearColor$1 = /* @__PURE__ */ new Color();
  var cubeToUV = /* @__PURE__ */ Fn(([pos, texelSizeY]) => {
    const v = pos.toVar();
    const absV = abs(v);
    const scaleToCube = div(1, max$1(absV.x, max$1(absV.y, absV.z)));
    absV.mulAssign(scaleToCube);
    v.mulAssign(scaleToCube.mul(texelSizeY.mul(2).oneMinus()));
    const planar = vec2(v.xy).toVar();
    const almostATexel = texelSizeY.mul(1.5);
    const almostOne = almostATexel.oneMinus();
    If(absV.z.greaterThanEqual(almostOne), () => {
      If(v.z.greaterThan(0), () => {
        planar.x.assign(sub(4, v.x));
      });
    }).ElseIf(absV.x.greaterThanEqual(almostOne), () => {
      const signX = sign(v.x);
      planar.x.assign(v.z.mul(signX).add(signX.mul(2)));
    }).ElseIf(absV.y.greaterThanEqual(almostOne), () => {
      const signY = sign(v.y);
      planar.x.assign(v.x.add(signY.mul(2)).add(2));
      planar.y.assign(v.z.mul(signY).sub(2));
    });
    return vec2(0.125, 0.25).mul(planar).add(vec2(0.375, 0.75)).flipY();
  }).setLayout({
    name: "cubeToUV",
    type: "vec2",
    inputs: [
      { name: "pos", type: "vec3" },
      { name: "texelSizeY", type: "float" }
    ]
  });
  var BasicPointShadowFilter = /* @__PURE__ */ Fn(({ depthTexture, bd3D, dp, texelSize }) => {
    return texture(depthTexture, cubeToUV(bd3D, texelSize.y)).compare(dp);
  });
  var PointShadowFilter = /* @__PURE__ */ Fn(({ depthTexture, bd3D, dp, texelSize, shadow: shadow2 }) => {
    const radius = reference("radius", "float", shadow2).setGroup(renderGroup);
    const offset = vec2(-1, 1).mul(radius).mul(texelSize.y);
    return texture(depthTexture, cubeToUV(bd3D.add(offset.xyy), texelSize.y)).compare(dp).add(texture(depthTexture, cubeToUV(bd3D.add(offset.yyy), texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D.add(offset.xyx), texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D.add(offset.yyx), texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D, texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D.add(offset.xxy), texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D.add(offset.yxy), texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D.add(offset.xxx), texelSize.y)).compare(dp)).add(texture(depthTexture, cubeToUV(bd3D.add(offset.yxx), texelSize.y)).compare(dp)).mul(1 / 9);
  });
  var pointShadowFilter = /* @__PURE__ */ Fn(({ filterFn, depthTexture, shadowCoord, shadow: shadow2 }) => {
    const lightToPosition = shadowCoord.xyz.toVar();
    const lightToPositionLength = lightToPosition.length();
    const cameraNearLocal = uniform("float").setGroup(renderGroup).onRenderUpdate(() => shadow2.camera.near);
    const cameraFarLocal = uniform("float").setGroup(renderGroup).onRenderUpdate(() => shadow2.camera.far);
    const bias = reference("bias", "float", shadow2).setGroup(renderGroup);
    const mapSize = uniform(shadow2.mapSize).setGroup(renderGroup);
    const result = float(1).toVar();
    If(lightToPositionLength.sub(cameraFarLocal).lessThanEqual(0).and(lightToPositionLength.sub(cameraNearLocal).greaterThanEqual(0)), () => {
      const dp = lightToPositionLength.sub(cameraNearLocal).div(cameraFarLocal.sub(cameraNearLocal)).toVar();
      dp.addAssign(bias);
      const bd3D = lightToPosition.normalize();
      const texelSize = vec2(1).div(mapSize.mul(vec2(4, 2)));
      result.assign(filterFn({ depthTexture, bd3D, dp, texelSize, shadow: shadow2 }));
    });
    return result;
  });
  var _viewport = /* @__PURE__ */ new Vector4();
  var _viewportSize = /* @__PURE__ */ new Vector2();
  var _shadowMapSize = /* @__PURE__ */ new Vector2();
  var PointShadowNode = class extends ShadowNode {
    static get type() {
      return "PointShadowNode";
    }
    /**
     * Constructs a new point shadow node.
     *
     * @param {PointLight} light - The shadow casting point light.
     * @param {?PointLightShadow} [shadow=null] - An optional point light shadow.
     */
    constructor(light, shadow2 = null) {
      super(light, shadow2);
    }
    /**
     * Overwrites the default implementation to return point light shadow specific
     * filtering functions.
     *
     * @param {number} type - The shadow type.
     * @return {Function} The filtering function.
     */
    getShadowFilterFn(type) {
      return type === BasicShadowMap ? BasicPointShadowFilter : PointShadowFilter;
    }
    /**
     * Overwrites the default implementation so the unaltered shadow position is used.
     *
     * @param {NodeBuilder} builder - A reference to the current node builder.
     * @param {Node<vec3>} shadowPosition - A node representing the shadow position.
     * @return {Node<vec3>} The shadow coordinates.
     */
    setupShadowCoord(builder, shadowPosition) {
      return shadowPosition;
    }
    /**
     * Overwrites the default implementation to only use point light specific
     * shadow filter functions.
     *
     * @param {NodeBuilder} builder - A reference to the current node builder.
     * @param {Object} inputs - A configuration object that defines the shadow filtering.
     * @param {Function} inputs.filterFn - This function defines the filtering type of the shadow map e.g. PCF.
     * @param {Texture} inputs.shadowTexture - A reference to the shadow map's texture.
     * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.
     * @param {Node<vec3>} inputs.shadowCoord - Shadow coordinates which are used to sample from the shadow map.
     * @param {LightShadow} inputs.shadow - The light shadow.
     * @return {Node<float>} The result node of the shadow filtering.
     */
    setupShadowFilter(builder, { filterFn, shadowTexture, depthTexture, shadowCoord, shadow: shadow2 }) {
      return pointShadowFilter({ filterFn, shadowTexture, depthTexture, shadowCoord, shadow: shadow2 });
    }
    /**
     * Overwrites the default implementation with point light specific
     * rendering code.
     *
     * @param {NodeFrame} frame - A reference to the current node frame.
     */
    renderShadow(frame) {
      const { shadow: shadow2, shadowMap, light } = this;
      const { renderer, scene } = frame;
      const shadowFrameExtents = shadow2.getFrameExtents();
      _shadowMapSize.copy(shadow2.mapSize);
      _shadowMapSize.multiply(shadowFrameExtents);
      shadowMap.setSize(_shadowMapSize.width, _shadowMapSize.height);
      _viewportSize.copy(shadow2.mapSize);
      const previousAutoClear = renderer.autoClear;
      const previousClearColor = renderer.getClearColor(_clearColor$1);
      const previousClearAlpha = renderer.getClearAlpha();
      renderer.autoClear = false;
      renderer.setClearColor(shadow2.clearColor, shadow2.clearAlpha);
      renderer.clear();
      const viewportCount = shadow2.getViewportCount();
      for (let vp = 0; vp < viewportCount; vp++) {
        const viewport2 = shadow2.getViewport(vp);
        const x = _viewportSize.x * viewport2.x;
        const y = _shadowMapSize.y - _viewportSize.y - _viewportSize.y * viewport2.y;
        _viewport.set(
          x,
          y,
          _viewportSize.x * viewport2.z,
          _viewportSize.y * viewport2.w
        );
        shadowMap.viewport.copy(_viewport);
        shadow2.updateMatrices(light, vp);
        renderer.render(scene, shadow2.camera);
      }
      renderer.autoClear = previousAutoClear;
      renderer.setClearColor(previousClearColor, previousClearAlpha);
    }
  };
  var pointShadow = (light, shadow2) => nodeObject(new PointShadowNode(light, shadow2));
  var AnalyticLightNode = class extends LightingNode {
    static get type() {
      return "AnalyticLightNode";
    }
    /**
     * Constructs a new analytic light node.
     *
     * @param {?Light} [light=null] - The light source.
     */
    constructor(light = null) {
      super();
      this.light = light;
      this.color = new Color();
      this.colorNode = light && light.colorNode || uniform(this.color).setGroup(renderGroup);
      this.baseColorNode = null;
      this.shadowNode = null;
      this.shadowColorNode = null;
      this.isAnalyticLightNode = true;
      this.updateType = NodeUpdateType.FRAME;
    }
    getHash() {
      return this.light.uuid;
    }
    /**
     * Returns a node representing a direction vector which points from the current
     * position in view space to the light's position in view space.
     *
     * @param {NodeBuilder} builder - The builder object used for setting up the light.
     * @return {Node<vec3>} The light vector node.
     */
    getLightVector(builder) {
      return lightViewPosition(this.light).sub(builder.context.positionView || positionView);
    }
    /**
     * Sets up the direct lighting for the analytic light node.
     *
     * @abstract
     * @param {NodeBuilder} builder - The builder object used for setting up the light.
     * @return {Object|undefined} The direct light data (color and direction).
     */
    setupDirect() {
    }
    /**
     * Sets up the direct rect area lighting for the analytic light node.
     *
     * @abstract
     * @param {NodeBuilder} builder - The builder object used for setting up the light.
     * @return {Object|undefined} The direct rect area light data.
     */
    setupDirectRectArea() {
    }
    /**
     * Setups the shadow node for this light. The method exists so concrete light classes
     * can setup different types of shadow nodes.
     *
     * @return {ShadowNode} The created shadow node.
     */
    setupShadowNode() {
      return shadow(this.light);
    }
    /**
     * Setups the shadow for this light. This method is only executed if the light
     * cast shadows and the current build object receives shadows. It incorporates
     * shadows into the lighting computation.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    setupShadow(builder) {
      const { renderer } = builder;
      if (renderer.shadowMap.enabled === false) return;
      let shadowColorNode = this.shadowColorNode;
      if (shadowColorNode === null) {
        const customShadowNode = this.light.shadow.shadowNode;
        let shadowNode;
        if (customShadowNode !== void 0) {
          shadowNode = nodeObject(customShadowNode);
        } else {
          shadowNode = this.setupShadowNode();
        }
        this.shadowNode = shadowNode;
        this.shadowColorNode = shadowColorNode = this.colorNode.mul(shadowNode);
        this.baseColorNode = this.colorNode;
      }
      this.colorNode = shadowColorNode;
    }
    /**
     * Unlike most other nodes, lighting nodes do not return a output node in {@link Node#setup}.
     * The main purpose of lighting nodes is to configure the current {@link LightingModel} and/or
     * invocate the respective interface methods.
     *
     * @param {NodeBuilder} builder - The current node builder.
     */
    setup(builder) {
      this.colorNode = this.baseColorNode || this.colorNode;
      if (this.light.castShadow) {
        if (builder.object.receiveShadow) {
          this.setupShadow(builder);
        }
      } else if (this.shadowNode !== null) {
        this.shadowNode.dispose();
        this.shadowNode = null;
        this.shadowColorNode = null;
      }
      const directLightData = this.setupDirect(builder);
      const directRectAreaLightData = this.setupDirectRectArea(builder);
      if (directLightData) {
        builder.lightsNode.setupDirectLight(builder, this, directLightData);
      }
      if (directRectAreaLightData) {
        builder.lightsNode.setupDirectRectAreaLight(builder, this, directRectAreaLightData);
      }
    }
    /**
     * The update method is used to update light uniforms per frame.
     * Potentially overwritten in concrete light nodes to update light
     * specific uniforms.
     *
     * @param {NodeFrame} frame - A reference to the current node frame.
     */
    update() {
      const { light } = this;
      this.color.copy(light.color).multiplyScalar(light.intensity);
    }
  };
  var getDistanceAttenuation = /* @__PURE__ */ Fn(({ lightDistance, cutoffDistance, decayExponent }) => {
    const distanceFalloff = lightDistance.pow(decayExponent).max(0.01).reciprocal();
    return cutoffDistance.greaterThan(0).select(
      distanceFalloff.mul(lightDistance.div(cutoffDistance).pow4().oneMinus().clamp().pow2()),
      distanceFalloff
    );
  });
  var directPointLight = ({ color: color2, lightVector, cutoffDistance, decayExponent }) => {
    const lightDirection = lightVector.normalize();
    const lightDistance = lightVector.length();
    const attenuation = getDistanceAttenuation({
      lightDistance,
      cutoffDistance,
      decayExponent
    });
    const lightColor = color2.mul(attenuation);
    return { lightDirection, lightColor };
  };
  var PointLightNode = class extends AnalyticLightNode {
    static get type() {
      return "PointLightNode";
    }
    /**
     * Constructs a new point light node.
     *
     * @param {?PointLight} [light=null] - The point light source.
     */
    constructor(light = null) {
      super(light);
      this.cutoffDistanceNode = uniform(0).setGroup(renderGroup);
      this.decayExponentNode = uniform(2).setGroup(renderGroup);
    }
    /**
     * Overwritten to updated point light specific uniforms.
     *
     * @param {NodeFrame} frame - A reference to the current node frame.
     */
    update(frame) {
      const { light } = this;
      super.update(frame);
      this.cutoffDistanceNode.value = light.distance;
      this.decayExponentNode.value = light.decay;
    }
    /**
     * Overwritten to setup point light specific shadow.
     *
     * @return {PointShadowNode}
     */
    setupShadowNode() {
      return pointShadow(this.light);
    }
    setupDirect(builder) {
      return directPointLight({
        color: this.colorNode,
        lightVector: this.getLightVector(builder),
        cutoffDistance: this.cutoffDistanceNode,
        decayExponent: this.decayExponentNode
      });
    }
  };
  var shapeCircle = Fn(([coord = uv()], { renderer, material: material2 }) => {
    const len2 = lengthSq(coord.mul(2).sub(1));
    let alpha;
    if (material2.alphaToCoverage && renderer.samples > 1) {
      const dlen = float(len2.fwidth()).toVar();
      alpha = smoothstep2(dlen.oneMinus(), dlen.add(1), len2).oneMinus();
    } else {
      alpha = select(len2.greaterThan(1), 0, 1);
    }
    return alpha;
  });
  var getShIrradianceAt = /* @__PURE__ */ Fn(([normal2, shCoefficients]) => {
    const x = normal2.x, y = normal2.y, z = normal2.z;
    let result = shCoefficients.element(0).mul(0.886227);
    result = result.add(shCoefficients.element(1).mul(2 * 0.511664).mul(y));
    result = result.add(shCoefficients.element(2).mul(2 * 0.511664).mul(z));
    result = result.add(shCoefficients.element(3).mul(2 * 0.511664).mul(x));
    result = result.add(shCoefficients.element(4).mul(2 * 0.429043).mul(x).mul(y));
    result = result.add(shCoefficients.element(5).mul(2 * 0.429043).mul(y).mul(z));
    result = result.add(shCoefficients.element(6).mul(z.mul(z).mul(0.743125).sub(0.247708)));
    result = result.add(shCoefficients.element(7).mul(2 * 0.429043).mul(x).mul(z));
    result = result.add(shCoefficients.element(8).mul(0.429043).mul(mul(x, x).sub(mul(y, y))));
    return result;
  });
  var _clearColor = /* @__PURE__ */ new Color4();
  var Background = class extends DataMap {
    /**
     * Constructs a new background management component.
     *
     * @param {Renderer} renderer - The renderer.
     * @param {Nodes} nodes - Renderer component for managing nodes related logic.
     */
    constructor(renderer, nodes) {
      super();
      this.renderer = renderer;
      this.nodes = nodes;
    }
    /**
     * Updates the background for the given scene. Depending on how `Scene.background`
     * or `Scene.backgroundNode` are configured, this method might configure a simple clear
     * or add a mesh to the render list for rendering the background as a textured plane
     * or skybox.
     *
     * @param {Scene} scene - The scene.
     * @param {RenderList} renderList - The current render list.
     * @param {RenderContext} renderContext - The current render context.
     */
    update(scene, renderList, renderContext) {
      const renderer = this.renderer;
      const background = this.nodes.getBackgroundNode(scene) || scene.background;
      let forceClear = false;
      if (background === null) {
        renderer._clearColor.getRGB(_clearColor);
        _clearColor.a = renderer._clearColor.a;
      } else if (background.isColor === true) {
        background.getRGB(_clearColor);
        _clearColor.a = 1;
        forceClear = true;
      } else if (background.isNode === true) {
        const sceneData = this.get(scene);
        const backgroundNode = background;
        _clearColor.copy(renderer._clearColor);
        let backgroundMesh = sceneData.backgroundMesh;
        if (backgroundMesh === void 0) {
          let onBackgroundDispose = function() {
            background.removeEventListener("dispose", onBackgroundDispose);
            backgroundMesh.material.dispose();
            backgroundMesh.geometry.dispose();
          };
          const backgroundMeshNode = context(vec4(backgroundNode).mul(backgroundIntensity), {
            // @TODO: Add Texture2D support using node context
            getUV: () => backgroundRotation.mul(normalWorld),
            getTextureLevel: () => backgroundBlurriness
          });
          let viewProj = modelViewProjection;
          viewProj = viewProj.setZ(viewProj.w);
          const nodeMaterial = new NodeMaterial();
          nodeMaterial.name = "Background.material";
          nodeMaterial.side = BackSide;
          nodeMaterial.depthTest = false;
          nodeMaterial.depthWrite = false;
          nodeMaterial.allowOverride = false;
          nodeMaterial.fog = false;
          nodeMaterial.lights = false;
          nodeMaterial.vertexNode = viewProj;
          nodeMaterial.colorNode = backgroundMeshNode;
          sceneData.backgroundMeshNode = backgroundMeshNode;
          sceneData.backgroundMesh = backgroundMesh = new Mesh(new SphereGeometry(1, 32, 32), nodeMaterial);
          backgroundMesh.frustumCulled = false;
          backgroundMesh.name = "Background.mesh";
          backgroundMesh.onBeforeRender = function(renderer2, scene2, camera) {
            this.matrixWorld.copyPosition(camera.matrixWorld);
          };
          background.addEventListener("dispose", onBackgroundDispose);
        }
        const backgroundCacheKey = backgroundNode.getCacheKey();
        if (sceneData.backgroundCacheKey !== backgroundCacheKey) {
          sceneData.backgroundMeshNode.node = vec4(backgroundNode).mul(backgroundIntensity);
          sceneData.backgroundMeshNode.needsUpdate = true;
          backgroundMesh.material.needsUpdate = true;
          sceneData.backgroundCacheKey = backgroundCacheKey;
        }
        renderList.unshift(backgroundMesh, backgroundMesh.geometry, backgroundMesh.material, 0, 0, null, null);
      } else {
        console.error("THREE.Renderer: Unsupported background configuration.", background);
      }
      const environmentBlendMode = renderer.xr.getEnvironmentBlendMode();
      if (environmentBlendMode === "additive") {
        _clearColor.set(0, 0, 0, 1);
      } else if (environmentBlendMode === "alpha-blend") {
        _clearColor.set(0, 0, 0, 0);
      }
      if (renderer.autoClear === true || forceClear === true) {
        const clearColorValue = renderContext.clearColorValue;
        clearColorValue.r = _clearColor.r;
        clearColorValue.g = _clearColor.g;
        clearColorValue.b = _clearColor.b;
        clearColorValue.a = _clearColor.a;
        if (renderer.backend.isWebGLBackend === true || renderer.alpha === true) {
          clearColorValue.r *= clearColorValue.a;
          clearColorValue.g *= clearColorValue.a;
          clearColorValue.b *= clearColorValue.a;
        }
        renderContext.depthClearValue = renderer._clearDepth;
        renderContext.stencilClearValue = renderer._clearStencil;
        renderContext.clearColor = renderer.autoClearColor === true;
        renderContext.clearDepth = renderer.autoClearDepth === true;
        renderContext.clearStencil = renderer.autoClearStencil === true;
      } else {
        renderContext.clearColor = false;
        renderContext.clearDepth = false;
        renderContext.clearStencil = false;
      }
    }
  };
  var _id$6 = 0;
  var BindGroup = class {
    /**
     * Constructs a new bind group.
     *
     * @param {string} name - The bind group's name.
     * @param {Array<Binding>} bindings - An array of bindings.
     * @param {number} index - The group index.
     * @param {Array<Binding>} bindingsReference - An array of reference bindings.
     */
    constructor(name2 = "", bindings = [], index = 0, bindingsReference = []) {
      this.name = name2;
      this.bindings = bindings;
      this.index = index;
      this.bindingsReference = bindingsReference;
      this.id = _id$6++;
    }
  };
  var NodeBuilderState = class {
    /**
     * Constructs a new node builder state.
     *
     * @param {string} vertexShader - The native vertex shader code.
     * @param {string} fragmentShader - The native fragment shader code.
     * @param {string} computeShader - The native compute shader code.
     * @param {Array<NodeAttribute>} nodeAttributes - An array of node attributes.
     * @param {Array<BindGroup>} bindings - An array of bind groups.
     * @param {Array<Node>} updateNodes - An array of nodes that implement their `update()` method.
     * @param {Array<Node>} updateBeforeNodes - An array of nodes that implement their `updateBefore()` method.
     * @param {Array<Node>} updateAfterNodes - An array of nodes that implement their `updateAfter()` method.
     * @param {NodeMaterialObserver} observer - A node material observer.
     * @param {Array<Object>} transforms - An array with transform attribute objects. Only relevant when using compute shaders with WebGL 2.
     */
    constructor(vertexShader, fragmentShader, computeShader, nodeAttributes, bindings, updateNodes, updateBeforeNodes, updateAfterNodes, observer, transforms = []) {
      this.vertexShader = vertexShader;
      this.fragmentShader = fragmentShader;
      this.computeShader = computeShader;
      this.transforms = transforms;
      this.nodeAttributes = nodeAttributes;
      this.bindings = bindings;
      this.updateNodes = updateNodes;
      this.updateBeforeNodes = updateBeforeNodes;
      this.updateAfterNodes = updateAfterNodes;
      this.observer = observer;
      this.usedTimes = 0;
    }
    /**
     * This method is used to create a array of bind groups based
     * on the existing bind groups of this state. Shared groups are
     * not cloned.
     *
     * @return {Array<BindGroup>} A array of bind groups.
     */
    createBindings() {
      const bindings = [];
      for (const instanceGroup of this.bindings) {
        const shared = instanceGroup.bindings[0].groupNode.shared;
        if (shared !== true) {
          const bindingsGroup = new BindGroup(instanceGroup.name, [], instanceGroup.index, instanceGroup);
          bindings.push(bindingsGroup);
          for (const instanceBinding of instanceGroup.bindings) {
            bindingsGroup.bindings.push(instanceBinding.clone());
          }
        } else {
          bindings.push(instanceGroup);
        }
      }
      return bindings;
    }
  };
  var NodeAttribute = class {
    /**
     * Constructs a new node attribute.
     *
     * @param {string} name - The name of the attribute.
     * @param {string} type - The type of the attribute.
     * @param {?Node} node - An optional reference to the node.
     */
    constructor(name2, type, node = null) {
      this.isNodeAttribute = true;
      this.name = name2;
      this.type = type;
      this.node = node;
    }
  };
  var NodeUniform = class {
    /**
     * Constructs a new node uniform.
     *
     * @param {string} name - The name of the uniform.
     * @param {string} type - The type of the uniform.
     * @param {UniformNode} node - An reference to the node.
     */
    constructor(name2, type, node) {
      this.isNodeUniform = true;
      this.name = name2;
      this.type = type;
      this.node = node.getSelf();
    }
    /**
     * The value of the uniform node.
     *
     * @type {any}
     */
    get value() {
      return this.node.value;
    }
    set value(val) {
      this.node.value = val;
    }
    /**
     * The id of the uniform node.
     *
     * @type {number}
     */
    get id() {
      return this.node.id;
    }
    /**
     * The uniform node's group.
     *
     * @type {UniformGroupNode}
     */
    get groupNode() {
      return this.node.groupNode;
    }
  };
  var NodeVar = class {
    /**
     * Constructs a new node variable.
     *
     * @param {string} name - The name of the variable.
     * @param {string} type - The type of the variable.
     * @param {boolean} [readOnly=false] - The read-only flag.
     * @param {?number} [count=null] - The size.
     */
    constructor(name2, type, readOnly2 = false, count = null) {
      this.isNodeVar = true;
      this.name = name2;
      this.type = type;
      this.readOnly = readOnly2;
      this.count = count;
    }
  };
  var NodeVarying = class extends NodeVar {
    /**
     * Constructs a new node varying.
     *
     * @param {string} name - The name of the varying.
     * @param {string} type - The type of the varying.
     * @param {?string} interpolationType - The interpolation type of the varying.
     * @param {?string} interpolationSampling - The interpolation sampling type of the varying.
     */
    constructor(name2, type, interpolationType = null, interpolationSampling = null) {
      super(name2, type);
      this.needsInterpolation = false;
      this.isNodeVarying = true;
      this.interpolationType = interpolationType;
      this.interpolationSampling = interpolationSampling;
    }
  };
  var NodeCode = class {
    /**
     * Constructs a new code node.
     *
     * @param {string} name - The name of the code.
     * @param {string} type - The node type.
     * @param {string} [code=''] - The native shader code.
     */
    constructor(name2, type, code = "") {
      this.name = name2;
      this.type = type;
      this.code = code;
      Object.defineProperty(this, "isNodeCode", { value: true });
    }
  };
  var _id$5 = 0;
  var NodeCache = class {
    /**
     * Constructs a new node cache.
     *
     * @param {?NodeCache} parent - A reference to a parent cache.
     */
    constructor(parent = null) {
      this.id = _id$5++;
      this.nodesData = /* @__PURE__ */ new WeakMap();
      this.parent = parent;
    }
    /**
     * Returns the data for the given node.
     *
     * @param {Node} node - The node.
     * @return {?Object} The data for the node.
     */
    getData(node) {
      let data = this.nodesData.get(node);
      if (data === void 0 && this.parent !== null) {
        data = this.parent.getData(node);
      }
      return data;
    }
    /**
     * Sets the data for a given node.
     *
     * @param {Node} node - The node.
     * @param {Object} data - The data that should be cached.
     */
    setData(node, data) {
      this.nodesData.set(node, data);
    }
  };
  var StructType = class {
    constructor(name2, members) {
      this.name = name2;
      this.members = members;
      this.output = false;
    }
  };
  var Uniform = class {
    /**
     * Constructs a new uniform.
     *
     * @param {string} name - The uniform's name.
     * @param {any} value - The uniform's value.
     */
    constructor(name2, value) {
      this.name = name2;
      this.value = value;
      this.boundary = 0;
      this.itemSize = 0;
      this.offset = 0;
    }
    /**
     * Sets the uniform's value.
     *
     * @param {any} value - The value to set.
     */
    setValue(value) {
      this.value = value;
    }
    /**
     * Returns the uniform's value.
     *
     * @return {any} The value.
     */
    getValue() {
      return this.value;
    }
  };
  var NumberUniform = class extends Uniform {
    /**
     * Constructs a new Number uniform.
     *
     * @param {string} name - The uniform's name.
     * @param {number} value - The uniform's value.
     */
    constructor(name2, value = 0) {
      super(name2, value);
      this.isNumberUniform = true;
      this.boundary = 4;
      this.itemSize = 1;
    }
  };
  var Vector2Uniform = class extends Uniform {
    /**
     * Constructs a new Number uniform.
     *
     * @param {string} name - The uniform's name.
     * @param {Vector2} value - The uniform's value.
     */
    constructor(name2, value = new Vector2()) {
      super(name2, value);
      this.isVector2Uniform = true;
      this.boundary = 8;
      this.itemSize = 2;
    }
  };
  var Vector3Uniform = class extends Uniform {
    /**
     * Constructs a new Number uniform.
     *
     * @param {string} name - The uniform's name.
     * @param {Vector3} value - The uniform's value.
     */
    constructor(name2, value = new Vector3()) {
      super(name2, value);
      this.isVector3Uniform = true;
      this.boundary = 16;
      this.itemSize = 3;
    }
  };
  var Vector4Uniform = class extends Uniform {
    /**
     * Constructs a new Number uniform.
     *
     * @param {string} name - The uniform's name.
     * @param {Vector4} value - The uniform's value.
     */
    constructor(name2, value = new Vector4()) {
      super(name2, value);
      this.isVector4Uniform = true;
      this.boundary = 16;
      this.itemSize = 4;
    }
  };
  var ColorUniform = class extends Uniform {
    /**
     * Constructs a new Number uniform.
     *
     * @param {string} name - The uniform's name.
     * @param {Color} value - The uniform's value.
     */
    constructor(name2, value = new Color()) {
      super(name2, value);
      this.isColorUniform = true;
      this.boundary = 16;
      this.itemSize = 3;
    }
  };
  var Matrix2Uniform = class extends Uniform {
    /**
     * Constructs a new Number uniform.
     *
     * @param {string} name - The uniform's name.
     * @param {Matrix2} value - The uniform's value.
     */
    constructor(name2, value = new Matrix2()) {
      super(name2, value);
      this.isMatrix2Uniform = true;
      this.boundary = 8;
      this.itemSize = 4;
    }
  };
  var Matrix3Uniform = class extends Uniform {
    /**
     * Constructs a new Number uniform.
     *
     * @param {string} name - The uniform's name.
     * @param {Matrix3} value - The uniform's value.
     */
    constructor(name2, value = new Matrix3()) {
      super(name2, value);
      this.isMatrix3Uniform = true;
      this.boundary = 48;
      this.itemSize = 12;
    }
  };
  var Matrix4Uniform = class extends Uniform {
    /**
     * Constructs a new Number uniform.
     *
     * @param {string} name - The uniform's name.
     * @param {Matrix4} value - The uniform's value.
     */
    constructor(name2, value = new Matrix4()) {
      super(name2, value);
      this.isMatrix4Uniform = true;
      this.boundary = 64;
      this.itemSize = 16;
    }
  };
  var NumberNodeUniform = class extends NumberUniform {
    /**
     * Constructs a new node-based Number uniform.
     *
     * @param {NodeUniform} nodeUniform - The node uniform.
     */
    constructor(nodeUniform) {
      super(nodeUniform.name, nodeUniform.value);
      this.nodeUniform = nodeUniform;
    }
    /**
     * Overwritten to return the value of the node uniform.
     *
     * @return {number} The value.
     */
    getValue() {
      return this.nodeUniform.value;
    }
    /**
     * Returns the node uniform data type.
     *
     * @return {string} The data type.
     */
    getType() {
      return this.nodeUniform.type;
    }
  };
  var Vector2NodeUniform = class extends Vector2Uniform {
    /**
     * Constructs a new node-based Vector2 uniform.
     *
     * @param {NodeUniform} nodeUniform - The node uniform.
     */
    constructor(nodeUniform) {
      super(nodeUniform.name, nodeUniform.value);
      this.nodeUniform = nodeUniform;
    }
    /**
     * Overwritten to return the value of the node uniform.
     *
     * @return {Vector2} The value.
     */
    getValue() {
      return this.nodeUniform.value;
    }
    /**
     * Returns the node uniform data type.
     *
     * @return {string} The data type.
     */
    getType() {
      return this.nodeUniform.type;
    }
  };
  var Vector3NodeUniform = class extends Vector3Uniform {
    /**
     * Constructs a new node-based Vector3 uniform.
     *
     * @param {NodeUniform} nodeUniform - The node uniform.
     */
    constructor(nodeUniform) {
      super(nodeUniform.name, nodeUniform.value);
      this.nodeUniform = nodeUniform;
    }
    /**
     * Overwritten to return the value of the node uniform.
     *
     * @return {Vector3} The value.
     */
    getValue() {
      return this.nodeUniform.value;
    }
    /**
     * Returns the node uniform data type.
     *
     * @return {string} The data type.
     */
    getType() {
      return this.nodeUniform.type;
    }
  };
  var Vector4NodeUniform = class extends Vector4Uniform {
    /**
     * Constructs a new node-based Vector4 uniform.
     *
     * @param {NodeUniform} nodeUniform - The node uniform.
     */
    constructor(nodeUniform) {
      super(nodeUniform.name, nodeUniform.value);
      this.nodeUniform = nodeUniform;
    }
    /**
     * Overwritten to return the value of the node uniform.
     *
     * @return {Vector4} The value.
     */
    getValue() {
      return this.nodeUniform.value;
    }
    /**
     * Returns the node uniform data type.
     *
     * @return {string} The data type.
     */
    getType() {
      return this.nodeUniform.type;
    }
  };
  var ColorNodeUniform = class extends ColorUniform {
    /**
     * Constructs a new node-based Color uniform.
     *
     * @param {NodeUniform} nodeUniform - The node uniform.
     */
    constructor(nodeUniform) {
      super(nodeUniform.name, nodeUniform.value);
      this.nodeUniform = nodeUniform;
    }
    /**
     * Overwritten to return the value of the node uniform.
     *
     * @return {Color} The value.
     */
    getValue() {
      return this.nodeUniform.value;
    }
    /**
     * Returns the node uniform data type.
     *
     * @return {string} The data type.
     */
    getType() {
      return this.nodeUniform.type;
    }
  };
  var Matrix2NodeUniform = class extends Matrix2Uniform {
    /**
     * Constructs a new node-based Matrix2 uniform.
     *
     * @param {NodeUniform} nodeUniform - The node uniform.
     */
    constructor(nodeUniform) {
      super(nodeUniform.name, nodeUniform.value);
      this.nodeUniform = nodeUniform;
    }
    /**
     * Overwritten to return the value of the node uniform.
     *
     * @return {Matrix2} The value.
     */
    getValue() {
      return this.nodeUniform.value;
    }
    /**
     * Returns the node uniform data type.
     *
     * @return {string} The data type.
     */
    getType() {
      return this.nodeUniform.type;
    }
  };
  var Matrix3NodeUniform = class extends Matrix3Uniform {
    /**
     * Constructs a new node-based Matrix3 uniform.
     *
     * @param {NodeUniform} nodeUniform - The node uniform.
     */
    constructor(nodeUniform) {
      super(nodeUniform.name, nodeUniform.value);
      this.nodeUniform = nodeUniform;
    }
    /**
     * Overwritten to return the value of the node uniform.
     *
     * @return {Matrix3} The value.
     */
    getValue() {
      return this.nodeUniform.value;
    }
    /**
     * Returns the node uniform data type.
     *
     * @return {string} The data type.
     */
    getType() {
      return this.nodeUniform.type;
    }
  };
  var Matrix4NodeUniform = class extends Matrix4Uniform {
    /**
     * Constructs a new node-based Matrix4 uniform.
     *
     * @param {NodeUniform} nodeUniform - The node uniform.
     */
    constructor(nodeUniform) {
      super(nodeUniform.name, nodeUniform.value);
      this.nodeUniform = nodeUniform;
    }
    /**
     * Overwritten to return the value of the node uniform.
     *
     * @return {Matrix4} The value.
     */
    getValue() {
      return this.nodeUniform.value;
    }
    /**
     * Returns the node uniform data type.
     *
     * @return {string} The data type.
     */
    getType() {
      return this.nodeUniform.type;
    }
  };
  var rendererCache = /* @__PURE__ */ new WeakMap();
  var typeFromArray = /* @__PURE__ */ new Map([
    [Int8Array, "int"],
    [Int16Array, "int"],
    [Int32Array, "int"],
    [Uint8Array, "uint"],
    [Uint16Array, "uint"],
    [Uint32Array, "uint"],
    [Float32Array, "float"]
  ]);
  var toFloat = (value) => {
    if (/e/g.test(value)) {
      return String(value).replace(/\+/g, "");
    } else {
      value = Number(value);
      return value + (value % 1 ? "" : ".0");
    }
  };
  var NodeBuilder2 = class {
    /**
     * Constructs a new node builder.
     *
     * @param {Object3D} object - The 3D object.
     * @param {Renderer} renderer - The current renderer.
     * @param {NodeParser} parser - A reference to a node parser.
     */
    constructor(object, renderer, parser2) {
      this.object = object;
      this.material = object && object.material || null;
      this.geometry = object && object.geometry || null;
      this.renderer = renderer;
      this.parser = parser2;
      this.scene = null;
      this.camera = null;
      this.nodes = [];
      this.sequentialNodes = [];
      this.updateNodes = [];
      this.updateBeforeNodes = [];
      this.updateAfterNodes = [];
      this.hashNodes = {};
      this.observer = null;
      this.lightsNode = null;
      this.environmentNode = null;
      this.fogNode = null;
      this.clippingContext = null;
      this.vertexShader = null;
      this.fragmentShader = null;
      this.computeShader = null;
      this.flowNodes = { vertex: [], fragment: [], compute: [] };
      this.flowCode = { vertex: "", fragment: "", compute: "" };
      this.uniforms = { vertex: [], fragment: [], compute: [], index: 0 };
      this.structs = { vertex: [], fragment: [], compute: [], index: 0 };
      this.bindings = { vertex: {}, fragment: {}, compute: {} };
      this.bindingsIndexes = {};
      this.bindGroups = null;
      this.attributes = [];
      this.bufferAttributes = [];
      this.varyings = [];
      this.codes = {};
      this.vars = {};
      this.declarations = {};
      this.flow = { code: "" };
      this.chaining = [];
      this.stack = stack();
      this.stacks = [];
      this.tab = "	";
      this.currentFunctionNode = null;
      this.context = {
        material: this.material
      };
      this.cache = new NodeCache();
      this.globalCache = this.cache;
      this.flowsData = /* @__PURE__ */ new WeakMap();
      this.shaderStage = null;
      this.buildStage = null;
    }
    /**
     * Returns the bind groups of the current renderer.
     *
     * @return {ChainMap} The cache.
     */
    getBindGroupsCache() {
      let bindGroupsCache = rendererCache.get(this.renderer);
      if (bindGroupsCache === void 0) {
        bindGroupsCache = new ChainMap();
        rendererCache.set(this.renderer, bindGroupsCache);
      }
      return bindGroupsCache;
    }
    /**
     * Factory method for creating an instance of {@link RenderTarget} with the given
     * dimensions and options.
     *
     * @param {number} width - The width of the render target.
     * @param {number} height - The height of the render target.
     * @param {Object} options - The options of the render target.
     * @return {RenderTarget} The render target.
     */
    createRenderTarget(width, height, options) {
      return new RenderTarget(width, height, options);
    }
    /**
     * Factory method for creating an instance of {@link CubeRenderTarget} with the given
     * dimensions and options.
     *
     * @param {number} size - The size of the cube render target.
     * @param {Object} options - The options of the cube render target.
     * @return {CubeRenderTarget} The cube render target.
     */
    createCubeRenderTarget(size, options) {
      return new CubeRenderTarget(size, options);
    }
    /**
     * Whether the given node is included in the internal array of nodes or not.
     *
     * @param {Node} node - The node to test.
     * @return {boolean} Whether the given node is included in the internal array of nodes or not.
     */
    includes(node) {
      return this.nodes.includes(node);
    }
    /**
     * Returns the output struct name which is required by
     * {@link OutputStructNode}.
     *
     * @abstract
     * @return {string} The name of the output struct.
     */
    getOutputStructName() {
    }
    /**
     * Returns a bind group for the given group name and binding.
     *
     * @private
     * @param {string} groupName - The group name.
     * @param {Array<NodeUniformsGroup>} bindings - List of bindings.
     * @return {BindGroup} The bind group
     */
    _getBindGroup(groupName, bindings) {
      const bindGroupsCache = this.getBindGroupsCache();
      const bindingsArray = [];
      let sharedGroup = true;
      for (const binding of bindings) {
        bindingsArray.push(binding);
        sharedGroup = sharedGroup && binding.groupNode.shared !== true;
      }
      let bindGroup;
      if (sharedGroup) {
        bindGroup = bindGroupsCache.get(bindingsArray);
        if (bindGroup === void 0) {
          bindGroup = new BindGroup(groupName, bindingsArray, this.bindingsIndexes[groupName].group, bindingsArray);
          bindGroupsCache.set(bindingsArray, bindGroup);
        }
      } else {
        bindGroup = new BindGroup(groupName, bindingsArray, this.bindingsIndexes[groupName].group, bindingsArray);
      }
      return bindGroup;
    }
    /**
     * Returns an array of node uniform groups for the given group name and shader stage.
     *
     * @param {string} groupName - The group name.
     * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.
     * @return {Array<NodeUniformsGroup>} The array of node uniform groups.
     */
    getBindGroupArray(groupName, shaderStage) {
      const bindings = this.bindings[shaderStage];
      let bindGroup = bindings[groupName];
      if (bindGroup === void 0) {
        if (this.bindingsIndexes[groupName] === void 0) {
          this.bindingsIndexes[groupName] = { binding: 0, group: Object.keys(this.bindingsIndexes).length };
        }
        bindings[groupName] = bindGroup = [];
      }
      return bindGroup;
    }
    /**
     * Returns a list bindings of all shader stages separated by groups.
     *
     * @return {Array<BindGroup>} The list of bindings.
     */
    getBindings() {
      let bindingsGroups = this.bindGroups;
      if (bindingsGroups === null) {
        const groups = {};
        const bindings = this.bindings;
        for (const shaderStage of shaderStages) {
          for (const groupName in bindings[shaderStage]) {
            const uniforms = bindings[shaderStage][groupName];
            const groupUniforms = groups[groupName] || (groups[groupName] = []);
            groupUniforms.push(...uniforms);
          }
        }
        bindingsGroups = [];
        for (const groupName in groups) {
          const group = groups[groupName];
          const bindingsGroup = this._getBindGroup(groupName, group);
          bindingsGroups.push(bindingsGroup);
        }
        this.bindGroups = bindingsGroups;
      }
      return bindingsGroups;
    }
    /**
     * Sorts the bind groups and updates {@link NodeBuilder#bindingsIndexes}.
     */
    sortBindingGroups() {
      const bindingsGroups = this.getBindings();
      bindingsGroups.sort((a, b) => a.bindings[0].groupNode.order - b.bindings[0].groupNode.order);
      for (let i = 0; i < bindingsGroups.length; i++) {
        const bindingGroup = bindingsGroups[i];
        this.bindingsIndexes[bindingGroup.name].group = i;
        bindingGroup.index = i;
      }
    }
    /**
     * The builder maintains each node in a hash-based dictionary.
     * This method sets the given node (value) with the given hash (key) into this dictionary.
     *
     * @param {Node} node - The node to add.
     * @param {number} hash - The hash of the node.
     */
    setHashNode(node, hash) {
      this.hashNodes[hash] = node;
    }
    /**
     * Adds a node to this builder.
     *
     * @param {Node} node - The node to add.
     */
    addNode(node) {
      if (this.nodes.includes(node) === false) {
        this.nodes.push(node);
        this.setHashNode(node, node.getHash(this));
      }
    }
    /**
     * It is used to add Nodes that will be used as FRAME and RENDER events,
     * and need to follow a certain sequence in the calls to work correctly.
     * This function should be called after 'setup()' in the 'build()' process to ensure that the child nodes are processed first.
     *
     * @param {Node} node - The node to add.
     */
    addSequentialNode(node) {
      if (this.sequentialNodes.includes(node) === false) {
        this.sequentialNodes.push(node);
      }
    }
    /**
     * Checks the update types of nodes
     */
    buildUpdateNodes() {
      for (const node of this.nodes) {
        const updateType = node.getUpdateType();
        if (updateType !== NodeUpdateType.NONE) {
          this.updateNodes.push(node.getSelf());
        }
      }
      for (const node of this.sequentialNodes) {
        const updateBeforeType = node.getUpdateBeforeType();
        const updateAfterType = node.getUpdateAfterType();
        if (updateBeforeType !== NodeUpdateType.NONE) {
          this.updateBeforeNodes.push(node.getSelf());
        }
        if (updateAfterType !== NodeUpdateType.NONE) {
          this.updateAfterNodes.push(node.getSelf());
        }
      }
    }
    /**
     * A reference the current node which is the
     * last node in the chain of nodes.
     *
     * @type {Node}
     */
    get currentNode() {
      return this.chaining[this.chaining.length - 1];
    }
    /**
     * Whether the given texture is filtered or not.
     *
     * @param {Texture} texture - The texture to check.
     * @return {boolean} Whether the given texture is filtered or not.
     */
    isFilteredTexture(texture2) {
      return texture2.magFilter === LinearFilter || texture2.magFilter === LinearMipmapNearestFilter || texture2.magFilter === NearestMipmapLinearFilter || texture2.magFilter === LinearMipmapLinearFilter || texture2.minFilter === LinearFilter || texture2.minFilter === LinearMipmapNearestFilter || texture2.minFilter === NearestMipmapLinearFilter || texture2.minFilter === LinearMipmapLinearFilter;
    }
    /**
     * Adds the given node to the internal node chain.
     * This is used to check recursive calls in node-graph.
     *
     * @param {Node} node - The node to add.
     */
    addChain(node) {
      this.chaining.push(node);
    }
    /**
     * Removes the given node from the internal node chain.
     *
     * @param {Node} node - The node to remove.
     */
    removeChain(node) {
      const lastChain = this.chaining.pop();
      if (lastChain !== node) {
        throw new Error("NodeBuilder: Invalid node chaining!");
      }
    }
    /**
     * Returns the native shader method name for a given generic name. E.g.
     * the method name `textureDimensions` matches the WGSL name but must be
     * resolved to `textureSize` in GLSL.
     *
     * @abstract
     * @param {string} method - The method name to resolve.
     * @return {string} The resolved method name.
     */
    getMethod(method) {
      return method;
    }
    /**
     * Returns a node for the given hash, see {@link NodeBuilder#setHashNode}.
     *
     * @param {number} hash - The hash of the node.
     * @return {Node} The found node.
     */
    getNodeFromHash(hash) {
      return this.hashNodes[hash];
    }
    /**
     * Adds the Node to a target flow so that it can generate code in the 'generate' process.
     *
     * @param {('vertex'|'fragment'|'compute')} shaderStage - The shader stage.
     * @param {Node} node - The node to add.
     * @return {Node} The node.
     */
    addFlow(shaderStage, node) {
      this.flowNodes[shaderStage].push(node);
      return node;
    }
    /**
     * Sets builder's context.
     *
     * @param {Object} context - The context to set.
     */
    setContext(context2) {
      this.context = context2;
    }
    /**
     * Returns the builder's current context.
     *
     * @return {Object} The builder's current context.
     */
    getContext() {
      return this.context;
    }
    /**
     * Gets a context used in shader construction that can be shared across different materials.
     * This is necessary since the renderer cache can reuse shaders generated in one material and use them in another.
     *
     * @return {Object} The builder's current context without material.
     */
    getSharedContext() {
      ({ ...this.context });
      return this.context;
    }
    /**
     * Sets builder's cache.
     *
     * @param {NodeCache} cache - The cache to set.
     */
    setCache(cache3) {
      this.cache = cache3;
    }
    /**
     * Returns the builder's current cache.
     *
     * @return {NodeCache} The builder's current cache.
     */
    getCache() {
      return this.cache;
    }
    /**
     * Returns a cache for the given node.
     *
     * @param {Node} node - The node.
     * @param {boolean} [parent=true] - Whether this node refers to a shared parent cache or not.
     * @return {NodeCache} The cache.
     */
    getCacheFromNode(node, parent = true) {
      const data = this.getDataFromNode(node);
      if (data.cache === void 0) data.cache = new NodeCache(parent ? this.getCache() : null);
      return data.cache;
    }
    /**
     * Whether the requested feature is available or not.
     *
     * @abstract
     * @param {string} name - The requested feature.
     * @return {boolean} Whether the requested feature is supported or not.
     */
    isAvailable() {
      return false;
    }
    /**
     * Returns the vertexIndex input variable as a native shader string.
     *
     * @abstract
     * @return {string} The instanceIndex shader string.
     */
    getVertexIndex() {
      console.warn("Abstract function.");
    }
    /**
     * Returns the instanceIndex input variable as a native shader string.
     *
     * @abstract
     * @return {string} The instanceIndex shader string.
     */
    getInstanceIndex() {
      console.warn("Abstract function.");
    }
    /**
     * Returns the drawIndex input variable as a native shader string.
     * Only relevant for WebGL and its `WEBGL_multi_draw` extension.
     *
     * @abstract
     * @return {?string} The drawIndex shader string.
     */
    getDrawIndex() {
      console.warn("Abstract function.");
    }
    /**
     * Returns the frontFacing input variable as a native shader string.
     *
     * @abstract
     * @return {string} The frontFacing shader string.
     */
    getFrontFacing() {
      console.warn("Abstract function.");
    }
    /**
     * Returns the fragCoord input variable as a native shader string.
     *
     * @abstract
     * @return {string} The fragCoord shader string.
     */
    getFragCoord() {
      console.warn("Abstract function.");
    }
    /**
     * Whether to flip texture data along its vertical axis or not. WebGL needs
     * this method evaluate to `true`, WebGPU to `false`.
     *
     * @abstract
     * @return {boolean} Whether to flip texture data along its vertical axis or not.
     */
    isFlipY() {
      return false;
    }
    /**
     * Calling this method increases the usage count for the given node by one.
     *
     * @param {Node} node - The node to increase the usage count for.
     * @return {number} The updated usage count.
     */
    increaseUsage(node) {
      const nodeData = this.getDataFromNode(node);
      nodeData.usageCount = nodeData.usageCount === void 0 ? 1 : nodeData.usageCount + 1;
      return nodeData.usageCount;
    }
    /**
     * Generates a texture sample shader string for the given texture data.
     *
     * @abstract
     * @param {Texture} texture - The texture.
     * @param {string} textureProperty - The texture property name.
     * @param {string} uvSnippet - Snippet defining the texture coordinates.
     * @return {string} The generated shader string.
     */
    generateTexture() {
      console.warn("Abstract function.");
    }
    /**
     * Generates a texture LOD shader string for the given texture data.
     *
     * @abstract
     * @param {Texture} texture - The texture.
     * @param {string} textureProperty - The texture property name.
     * @param {string} uvSnippet - Snippet defining the texture coordinates.
     * @param {?string} depthSnippet - Snippet defining the 0-based texture array index to sample.
     * @param {string} levelSnippet - Snippet defining the mip level.
     * @return {string} The generated shader string.
     */
    generateTextureLod() {
      console.warn("Abstract function.");
    }
    /**
     * Generates the array declaration string.
     *
     * @param {string} type - The type.
     * @param {?number} [count] - The count.
     * @return {string} The generated value as a shader string.
     */
    generateArrayDeclaration(type, count) {
      return this.getType(type) + "[ " + count + " ]";
    }
    /**
     * Generates the array shader string for the given type and value.
     *
     * @param {string} type - The type.
     * @param {?number} [count] - The count.
     * @param {?Array<Node>} [values=null] - The default values.
     * @return {string} The generated value as a shader string.
     */
    generateArray(type, count, values = null) {
      let snippet2 = this.generateArrayDeclaration(type, count) + "( ";
      for (let i = 0; i < count; i++) {
        const value = values ? values[i] : null;
        if (value !== null) {
          snippet2 += value.build(this, type);
        } else {
          snippet2 += this.generateConst(type);
        }
        if (i < count - 1) snippet2 += ", ";
      }
      snippet2 += " )";
      return snippet2;
    }
    /**
     * Generates the struct shader string.
     *
     * @param {string} type - The type.
     * @param {Array<Object>} [membersLayout] - The count.
     * @param {?Array<Node>} [values=null] - The default values.
     * @return {string} The generated value as a shader string.
     */
    generateStruct(type, membersLayout, values = null) {
      const snippets2 = [];
      for (const member of membersLayout) {
        const { name: name2, type: type2 } = member;
        if (values && values[name2] && values[name2].isNode) {
          snippets2.push(values[name2].build(this, type2));
        } else {
          snippets2.push(this.generateConst(type2));
        }
      }
      return type + "( " + snippets2.join(", ") + " )";
    }
    /**
     * Generates the shader string for the given type and value.
     *
     * @param {string} type - The type.
     * @param {?any} [value=null] - The value.
     * @return {string} The generated value as a shader string.
     */
    generateConst(type, value = null) {
      if (value === null) {
        if (type === "float" || type === "int" || type === "uint") value = 0;
        else if (type === "bool") value = false;
        else if (type === "color") value = new Color();
        else if (type === "vec2") value = new Vector2();
        else if (type === "vec3") value = new Vector3();
        else if (type === "vec4") value = new Vector4();
      }
      if (type === "float") return toFloat(value);
      if (type === "int") return `${Math.round(value)}`;
      if (type === "uint") return value >= 0 ? `${Math.round(value)}u` : "0u";
      if (type === "bool") return value ? "true" : "false";
      if (type === "color") return `${this.getType("vec3")}( ${toFloat(value.r)}, ${toFloat(value.g)}, ${toFloat(value.b)} )`;
      const typeLength = this.getTypeLength(type);
      const componentType = this.getComponentType(type);
      const generateConst = (value2) => this.generateConst(componentType, value2);
      if (typeLength === 2) {
        return `${this.getType(type)}( ${generateConst(value.x)}, ${generateConst(value.y)} )`;
      } else if (typeLength === 3) {
        return `${this.getType(type)}( ${generateConst(value.x)}, ${generateConst(value.y)}, ${generateConst(value.z)} )`;
      } else if (typeLength === 4 && type !== "mat2") {
        return `${this.getType(type)}( ${generateConst(value.x)}, ${generateConst(value.y)}, ${generateConst(value.z)}, ${generateConst(value.w)} )`;
      } else if (typeLength >= 4 && value && (value.isMatrix2 || value.isMatrix3 || value.isMatrix4)) {
        return `${this.getType(type)}( ${value.elements.map(generateConst).join(", ")} )`;
      } else if (typeLength > 4) {
        return `${this.getType(type)}()`;
      }
      throw new Error(`NodeBuilder: Type '${type}' not found in generate constant attempt.`);
    }
    /**
     * It might be necessary to convert certain data types to different ones
     * so this method can be used to hide the conversion.
     *
     * @param {string} type - The type.
     * @return {string} The updated type.
     */
    getType(type) {
      if (type === "color") return "vec3";
      return type;
    }
    /**
     * Whether the given attribute name is defined in the geometry or not.
     *
     * @param {string} name - The attribute name.
     * @return {boolean} Whether the given attribute name is defined in the geometry.
     */
    hasGeometryAttribute(name2) {
      return this.geometry && this.geometry.getAttribute(name2) !== void 0;
    }
    /**
     * Returns a node attribute for the given name and type.
     *
     * @param {string} name - The attribute's name.
     * @param {string} type - The attribute's type.
     * @return {NodeAttribute} The node attribute.
     */
    getAttribute(name2, type) {
      const attributes = this.attributes;
      for (const attribute3 of attributes) {
        if (attribute3.name === name2) {
          return attribute3;
        }
      }
      const attribute2 = new NodeAttribute(name2, type);
      this.registerDeclaration(attribute2);
      attributes.push(attribute2);
      return attribute2;
    }
    /**
     * Returns for the given node and shader stage the property name for the shader.
     *
     * @param {Node} node - The node.
     * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.
     * @return {string} The property name.
     */
    getPropertyName(node) {
      return node.name;
    }
    /**
     * Whether the given type is a vector type or not.
     *
     * @param {string} type - The type to check.
     * @return {boolean} Whether the given type is a vector type or not.
     */
    isVector(type) {
      return /vec\d/.test(type);
    }
    /**
     * Whether the given type is a matrix type or not.
     *
     * @param {string} type - The type to check.
     * @return {boolean} Whether the given type is a matrix type or not.
     */
    isMatrix(type) {
      return /mat\d/.test(type);
    }
    /**
     * Whether the given type is a reference type or not.
     *
     * @param {string} type - The type to check.
     * @return {boolean} Whether the given type is a reference type or not.
     */
    isReference(type) {
      return type === "void" || type === "property" || type === "sampler" || type === "samplerComparison" || type === "texture" || type === "cubeTexture" || type === "storageTexture" || type === "depthTexture" || type === "texture3D";
    }
    /**
     * Checks if the given texture requires a manual conversion to the working color space.
     *
     * @abstract
     * @param {Texture} texture - The texture to check.
     * @return {boolean} Whether the given texture requires a conversion to working color space or not.
     */
    needsToWorkingColorSpace() {
      return false;
    }
    /**
     * Returns the component type of a given texture.
     *
     * @param {Texture} texture - The texture.
     * @return {string} The component type.
     */
    getComponentTypeFromTexture(texture2) {
      const type = texture2.type;
      if (texture2.isDataTexture) {
        if (type === IntType) return "int";
        if (type === UnsignedIntType) return "uint";
      }
      return "float";
    }
    /**
     * Returns the element type for a given type.
     *
     * @param {string} type - The type.
     * @return {string} The element type.
     */
    getElementType(type) {
      if (type === "mat2") return "vec2";
      if (type === "mat3") return "vec3";
      if (type === "mat4") return "vec4";
      return this.getComponentType(type);
    }
    /**
     * Returns the component type for a given type.
     *
     * @param {string} type - The type.
     * @return {string} The component type.
     */
    getComponentType(type) {
      type = this.getVectorType(type);
      if (type === "float" || type === "bool" || type === "int" || type === "uint") return type;
      const componentType = /(b|i|u|)(vec|mat)([2-4])/.exec(type);
      if (componentType === null) return null;
      if (componentType[1] === "b") return "bool";
      if (componentType[1] === "i") return "int";
      if (componentType[1] === "u") return "uint";
      return "float";
    }
    /**
     * Returns the vector type for a given type.
     *
     * @param {string} type - The type.
     * @return {string} The vector type.
     */
    getVectorType(type) {
      if (type === "color") return "vec3";
      if (type === "texture" || type === "cubeTexture" || type === "storageTexture" || type === "texture3D") return "vec4";
      return type;
    }
    /**
     * Returns the data type for the given the length and component type.
     *
     * @param {number} length - The length.
     * @param {string} [componentType='float'] - The component type.
     * @return {string} The type.
     */
    getTypeFromLength(length2, componentType = "float") {
      if (length2 === 1) return componentType;
      let baseType = getTypeFromLength(length2);
      const prefix = componentType === "float" ? "" : componentType[0];
      if (/mat2/.test(componentType) === true) {
        baseType = baseType.replace("vec", "mat");
      }
      return prefix + baseType;
    }
    /**
     * Returns the type for a given typed array.
     *
     * @param {TypedArray} array - The typed array.
     * @return {string} The type.
     */
    getTypeFromArray(array2) {
      return typeFromArray.get(array2.constructor);
    }
    /**
     * Returns the type is an integer type.
     *
     * @param {string} type - The type.
     * @return {boolean} Whether the type is an integer type or not.
     */
    isInteger(type) {
      return /int|uint|(i|u)vec/.test(type);
    }
    /**
     * Returns the type for a given buffer attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute.
     * @return {string} The type.
     */
    getTypeFromAttribute(attribute2) {
      let dataAttribute = attribute2;
      if (attribute2.isInterleavedBufferAttribute) dataAttribute = attribute2.data;
      const array2 = dataAttribute.array;
      const itemSize = attribute2.itemSize;
      const normalized = attribute2.normalized;
      let arrayType;
      if (!(attribute2 instanceof Float16BufferAttribute) && normalized !== true) {
        arrayType = this.getTypeFromArray(array2);
      }
      return this.getTypeFromLength(itemSize, arrayType);
    }
    /**
     * Returns the length for the given data type.
     *
     * @param {string} type - The data type.
     * @return {number} The length.
     */
    getTypeLength(type) {
      const vecType = this.getVectorType(type);
      const vecNum = /vec([2-4])/.exec(vecType);
      if (vecNum !== null) return Number(vecNum[1]);
      if (vecType === "float" || vecType === "bool" || vecType === "int" || vecType === "uint") return 1;
      if (/mat2/.test(type) === true) return 4;
      if (/mat3/.test(type) === true) return 9;
      if (/mat4/.test(type) === true) return 16;
      return 0;
    }
    /**
     * Returns the vector type for a given matrix type.
     *
     * @param {string} type - The matrix type.
     * @return {string} The vector type.
     */
    getVectorFromMatrix(type) {
      return type.replace("mat", "vec");
    }
    /**
     * For a given type this method changes the component type to the
     * given value. E.g. `vec4` should be changed to the new component type
     * `uint` which results in `uvec4`.
     *
     * @param {string} type - The type.
     * @param {string} newComponentType - The new component type.
     * @return {string} The new type.
     */
    changeComponentType(type, newComponentType) {
      return this.getTypeFromLength(this.getTypeLength(type), newComponentType);
    }
    /**
     * Returns the integer type pendant for the given type.
     *
     * @param {string} type - The type.
     * @return {string} The integer type.
     */
    getIntegerType(type) {
      const componentType = this.getComponentType(type);
      if (componentType === "int" || componentType === "uint") return type;
      return this.changeComponentType(type, "int");
    }
    /**
     * Adds a stack node to the internal stack.
     *
     * @return {StackNode} The added stack node.
     */
    addStack() {
      this.stack = stack(this.stack);
      this.stacks.push(getCurrentStack() || this.stack);
      setCurrentStack(this.stack);
      return this.stack;
    }
    /**
     * Removes the last stack node from the internal stack.
     *
     * @return {StackNode} The removed stack node.
     */
    removeStack() {
      const lastStack = this.stack;
      this.stack = lastStack.parent;
      setCurrentStack(this.stacks.pop());
      return lastStack;
    }
    /**
     * The builder maintains (cached) data for each node during the building process. This method
     * can be used to get these data for a specific shader stage and cache.
     *
     * @param {Node} node - The node to get the data for.
     * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.
     * @param {?NodeCache} cache - An optional cache.
     * @return {Object} The node data.
     */
    getDataFromNode(node, shaderStage = this.shaderStage, cache3 = null) {
      cache3 = cache3 === null ? node.isGlobal(this) ? this.globalCache : this.cache : cache3;
      let nodeData = cache3.getData(node);
      if (nodeData === void 0) {
        nodeData = {};
        cache3.setData(node, nodeData);
      }
      if (nodeData[shaderStage] === void 0) nodeData[shaderStage] = {};
      return nodeData[shaderStage];
    }
    /**
     * Returns the properties for the given node and shader stage.
     *
     * @param {Node} node - The node to get the properties for.
     * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage='any'] - The shader stage.
     * @return {Object} The node properties.
     */
    getNodeProperties(node, shaderStage = "any") {
      const nodeData = this.getDataFromNode(node, shaderStage);
      return nodeData.properties || (nodeData.properties = { outputNode: null });
    }
    /**
     * Returns an instance of {@link NodeAttribute} for the given buffer attribute node.
     *
     * @param {BufferAttributeNode} node - The buffer attribute node.
     * @param {string} type - The node type.
     * @return {NodeAttribute} The node attribute.
     */
    getBufferAttributeFromNode(node, type) {
      const nodeData = this.getDataFromNode(node);
      let bufferAttribute2 = nodeData.bufferAttribute;
      if (bufferAttribute2 === void 0) {
        const index = this.uniforms.index++;
        bufferAttribute2 = new NodeAttribute("nodeAttribute" + index, type, node);
        this.bufferAttributes.push(bufferAttribute2);
        nodeData.bufferAttribute = bufferAttribute2;
      }
      return bufferAttribute2;
    }
    /**
     * Returns an instance of {@link StructType} for the given output struct node.
     *
     * @param {OutputStructNode} node - The output struct node.
     * @param {Array<Object>} membersLayout - The output struct types.
     * @param {?string} [name=null] - The name of the struct.
     * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.
     * @return {StructType} The struct type attribute.
     */
    getStructTypeFromNode(node, membersLayout, name2 = null, shaderStage = this.shaderStage) {
      const nodeData = this.getDataFromNode(node, shaderStage, this.globalCache);
      let structType = nodeData.structType;
      if (structType === void 0) {
        const index = this.structs.index++;
        if (name2 === null) name2 = "StructType" + index;
        structType = new StructType(name2, membersLayout);
        this.structs[shaderStage].push(structType);
        nodeData.structType = structType;
      }
      return structType;
    }
    /**
     * Returns an instance of {@link StructType} for the given output struct node.
     *
     * @param {OutputStructNode} node - The output struct node.
     * @param {Array<Object>} membersLayout - The output struct types.
     * @return {StructType} The struct type attribute.
     */
    getOutputStructTypeFromNode(node, membersLayout) {
      const structType = this.getStructTypeFromNode(node, membersLayout, "OutputType", "fragment");
      structType.output = true;
      return structType;
    }
    /**
     * Returns an instance of {@link NodeUniform} for the given uniform node.
     *
     * @param {UniformNode} node - The uniform node.
     * @param {string} type - The uniform type.
     * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.
     * @param {?string} name - The name of the uniform.
     * @return {NodeUniform} The node uniform.
     */
    getUniformFromNode(node, type, shaderStage = this.shaderStage, name2 = null) {
      const nodeData = this.getDataFromNode(node, shaderStage, this.globalCache);
      let nodeUniform = nodeData.uniform;
      if (nodeUniform === void 0) {
        const index = this.uniforms.index++;
        nodeUniform = new NodeUniform(name2 || "nodeUniform" + index, type, node);
        this.uniforms[shaderStage].push(nodeUniform);
        this.registerDeclaration(nodeUniform);
        nodeData.uniform = nodeUniform;
      }
      return nodeUniform;
    }
    /**
     * Returns the array length.
     *
     * @param {Node} node - The node.
     * @return {?number} The array length.
     */
    getArrayCount(node) {
      let count = null;
      if (node.isArrayNode) count = node.count;
      else if (node.isVarNode && node.node.isArrayNode) count = node.node.count;
      return count;
    }
    /**
     * Returns an instance of {@link NodeVar} for the given variable node.
     *
     * @param {VarNode} node - The variable node.
     * @param {?string} name - The variable's name.
     * @param {string} [type=node.getNodeType( this )] - The variable's type.
     * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.
     * @param {boolean} [readOnly=false] - Whether the variable is read-only or not.
     *
     * @return {NodeVar} The node variable.
     */
    getVarFromNode(node, name2 = null, type = node.getNodeType(this), shaderStage = this.shaderStage, readOnly2 = false) {
      const nodeData = this.getDataFromNode(node, shaderStage);
      let nodeVar = nodeData.variable;
      if (nodeVar === void 0) {
        const idNS = readOnly2 ? "_const" : "_var";
        const vars = this.vars[shaderStage] || (this.vars[shaderStage] = []);
        const id2 = this.vars[idNS] || (this.vars[idNS] = 0);
        if (name2 === null) {
          name2 = (readOnly2 ? "nodeConst" : "nodeVar") + id2;
          this.vars[idNS]++;
        }
        const count = this.getArrayCount(node);
        nodeVar = new NodeVar(name2, type, readOnly2, count);
        if (!readOnly2) {
          vars.push(nodeVar);
        }
        this.registerDeclaration(nodeVar);
        nodeData.variable = nodeVar;
      }
      return nodeVar;
    }
    /**
     * Returns whether a Node or its flow is deterministic, useful for use in `const`.
     *
     * @param {Node} node - The varying node.
     * @return {boolean} Returns true if deterministic.
     */
    isDeterministic(node) {
      if (node.isMathNode) {
        return this.isDeterministic(node.aNode) && (node.bNode ? this.isDeterministic(node.bNode) : true) && (node.cNode ? this.isDeterministic(node.cNode) : true);
      } else if (node.isOperatorNode) {
        return this.isDeterministic(node.aNode) && (node.bNode ? this.isDeterministic(node.bNode) : true);
      } else if (node.isArrayNode) {
        if (node.values !== null) {
          for (const n of node.values) {
            if (!this.isDeterministic(n)) {
              return false;
            }
          }
        }
        return true;
      } else if (node.isConstNode) {
        return true;
      }
      return false;
    }
    /**
     * Returns an instance of {@link NodeVarying} for the given varying node.
     *
     * @param {(VaryingNode|PropertyNode)} node - The varying node.
     * @param {?string} name - The varying's name.
     * @param {string} [type=node.getNodeType( this )] - The varying's type.
     * @param {?string} interpolationType - The interpolation type of the varying.
     * @param {?string} interpolationSampling - The interpolation sampling type of the varying.
     * @return {NodeVar} The node varying.
     */
    getVaryingFromNode(node, name2 = null, type = node.getNodeType(this), interpolationType = null, interpolationSampling = null) {
      const nodeData = this.getDataFromNode(node, "any");
      let nodeVarying = nodeData.varying;
      if (nodeVarying === void 0) {
        const varyings = this.varyings;
        const index = varyings.length;
        if (name2 === null) name2 = "nodeVarying" + index;
        nodeVarying = new NodeVarying(name2, type, interpolationType, interpolationSampling);
        varyings.push(nodeVarying);
        this.registerDeclaration(nodeVarying);
        nodeData.varying = nodeVarying;
      }
      return nodeVarying;
    }
    /**
     * Returns the current namespace for the node builder.
     *
     * @return {string} The current namespace.
     */
    get namespace() {
      return this.context.namespace;
    }
    /**
     * Returns the output namespace for the node builder, which is used for the current output node.
     *
     * @return {string} The output namespace.
     */
    getOutputNamespace() {
      return this.getNamespace("outputNode");
    }
    /**
     * Returns the namespace for the given property.
     *
     * If the property name is not set, it returns the namespace only.
     * If the namespace is not set, it returns the property name.
     * If the namespace is set, it returns the namespace concatenated with the property name.
     *
     * @param {string} [property=''] - The property name.
     * @return {string} The namespace for the property.
     */
    getNamespace(property2 = "") {
      const ns = this.namespace;
      let nsName;
      if (ns) {
        nsName = property2 ? ns + "_" + property2 : ns;
      } else {
        nsName = property2;
      }
      return nsName;
    }
    /**
     * Registers a node declaration in the current shader stage.
     *
     * @param {Object} node - The node to be registered.
     */
    registerDeclaration(node) {
      const shaderStage = this.shaderStage;
      const declarations = this.declarations[shaderStage] || (this.declarations[shaderStage] = {});
      const property2 = this.getPropertyName(node);
      let index = 1;
      let name2 = property2;
      while (declarations[name2] !== void 0) {
        name2 = property2 + "_" + index++;
      }
      if (index > 1) {
        node.name = name2;
        console.warn(`THREE.TSL: Declaration name '${property2}' of '${node.type}' already in use. Renamed to '${name2}'.`);
      }
      declarations[name2] = node;
    }
    /**
     * Returns an instance of {@link NodeCode} for the given code node.
     *
     * @param {CodeNode} node - The code node.
     * @param {string} type - The node type.
     * @param {('vertex'|'fragment'|'compute'|'any')} [shaderStage=this.shaderStage] - The shader stage.
     * @return {NodeCode} The node code.
     */
    getCodeFromNode(node, type, shaderStage = this.shaderStage) {
      const nodeData = this.getDataFromNode(node);
      let nodeCode = nodeData.code;
      if (nodeCode === void 0) {
        const codes = this.codes[shaderStage] || (this.codes[shaderStage] = []);
        const index = codes.length;
        nodeCode = new NodeCode("nodeCode" + index, type);
        codes.push(nodeCode);
        nodeData.code = nodeCode;
      }
      return nodeCode;
    }
    /**
    	 * Adds a code flow based on the code-block hierarchy.
    
    	 * This is used so that code-blocks like If,Else create their variables locally if the Node
    	 * is only used inside one of these conditionals in the current shader stage.
    	 *
    	 * @param {Node} node - The node to add.
    	 * @param {Node} nodeBlock - Node-based code-block. Usually 'ConditionalNode'.
    	 */
    addFlowCodeHierarchy(node, nodeBlock) {
      const { flowCodes, flowCodeBlock } = this.getDataFromNode(node);
      let needsFlowCode = true;
      let nodeBlockHierarchy = nodeBlock;
      while (nodeBlockHierarchy) {
        if (flowCodeBlock.get(nodeBlockHierarchy) === true) {
          needsFlowCode = false;
          break;
        }
        nodeBlockHierarchy = this.getDataFromNode(nodeBlockHierarchy).parentNodeBlock;
      }
      if (needsFlowCode) {
        for (const flowCode of flowCodes) {
          this.addLineFlowCode(flowCode);
        }
      }
    }
    /**
     * Add a inline-code to the current flow code-block.
     *
     * @param {Node} node - The node to add.
     * @param {string} code - The code to add.
     * @param {Node} nodeBlock - Current ConditionalNode
     */
    addLineFlowCodeBlock(node, code, nodeBlock) {
      const nodeData = this.getDataFromNode(node);
      const flowCodes = nodeData.flowCodes || (nodeData.flowCodes = []);
      const codeBlock = nodeData.flowCodeBlock || (nodeData.flowCodeBlock = /* @__PURE__ */ new WeakMap());
      flowCodes.push(code);
      codeBlock.set(nodeBlock, true);
    }
    /**
     * Add a inline-code to the current flow.
     *
     * @param {string} code - The code to add.
     * @param {?Node} [node= null] - Optional Node, can help the system understand if the Node is part of a code-block.
     * @return {NodeBuilder} A reference to this node builder.
     */
    addLineFlowCode(code, node = null) {
      if (code === "") return this;
      if (node !== null && this.context.nodeBlock) {
        this.addLineFlowCodeBlock(node, code, this.context.nodeBlock);
      }
      code = this.tab + code;
      if (!/;\s*$/.test(code)) {
        code = code + ";\n";
      }
      this.flow.code += code;
      return this;
    }
    /**
     * Adds a code to the current code flow.
     *
     * @param {string} code - Shader code.
     * @return {NodeBuilder} A reference to this node builder.
     */
    addFlowCode(code) {
      this.flow.code += code;
      return this;
    }
    /**
     * Add tab in the code that will be generated so that other snippets respect the current tabulation.
     * Typically used in codes with If,Else.
     *
     * @return {NodeBuilder} A reference to this node builder.
     */
    addFlowTab() {
      this.tab += "	";
      return this;
    }
    /**
     * Removes a tab.
     *
     * @return {NodeBuilder} A reference to this node builder.
     */
    removeFlowTab() {
      this.tab = this.tab.slice(0, -1);
      return this;
    }
    /**
     * Gets the current flow data based on a Node.
     *
     * @param {Node} node - Node that the flow was started.
     * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.
     * @return {Object} The flow data.
     */
    getFlowData(node) {
      return this.flowsData.get(node);
    }
    /**
     * Executes the node flow based on a root node to generate the final shader code.
     *
     * @param {Node} node - The node to execute.
     * @return {Object} The code flow.
     */
    flowNode(node) {
      const output2 = node.getNodeType(this);
      const flowData = this.flowChildNode(node, output2);
      this.flowsData.set(node, flowData);
      return flowData;
    }
    /**
     * Includes a node in the current function node.
     *
     * @param {Node} node - The node to include.
     * @returns {void}
     */
    addInclude(node) {
      if (this.currentFunctionNode !== null) {
        this.currentFunctionNode.includes.push(node);
      }
    }
    /**
     * Returns the native shader operator name for a given generic name.
     * It is a similar type of method like {@link NodeBuilder#getMethod}.
     *
     * @param {ShaderNodeInternal} shaderNode - The shader node to build the function node with.
     * @return {FunctionNode} The build function node.
     */
    buildFunctionNode(shaderNode) {
      const fn = new FunctionNode();
      const previous = this.currentFunctionNode;
      this.currentFunctionNode = fn;
      fn.code = this.buildFunctionCode(shaderNode);
      this.currentFunctionNode = previous;
      return fn;
    }
    /**
     * Generates a code flow based on a TSL function: Fn().
     *
     * @param {ShaderNodeInternal} shaderNode - A function code will be generated based on the input.
     * @return {Object}
     */
    flowShaderNode(shaderNode) {
      const layout = shaderNode.layout;
      const inputs = {
        [Symbol.iterator]() {
          let index = 0;
          const values = Object.values(this);
          return {
            next: () => ({
              value: values[index],
              done: index++ >= values.length
            })
          };
        }
      };
      for (const input of layout.inputs) {
        inputs[input.name] = new ParameterNode(input.type, input.name);
      }
      shaderNode.layout = null;
      const callNode = shaderNode.call(inputs);
      const flowData = this.flowStagesNode(callNode, layout.type);
      shaderNode.layout = layout;
      return flowData;
    }
    /**
     * Runs the node flow through all the steps of creation, 'setup', 'analyze', 'generate'.
     *
     * @param {Node} node - The node to execute.
     * @param {?string} output - Expected output type. For example 'vec3'.
     * @return {Object}
     */
    flowStagesNode(node, output2 = null) {
      const previousFlow = this.flow;
      const previousVars = this.vars;
      const previousDeclarations = this.declarations;
      const previousCache = this.cache;
      const previousBuildStage = this.buildStage;
      const previousStack = this.stack;
      const flow = {
        code: ""
      };
      this.flow = flow;
      this.vars = {};
      this.declarations = {};
      this.cache = new NodeCache();
      this.stack = stack();
      for (const buildStage of defaultBuildStages) {
        this.setBuildStage(buildStage);
        flow.result = node.build(this, output2);
      }
      flow.vars = this.getVars(this.shaderStage);
      this.flow = previousFlow;
      this.vars = previousVars;
      this.declarations = previousDeclarations;
      this.cache = previousCache;
      this.stack = previousStack;
      this.setBuildStage(previousBuildStage);
      return flow;
    }
    /**
     * Returns the native shader operator name for a given generic name.
     * It is a similar type of method like {@link NodeBuilder#getMethod}.
     *
     * @abstract
     * @param {string} op - The operator name to resolve.
     * @return {?string} The resolved operator name.
     */
    getFunctionOperator() {
      return null;
    }
    /**
     * Builds the given shader node.
     *
     * @abstract
     * @param {ShaderNodeInternal} shaderNode - The shader node.
     * @return {string} The function code.
     */
    buildFunctionCode() {
      console.warn("Abstract function.");
    }
    /**
     * Generates a code flow based on a child Node.
     *
     * @param {Node} node - The node to execute.
     * @param {?string} output - Expected output type. For example 'vec3'.
     * @return {Object} The code flow.
     */
    flowChildNode(node, output2 = null) {
      const previousFlow = this.flow;
      const flow = {
        code: ""
      };
      this.flow = flow;
      flow.result = node.build(this, output2);
      this.flow = previousFlow;
      return flow;
    }
    /**
     * Executes a flow of code in a different stage.
     *
     * Some nodes like `varying()` have the ability to compute code in vertex-stage and
     * return the value in fragment-stage even if it is being executed in an input fragment.
     *
     * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.
     * @param {Node} node - The node to execute.
     * @param {?string} output - Expected output type. For example 'vec3'.
     * @param {?string} propertyName - The property name to assign the result.
     * @return {Object|Node|null} The code flow or node.build() result.
     */
    flowNodeFromShaderStage(shaderStage, node, output2 = null, propertyName2 = null) {
      const previousTab = this.tab;
      const previousCache = this.cache;
      const previousShaderStage = this.shaderStage;
      const previousContext = this.context;
      this.setShaderStage(shaderStage);
      const context2 = { ...this.context };
      delete context2.nodeBlock;
      this.cache = this.globalCache;
      this.tab = "	";
      this.context = context2;
      let result = null;
      if (this.buildStage === "generate") {
        const flowData = this.flowChildNode(node, output2);
        if (propertyName2 !== null) {
          flowData.code += `${this.tab + propertyName2} = ${flowData.result};
`;
        }
        this.flowCode[shaderStage] = this.flowCode[shaderStage] + flowData.code;
        result = flowData;
      } else {
        result = node.build(this);
      }
      this.setShaderStage(previousShaderStage);
      this.cache = previousCache;
      this.tab = previousTab;
      this.context = previousContext;
      return result;
    }
    /**
     * Returns an array holding all node attributes of this node builder.
     *
     * @return {Array<NodeAttribute>} The node attributes of this builder.
     */
    getAttributesArray() {
      return this.attributes.concat(this.bufferAttributes);
    }
    /**
     * Returns the attribute definitions as a shader string for the given shader stage.
     *
     * @abstract
     * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.
     * @return {string} The attribute code section.
     */
    getAttributes() {
      console.warn("Abstract function.");
    }
    /**
     * Returns the varying definitions as a shader string for the given shader stage.
     *
     * @abstract
     * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.
     * @return {string} The varying code section.
     */
    getVaryings() {
      console.warn("Abstract function.");
    }
    /**
     * Returns a single variable definition as a shader string for the given variable type and name.
     *
     * @param {string} type - The variable's type.
     * @param {string} name - The variable's name.
     * @param {?number} [count=null] - The array length.
     * @return {string} The shader string.
     */
    getVar(type, name2, count = null) {
      return `${count !== null ? this.generateArrayDeclaration(type, count) : this.getType(type)} ${name2}`;
    }
    /**
     * Returns the variable definitions as a shader string for the given shader stage.
     *
     * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.
     * @return {string} The variable code section.
     */
    getVars(shaderStage) {
      let snippet2 = "";
      const vars = this.vars[shaderStage];
      if (vars !== void 0) {
        for (const variable of vars) {
          snippet2 += `${this.getVar(variable.type, variable.name)}; `;
        }
      }
      return snippet2;
    }
    /**
     * Returns the uniform definitions as a shader string for the given shader stage.
     *
     * @abstract
     * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.
     * @return {string} The uniform code section.
     */
    getUniforms() {
      console.warn("Abstract function.");
    }
    /**
     * Returns the native code definitions as a shader string for the given shader stage.
     *
     * @param {('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage.
     * @return {string} The native code section.
     */
    getCodes(shaderStage) {
      const codes = this.codes[shaderStage];
      let code = "";
      if (codes !== void 0) {
        for (const nodeCode of codes) {
          code += nodeCode.code + "\n";
        }
      }
      return code;
    }
    /**
     * Returns the hash of this node builder.
     *
     * @return {string} The hash.
     */
    getHash() {
      return this.vertexShader + this.fragmentShader + this.computeShader;
    }
    /**
     * Sets the current shader stage.
     *
     * @param {?('vertex'|'fragment'|'compute'|'any')} shaderStage - The shader stage to set.
     */
    setShaderStage(shaderStage) {
      this.shaderStage = shaderStage;
    }
    /**
     * Returns the current shader stage.
     *
     * @return {?('vertex'|'fragment'|'compute'|'any')} The current shader stage.
     */
    getShaderStage() {
      return this.shaderStage;
    }
    /**
     * Sets the current build stage.
     *
     * @param {?('setup'|'analyze'|'generate')} buildStage - The build stage to set.
     */
    setBuildStage(buildStage) {
      this.buildStage = buildStage;
    }
    /**
     * Returns the current build stage.
     *
     * @return {?('setup'|'analyze'|'generate')} The current build stage.
     */
    getBuildStage() {
      return this.buildStage;
    }
    /**
     * Controls the code build of the shader stages.
     *
     * @abstract
     */
    buildCode() {
      console.warn("Abstract function.");
    }
    /**
     * Central build method which controls the build for the given object.
     *
     * @return {NodeBuilder} A reference to this node builder.
     */
    build() {
      const { object, material: material2, renderer } = this;
      if (material2 !== null) {
        let nodeMaterial = renderer.library.fromMaterial(material2);
        if (nodeMaterial === null) {
          console.error(`NodeMaterial: Material "${material2.type}" is not compatible.`);
          nodeMaterial = new NodeMaterial();
        }
        nodeMaterial.build(this);
      } else {
        this.addFlow("compute", object);
      }
      for (const buildStage of defaultBuildStages) {
        this.setBuildStage(buildStage);
        if (this.context.vertex && this.context.vertex.isNode) {
          this.flowNodeFromShaderStage("vertex", this.context.vertex);
        }
        for (const shaderStage of shaderStages) {
          this.setShaderStage(shaderStage);
          const flowNodes = this.flowNodes[shaderStage];
          for (const node of flowNodes) {
            if (buildStage === "generate") {
              this.flowNode(node);
            } else {
              node.build(this);
            }
          }
        }
      }
      this.setBuildStage(null);
      this.setShaderStage(null);
      this.buildCode();
      this.buildUpdateNodes();
      return this;
    }
    /**
     * Returns a uniform representation which is later used for UBO generation and rendering.
     *
     * @param {NodeUniform} uniformNode - The uniform node.
     * @param {string} type - The requested type.
     * @return {Uniform} The uniform.
     */
    getNodeUniform(uniformNode, type) {
      if (type === "float" || type === "int" || type === "uint") return new NumberNodeUniform(uniformNode);
      if (type === "vec2" || type === "ivec2" || type === "uvec2") return new Vector2NodeUniform(uniformNode);
      if (type === "vec3" || type === "ivec3" || type === "uvec3") return new Vector3NodeUniform(uniformNode);
      if (type === "vec4" || type === "ivec4" || type === "uvec4") return new Vector4NodeUniform(uniformNode);
      if (type === "color") return new ColorNodeUniform(uniformNode);
      if (type === "mat2") return new Matrix2NodeUniform(uniformNode);
      if (type === "mat3") return new Matrix3NodeUniform(uniformNode);
      if (type === "mat4") return new Matrix4NodeUniform(uniformNode);
      throw new Error(`Uniform "${type}" not declared.`);
    }
    /**
     * Formats the given shader snippet from a given type into another one. E.g.
     * this method might be used to convert a simple float string `"1.0"` into a
     * `vec3` representation: `"vec3<f32>( 1.0 )"`.
     *
     * @param {string} snippet - The shader snippet.
     * @param {string} fromType - The source type.
     * @param {string} toType - The target type.
     * @return {string} The updated shader string.
     */
    format(snippet2, fromType, toType) {
      fromType = this.getVectorType(fromType);
      toType = this.getVectorType(toType);
      if (fromType === toType || toType === null || this.isReference(toType)) {
        return snippet2;
      }
      const fromTypeLength = this.getTypeLength(fromType);
      const toTypeLength = this.getTypeLength(toType);
      if (fromTypeLength === 16 && toTypeLength === 9) {
        return `${this.getType(toType)}( ${snippet2}[ 0 ].xyz, ${snippet2}[ 1 ].xyz, ${snippet2}[ 2 ].xyz )`;
      }
      if (fromTypeLength === 9 && toTypeLength === 4) {
        return `${this.getType(toType)}( ${snippet2}[ 0 ].xy, ${snippet2}[ 1 ].xy )`;
      }
      if (fromTypeLength > 4) {
        return snippet2;
      }
      if (toTypeLength > 4 || toTypeLength === 0) {
        return snippet2;
      }
      if (fromTypeLength === toTypeLength) {
        return `${this.getType(toType)}( ${snippet2} )`;
      }
      if (fromTypeLength > toTypeLength) {
        snippet2 = toType === "bool" ? `all( ${snippet2} )` : `${snippet2}.${"xyz".slice(0, toTypeLength)}`;
        return this.format(snippet2, this.getTypeFromLength(toTypeLength, this.getComponentType(fromType)), toType);
      }
      if (toTypeLength === 4 && fromTypeLength > 1) {
        return `${this.getType(toType)}( ${this.format(snippet2, fromType, "vec3")}, 1.0 )`;
      }
      if (fromTypeLength === 2) {
        return `${this.getType(toType)}( ${this.format(snippet2, fromType, "vec2")}, 0.0 )`;
      }
      if (fromTypeLength === 1 && toTypeLength > 1 && fromType !== this.getComponentType(toType)) {
        snippet2 = `${this.getType(this.getComponentType(toType))}( ${snippet2} )`;
      }
      return `${this.getType(toType)}( ${snippet2} )`;
    }
    /**
     * Returns a signature with the engine's current revision.
     *
     * @return {string} The signature.
     */
    getSignature() {
      return `// Three.js r${REVISION} - Node System
`;
    }
    /**
     * Prevents the node builder from being used as an iterable in TSL.Fn(), avoiding potential runtime errors.
     */
    *[Symbol.iterator]() {
    }
    // Deprecated
    /**
     * @function
     * @deprecated since r168. Use `new NodeMaterial()` instead, with targeted node material name.
     *
     * @param {string} [type='NodeMaterial'] - The node material type.
     * @throws {Error}
     */
    createNodeMaterial(type = "NodeMaterial") {
      throw new Error(`THREE.NodeBuilder: createNodeMaterial() was deprecated. Use new ${type}() instead.`);
    }
  };
  var NodeFrame = class {
    /**
     * Constructs a new node fame.
     */
    constructor() {
      this.time = 0;
      this.deltaTime = 0;
      this.frameId = 0;
      this.renderId = 0;
      this.updateMap = /* @__PURE__ */ new WeakMap();
      this.updateBeforeMap = /* @__PURE__ */ new WeakMap();
      this.updateAfterMap = /* @__PURE__ */ new WeakMap();
      this.renderer = null;
      this.material = null;
      this.camera = null;
      this.object = null;
      this.scene = null;
    }
    /**
     * Returns a dictionary for a given node and update map which
     * is used to correctly call node update methods per frame or render.
     *
     * @private
     * @param {WeakMap<Node, Object>} referenceMap - The reference weak map.
     * @param {Node} nodeRef - The reference to the current node.
     * @return {Object<string,WeakMap>} The dictionary.
     */
    _getMaps(referenceMap, nodeRef) {
      let maps = referenceMap.get(nodeRef);
      if (maps === void 0) {
        maps = {
          renderMap: /* @__PURE__ */ new WeakMap(),
          frameMap: /* @__PURE__ */ new WeakMap()
        };
        referenceMap.set(nodeRef, maps);
      }
      return maps;
    }
    /**
     * This method executes the {@link Node#updateBefore} for the given node.
     * It makes sure {@link Node#updateBeforeType} is honored meaning the update
     * is only executed once per frame, render or object depending on the update
     * type.
     *
     * @param {Node} node - The node that should be updated.
     */
    updateBeforeNode(node) {
      const updateType = node.getUpdateBeforeType();
      const reference2 = node.updateReference(this);
      if (updateType === NodeUpdateType.FRAME) {
        const { frameMap } = this._getMaps(this.updateBeforeMap, reference2);
        if (frameMap.get(reference2) !== this.frameId) {
          if (node.updateBefore(this) !== false) {
            frameMap.set(reference2, this.frameId);
          }
        }
      } else if (updateType === NodeUpdateType.RENDER) {
        const { renderMap } = this._getMaps(this.updateBeforeMap, reference2);
        if (renderMap.get(reference2) !== this.renderId) {
          if (node.updateBefore(this) !== false) {
            renderMap.set(reference2, this.renderId);
          }
        }
      } else if (updateType === NodeUpdateType.OBJECT) {
        node.updateBefore(this);
      }
    }
    /**
     * This method executes the {@link Node#updateAfter} for the given node.
     * It makes sure {@link Node#updateAfterType} is honored meaning the update
     * is only executed once per frame, render or object depending on the update
     * type.
     *
     * @param {Node} node - The node that should be updated.
     */
    updateAfterNode(node) {
      const updateType = node.getUpdateAfterType();
      const reference2 = node.updateReference(this);
      if (updateType === NodeUpdateType.FRAME) {
        const { frameMap } = this._getMaps(this.updateAfterMap, reference2);
        if (frameMap.get(reference2) !== this.frameId) {
          if (node.updateAfter(this) !== false) {
            frameMap.set(reference2, this.frameId);
          }
        }
      } else if (updateType === NodeUpdateType.RENDER) {
        const { renderMap } = this._getMaps(this.updateAfterMap, reference2);
        if (renderMap.get(reference2) !== this.renderId) {
          if (node.updateAfter(this) !== false) {
            renderMap.set(reference2, this.renderId);
          }
        }
      } else if (updateType === NodeUpdateType.OBJECT) {
        node.updateAfter(this);
      }
    }
    /**
     * This method executes the {@link Node#update} for the given node.
     * It makes sure {@link Node#updateType} is honored meaning the update
     * is only executed once per frame, render or object depending on the update
     * type.
     *
     * @param {Node} node - The node that should be updated.
     */
    updateNode(node) {
      const updateType = node.getUpdateType();
      const reference2 = node.updateReference(this);
      if (updateType === NodeUpdateType.FRAME) {
        const { frameMap } = this._getMaps(this.updateMap, reference2);
        if (frameMap.get(reference2) !== this.frameId) {
          if (node.update(this) !== false) {
            frameMap.set(reference2, this.frameId);
          }
        }
      } else if (updateType === NodeUpdateType.RENDER) {
        const { renderMap } = this._getMaps(this.updateMap, reference2);
        if (renderMap.get(reference2) !== this.renderId) {
          if (node.update(this) !== false) {
            renderMap.set(reference2, this.renderId);
          }
        }
      } else if (updateType === NodeUpdateType.OBJECT) {
        node.update(this);
      }
    }
    /**
     * Updates the internal state of the node frame. This method is
     * called by the renderer in its internal animation loop.
     */
    update() {
      this.frameId++;
      if (this.lastTime === void 0) this.lastTime = performance.now();
      this.deltaTime = (performance.now() - this.lastTime) / 1e3;
      this.lastTime = performance.now();
      this.time += this.deltaTime;
    }
  };
  var NodeFunctionInput = class {
    /**
     * Constructs a new node function input.
     *
     * @param {string} type - The input type.
     * @param {string} name - The input name.
     * @param {?number} [count=null] - If the input is an Array, count will be the length.
     * @param {('in'|'out'|'inout')} [qualifier=''] - The parameter qualifier (only relevant for GLSL).
     * @param {boolean} [isConst=false] - Whether the input uses a const qualifier or not (only relevant for GLSL).
     */
    constructor(type, name2, count = null, qualifier = "", isConst = false) {
      this.type = type;
      this.name = name2;
      this.count = count;
      this.qualifier = qualifier;
      this.isConst = isConst;
    }
  };
  NodeFunctionInput.isNodeFunctionInput = true;
  var DirectionalLightNode = class extends AnalyticLightNode {
    static get type() {
      return "DirectionalLightNode";
    }
    /**
     * Constructs a new directional light node.
     *
     * @param {?DirectionalLight} [light=null] - The directional light source.
     */
    constructor(light = null) {
      super(light);
    }
    setupDirect() {
      const lightColor = this.colorNode;
      const lightDirection = lightTargetDirection(this.light);
      return { lightDirection, lightColor };
    }
  };
  var _matrix41 = /* @__PURE__ */ new Matrix4();
  var _matrix42 = /* @__PURE__ */ new Matrix4();
  var _ltcLib = null;
  var RectAreaLightNode = class extends AnalyticLightNode {
    static get type() {
      return "RectAreaLightNode";
    }
    /**
     * Constructs a new rect area light node.
     *
     * @param {?RectAreaLight} [light=null] - The rect area light source.
     */
    constructor(light = null) {
      super(light);
      this.halfHeight = uniform(new Vector3()).setGroup(renderGroup);
      this.halfWidth = uniform(new Vector3()).setGroup(renderGroup);
      this.updateType = NodeUpdateType.RENDER;
    }
    /**
     * Overwritten to updated rect area light specific uniforms.
     *
     * @param {NodeFrame} frame - A reference to the current node frame.
     */
    update(frame) {
      super.update(frame);
      const { light } = this;
      const viewMatrix = frame.camera.matrixWorldInverse;
      _matrix42.identity();
      _matrix41.copy(light.matrixWorld);
      _matrix41.premultiply(viewMatrix);
      _matrix42.extractRotation(_matrix41);
      this.halfWidth.value.set(light.width * 0.5, 0, 0);
      this.halfHeight.value.set(0, light.height * 0.5, 0);
      this.halfWidth.value.applyMatrix4(_matrix42);
      this.halfHeight.value.applyMatrix4(_matrix42);
    }
    setupDirectRectArea(builder) {
      let ltc_1, ltc_2;
      if (builder.isAvailable("float32Filterable")) {
        ltc_1 = texture(_ltcLib.LTC_FLOAT_1);
        ltc_2 = texture(_ltcLib.LTC_FLOAT_2);
      } else {
        ltc_1 = texture(_ltcLib.LTC_HALF_1);
        ltc_2 = texture(_ltcLib.LTC_HALF_2);
      }
      const { colorNode, light } = this;
      const lightPosition2 = lightViewPosition(light);
      return {
        lightColor: colorNode,
        lightPosition: lightPosition2,
        halfWidth: this.halfWidth,
        halfHeight: this.halfHeight,
        ltc_1,
        ltc_2
      };
    }
    /**
     * Used to configure the internal BRDF approximation texture data.
     *
     * @param {RectAreaLightTexturesLib} ltc - The BRDF approximation texture data.
     */
    static setLTC(ltc) {
      _ltcLib = ltc;
    }
  };
  var SpotLightNode = class extends AnalyticLightNode {
    static get type() {
      return "SpotLightNode";
    }
    /**
     * Constructs a new spot light node.
     *
     * @param {?SpotLight} [light=null] - The spot light source.
     */
    constructor(light = null) {
      super(light);
      this.coneCosNode = uniform(0).setGroup(renderGroup);
      this.penumbraCosNode = uniform(0).setGroup(renderGroup);
      this.cutoffDistanceNode = uniform(0).setGroup(renderGroup);
      this.decayExponentNode = uniform(0).setGroup(renderGroup);
      this.colorNode = uniform(this.color).setGroup(renderGroup);
    }
    /**
     * Overwritten to updated spot light specific uniforms.
     *
     * @param {NodeFrame} frame - A reference to the current node frame.
     */
    update(frame) {
      super.update(frame);
      const { light } = this;
      this.coneCosNode.value = Math.cos(light.angle);
      this.penumbraCosNode.value = Math.cos(light.angle * (1 - light.penumbra));
      this.cutoffDistanceNode.value = light.distance;
      this.decayExponentNode.value = light.decay;
    }
    /**
     * Computes the spot attenuation for the given angle.
     *
     * @param {NodeBuilder} builder - The node builder.
     * @param {Node<float>} angleCosine - The angle to compute the spot attenuation for.
     * @return {Node<float>} The spot attenuation.
     */
    getSpotAttenuation(builder, angleCosine) {
      const { coneCosNode, penumbraCosNode } = this;
      return smoothstep2(coneCosNode, penumbraCosNode, angleCosine);
    }
    getLightCoord(builder) {
      const properties = builder.getNodeProperties(this);
      let projectionUV = properties.projectionUV;
      if (projectionUV === void 0) {
        projectionUV = lightProjectionUV(this.light, builder.context.positionWorld);
        properties.projectionUV = projectionUV;
      }
      return projectionUV;
    }
    setupDirect(builder) {
      const { colorNode, cutoffDistanceNode, decayExponentNode, light } = this;
      const lightVector = this.getLightVector(builder);
      const lightDirection = lightVector.normalize();
      const angleCos = lightDirection.dot(lightTargetDirection(light));
      const spotAttenuation = this.getSpotAttenuation(builder, angleCos);
      const lightDistance = lightVector.length();
      const lightAttenuation = getDistanceAttenuation({
        lightDistance,
        cutoffDistance: cutoffDistanceNode,
        decayExponent: decayExponentNode
      });
      let lightColor = colorNode.mul(spotAttenuation).mul(lightAttenuation);
      let projected, lightCoord;
      if (light.colorNode) {
        lightCoord = this.getLightCoord(builder);
        projected = light.colorNode(lightCoord);
      } else if (light.map) {
        lightCoord = this.getLightCoord(builder);
        projected = texture(light.map, lightCoord.xy).onRenderUpdate(() => light.map);
      }
      if (projected) {
        const inSpotLightMap = lightCoord.mul(2).sub(1).abs().lessThan(1).all();
        lightColor = inSpotLightMap.select(lightColor.mul(projected), lightColor);
      }
      return { lightColor, lightDirection };
    }
  };
  var IESSpotLightNode = class extends SpotLightNode {
    static get type() {
      return "IESSpotLightNode";
    }
    /**
     * Overwrites the default implementation to compute an IES conform spot attenuation.
     *
     * @param {NodeBuilder} builder - The node builder.
     * @param {Node<float>} angleCosine - The angle to compute the spot attenuation for.
     * @return {Node<float>} The spot attenuation.
     */
    getSpotAttenuation(builder, angleCosine) {
      const iesMap = this.light.iesMap;
      let spotAttenuation = null;
      if (iesMap && iesMap.isTexture === true) {
        const angle = angleCosine.acos().mul(1 / Math.PI);
        spotAttenuation = texture(iesMap, vec2(angle, 0), 0).r;
      } else {
        spotAttenuation = super.getSpotAttenuation(angleCosine);
      }
      return spotAttenuation;
    }
  };
  var sdBox = /* @__PURE__ */ Fn(([p, b]) => {
    const d = p.abs().sub(b);
    return length(max$1(d, 0)).add(min$1(max$1(d.x, d.y), 0));
  });
  var ProjectorLightNode = class extends SpotLightNode {
    static get type() {
      return "ProjectorLightNode";
    }
    update(frame) {
      super.update(frame);
      const light = this.light;
      this.penumbraCosNode.value = Math.min(Math.cos(light.angle * (1 - light.penumbra)), 0.99999);
      if (light.aspect === null) {
        let aspect2 = 1;
        if (light.map !== null) {
          aspect2 = light.map.width / light.map.height;
        }
        light.shadow.aspect = aspect2;
      } else {
        light.shadow.aspect = light.aspect;
      }
    }
    /**
     * Overwrites the default implementation to compute projection attenuation.
     *
     * @param {NodeBuilder} builder - The node builder.
     * @return {Node<float>} The spot attenuation.
     */
    getSpotAttenuation(builder) {
      const penumbraCos = this.penumbraCosNode;
      const spotLightCoord = this.getLightCoord(builder);
      const coord = spotLightCoord.xyz.div(spotLightCoord.w);
      const boxDist = sdBox(coord.xy.sub(vec2(0.5)), vec2(0.5));
      const angleFactor = div(-1, sub(1, acos(penumbraCos)).sub(1));
      const attenuation = saturate(boxDist.mul(-2).mul(angleFactor));
      return attenuation;
    }
  };
  var AmbientLightNode = class extends AnalyticLightNode {
    static get type() {
      return "AmbientLightNode";
    }
    /**
     * Constructs a new ambient light node.
     *
     * @param {?AmbientLight} [light=null] - The ambient light source.
     */
    constructor(light = null) {
      super(light);
    }
    setup({ context: context2 }) {
      context2.irradiance.addAssign(this.colorNode);
    }
  };
  var HemisphereLightNode = class extends AnalyticLightNode {
    static get type() {
      return "HemisphereLightNode";
    }
    /**
     * Constructs a new hemisphere light node.
     *
     * @param {?HemisphereLight} [light=null] - The hemisphere light source.
     */
    constructor(light = null) {
      super(light);
      this.lightPositionNode = lightPosition(light);
      this.lightDirectionNode = this.lightPositionNode.normalize();
      this.groundColorNode = uniform(new Color()).setGroup(renderGroup);
    }
    /**
     * Overwritten to updated hemisphere light specific uniforms.
     *
     * @param {NodeFrame} frame - A reference to the current node frame.
     */
    update(frame) {
      const { light } = this;
      super.update(frame);
      this.lightPositionNode.object3d = light;
      this.groundColorNode.value.copy(light.groundColor).multiplyScalar(light.intensity);
    }
    setup(builder) {
      const { colorNode, groundColorNode, lightDirectionNode } = this;
      const dotNL = normalWorld.dot(lightDirectionNode);
      const hemiDiffuseWeight = dotNL.mul(0.5).add(0.5);
      const irradiance = mix(groundColorNode, colorNode, hemiDiffuseWeight);
      builder.context.irradiance.addAssign(irradiance);
    }
  };
  var LightProbeNode = class extends AnalyticLightNode {
    static get type() {
      return "LightProbeNode";
    }
    /**
     * Constructs a new light probe node.
     *
     * @param {?LightProbe} [light=null] - The light probe.
     */
    constructor(light = null) {
      super(light);
      const array2 = [];
      for (let i = 0; i < 9; i++) array2.push(new Vector3());
      this.lightProbe = uniformArray(array2);
    }
    /**
     * Overwritten to updated light probe specific uniforms.
     *
     * @param {NodeFrame} frame - A reference to the current node frame.
     */
    update(frame) {
      const { light } = this;
      super.update(frame);
      for (let i = 0; i < 9; i++) {
        this.lightProbe.array[i].copy(light.sh.coefficients[i]).multiplyScalar(light.intensity);
      }
    }
    setup(builder) {
      const irradiance = getShIrradianceAt(normalWorld, this.lightProbe);
      builder.context.irradiance.addAssign(irradiance);
    }
  };
  var NodeParser = class {
    /**
     * The method parses the given native code an returns a node function.
     *
     * @abstract
     * @param {string} source - The native shader code.
     * @return {NodeFunction} A node function.
     */
    parseFunction() {
      console.warn("Abstract function.");
    }
  };
  var NodeFunction = class {
    /**
     * Constructs a new node function.
     *
     * @param {string} type - The node type. This type is the return type of the node function.
     * @param {Array<NodeFunctionInput>} inputs - The function's inputs.
     * @param {string} [name=''] - The function's name.
     * @param {string} [precision=''] - The precision qualifier.
     */
    constructor(type, inputs, name2 = "", precision = "") {
      this.type = type;
      this.inputs = inputs;
      this.name = name2;
      this.precision = precision;
    }
    /**
     * This method returns the native code of the node function.
     *
     * @abstract
     * @param {string} name - The function's name.
     * @return {string} A shader code.
     */
    getCode() {
      console.warn("Abstract function.");
    }
  };
  NodeFunction.isNodeFunction = true;
  var declarationRegexp$1 = /^\s*(highp|mediump|lowp)?\s*([a-z_0-9]+)\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)/i;
  var propertiesRegexp$1 = /[a-z_0-9]+/ig;
  var pragmaMain = "#pragma main";
  var parse$1 = (source) => {
    source = source.trim();
    const pragmaMainIndex = source.indexOf(pragmaMain);
    const mainCode = pragmaMainIndex !== -1 ? source.slice(pragmaMainIndex + pragmaMain.length) : source;
    const declaration = mainCode.match(declarationRegexp$1);
    if (declaration !== null && declaration.length === 5) {
      const inputsCode = declaration[4];
      const propsMatches = [];
      let nameMatch = null;
      while ((nameMatch = propertiesRegexp$1.exec(inputsCode)) !== null) {
        propsMatches.push(nameMatch);
      }
      const inputs = [];
      let i = 0;
      while (i < propsMatches.length) {
        const isConst = propsMatches[i][0] === "const";
        if (isConst === true) {
          i++;
        }
        let qualifier = propsMatches[i][0];
        if (qualifier === "in" || qualifier === "out" || qualifier === "inout") {
          i++;
        } else {
          qualifier = "";
        }
        const type2 = propsMatches[i++][0];
        let count = Number.parseInt(propsMatches[i][0]);
        if (Number.isNaN(count) === false) i++;
        else count = null;
        const name3 = propsMatches[i++][0];
        inputs.push(new NodeFunctionInput(type2, name3, count, qualifier, isConst));
      }
      const blockCode = mainCode.substring(declaration[0].length);
      const name2 = declaration[3] !== void 0 ? declaration[3] : "";
      const type = declaration[2];
      const precision = declaration[1] !== void 0 ? declaration[1] : "";
      const headerCode = pragmaMainIndex !== -1 ? source.slice(0, pragmaMainIndex) : "";
      return {
        type,
        inputs,
        name: name2,
        precision,
        inputsCode,
        blockCode,
        headerCode
      };
    } else {
      throw new Error("FunctionNode: Function is not a GLSL code.");
    }
  };
  var GLSLNodeFunction = class extends NodeFunction {
    /**
     * Constructs a new GLSL node function.
     *
     * @param {string} source - The GLSL source.
     */
    constructor(source) {
      const { type, inputs, name: name2, precision, inputsCode, blockCode, headerCode } = parse$1(source);
      super(type, inputs, name2, precision);
      this.inputsCode = inputsCode;
      this.blockCode = blockCode;
      this.headerCode = headerCode;
    }
    /**
     * This method returns the GLSL code of the node function.
     *
     * @param {string} [name=this.name] - The function's name.
     * @return {string} The shader code.
     */
    getCode(name2 = this.name) {
      let code;
      const blockCode = this.blockCode;
      if (blockCode !== "") {
        const { type, inputsCode, headerCode, precision } = this;
        let declarationCode = `${type} ${name2} ( ${inputsCode.trim()} )`;
        if (precision !== "") {
          declarationCode = `${precision} ${declarationCode}`;
        }
        code = headerCode + declarationCode + blockCode;
      } else {
        code = "";
      }
      return code;
    }
  };
  var GLSLNodeParser = class extends NodeParser {
    /**
     * The method parses the given GLSL code an returns a node function.
     *
     * @param {string} source - The GLSL code.
     * @return {GLSLNodeFunction} A node function.
     */
    parseFunction(source) {
      return new GLSLNodeFunction(source);
    }
  };
  var _outputNodeMap = /* @__PURE__ */ new WeakMap();
  var _chainKeys$2 = [];
  var _cacheKeyValues = [];
  var Nodes = class extends DataMap {
    /**
     * Constructs a new nodes management component.
     *
     * @param {Renderer} renderer - The renderer.
     * @param {Backend} backend - The renderer's backend.
     */
    constructor(renderer, backend) {
      super();
      this.renderer = renderer;
      this.backend = backend;
      this.nodeFrame = new NodeFrame();
      this.nodeBuilderCache = /* @__PURE__ */ new Map();
      this.callHashCache = new ChainMap();
      this.groupsData = new ChainMap();
      this.cacheLib = {};
    }
    /**
     * Returns `true` if the given node uniforms group must be updated or not.
     *
     * @param {NodeUniformsGroup} nodeUniformsGroup - The node uniforms group.
     * @return {boolean} Whether the node uniforms group requires an update or not.
     */
    updateGroup(nodeUniformsGroup) {
      const groupNode = nodeUniformsGroup.groupNode;
      const name2 = groupNode.name;
      if (name2 === objectGroup.name) return true;
      if (name2 === renderGroup.name) {
        const uniformsGroupData = this.get(nodeUniformsGroup);
        const renderId = this.nodeFrame.renderId;
        if (uniformsGroupData.renderId !== renderId) {
          uniformsGroupData.renderId = renderId;
          return true;
        }
        return false;
      }
      if (name2 === frameGroup.name) {
        const uniformsGroupData = this.get(nodeUniformsGroup);
        const frameId = this.nodeFrame.frameId;
        if (uniformsGroupData.frameId !== frameId) {
          uniformsGroupData.frameId = frameId;
          return true;
        }
        return false;
      }
      _chainKeys$2[0] = groupNode;
      _chainKeys$2[1] = nodeUniformsGroup;
      let groupData = this.groupsData.get(_chainKeys$2);
      if (groupData === void 0) this.groupsData.set(_chainKeys$2, groupData = {});
      _chainKeys$2.length = 0;
      if (groupData.version !== groupNode.version) {
        groupData.version = groupNode.version;
        return true;
      }
      return false;
    }
    /**
     * Returns the cache key for the given render object.
     *
     * @param {RenderObject} renderObject - The render object.
     * @return {number} The cache key.
     */
    getForRenderCacheKey(renderObject) {
      return renderObject.initialCacheKey;
    }
    /**
     * Returns a node builder state for the given render object.
     *
     * @param {RenderObject} renderObject - The render object.
     * @return {NodeBuilderState} The node builder state.
     */
    getForRender(renderObject) {
      const renderObjectData = this.get(renderObject);
      let nodeBuilderState = renderObjectData.nodeBuilderState;
      if (nodeBuilderState === void 0) {
        const { nodeBuilderCache } = this;
        const cacheKey = this.getForRenderCacheKey(renderObject);
        nodeBuilderState = nodeBuilderCache.get(cacheKey);
        if (nodeBuilderState === void 0) {
          const nodeBuilder = this.backend.createNodeBuilder(renderObject.object, this.renderer);
          nodeBuilder.scene = renderObject.scene;
          nodeBuilder.material = renderObject.material;
          nodeBuilder.camera = renderObject.camera;
          nodeBuilder.context.material = renderObject.material;
          nodeBuilder.lightsNode = renderObject.lightsNode;
          nodeBuilder.environmentNode = this.getEnvironmentNode(renderObject.scene);
          nodeBuilder.fogNode = this.getFogNode(renderObject.scene);
          nodeBuilder.clippingContext = renderObject.clippingContext;
          if (this.renderer.getOutputRenderTarget() ? this.renderer.getOutputRenderTarget().multiview : false) {
            nodeBuilder.enableMultiview();
          }
          nodeBuilder.build();
          nodeBuilderState = this._createNodeBuilderState(nodeBuilder);
          nodeBuilderCache.set(cacheKey, nodeBuilderState);
        }
        nodeBuilderState.usedTimes++;
        renderObjectData.nodeBuilderState = nodeBuilderState;
      }
      return nodeBuilderState;
    }
    /**
     * Deletes the given object from the internal data map
     *
     * @param {any} object - The object to delete.
     * @return {?Object} The deleted dictionary.
     */
    delete(object) {
      if (object.isRenderObject) {
        const nodeBuilderState = this.get(object).nodeBuilderState;
        nodeBuilderState.usedTimes--;
        if (nodeBuilderState.usedTimes === 0) {
          this.nodeBuilderCache.delete(this.getForRenderCacheKey(object));
        }
      }
      return super.delete(object);
    }
    /**
     * Returns a node builder state for the given compute node.
     *
     * @param {Node} computeNode - The compute node.
     * @return {NodeBuilderState} The node builder state.
     */
    getForCompute(computeNode) {
      const computeData = this.get(computeNode);
      let nodeBuilderState = computeData.nodeBuilderState;
      if (nodeBuilderState === void 0) {
        const nodeBuilder = this.backend.createNodeBuilder(computeNode, this.renderer);
        nodeBuilder.build();
        nodeBuilderState = this._createNodeBuilderState(nodeBuilder);
        computeData.nodeBuilderState = nodeBuilderState;
      }
      return nodeBuilderState;
    }
    /**
     * Creates a node builder state for the given node builder.
     *
     * @private
     * @param {NodeBuilder} nodeBuilder - The node builder.
     * @return {NodeBuilderState} The node builder state.
     */
    _createNodeBuilderState(nodeBuilder) {
      return new NodeBuilderState(
        nodeBuilder.vertexShader,
        nodeBuilder.fragmentShader,
        nodeBuilder.computeShader,
        nodeBuilder.getAttributesArray(),
        nodeBuilder.getBindings(),
        nodeBuilder.updateNodes,
        nodeBuilder.updateBeforeNodes,
        nodeBuilder.updateAfterNodes,
        nodeBuilder.observer,
        nodeBuilder.transforms
      );
    }
    /**
     * Returns an environment node for the current configured
     * scene environment.
     *
     * @param {Scene} scene - The scene.
     * @return {Node} A node representing the current scene environment.
     */
    getEnvironmentNode(scene) {
      this.updateEnvironment(scene);
      let environmentNode = null;
      if (scene.environmentNode && scene.environmentNode.isNode) {
        environmentNode = scene.environmentNode;
      } else {
        const sceneData = this.get(scene);
        if (sceneData.environmentNode) {
          environmentNode = sceneData.environmentNode;
        }
      }
      return environmentNode;
    }
    /**
     * Returns a background node for the current configured
     * scene background.
     *
     * @param {Scene} scene - The scene.
     * @return {Node} A node representing the current scene background.
     */
    getBackgroundNode(scene) {
      this.updateBackground(scene);
      let backgroundNode = null;
      if (scene.backgroundNode && scene.backgroundNode.isNode) {
        backgroundNode = scene.backgroundNode;
      } else {
        const sceneData = this.get(scene);
        if (sceneData.backgroundNode) {
          backgroundNode = sceneData.backgroundNode;
        }
      }
      return backgroundNode;
    }
    /**
     * Returns a fog node for the current configured scene fog.
     *
     * @param {Scene} scene - The scene.
     * @return {Node} A node representing the current scene fog.
     */
    getFogNode(scene) {
      this.updateFog(scene);
      return scene.fogNode || this.get(scene).fogNode || null;
    }
    /**
     * Returns a cache key for the given scene and lights node.
     * This key is used by `RenderObject` as a part of the dynamic
     * cache key (a key that must be checked every time the render
     * objects is drawn).
     *
     * @param {Scene} scene - The scene.
     * @param {LightsNode} lightsNode - The lights node.
     * @return {number} The cache key.
     */
    getCacheKey(scene, lightsNode) {
      _chainKeys$2[0] = scene;
      _chainKeys$2[1] = lightsNode;
      const callId = this.renderer.info.calls;
      const cacheKeyData = this.callHashCache.get(_chainKeys$2) || {};
      if (cacheKeyData.callId !== callId) {
        const environmentNode = this.getEnvironmentNode(scene);
        const fogNode = this.getFogNode(scene);
        if (lightsNode) _cacheKeyValues.push(lightsNode.getCacheKey(true));
        if (environmentNode) _cacheKeyValues.push(environmentNode.getCacheKey());
        if (fogNode) _cacheKeyValues.push(fogNode.getCacheKey());
        _cacheKeyValues.push(this.renderer.getOutputRenderTarget() && this.renderer.getOutputRenderTarget().multiview ? 1 : 0);
        _cacheKeyValues.push(this.renderer.shadowMap.enabled ? 1 : 0);
        cacheKeyData.callId = callId;
        cacheKeyData.cacheKey = hashArray(_cacheKeyValues);
        this.callHashCache.set(_chainKeys$2, cacheKeyData);
        _cacheKeyValues.length = 0;
      }
      _chainKeys$2.length = 0;
      return cacheKeyData.cacheKey;
    }
    /**
     * A boolean that indicates whether tone mapping should be enabled
     * or not.
     *
     * @type {boolean}
     */
    get isToneMappingState() {
      return this.renderer.getRenderTarget() ? false : true;
    }
    /**
     * If a scene background is configured, this method makes sure to
     * represent the background with a corresponding node-based implementation.
     *
     * @param {Scene} scene - The scene.
     */
    updateBackground(scene) {
      const sceneData = this.get(scene);
      const background = scene.background;
      if (background) {
        const forceUpdate = scene.backgroundBlurriness === 0 && sceneData.backgroundBlurriness > 0 || scene.backgroundBlurriness > 0 && sceneData.backgroundBlurriness === 0;
        if (sceneData.background !== background || forceUpdate) {
          const backgroundNode = this.getCacheNode("background", background, () => {
            if (background.isCubeTexture === true || (background.mapping === EquirectangularReflectionMapping || background.mapping === EquirectangularRefractionMapping || background.mapping === CubeUVReflectionMapping)) {
              if (scene.backgroundBlurriness > 0 || background.mapping === CubeUVReflectionMapping) {
                return pmremTexture(background);
              } else {
                let envMap;
                if (background.isCubeTexture === true) {
                  envMap = cubeTexture(background);
                } else {
                  envMap = texture(background);
                }
                return cubeMapNode(envMap);
              }
            } else if (background.isTexture === true) {
              return texture(background, screenUV.flipY()).setUpdateMatrix(true);
            } else if (background.isColor !== true) {
              console.error("WebGPUNodes: Unsupported background configuration.", background);
            }
          }, forceUpdate);
          sceneData.backgroundNode = backgroundNode;
          sceneData.background = background;
          sceneData.backgroundBlurriness = scene.backgroundBlurriness;
        }
      } else if (sceneData.backgroundNode) {
        delete sceneData.backgroundNode;
        delete sceneData.background;
      }
    }
    /**
     * This method is part of the caching of nodes which are used to represents the
     * scene's background, fog or environment.
     *
     * @param {string} type - The type of object to cache.
     * @param {Object} object - The object.
     * @param {Function} callback - A callback that produces a node representation for the given object.
     * @param {boolean} [forceUpdate=false] - Whether an update should be enforced or not.
     * @return {Node} The node representation.
     */
    getCacheNode(type, object, callback, forceUpdate = false) {
      const nodeCache = this.cacheLib[type] || (this.cacheLib[type] = /* @__PURE__ */ new WeakMap());
      let node = nodeCache.get(object);
      if (node === void 0 || forceUpdate) {
        node = callback();
        nodeCache.set(object, node);
      }
      return node;
    }
    /**
     * If a scene fog is configured, this method makes sure to
     * represent the fog with a corresponding node-based implementation.
     *
     * @param {Scene} scene - The scene.
     */
    updateFog(scene) {
      const sceneData = this.get(scene);
      const sceneFog = scene.fog;
      if (sceneFog) {
        if (sceneData.fog !== sceneFog) {
          const fogNode = this.getCacheNode("fog", sceneFog, () => {
            if (sceneFog.isFogExp2) {
              const color2 = reference("color", "color", sceneFog).setGroup(renderGroup);
              const density = reference("density", "float", sceneFog).setGroup(renderGroup);
              return fog(color2, densityFogFactor(density));
            } else if (sceneFog.isFog) {
              const color2 = reference("color", "color", sceneFog).setGroup(renderGroup);
              const near = reference("near", "float", sceneFog).setGroup(renderGroup);
              const far = reference("far", "float", sceneFog).setGroup(renderGroup);
              return fog(color2, rangeFogFactor(near, far));
            } else {
              console.error("THREE.Renderer: Unsupported fog configuration.", sceneFog);
            }
          });
          sceneData.fogNode = fogNode;
          sceneData.fog = sceneFog;
        }
      } else {
        delete sceneData.fogNode;
        delete sceneData.fog;
      }
    }
    /**
     * If a scene environment is configured, this method makes sure to
     * represent the environment with a corresponding node-based implementation.
     *
     * @param {Scene} scene - The scene.
     */
    updateEnvironment(scene) {
      const sceneData = this.get(scene);
      const environment = scene.environment;
      if (environment) {
        if (sceneData.environment !== environment) {
          const environmentNode = this.getCacheNode("environment", environment, () => {
            if (environment.isCubeTexture === true) {
              return cubeTexture(environment);
            } else if (environment.isTexture === true) {
              return texture(environment);
            } else {
              console.error("Nodes: Unsupported environment configuration.", environment);
            }
          });
          sceneData.environmentNode = environmentNode;
          sceneData.environment = environment;
        }
      } else if (sceneData.environmentNode) {
        delete sceneData.environmentNode;
        delete sceneData.environment;
      }
    }
    getNodeFrame(renderer = this.renderer, scene = null, object = null, camera = null, material2 = null) {
      const nodeFrame = this.nodeFrame;
      nodeFrame.renderer = renderer;
      nodeFrame.scene = scene;
      nodeFrame.object = object;
      nodeFrame.camera = camera;
      nodeFrame.material = material2;
      return nodeFrame;
    }
    getNodeFrameForRender(renderObject) {
      return this.getNodeFrame(renderObject.renderer, renderObject.scene, renderObject.object, renderObject.camera, renderObject.material);
    }
    /**
     * Returns the current output cache key.
     *
     * @return {string} The output cache key.
     */
    getOutputCacheKey() {
      const renderer = this.renderer;
      return renderer.toneMapping + "," + renderer.currentColorSpace + "," + renderer.xr.isPresenting;
    }
    /**
     * Checks if the output configuration (tone mapping and color space) for
     * the given target has changed.
     *
     * @param {Texture} outputTarget - The output target.
     * @return {boolean} Whether the output configuration has changed or not.
     */
    hasOutputChange(outputTarget) {
      const cacheKey = _outputNodeMap.get(outputTarget);
      return cacheKey !== this.getOutputCacheKey();
    }
    /**
     * Returns a node that represents the output configuration (tone mapping and
     * color space) for the current target.
     *
     * @param {Texture} outputTarget - The output target.
     * @return {Node} The output node.
     */
    getOutputNode(outputTarget) {
      const renderer = this.renderer;
      const cacheKey = this.getOutputCacheKey();
      const output2 = outputTarget.isArrayTexture ? texture3D(outputTarget, vec3(screenUV, builtin("gl_ViewID_OVR"))).renderOutput(renderer.toneMapping, renderer.currentColorSpace) : texture(outputTarget, screenUV).renderOutput(renderer.toneMapping, renderer.currentColorSpace);
      _outputNodeMap.set(outputTarget, cacheKey);
      return output2;
    }
    /**
     * Triggers the call of `updateBefore()` methods
     * for all nodes of the given render object.
     *
     * @param {RenderObject} renderObject - The render object.
     */
    updateBefore(renderObject) {
      const nodeBuilder = renderObject.getNodeBuilderState();
      for (const node of nodeBuilder.updateBeforeNodes) {
        this.getNodeFrameForRender(renderObject).updateBeforeNode(node);
      }
    }
    /**
     * Triggers the call of `updateAfter()` methods
     * for all nodes of the given render object.
     *
     * @param {RenderObject} renderObject - The render object.
     */
    updateAfter(renderObject) {
      const nodeBuilder = renderObject.getNodeBuilderState();
      for (const node of nodeBuilder.updateAfterNodes) {
        this.getNodeFrameForRender(renderObject).updateAfterNode(node);
      }
    }
    /**
     * Triggers the call of `update()` methods
     * for all nodes of the given compute node.
     *
     * @param {Node} computeNode - The compute node.
     */
    updateForCompute(computeNode) {
      const nodeFrame = this.getNodeFrame();
      const nodeBuilder = this.getForCompute(computeNode);
      for (const node of nodeBuilder.updateNodes) {
        nodeFrame.updateNode(node);
      }
    }
    /**
     * Triggers the call of `update()` methods
     * for all nodes of the given compute node.
     *
     * @param {RenderObject} renderObject - The render object.
     */
    updateForRender(renderObject) {
      const nodeFrame = this.getNodeFrameForRender(renderObject);
      const nodeBuilder = renderObject.getNodeBuilderState();
      for (const node of nodeBuilder.updateNodes) {
        nodeFrame.updateNode(node);
      }
    }
    /**
     * Returns `true` if the given render object requires a refresh.
     *
     * @param {RenderObject} renderObject - The render object.
     * @return {boolean} Whether the given render object requires a refresh or not.
     */
    needsRefresh(renderObject) {
      const nodeFrame = this.getNodeFrameForRender(renderObject);
      const monitor = renderObject.getMonitor();
      return monitor.needsRefresh(renderObject, nodeFrame);
    }
    /**
     * Frees the internal resources.
     */
    dispose() {
      super.dispose();
      this.nodeFrame = new NodeFrame();
      this.nodeBuilderCache = /* @__PURE__ */ new Map();
      this.cacheLib = {};
    }
  };
  var _plane = /* @__PURE__ */ new Plane();
  var ClippingContext = class _ClippingContext {
    /**
     * Constructs a new clipping context.
     *
     * @param {?ClippingContext} [parentContext=null] - A reference to the parent clipping context.
     */
    constructor(parentContext = null) {
      this.version = 0;
      this.clipIntersection = null;
      this.cacheKey = "";
      this.shadowPass = false;
      this.viewNormalMatrix = new Matrix3();
      this.clippingGroupContexts = /* @__PURE__ */ new WeakMap();
      this.intersectionPlanes = [];
      this.unionPlanes = [];
      this.parentVersion = null;
      if (parentContext !== null) {
        this.viewNormalMatrix = parentContext.viewNormalMatrix;
        this.clippingGroupContexts = parentContext.clippingGroupContexts;
        this.shadowPass = parentContext.shadowPass;
        this.viewMatrix = parentContext.viewMatrix;
      }
    }
    /**
     * Projects the given source clipping planes and writes the result into the
     * destination array.
     *
     * @param {Array<Plane>} source - The source clipping planes.
     * @param {Array<Vector4>} destination - The destination.
     * @param {number} offset - The offset.
     */
    projectPlanes(source, destination, offset) {
      const l = source.length;
      for (let i = 0; i < l; i++) {
        _plane.copy(source[i]).applyMatrix4(this.viewMatrix, this.viewNormalMatrix);
        const v = destination[offset + i];
        const normal2 = _plane.normal;
        v.x = -normal2.x;
        v.y = -normal2.y;
        v.z = -normal2.z;
        v.w = _plane.constant;
      }
    }
    /**
     * Updates the root clipping context of a scene.
     *
     * @param {Scene} scene - The scene.
     * @param {Camera} camera - The camera that is used to render the scene.
     */
    updateGlobal(scene, camera) {
      this.shadowPass = scene.overrideMaterial !== null && scene.overrideMaterial.isShadowPassMaterial;
      this.viewMatrix = camera.matrixWorldInverse;
      this.viewNormalMatrix.getNormalMatrix(this.viewMatrix);
    }
    /**
     * Updates the clipping context.
     *
     * @param {ClippingContext} parentContext - The parent context.
     * @param {ClippingGroup} clippingGroup - The clipping group this context belongs to.
     */
    update(parentContext, clippingGroup) {
      let update = false;
      if (parentContext.version !== this.parentVersion) {
        this.intersectionPlanes = Array.from(parentContext.intersectionPlanes);
        this.unionPlanes = Array.from(parentContext.unionPlanes);
        this.parentVersion = parentContext.version;
      }
      if (this.clipIntersection !== clippingGroup.clipIntersection) {
        this.clipIntersection = clippingGroup.clipIntersection;
        if (this.clipIntersection) {
          this.unionPlanes.length = parentContext.unionPlanes.length;
        } else {
          this.intersectionPlanes.length = parentContext.intersectionPlanes.length;
        }
      }
      const srcClippingPlanes = clippingGroup.clippingPlanes;
      const l = srcClippingPlanes.length;
      let dstClippingPlanes;
      let offset;
      if (this.clipIntersection) {
        dstClippingPlanes = this.intersectionPlanes;
        offset = parentContext.intersectionPlanes.length;
      } else {
        dstClippingPlanes = this.unionPlanes;
        offset = parentContext.unionPlanes.length;
      }
      if (dstClippingPlanes.length !== offset + l) {
        dstClippingPlanes.length = offset + l;
        for (let i = 0; i < l; i++) {
          dstClippingPlanes[offset + i] = new Vector4();
        }
        update = true;
      }
      this.projectPlanes(srcClippingPlanes, dstClippingPlanes, offset);
      if (update) {
        this.version++;
        this.cacheKey = `${this.intersectionPlanes.length}:${this.unionPlanes.length}`;
      }
    }
    /**
     * Returns a clipping context for the given clipping group.
     *
     * @param {ClippingGroup} clippingGroup - The clipping group.
     * @return {ClippingContext} The clipping context.
     */
    getGroupContext(clippingGroup) {
      if (this.shadowPass && !clippingGroup.clipShadows) return this;
      let context2 = this.clippingGroupContexts.get(clippingGroup);
      if (context2 === void 0) {
        context2 = new _ClippingContext(this);
        this.clippingGroupContexts.set(clippingGroup, context2);
      }
      context2.update(this, clippingGroup);
      return context2;
    }
    /**
     * The count of union clipping planes.
     *
     * @type {number}
     * @readonly
     */
    get unionClippingCount() {
      return this.unionPlanes.length;
    }
  };
  var RenderBundle = class {
    /**
     * Constructs a new bundle group.
     *
     * @param {BundleGroup} bundleGroup - The bundle group.
     * @param {Camera} camera - The camera the bundle group is rendered with.
     */
    constructor(bundleGroup, camera) {
      this.bundleGroup = bundleGroup;
      this.camera = camera;
    }
  };
  var _chainKeys$1 = [];
  var RenderBundles = class {
    /**
     * Constructs a new render bundle management component.
     */
    constructor() {
      this.bundles = new ChainMap();
    }
    /**
     * Returns a render bundle for the given bundle group and camera.
     *
     * @param {BundleGroup} bundleGroup - The bundle group.
     * @param {Camera} camera - The camera the bundle group is rendered with.
     * @return {RenderBundle} The render bundle.
     */
    get(bundleGroup, camera) {
      const bundles = this.bundles;
      _chainKeys$1[0] = bundleGroup;
      _chainKeys$1[1] = camera;
      let bundle = bundles.get(_chainKeys$1);
      if (bundle === void 0) {
        bundle = new RenderBundle(bundleGroup, camera);
        bundles.set(_chainKeys$1, bundle);
      }
      _chainKeys$1.length = 0;
      return bundle;
    }
    /**
     * Frees all internal resources.
     */
    dispose() {
      this.bundles = new ChainMap();
    }
  };
  var NodeLibrary = class {
    /**
     * Constructs a new node library.
     */
    constructor() {
      this.lightNodes = /* @__PURE__ */ new WeakMap();
      this.materialNodes = /* @__PURE__ */ new Map();
      this.toneMappingNodes = /* @__PURE__ */ new Map();
    }
    /**
     * Returns a matching node material instance for the given material object.
     *
     * This method also assigns/copies the properties of the given material object
     * to the node material. This is done to make sure the current material
     * configuration carries over to the node version.
     *
     * @param {Material} material - A material.
     * @return {NodeMaterial} The corresponding node material.
     */
    fromMaterial(material2) {
      if (material2.isNodeMaterial) return material2;
      let nodeMaterial = null;
      const nodeMaterialClass = this.getMaterialNodeClass(material2.type);
      if (nodeMaterialClass !== null) {
        nodeMaterial = new nodeMaterialClass();
        for (const key in material2) {
          nodeMaterial[key] = material2[key];
        }
      }
      return nodeMaterial;
    }
    /**
     * Adds a tone mapping node function for a tone mapping technique (constant).
     *
     * @param {Function} toneMappingNode - The tone mapping node function.
     * @param {number} toneMapping - The tone mapping.
     */
    addToneMapping(toneMappingNode, toneMapping2) {
      this.addType(toneMappingNode, toneMapping2, this.toneMappingNodes);
    }
    /**
     * Returns a tone mapping node function for a tone mapping technique (constant).
     *
     * @param {number} toneMapping - The tone mapping.
     * @return {?Function} The tone mapping node function. Returns `null` if no node function is found.
     */
    getToneMappingFunction(toneMapping2) {
      return this.toneMappingNodes.get(toneMapping2) || null;
    }
    /**
     * Returns a node material class definition for a material type.
     *
     * @param {string} materialType - The material type.
     * @return {?NodeMaterial.constructor} The node material class definition. Returns `null` if no node material is found.
     */
    getMaterialNodeClass(materialType) {
      return this.materialNodes.get(materialType) || null;
    }
    /**
     * Adds a node material class definition for a given material type.
     *
     * @param {NodeMaterial.constructor} materialNodeClass - The node material class definition.
     * @param {string} materialClassType - The material type.
     */
    addMaterial(materialNodeClass, materialClassType) {
      this.addType(materialNodeClass, materialClassType, this.materialNodes);
    }
    /**
     * Returns a light node class definition for a light class definition.
     *
     * @param {Light.constructor} light - The light class definition.
     * @return {?AnalyticLightNode.constructor} The light node class definition. Returns `null` if no light node is found.
     */
    getLightNodeClass(light) {
      return this.lightNodes.get(light) || null;
    }
    /**
     * Adds a light node class definition for a given light class definition.
     *
     * @param {AnalyticLightNode.constructor} lightNodeClass - The light node class definition.
     * @param {Light.constructor} lightClass - The light class definition.
     */
    addLight(lightNodeClass, lightClass) {
      this.addClass(lightNodeClass, lightClass, this.lightNodes);
    }
    /**
     * Adds a node class definition for the given type to the provided type library.
     *
     * @param {any} nodeClass - The node class definition.
     * @param {number|string} type - The object type.
     * @param {Map} library - The type library.
     */
    addType(nodeClass, type, library) {
      if (library.has(type)) {
        console.warn(`Redefinition of node ${type}`);
        return;
      }
      if (typeof nodeClass !== "function") throw new Error(`Node class ${nodeClass.name} is not a class.`);
      if (typeof type === "function" || typeof type === "object") throw new Error(`Base class ${type} is not a class.`);
      library.set(type, nodeClass);
    }
    /**
     * Adds a node class definition for the given class definition to the provided type library.
     *
     * @param {any} nodeClass - The node class definition.
     * @param {any} baseClass - The class definition.
     * @param {WeakMap} library - The type library.
     */
    addClass(nodeClass, baseClass, library) {
      if (library.has(baseClass)) {
        console.warn(`Redefinition of node ${baseClass.name}`);
        return;
      }
      if (typeof nodeClass !== "function") throw new Error(`Node class ${nodeClass.name} is not a class.`);
      if (typeof baseClass !== "function") throw new Error(`Base class ${baseClass.name} is not a class.`);
      library.set(baseClass, nodeClass);
    }
  };
  var _defaultLights = /* @__PURE__ */ new LightsNode();
  var _chainKeys = [];
  var Lighting = class extends ChainMap {
    /**
     * Constructs a lighting management component.
     */
    constructor() {
      super();
    }
    /**
     * Creates a new lights node for the given array of lights.
     *
     * @param {Array<Light>} lights - The render object.
     * @return {LightsNode} The lights node.
     */
    createNode(lights = []) {
      return new LightsNode().setLights(lights);
    }
    /**
     * Returns a lights node for the given scene and camera.
     *
     * @param {Scene} scene - The scene.
     * @param {Camera} camera - The camera.
     * @return {LightsNode} The lights node.
     */
    getNode(scene, camera) {
      if (scene.isQuadMesh) return _defaultLights;
      _chainKeys[0] = scene;
      _chainKeys[1] = camera;
      let node = this.get(_chainKeys);
      if (node === void 0) {
        node = this.createNode();
        this.set(_chainKeys, node);
      }
      _chainKeys.length = 0;
      return node;
    }
  };
  var XRRenderTarget = class extends RenderTarget {
    /**
     * Constructs a new XR render target.
     *
     * @param {number} [width=1] - The width of the render target.
     * @param {number} [height=1] - The height of the render target.
     * @param {Object} [options={}] - The configuration options.
     */
    constructor(width = 1, height = 1, options = {}) {
      super(width, height, options);
      this.isXRRenderTarget = true;
      this.hasExternalTextures = false;
      this.autoAllocateDepthBuffer = true;
    }
    copy(source) {
      super.copy(source);
      this.hasExternalTextures = source.hasExternalTextures;
      this.autoAllocateDepthBuffer = source.autoAllocateDepthBuffer;
      return this;
    }
  };
  var _cameraLPos = /* @__PURE__ */ new Vector3();
  var _cameraRPos = /* @__PURE__ */ new Vector3();
  var XRManager = class extends EventDispatcher {
    /**
     * Constructs a new XR manager.
     *
     * @param {Renderer} renderer - The renderer.
     * @param {boolean} [multiview=false] - Enables multiview if the device supports it.
     */
    constructor(renderer, multiview = false) {
      super();
      this.enabled = false;
      this.isPresenting = false;
      this.cameraAutoUpdate = true;
      this._renderer = renderer;
      this._cameraL = new PerspectiveCamera();
      this._cameraL.viewport = new Vector4();
      this._cameraR = new PerspectiveCamera();
      this._cameraR.viewport = new Vector4();
      this._cameras = [this._cameraL, this._cameraR];
      this._cameraXR = new ArrayCamera();
      this._currentDepthNear = null;
      this._currentDepthFar = null;
      this._controllers = [];
      this._controllerInputSources = [];
      this._xrRenderTarget = null;
      this._layers = [];
      this._supportsLayers = false;
      this._frameBufferTargets = null;
      this._createXRLayer = createXRLayer.bind(this);
      this._gl = null;
      this._currentAnimationContext = null;
      this._currentAnimationLoop = null;
      this._currentPixelRatio = null;
      this._currentSize = new Vector2();
      this._onSessionEvent = onSessionEvent.bind(this);
      this._onSessionEnd = onSessionEnd.bind(this);
      this._onInputSourcesChange = onInputSourcesChange.bind(this);
      this._onAnimationFrame = onAnimationFrame.bind(this);
      this._referenceSpace = null;
      this._referenceSpaceType = "local-floor";
      this._customReferenceSpace = null;
      this._framebufferScaleFactor = 1;
      this._foveation = 1;
      this._session = null;
      this._glBaseLayer = null;
      this._glBinding = null;
      this._glProjLayer = null;
      this._xrFrame = null;
      this._useLayers = typeof XRWebGLBinding !== "undefined" && "createProjectionLayer" in XRWebGLBinding.prototype;
      this._useMultiviewIfPossible = multiview;
      this._useMultiview = false;
    }
    /**
     * Returns an instance of `THREE.Group` that represents the transformation
     * of a XR controller in target ray space. The requested controller is defined
     * by the given index.
     *
     * @param {number} index - The index of the XR controller.
     * @return {Group} A group that represents the controller's transformation.
     */
    getController(index) {
      const controller = this._getController(index);
      return controller.getTargetRaySpace();
    }
    /**
     * Returns an instance of `THREE.Group` that represents the transformation
     * of a XR controller in grip space. The requested controller is defined
     * by the given index.
     *
     * @param {number} index - The index of the XR controller.
     * @return {Group} A group that represents the controller's transformation.
     */
    getControllerGrip(index) {
      const controller = this._getController(index);
      return controller.getGripSpace();
    }
    /**
     * Returns an instance of `THREE.Group` that represents the transformation
     * of a XR controller in hand space. The requested controller is defined
     * by the given index.
     *
     * @param {number} index - The index of the XR controller.
     * @return {Group} A group that represents the controller's transformation.
     */
    getHand(index) {
      const controller = this._getController(index);
      return controller.getHandSpace();
    }
    /**
     * Returns the foveation value.
     *
     * @return {number|undefined} The foveation value. Returns `undefined` if no base or projection layer is defined.
     */
    getFoveation() {
      if (this._glProjLayer === null && this._glBaseLayer === null) {
        return void 0;
      }
      return this._foveation;
    }
    /**
     * Sets the foveation value.
     *
     * @param {number} foveation - A number in the range `[0,1]` where `0` means no foveation (full resolution)
     * and `1` means maximum foveation (the edges render at lower resolution).
     */
    setFoveation(foveation) {
      this._foveation = foveation;
      if (this._glProjLayer !== null) {
        this._glProjLayer.fixedFoveation = foveation;
      }
      if (this._glBaseLayer !== null && this._glBaseLayer.fixedFoveation !== void 0) {
        this._glBaseLayer.fixedFoveation = foveation;
      }
    }
    /**
     * Returns the framebuffer scale factor.
     *
     * @return {number} The framebuffer scale factor.
     */
    getFramebufferScaleFactor() {
      return this._framebufferScaleFactor;
    }
    /**
     * Sets the framebuffer scale factor.
     *
     * This method can not be used during a XR session.
     *
     * @param {number} factor - The framebuffer scale factor.
     */
    setFramebufferScaleFactor(factor) {
      this._framebufferScaleFactor = factor;
      if (this.isPresenting === true) {
        console.warn("THREE.XRManager: Cannot change framebuffer scale while presenting.");
      }
    }
    /**
     * Returns the reference space type.
     *
     * @return {XRReferenceSpaceType} The reference space type.
     */
    getReferenceSpaceType() {
      return this._referenceSpaceType;
    }
    /**
     * Sets the reference space type.
     *
     * This method can not be used during a XR session.
     *
     * @param {XRReferenceSpaceType} type - The reference space type.
     */
    setReferenceSpaceType(type) {
      this._referenceSpaceType = type;
      if (this.isPresenting === true) {
        console.warn("THREE.XRManager: Cannot change reference space type while presenting.");
      }
    }
    /**
     * Returns the XR reference space.
     *
     * @return {XRReferenceSpace} The XR reference space.
     */
    getReferenceSpace() {
      return this._customReferenceSpace || this._referenceSpace;
    }
    /**
     * Sets a custom XR reference space.
     *
     * @param {XRReferenceSpace} space - The XR reference space.
     */
    setReferenceSpace(space2) {
      this._customReferenceSpace = space2;
    }
    /**
     * Returns the XR camera.
     *
     * @return {ArrayCamera} The XR camera.
     */
    getCamera() {
      return this._cameraXR;
    }
    /**
     * Returns the environment blend mode from the current XR session.
     *
     * @return {'opaque'|'additive'|'alpha-blend'|undefined} The environment blend mode. Returns `undefined` when used outside of a XR session.
     */
    getEnvironmentBlendMode() {
      if (this._session !== null) {
        return this._session.environmentBlendMode;
      }
    }
    /**
     * Returns the current XR frame.
     *
     * @return {?XRFrame} The XR frame. Returns `null` when used outside a XR session.
     */
    getFrame() {
      return this._xrFrame;
    }
    /**
     * Returns `true` if the engine renders to a multiview target.
     *
     * @return {boolean} Whether the engine renders to a multiview render target or not.
     */
    useMultiview() {
      return this._useMultiview;
    }
    /**
     * This method can be used in XR applications to create a quadratic layer that presents a separate
     * rendered scene.
     *
     * @param {number} width - The width of the layer plane in world units.
     * @param {number} height - The height of the layer plane in world units.
     * @param {Vector3} translation - The position/translation of the layer plane in world units.
     * @param {Quaternion} quaternion - The orientation of the layer plane expressed as a quaternion.
     * @param {number} pixelwidth - The width of the layer's render target in pixels.
     * @param {number} pixelheight - The height of the layer's render target in pixels.
     * @param {Function} rendercall - A callback function that renders the layer. Similar to code in
     * the default animation loop, this method can be used to update/transform 3D object in the layer's scene.
     * @param {Object} [attributes={}] - Allows to configure the layer's render target.
     * @return {Mesh} A mesh representing the quadratic XR layer. This mesh should be added to the XR scene.
     */
    createQuadLayer(width, height, translation, quaternion, pixelwidth, pixelheight, rendercall, attributes = {}) {
      const geometry = new PlaneGeometry(width, height);
      const renderTarget = new XRRenderTarget(
        pixelwidth,
        pixelheight,
        {
          format: RGBAFormat,
          type: UnsignedByteType,
          depthTexture: new DepthTexture(
            pixelwidth,
            pixelheight,
            attributes.stencil ? UnsignedInt248Type : UnsignedIntType,
            void 0,
            void 0,
            void 0,
            void 0,
            void 0,
            void 0,
            attributes.stencil ? DepthStencilFormat : DepthFormat
          ),
          stencilBuffer: attributes.stencil,
          resolveDepthBuffer: false,
          resolveStencilBuffer: false
        }
      );
      renderTarget.autoAllocateDepthBuffer = true;
      const material2 = new MeshBasicMaterial({ color: 16777215, side: FrontSide });
      material2.map = renderTarget.texture;
      material2.map.offset.y = 1;
      material2.map.repeat.y = -1;
      const plane = new Mesh(geometry, material2);
      plane.position.copy(translation);
      plane.quaternion.copy(quaternion);
      const layer2 = {
        type: "quad",
        width,
        height,
        translation,
        quaternion,
        pixelwidth,
        pixelheight,
        plane,
        material: material2,
        rendercall,
        renderTarget
      };
      this._layers.push(layer2);
      if (this._session !== null) {
        layer2.plane.material = new MeshBasicMaterial({ color: 16777215, side: FrontSide });
        layer2.plane.material.blending = CustomBlending;
        layer2.plane.material.blendEquation = AddEquation;
        layer2.plane.material.blendSrc = ZeroFactor;
        layer2.plane.material.blendDst = ZeroFactor;
        layer2.xrlayer = this._createXRLayer(layer2);
        const xrlayers = this._session.renderState.layers;
        xrlayers.unshift(layer2.xrlayer);
        this._session.updateRenderState({ layers: xrlayers });
      } else {
        renderTarget.isXRRenderTarget = false;
      }
      return plane;
    }
    /**
     * This method can be used in XR applications to create a cylindrical layer that presents a separate
     * rendered scene.
     *
     * @param {number} radius - The radius of the cylinder in world units.
     * @param {number} centralAngle - The central angle of the cylinder in radians.
     * @param {number} aspectratio - The aspect ratio.
     * @param {Vector3} translation - The position/translation of the layer plane in world units.
     * @param {Quaternion} quaternion - The orientation of the layer plane expressed as a quaternion.
     * @param {number} pixelwidth - The width of the layer's render target in pixels.
     * @param {number} pixelheight - The height of the layer's render target in pixels.
     * @param {Function} rendercall - A callback function that renders the layer. Similar to code in
     * the default animation loop, this method can be used to update/transform 3D object in the layer's scene.
     * @param {Object} [attributes={}] - Allows to configure the layer's render target.
     * @return {Mesh} A mesh representing the cylindrical XR layer. This mesh should be added to the XR scene.
     */
    createCylinderLayer(radius, centralAngle, aspectratio, translation, quaternion, pixelwidth, pixelheight, rendercall, attributes = {}) {
      const geometry = new CylinderGeometry(radius, radius, radius * centralAngle / aspectratio, 64, 64, true, Math.PI - centralAngle / 2, centralAngle);
      const renderTarget = new XRRenderTarget(
        pixelwidth,
        pixelheight,
        {
          format: RGBAFormat,
          type: UnsignedByteType,
          depthTexture: new DepthTexture(
            pixelwidth,
            pixelheight,
            attributes.stencil ? UnsignedInt248Type : UnsignedIntType,
            void 0,
            void 0,
            void 0,
            void 0,
            void 0,
            void 0,
            attributes.stencil ? DepthStencilFormat : DepthFormat
          ),
          stencilBuffer: attributes.stencil,
          resolveDepthBuffer: false,
          resolveStencilBuffer: false
        }
      );
      renderTarget.autoAllocateDepthBuffer = true;
      const material2 = new MeshBasicMaterial({ color: 16777215, side: BackSide });
      material2.map = renderTarget.texture;
      material2.map.offset.y = 1;
      material2.map.repeat.y = -1;
      const plane = new Mesh(geometry, material2);
      plane.position.copy(translation);
      plane.quaternion.copy(quaternion);
      const layer2 = {
        type: "cylinder",
        radius,
        centralAngle,
        aspectratio,
        translation,
        quaternion,
        pixelwidth,
        pixelheight,
        plane,
        material: material2,
        rendercall,
        renderTarget
      };
      this._layers.push(layer2);
      if (this._session !== null) {
        layer2.plane.material = new MeshBasicMaterial({ color: 16777215, side: BackSide });
        layer2.plane.material.blending = CustomBlending;
        layer2.plane.material.blendEquation = AddEquation;
        layer2.plane.material.blendSrc = ZeroFactor;
        layer2.plane.material.blendDst = ZeroFactor;
        layer2.xrlayer = this._createXRLayer(layer2);
        const xrlayers = this._session.renderState.layers;
        xrlayers.unshift(layer2.xrlayer);
        this._session.updateRenderState({ layers: xrlayers });
      } else {
        renderTarget.isXRRenderTarget = false;
      }
      return plane;
    }
    /**
     * Renders the XR layers that have been previously added to the scene.
     *
     * This method is usually called in your animation loop before rendering
     * the actual scene via `renderer.render( scene, camera );`.
     */
    renderLayers() {
      const translationObject = new Vector3();
      const quaternionObject = new Quaternion();
      const renderer = this._renderer;
      const wasPresenting = this.isPresenting;
      const rendererOutputTarget = renderer.getOutputRenderTarget();
      const rendererFramebufferTarget = renderer._frameBufferTarget;
      this.isPresenting = false;
      const rendererSize = new Vector2();
      renderer.getSize(rendererSize);
      const rendererQuad = renderer._quad;
      for (const layer2 of this._layers) {
        layer2.renderTarget.isXRRenderTarget = this._session !== null;
        layer2.renderTarget.hasExternalTextures = layer2.renderTarget.isXRRenderTarget;
        if (layer2.renderTarget.isXRRenderTarget && this._supportsLayers) {
          layer2.xrlayer.transform = new XRRigidTransform(layer2.plane.getWorldPosition(translationObject), layer2.plane.getWorldQuaternion(quaternionObject));
          const glSubImage = this._glBinding.getSubImage(layer2.xrlayer, this._xrFrame);
          renderer.backend.setXRRenderTargetTextures(
            layer2.renderTarget,
            glSubImage.colorTexture,
            void 0
          );
          renderer._setXRLayerSize(layer2.renderTarget.width, layer2.renderTarget.height);
          renderer.setOutputRenderTarget(layer2.renderTarget);
          renderer.setRenderTarget(null);
          renderer._frameBufferTarget = null;
          this._frameBufferTargets || (this._frameBufferTargets = /* @__PURE__ */ new WeakMap());
          const { frameBufferTarget, quad } = this._frameBufferTargets.get(layer2.renderTarget) || { frameBufferTarget: null, quad: null };
          if (!frameBufferTarget) {
            renderer._quad = new QuadMesh(new NodeMaterial());
            this._frameBufferTargets.set(layer2.renderTarget, { frameBufferTarget: renderer._getFrameBufferTarget(), quad: renderer._quad });
          } else {
            renderer._frameBufferTarget = frameBufferTarget;
            renderer._quad = quad;
          }
          layer2.rendercall();
          renderer._frameBufferTarget = null;
        } else {
          renderer.setRenderTarget(layer2.renderTarget);
          layer2.rendercall();
        }
      }
      renderer.setRenderTarget(null);
      renderer.setOutputRenderTarget(rendererOutputTarget);
      renderer._frameBufferTarget = rendererFramebufferTarget;
      renderer._setXRLayerSize(rendererSize.x, rendererSize.y);
      renderer._quad = rendererQuad;
      this.isPresenting = wasPresenting;
    }
    /**
     * Returns the current XR session.
     *
     * @return {?XRSession} The XR session. Returns `null` when used outside a XR session.
     */
    getSession() {
      return this._session;
    }
    /**
     * After a XR session has been requested usually with one of the `*Button` modules, it
     * is injected into the renderer with this method. This method triggers the start of
     * the actual XR rendering.
     *
     * @async
     * @param {XRSession} session - The XR session to set.
     * @return {Promise} A Promise that resolves when the session has been set.
     */
    async setSession(session) {
      const renderer = this._renderer;
      const backend = renderer.backend;
      this._gl = renderer.getContext();
      const gl = this._gl;
      const attributes = gl.getContextAttributes();
      this._session = session;
      if (session !== null) {
        if (backend.isWebGPUBackend === true) throw new Error('THREE.XRManager: XR is currently not supported with a WebGPU backend. Use WebGL by passing "{ forceWebGL: true }" to the constructor of the renderer.');
        session.addEventListener("select", this._onSessionEvent);
        session.addEventListener("selectstart", this._onSessionEvent);
        session.addEventListener("selectend", this._onSessionEvent);
        session.addEventListener("squeeze", this._onSessionEvent);
        session.addEventListener("squeezestart", this._onSessionEvent);
        session.addEventListener("squeezeend", this._onSessionEvent);
        session.addEventListener("end", this._onSessionEnd);
        session.addEventListener("inputsourceschange", this._onInputSourcesChange);
        await backend.makeXRCompatible();
        this._currentPixelRatio = renderer.getPixelRatio();
        renderer.getSize(this._currentSize);
        this._currentAnimationContext = renderer._animation.getContext();
        this._currentAnimationLoop = renderer._animation.getAnimationLoop();
        renderer._animation.stop();
        if (this._useLayers === true) {
          let depthFormat = null;
          let depthType = null;
          let glDepthFormat = null;
          if (renderer.depth) {
            glDepthFormat = renderer.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
            depthFormat = renderer.stencil ? DepthStencilFormat : DepthFormat;
            depthType = renderer.stencil ? UnsignedInt248Type : UnsignedIntType;
          }
          const projectionlayerInit = {
            colorFormat: gl.RGBA8,
            depthFormat: glDepthFormat,
            scaleFactor: this._framebufferScaleFactor,
            clearOnAccess: false
          };
          if (this._useMultiviewIfPossible && renderer.hasFeature("OVR_multiview2")) {
            projectionlayerInit.textureType = "texture-array";
            this._useMultiview = true;
          }
          const glBinding = new XRWebGLBinding(session, gl);
          const glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);
          const layersArray = [glProjLayer];
          this._glBinding = glBinding;
          this._glProjLayer = glProjLayer;
          renderer.setPixelRatio(1);
          renderer._setXRLayerSize(glProjLayer.textureWidth, glProjLayer.textureHeight);
          const depth2 = this._useMultiview ? 2 : 1;
          const depthTexture = new DepthTexture(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, void 0, void 0, void 0, void 0, void 0, void 0, depthFormat, depth2);
          this._xrRenderTarget = new XRRenderTarget(
            glProjLayer.textureWidth,
            glProjLayer.textureHeight,
            {
              format: RGBAFormat,
              type: UnsignedByteType,
              colorSpace: renderer.outputColorSpace,
              depthTexture,
              stencilBuffer: renderer.stencil,
              samples: attributes.antialias ? 4 : 0,
              resolveDepthBuffer: glProjLayer.ignoreDepthValues === false,
              resolveStencilBuffer: glProjLayer.ignoreDepthValues === false,
              depth: this._useMultiview ? 2 : 1,
              multiview: this._useMultiview
            }
          );
          this._xrRenderTarget.hasExternalTextures = true;
          this._xrRenderTarget.depth = this._useMultiview ? 2 : 1;
          this._supportsLayers = session.enabledFeatures.includes("layers");
          this._referenceSpace = await session.requestReferenceSpace(this.getReferenceSpaceType());
          if (this._supportsLayers) {
            for (const layer2 of this._layers) {
              layer2.plane.material = new MeshBasicMaterial({ color: 16777215, side: layer2.type === "cylinder" ? BackSide : FrontSide });
              layer2.plane.material.blending = CustomBlending;
              layer2.plane.material.blendEquation = AddEquation;
              layer2.plane.material.blendSrc = ZeroFactor;
              layer2.plane.material.blendDst = ZeroFactor;
              layer2.xrlayer = this._createXRLayer(layer2);
              layersArray.unshift(layer2.xrlayer);
            }
          }
          session.updateRenderState({ layers: layersArray });
        } else {
          const layerInit = {
            antialias: renderer.samples > 0,
            alpha: true,
            depth: renderer.depth,
            stencil: renderer.stencil,
            framebufferScaleFactor: this.getFramebufferScaleFactor()
          };
          const glBaseLayer = new XRWebGLLayer(session, gl, layerInit);
          this._glBaseLayer = glBaseLayer;
          session.updateRenderState({ baseLayer: glBaseLayer });
          renderer.setPixelRatio(1);
          renderer._setXRLayerSize(glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight);
          this._xrRenderTarget = new XRRenderTarget(
            glBaseLayer.framebufferWidth,
            glBaseLayer.framebufferHeight,
            {
              format: RGBAFormat,
              type: UnsignedByteType,
              colorSpace: renderer.outputColorSpace,
              stencilBuffer: renderer.stencil,
              resolveDepthBuffer: glBaseLayer.ignoreDepthValues === false,
              resolveStencilBuffer: glBaseLayer.ignoreDepthValues === false
            }
          );
          this._referenceSpace = await session.requestReferenceSpace(this.getReferenceSpaceType());
        }
        this.setFoveation(this.getFoveation());
        renderer._animation.setAnimationLoop(this._onAnimationFrame);
        renderer._animation.setContext(session);
        renderer._animation.start();
        this.isPresenting = true;
        this.dispatchEvent({ type: "sessionstart" });
      }
    }
    /**
     * This method is called by the renderer per frame and updates the XR camera
     * and it sub cameras based on the given camera. The given camera is the "user"
     * camera created on application level and used for non-XR rendering.
     *
     * @param {PerspectiveCamera} camera - The camera.
     */
    updateCamera(camera) {
      const session = this._session;
      if (session === null) return;
      const depthNear = camera.near;
      const depthFar = camera.far;
      const cameraXR = this._cameraXR;
      const cameraL = this._cameraL;
      const cameraR = this._cameraR;
      cameraXR.near = cameraR.near = cameraL.near = depthNear;
      cameraXR.far = cameraR.far = cameraL.far = depthFar;
      cameraXR.isMultiViewCamera = this._useMultiview;
      if (this._currentDepthNear !== cameraXR.near || this._currentDepthFar !== cameraXR.far) {
        session.updateRenderState({
          depthNear: cameraXR.near,
          depthFar: cameraXR.far
        });
        this._currentDepthNear = cameraXR.near;
        this._currentDepthFar = cameraXR.far;
      }
      cameraL.layers.mask = camera.layers.mask | 2;
      cameraR.layers.mask = camera.layers.mask | 4;
      cameraXR.layers.mask = cameraL.layers.mask | cameraR.layers.mask;
      const parent = camera.parent;
      const cameras = cameraXR.cameras;
      updateCamera(cameraXR, parent);
      for (let i = 0; i < cameras.length; i++) {
        updateCamera(cameras[i], parent);
      }
      if (cameras.length === 2) {
        setProjectionFromUnion(cameraXR, cameraL, cameraR);
      } else {
        cameraXR.projectionMatrix.copy(cameraL.projectionMatrix);
      }
      updateUserCamera(camera, cameraXR, parent);
    }
    /**
     * Returns a WebXR controller for the given controller index.
     *
     * @private
     * @param {number} index - The controller index.
     * @return {WebXRController} The XR controller.
     */
    _getController(index) {
      let controller = this._controllers[index];
      if (controller === void 0) {
        controller = new WebXRController();
        this._controllers[index] = controller;
      }
      return controller;
    }
  };
  function setProjectionFromUnion(camera, cameraL, cameraR) {
    _cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);
    _cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);
    const ipd = _cameraLPos.distanceTo(_cameraRPos);
    const projL = cameraL.projectionMatrix.elements;
    const projR = cameraR.projectionMatrix.elements;
    const near = projL[14] / (projL[10] - 1);
    const far = projL[14] / (projL[10] + 1);
    const topFov = (projL[9] + 1) / projL[5];
    const bottomFov = (projL[9] - 1) / projL[5];
    const leftFov = (projL[8] - 1) / projL[0];
    const rightFov = (projR[8] + 1) / projR[0];
    const left = near * leftFov;
    const right = near * rightFov;
    const zOffset = ipd / (-leftFov + rightFov);
    const xOffset = zOffset * -leftFov;
    cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
    camera.translateX(xOffset);
    camera.translateZ(zOffset);
    camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
    camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
    if (projL[10] === -1) {
      camera.projectionMatrix.copy(cameraL.projectionMatrix);
      camera.projectionMatrixInverse.copy(cameraL.projectionMatrixInverse);
    } else {
      const near2 = near + zOffset;
      const far2 = far + zOffset;
      const left2 = left - xOffset;
      const right2 = right + (ipd - xOffset);
      const top2 = topFov * far / far2 * near2;
      const bottom2 = bottomFov * far / far2 * near2;
      camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
      camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();
    }
  }
  function updateCamera(camera, parent) {
    if (parent === null) {
      camera.matrixWorld.copy(camera.matrix);
    } else {
      camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);
    }
    camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
  }
  function updateUserCamera(camera, cameraXR, parent) {
    if (parent === null) {
      camera.matrix.copy(cameraXR.matrixWorld);
    } else {
      camera.matrix.copy(parent.matrixWorld);
      camera.matrix.invert();
      camera.matrix.multiply(cameraXR.matrixWorld);
    }
    camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);
    camera.updateMatrixWorld(true);
    camera.projectionMatrix.copy(cameraXR.projectionMatrix);
    camera.projectionMatrixInverse.copy(cameraXR.projectionMatrixInverse);
    if (camera.isPerspectiveCamera) {
      camera.fov = RAD2DEG * 2 * Math.atan(1 / camera.projectionMatrix.elements[5]);
      camera.zoom = 1;
    }
  }
  function onSessionEvent(event) {
    const controllerIndex = this._controllerInputSources.indexOf(event.inputSource);
    if (controllerIndex === -1) {
      return;
    }
    const controller = this._controllers[controllerIndex];
    if (controller !== void 0) {
      const referenceSpace = this.getReferenceSpace();
      controller.update(event.inputSource, event.frame, referenceSpace);
      controller.dispatchEvent({ type: event.type, data: event.inputSource });
    }
  }
  function onSessionEnd() {
    const session = this._session;
    const renderer = this._renderer;
    session.removeEventListener("select", this._onSessionEvent);
    session.removeEventListener("selectstart", this._onSessionEvent);
    session.removeEventListener("selectend", this._onSessionEvent);
    session.removeEventListener("squeeze", this._onSessionEvent);
    session.removeEventListener("squeezestart", this._onSessionEvent);
    session.removeEventListener("squeezeend", this._onSessionEvent);
    session.removeEventListener("end", this._onSessionEnd);
    session.removeEventListener("inputsourceschange", this._onInputSourcesChange);
    for (let i = 0; i < this._controllers.length; i++) {
      const inputSource = this._controllerInputSources[i];
      if (inputSource === null) continue;
      this._controllerInputSources[i] = null;
      this._controllers[i].disconnect(inputSource);
    }
    this._currentDepthNear = null;
    this._currentDepthFar = null;
    renderer._resetXRState();
    this._session = null;
    this._xrRenderTarget = null;
    if (this._supportsLayers === true) {
      for (const layer2 of this._layers) {
        layer2.renderTarget = new XRRenderTarget(
          layer2.pixelwidth,
          layer2.pixelheight,
          {
            format: RGBAFormat,
            type: UnsignedByteType,
            depthTexture: new DepthTexture(
              layer2.pixelwidth,
              layer2.pixelheight,
              layer2.stencilBuffer ? UnsignedInt248Type : UnsignedIntType,
              void 0,
              void 0,
              void 0,
              void 0,
              void 0,
              void 0,
              layer2.stencilBuffer ? DepthStencilFormat : DepthFormat
            ),
            stencilBuffer: layer2.stencilBuffer,
            resolveDepthBuffer: false,
            resolveStencilBuffer: false
          }
        );
        layer2.renderTarget.isXRRenderTarget = false;
        layer2.plane.material = layer2.material;
        layer2.material.map = layer2.renderTarget.texture;
        layer2.material.map.offset.y = 1;
        layer2.material.map.repeat.y = -1;
        delete layer2.xrlayer;
      }
    }
    this.isPresenting = false;
    this._useMultiview = false;
    renderer._animation.stop();
    renderer._animation.setAnimationLoop(this._currentAnimationLoop);
    renderer._animation.setContext(this._currentAnimationContext);
    renderer._animation.start();
    renderer.setPixelRatio(this._currentPixelRatio);
    renderer.setSize(this._currentSize.width, this._currentSize.height, false);
    this.dispatchEvent({ type: "sessionend" });
  }
  function onInputSourcesChange(event) {
    const controllers = this._controllers;
    const controllerInputSources = this._controllerInputSources;
    for (let i = 0; i < event.removed.length; i++) {
      const inputSource = event.removed[i];
      const index = controllerInputSources.indexOf(inputSource);
      if (index >= 0) {
        controllerInputSources[index] = null;
        controllers[index].disconnect(inputSource);
      }
    }
    for (let i = 0; i < event.added.length; i++) {
      const inputSource = event.added[i];
      let controllerIndex = controllerInputSources.indexOf(inputSource);
      if (controllerIndex === -1) {
        for (let i2 = 0; i2 < controllers.length; i2++) {
          if (i2 >= controllerInputSources.length) {
            controllerInputSources.push(inputSource);
            controllerIndex = i2;
            break;
          } else if (controllerInputSources[i2] === null) {
            controllerInputSources[i2] = inputSource;
            controllerIndex = i2;
            break;
          }
        }
        if (controllerIndex === -1) break;
      }
      const controller = controllers[controllerIndex];
      if (controller) {
        controller.connect(inputSource);
      }
    }
  }
  function createXRLayer(layer2) {
    if (layer2.type === "quad") {
      return this._glBinding.createQuadLayer({
        transform: new XRRigidTransform(layer2.translation, layer2.quaternion),
        width: layer2.width / 2,
        height: layer2.height / 2,
        space: this._referenceSpace,
        viewPixelWidth: layer2.pixelwidth,
        viewPixelHeight: layer2.pixelheight,
        clearOnAccess: false
      });
    } else {
      return this._glBinding.createCylinderLayer({
        transform: new XRRigidTransform(layer2.translation, layer2.quaternion),
        radius: layer2.radius,
        centralAngle: layer2.centralAngle,
        aspectRatio: layer2.aspectRatio,
        space: this._referenceSpace,
        viewPixelWidth: layer2.pixelwidth,
        viewPixelHeight: layer2.pixelheight,
        clearOnAccess: false
      });
    }
  }
  function onAnimationFrame(time, frame) {
    if (frame === void 0) return;
    const cameraXR = this._cameraXR;
    const renderer = this._renderer;
    const backend = renderer.backend;
    const glBaseLayer = this._glBaseLayer;
    const referenceSpace = this.getReferenceSpace();
    const pose = frame.getViewerPose(referenceSpace);
    this._xrFrame = frame;
    if (pose !== null) {
      const views = pose.views;
      if (this._glBaseLayer !== null) {
        backend.setXRTarget(glBaseLayer.framebuffer);
      }
      let cameraXRNeedsUpdate = false;
      if (views.length !== cameraXR.cameras.length) {
        cameraXR.cameras.length = 0;
        cameraXRNeedsUpdate = true;
      }
      for (let i = 0; i < views.length; i++) {
        const view = views[i];
        let viewport2;
        if (this._useLayers === true) {
          const glSubImage = this._glBinding.getViewSubImage(this._glProjLayer, view);
          viewport2 = glSubImage.viewport;
          if (i === 0) {
            backend.setXRRenderTargetTextures(
              this._xrRenderTarget,
              glSubImage.colorTexture,
              this._glProjLayer.ignoreDepthValues && !this._useMultiview ? void 0 : glSubImage.depthStencilTexture
            );
          }
        } else {
          viewport2 = glBaseLayer.getViewport(view);
        }
        let camera = this._cameras[i];
        if (camera === void 0) {
          camera = new PerspectiveCamera();
          camera.layers.enable(i);
          camera.viewport = new Vector4();
          this._cameras[i] = camera;
        }
        camera.matrix.fromArray(view.transform.matrix);
        camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);
        camera.projectionMatrix.fromArray(view.projectionMatrix);
        camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();
        camera.viewport.set(viewport2.x, viewport2.y, viewport2.width, viewport2.height);
        if (i === 0) {
          cameraXR.matrix.copy(camera.matrix);
          cameraXR.matrix.decompose(cameraXR.position, cameraXR.quaternion, cameraXR.scale);
        }
        if (cameraXRNeedsUpdate === true) {
          cameraXR.cameras.push(camera);
        }
      }
      renderer.setOutputRenderTarget(this._xrRenderTarget);
    }
    for (let i = 0; i < this._controllers.length; i++) {
      const inputSource = this._controllerInputSources[i];
      const controller = this._controllers[i];
      if (inputSource !== null && controller !== void 0) {
        controller.update(inputSource, frame, referenceSpace);
      }
    }
    if (this._currentAnimationLoop) this._currentAnimationLoop(time, frame);
    if (frame.detectedPlanes) {
      this.dispatchEvent({ type: "planesdetected", data: frame });
    }
    this._xrFrame = null;
  }
  var _scene = /* @__PURE__ */ new Scene();
  var _drawingBufferSize$1 = /* @__PURE__ */ new Vector2();
  var _screen = /* @__PURE__ */ new Vector4();
  var _frustum = /* @__PURE__ */ new Frustum();
  var _frustumArray = /* @__PURE__ */ new FrustumArray();
  var _projScreenMatrix2 = /* @__PURE__ */ new Matrix4();
  var _vector4 = /* @__PURE__ */ new Vector4();
  var Renderer = class {
    /**
     * Renderer options.
     *
     * @typedef {Object} Renderer~Options
     * @property {boolean} [logarithmicDepthBuffer=false] - Whether logarithmic depth buffer is enabled or not.
     * @property {boolean} [alpha=true] - Whether the default framebuffer (which represents the final contents of the canvas) should be transparent or opaque.
     * @property {boolean} [depth=true] - Whether the default framebuffer should have a depth buffer or not.
     * @property {boolean} [stencil=false] - Whether the default framebuffer should have a stencil buffer or not.
     * @property {boolean} [antialias=false] - Whether MSAA as the default anti-aliasing should be enabled or not.
     * @property {number} [samples=0] - When `antialias` is `true`, `4` samples are used by default. This parameter can set to any other integer value than 0
     * to overwrite the default.
     * @property {?Function} [getFallback=null] - This callback function can be used to provide a fallback backend, if the primary backend can't be targeted.
     * @property {number} [colorBufferType=HalfFloatType] - Defines the type of color buffers. The default `HalfFloatType` is recommend for best
     * quality. To save memory and bandwidth, `UnsignedByteType` might be used. This will reduce rendering quality though.
     * @property {boolean} [multiview=false] - If set to `true`, the renderer will use multiview during WebXR rendering if supported.
     */
    /**
    	 * Constructs a new renderer.
    	 *
    	 * @param {Backend} backend - The backend the renderer is targeting (e.g. WebGPU or WebGL 2).
    	 * @param {Renderer~Options} [parameters] - The configuration parameter.
    
    	 */
    constructor(backend, parameters = {}) {
      this.isRenderer = true;
      const {
        logarithmicDepthBuffer = false,
        alpha = true,
        depth: depth2 = true,
        stencil = false,
        antialias = false,
        samples = 0,
        getFallback = null,
        colorBufferType = HalfFloatType,
        multiview = false
      } = parameters;
      this.domElement = backend.getDomElement();
      this.backend = backend;
      this.samples = samples || antialias === true ? 4 : 0;
      this.autoClear = true;
      this.autoClearColor = true;
      this.autoClearDepth = true;
      this.autoClearStencil = true;
      this.alpha = alpha;
      this.logarithmicDepthBuffer = logarithmicDepthBuffer;
      this.outputColorSpace = SRGBColorSpace;
      this.toneMapping = NoToneMapping;
      this.toneMappingExposure = 1;
      this.sortObjects = true;
      this.depth = depth2;
      this.stencil = stencil;
      this.info = new Info();
      this.overrideNodes = {
        modelViewMatrix: null,
        modelNormalViewMatrix: null
      };
      this.library = new NodeLibrary();
      this.lighting = new Lighting();
      this._getFallback = getFallback;
      this._pixelRatio = 1;
      this._width = this.domElement.width;
      this._height = this.domElement.height;
      this._viewport = new Vector4(0, 0, this._width, this._height);
      this._scissor = new Vector4(0, 0, this._width, this._height);
      this._scissorTest = false;
      this._attributes = null;
      this._geometries = null;
      this._nodes = null;
      this._animation = null;
      this._bindings = null;
      this._objects = null;
      this._pipelines = null;
      this._bundles = null;
      this._renderLists = null;
      this._renderContexts = null;
      this._textures = null;
      this._background = null;
      this._quad = new QuadMesh(new NodeMaterial());
      this._quad.material.name = "Renderer_output";
      this._currentRenderContext = null;
      this._opaqueSort = null;
      this._transparentSort = null;
      this._frameBufferTarget = null;
      const alphaClear = this.alpha === true ? 0 : 1;
      this._clearColor = new Color4(0, 0, 0, alphaClear);
      this._clearDepth = 1;
      this._clearStencil = 0;
      this._renderTarget = null;
      this._activeCubeFace = 0;
      this._activeMipmapLevel = 0;
      this._outputRenderTarget = null;
      this._mrt = null;
      this._renderObjectFunction = null;
      this._currentRenderObjectFunction = null;
      this._currentRenderBundle = null;
      this._handleObjectFunction = this._renderObjectDirect;
      this._isDeviceLost = false;
      this.onDeviceLost = this._onDeviceLost;
      this._colorBufferType = colorBufferType;
      this._initialized = false;
      this._initPromise = null;
      this._compilationPromises = null;
      this.transparent = true;
      this.opaque = true;
      this.shadowMap = {
        enabled: false,
        type: PCFShadowMap
      };
      this.xr = new XRManager(this, multiview);
      this.debug = {
        checkShaderErrors: true,
        onShaderError: null,
        getShaderAsync: async (scene, camera, object) => {
          await this.compileAsync(scene, camera);
          const renderList = this._renderLists.get(scene, camera);
          const renderContext = this._renderContexts.get(scene, camera, this._renderTarget);
          const material2 = scene.overrideMaterial || object.material;
          const renderObject = this._objects.get(object, material2, scene, camera, renderList.lightsNode, renderContext, renderContext.clippingContext);
          const { fragmentShader, vertexShader } = renderObject.getNodeBuilderState();
          return { fragmentShader, vertexShader };
        }
      };
    }
    /**
     * Initializes the renderer so it is ready for usage.
     *
     * @async
     * @return {Promise<this>} A Promise that resolves when the renderer has been initialized.
     */
    async init() {
      if (this._initialized) {
        throw new Error("Renderer: Backend has already been initialized.");
      }
      if (this._initPromise !== null) {
        return this._initPromise;
      }
      this._initPromise = new Promise(async (resolve, reject) => {
        let backend = this.backend;
        try {
          await backend.init(this);
        } catch (error) {
          if (this._getFallback !== null) {
            try {
              this.backend = backend = this._getFallback(error);
              await backend.init(this);
            } catch (error2) {
              reject(error2);
              return;
            }
          } else {
            reject(error);
            return;
          }
        }
        this._nodes = new Nodes(this, backend);
        this._animation = new Animation(this._nodes, this.info);
        this._attributes = new Attributes(backend);
        this._background = new Background(this, this._nodes);
        this._geometries = new Geometries(this._attributes, this.info);
        this._textures = new Textures(this, backend, this.info);
        this._pipelines = new Pipelines(backend, this._nodes);
        this._bindings = new Bindings(backend, this._nodes, this._textures, this._attributes, this._pipelines, this.info);
        this._objects = new RenderObjects(this, this._nodes, this._geometries, this._pipelines, this._bindings, this.info);
        this._renderLists = new RenderLists(this.lighting);
        this._bundles = new RenderBundles();
        this._renderContexts = new RenderContexts();
        this._animation.start();
        this._initialized = true;
        resolve(this);
      });
      return this._initPromise;
    }
    /**
     * The coordinate system of the renderer. The value of this property
     * depends on the selected backend. Either `THREE.WebGLCoordinateSystem` or
     * `THREE.WebGPUCoordinateSystem`.
     *
     * @readonly
     * @type {number}
     */
    get coordinateSystem() {
      return this.backend.coordinateSystem;
    }
    /**
     * Compiles all materials in the given scene. This can be useful to avoid a
     * phenomenon which is called "shader compilation stutter", which occurs when
     * rendering an object with a new shader for the first time.
     *
     * If you want to add a 3D object to an existing scene, use the third optional
     * parameter for applying the target scene. Note that the (target) scene's lighting
     * and environment must be configured before calling this method.
     *
     * @async
     * @param {Object3D} scene - The scene or 3D object to precompile.
     * @param {Camera} camera - The camera that is used to render the scene.
     * @param {?Scene} targetScene - If the first argument is a 3D object, this parameter must represent the scene the 3D object is going to be added.
     * @return {Promise<Array|undefined>} A Promise that resolves when the compile has been finished.
     */
    async compileAsync(scene, camera, targetScene = null) {
      if (this._isDeviceLost === true) return;
      if (this._initialized === false) await this.init();
      const nodeFrame = this._nodes.nodeFrame;
      const previousRenderId = nodeFrame.renderId;
      const previousRenderContext = this._currentRenderContext;
      const previousRenderObjectFunction = this._currentRenderObjectFunction;
      const previousCompilationPromises = this._compilationPromises;
      const sceneRef = scene.isScene === true ? scene : _scene;
      if (targetScene === null) targetScene = scene;
      const renderTarget = this._renderTarget;
      const renderContext = this._renderContexts.get(targetScene, camera, renderTarget);
      const activeMipmapLevel = this._activeMipmapLevel;
      const compilationPromises = [];
      this._currentRenderContext = renderContext;
      this._currentRenderObjectFunction = this.renderObject;
      this._handleObjectFunction = this._createObjectPipeline;
      this._compilationPromises = compilationPromises;
      nodeFrame.renderId++;
      nodeFrame.update();
      renderContext.depth = this.depth;
      renderContext.stencil = this.stencil;
      if (!renderContext.clippingContext) renderContext.clippingContext = new ClippingContext();
      renderContext.clippingContext.updateGlobal(sceneRef, camera);
      sceneRef.onBeforeRender(this, scene, camera, renderTarget);
      const renderList = this._renderLists.get(scene, camera);
      renderList.begin();
      this._projectObject(scene, camera, 0, renderList, renderContext.clippingContext);
      if (targetScene !== scene) {
        targetScene.traverseVisible(function(object) {
          if (object.isLight && object.layers.test(camera.layers)) {
            renderList.pushLight(object);
          }
        });
      }
      renderList.finish();
      if (renderTarget !== null) {
        this._textures.updateRenderTarget(renderTarget, activeMipmapLevel);
        const renderTargetData = this._textures.get(renderTarget);
        renderContext.textures = renderTargetData.textures;
        renderContext.depthTexture = renderTargetData.depthTexture;
      } else {
        renderContext.textures = null;
        renderContext.depthTexture = null;
      }
      this._background.update(sceneRef, renderList, renderContext);
      const opaqueObjects = renderList.opaque;
      const transparentObjects = renderList.transparent;
      const transparentDoublePassObjects = renderList.transparentDoublePass;
      const lightsNode = renderList.lightsNode;
      if (this.opaque === true && opaqueObjects.length > 0) this._renderObjects(opaqueObjects, camera, sceneRef, lightsNode);
      if (this.transparent === true && transparentObjects.length > 0) this._renderTransparents(transparentObjects, transparentDoublePassObjects, camera, sceneRef, lightsNode);
      nodeFrame.renderId = previousRenderId;
      this._currentRenderContext = previousRenderContext;
      this._currentRenderObjectFunction = previousRenderObjectFunction;
      this._compilationPromises = previousCompilationPromises;
      this._handleObjectFunction = this._renderObjectDirect;
      await Promise.all(compilationPromises);
    }
    /**
     * Renders the scene in an async fashion.
     *
     * @async
     * @param {Object3D} scene - The scene or 3D object to render.
     * @param {Camera} camera - The camera.
     * @return {Promise} A Promise that resolves when the render has been finished.
     */
    async renderAsync(scene, camera) {
      if (this._initialized === false) await this.init();
      this._renderScene(scene, camera);
    }
    /**
     * Can be used to synchronize CPU operations with GPU tasks. So when this method is called,
     * the CPU waits for the GPU to complete its operation (e.g. a compute task).
     *
     * @async
     * @return {Promise} A Promise that resolves when synchronization has been finished.
     */
    async waitForGPU() {
      await this.backend.waitForGPU();
    }
    /**
     * Enables or disables high precision for model-view and normal-view matrices.
     * When enabled, will use CPU 64-bit precision for higher precision instead of GPU 32-bit for higher performance.
     *
     * NOTE: 64-bit precision is not compatible with `InstancedMesh` and `SkinnedMesh`.
     *
     * @param {boolean} value - Whether to enable or disable high precision.
     * @type {boolean}
     */
    set highPrecision(value) {
      if (value === true) {
        this.overrideNodes.modelViewMatrix = highpModelViewMatrix;
        this.overrideNodes.modelNormalViewMatrix = highpModelNormalViewMatrix;
      } else if (this.highPrecision) {
        this.overrideNodes.modelViewMatrix = null;
        this.overrideNodes.modelNormalViewMatrix = null;
      }
    }
    /**
     * Returns whether high precision is enabled or not.
     *
     * @return {boolean} Whether high precision is enabled or not.
     * @type {boolean}
     */
    get highPrecision() {
      return this.overrideNodes.modelViewMatrix === highpModelViewMatrix && this.overrideNodes.modelNormalViewMatrix === highpModelNormalViewMatrix;
    }
    /**
     * Sets the given MRT configuration.
     *
     * @param {MRTNode} mrt - The MRT node to set.
     * @return {Renderer} A reference to this renderer.
     */
    setMRT(mrt) {
      this._mrt = mrt;
      return this;
    }
    /**
     * Returns the MRT configuration.
     *
     * @return {MRTNode} The MRT configuration.
     */
    getMRT() {
      return this._mrt;
    }
    /**
     * Returns the color buffer type.
     *
     * @return {number} The color buffer type.
     */
    getColorBufferType() {
      return this._colorBufferType;
    }
    /**
     * Default implementation of the device lost callback.
     *
     * @private
     * @param {Object} info - Information about the context lost.
     */
    _onDeviceLost(info) {
      let errorMessage = `THREE.WebGPURenderer: ${info.api} Device Lost:

Message: ${info.message}`;
      if (info.reason) {
        errorMessage += `
Reason: ${info.reason}`;
      }
      console.error(errorMessage);
      this._isDeviceLost = true;
    }
    /**
     * Renders the given render bundle.
     *
     * @private
     * @param {Object} bundle - Render bundle data.
     * @param {Scene} sceneRef - The scene the render bundle belongs to.
     * @param {LightsNode} lightsNode - The lights node.
     */
    _renderBundle(bundle, sceneRef, lightsNode) {
      const { bundleGroup, camera, renderList } = bundle;
      const renderContext = this._currentRenderContext;
      const renderBundle = this._bundles.get(bundleGroup, camera);
      const renderBundleData = this.backend.get(renderBundle);
      if (renderBundleData.renderContexts === void 0) renderBundleData.renderContexts = /* @__PURE__ */ new Set();
      const needsUpdate = bundleGroup.version !== renderBundleData.version;
      const renderBundleNeedsUpdate = renderBundleData.renderContexts.has(renderContext) === false || needsUpdate;
      renderBundleData.renderContexts.add(renderContext);
      if (renderBundleNeedsUpdate) {
        this.backend.beginBundle(renderContext);
        if (renderBundleData.renderObjects === void 0 || needsUpdate) {
          renderBundleData.renderObjects = [];
        }
        this._currentRenderBundle = renderBundle;
        const {
          transparentDoublePass: transparentDoublePassObjects,
          transparent: transparentObjects,
          opaque: opaqueObjects
        } = renderList;
        if (this.opaque === true && opaqueObjects.length > 0) this._renderObjects(opaqueObjects, camera, sceneRef, lightsNode);
        if (this.transparent === true && transparentObjects.length > 0) this._renderTransparents(transparentObjects, transparentDoublePassObjects, camera, sceneRef, lightsNode);
        this._currentRenderBundle = null;
        this.backend.finishBundle(renderContext, renderBundle);
        renderBundleData.version = bundleGroup.version;
      } else {
        const { renderObjects } = renderBundleData;
        for (let i = 0, l = renderObjects.length; i < l; i++) {
          const renderObject = renderObjects[i];
          if (this._nodes.needsRefresh(renderObject)) {
            this._nodes.updateBefore(renderObject);
            this._nodes.updateForRender(renderObject);
            this._bindings.updateForRender(renderObject);
            this._nodes.updateAfter(renderObject);
          }
        }
      }
      this.backend.addBundle(renderContext, renderBundle);
    }
    /**
     * Renders the scene or 3D object with the given camera. This method can only be called
     * if the renderer has been initialized.
     *
     * The target of the method is the default framebuffer (meaning the canvas)
     * or alternatively a render target when specified via `setRenderTarget()`.
     *
     * @param {Object3D} scene - The scene or 3D object to render.
     * @param {Camera} camera - The camera to render the scene with.
     * @return {?Promise} A Promise that resolve when the scene has been rendered.
     * Only returned when the renderer has not been initialized.
     */
    render(scene, camera) {
      if (this._initialized === false) {
        console.warn("THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead.");
        return this.renderAsync(scene, camera);
      }
      this._renderScene(scene, camera);
    }
    /**
     * Returns an internal render target which is used when computing the output tone mapping
     * and color space conversion. Unlike in `WebGLRenderer`, this is done in a separate render
     * pass and not inline to achieve more correct results.
     *
     * @private
     * @return {?RenderTarget} The render target. The method returns `null` if no output conversion should be applied.
     */
    _getFrameBufferTarget() {
      const { currentToneMapping, currentColorSpace } = this;
      const useToneMapping = currentToneMapping !== NoToneMapping;
      const useColorSpace = currentColorSpace !== LinearSRGBColorSpace;
      if (useToneMapping === false && useColorSpace === false) return null;
      const { width, height } = this.getDrawingBufferSize(_drawingBufferSize$1);
      const { depth: depth2, stencil } = this;
      let frameBufferTarget = this._frameBufferTarget;
      if (frameBufferTarget === null) {
        frameBufferTarget = new RenderTarget(width, height, {
          depthBuffer: depth2,
          stencilBuffer: stencil,
          type: this._colorBufferType,
          format: RGBAFormat,
          colorSpace: LinearSRGBColorSpace,
          generateMipmaps: false,
          minFilter: LinearFilter,
          magFilter: LinearFilter,
          samples: this.samples
        });
        frameBufferTarget.isPostProcessingRenderTarget = true;
        this._frameBufferTarget = frameBufferTarget;
      }
      const outputRenderTarget = this.getOutputRenderTarget();
      frameBufferTarget.depthBuffer = depth2;
      frameBufferTarget.stencilBuffer = stencil;
      if (outputRenderTarget !== null) {
        frameBufferTarget.setSize(outputRenderTarget.width, outputRenderTarget.height, outputRenderTarget.depth);
      } else {
        frameBufferTarget.setSize(width, height, 1);
      }
      frameBufferTarget.viewport.copy(this._viewport);
      frameBufferTarget.scissor.copy(this._scissor);
      frameBufferTarget.viewport.multiplyScalar(this._pixelRatio);
      frameBufferTarget.scissor.multiplyScalar(this._pixelRatio);
      frameBufferTarget.scissorTest = this._scissorTest;
      frameBufferTarget.multiview = outputRenderTarget !== null ? outputRenderTarget.multiview : false;
      frameBufferTarget.resolveDepthBuffer = outputRenderTarget !== null ? outputRenderTarget.resolveDepthBuffer : true;
      frameBufferTarget.autoAllocateDepthBuffer = outputRenderTarget !== null ? outputRenderTarget.autoAllocateDepthBuffer : false;
      return frameBufferTarget;
    }
    /**
     * Renders the scene or 3D object with the given camera.
     *
     * @private
     * @param {Object3D} scene - The scene or 3D object to render.
     * @param {Camera} camera - The camera to render the scene with.
     * @param {boolean} [useFrameBufferTarget=true] - Whether to use a framebuffer target or not.
     * @return {RenderContext} The current render context.
     */
    _renderScene(scene, camera, useFrameBufferTarget = true) {
      if (this._isDeviceLost === true) return;
      const frameBufferTarget = useFrameBufferTarget ? this._getFrameBufferTarget() : null;
      const nodeFrame = this._nodes.nodeFrame;
      const previousRenderId = nodeFrame.renderId;
      const previousRenderContext = this._currentRenderContext;
      const previousRenderObjectFunction = this._currentRenderObjectFunction;
      const sceneRef = scene.isScene === true ? scene : _scene;
      const outputRenderTarget = this._renderTarget || this._outputRenderTarget;
      const activeCubeFace = this._activeCubeFace;
      const activeMipmapLevel = this._activeMipmapLevel;
      let renderTarget;
      if (frameBufferTarget !== null) {
        renderTarget = frameBufferTarget;
        this.setRenderTarget(renderTarget);
      } else {
        renderTarget = outputRenderTarget;
      }
      const renderContext = this._renderContexts.get(scene, camera, renderTarget);
      this._currentRenderContext = renderContext;
      this._currentRenderObjectFunction = this._renderObjectFunction || this.renderObject;
      this.info.calls++;
      this.info.render.calls++;
      this.info.render.frameCalls++;
      nodeFrame.renderId = this.info.calls;
      const coordinateSystem = this.coordinateSystem;
      const xr = this.xr;
      if (camera.coordinateSystem !== coordinateSystem && xr.isPresenting === false) {
        camera.coordinateSystem = coordinateSystem;
        camera.updateProjectionMatrix();
        if (camera.isArrayCamera) {
          for (const subCamera of camera.cameras) {
            subCamera.coordinateSystem = coordinateSystem;
            subCamera.updateProjectionMatrix();
          }
        }
      }
      if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();
      if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();
      if (xr.enabled === true && xr.isPresenting === true) {
        if (xr.cameraAutoUpdate === true) xr.updateCamera(camera);
        camera = xr.getCamera();
      }
      let viewport2 = this._viewport;
      let scissor = this._scissor;
      let pixelRatio = this._pixelRatio;
      if (renderTarget !== null) {
        viewport2 = renderTarget.viewport;
        scissor = renderTarget.scissor;
        pixelRatio = 1;
      }
      this.getDrawingBufferSize(_drawingBufferSize$1);
      _screen.set(0, 0, _drawingBufferSize$1.width, _drawingBufferSize$1.height);
      const minDepth = viewport2.minDepth === void 0 ? 0 : viewport2.minDepth;
      const maxDepth = viewport2.maxDepth === void 0 ? 1 : viewport2.maxDepth;
      renderContext.viewportValue.copy(viewport2).multiplyScalar(pixelRatio).floor();
      renderContext.viewportValue.width >>= activeMipmapLevel;
      renderContext.viewportValue.height >>= activeMipmapLevel;
      renderContext.viewportValue.minDepth = minDepth;
      renderContext.viewportValue.maxDepth = maxDepth;
      renderContext.viewport = renderContext.viewportValue.equals(_screen) === false;
      renderContext.scissorValue.copy(scissor).multiplyScalar(pixelRatio).floor();
      renderContext.scissor = this._scissorTest && renderContext.scissorValue.equals(_screen) === false;
      renderContext.scissorValue.width >>= activeMipmapLevel;
      renderContext.scissorValue.height >>= activeMipmapLevel;
      if (!renderContext.clippingContext) renderContext.clippingContext = new ClippingContext();
      renderContext.clippingContext.updateGlobal(sceneRef, camera);
      sceneRef.onBeforeRender(this, scene, camera, renderTarget);
      const frustum = camera.isArrayCamera ? _frustumArray : _frustum;
      if (!camera.isArrayCamera) {
        _projScreenMatrix2.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
        frustum.setFromProjectionMatrix(_projScreenMatrix2, coordinateSystem);
      }
      const renderList = this._renderLists.get(scene, camera);
      renderList.begin();
      this._projectObject(scene, camera, 0, renderList, renderContext.clippingContext);
      renderList.finish();
      if (this.sortObjects === true) {
        renderList.sort(this._opaqueSort, this._transparentSort);
      }
      if (renderTarget !== null) {
        this._textures.updateRenderTarget(renderTarget, activeMipmapLevel);
        const renderTargetData = this._textures.get(renderTarget);
        renderContext.textures = renderTargetData.textures;
        renderContext.depthTexture = renderTargetData.depthTexture;
        renderContext.width = renderTargetData.width;
        renderContext.height = renderTargetData.height;
        renderContext.renderTarget = renderTarget;
        renderContext.depth = renderTarget.depthBuffer;
        renderContext.stencil = renderTarget.stencilBuffer;
      } else {
        renderContext.textures = null;
        renderContext.depthTexture = null;
        renderContext.width = this.domElement.width;
        renderContext.height = this.domElement.height;
        renderContext.depth = this.depth;
        renderContext.stencil = this.stencil;
      }
      renderContext.width >>= activeMipmapLevel;
      renderContext.height >>= activeMipmapLevel;
      renderContext.activeCubeFace = activeCubeFace;
      renderContext.activeMipmapLevel = activeMipmapLevel;
      renderContext.occlusionQueryCount = renderList.occlusionQueryCount;
      this._background.update(sceneRef, renderList, renderContext);
      renderContext.camera = camera;
      this.backend.beginRender(renderContext);
      const {
        bundles,
        lightsNode,
        transparentDoublePass: transparentDoublePassObjects,
        transparent: transparentObjects,
        opaque: opaqueObjects
      } = renderList;
      if (bundles.length > 0) this._renderBundles(bundles, sceneRef, lightsNode);
      if (this.opaque === true && opaqueObjects.length > 0) this._renderObjects(opaqueObjects, camera, sceneRef, lightsNode);
      if (this.transparent === true && transparentObjects.length > 0) this._renderTransparents(transparentObjects, transparentDoublePassObjects, camera, sceneRef, lightsNode);
      this.backend.finishRender(renderContext);
      nodeFrame.renderId = previousRenderId;
      this._currentRenderContext = previousRenderContext;
      this._currentRenderObjectFunction = previousRenderObjectFunction;
      if (frameBufferTarget !== null) {
        this.setRenderTarget(outputRenderTarget, activeCubeFace, activeMipmapLevel);
        this._renderOutput(renderTarget);
      }
      sceneRef.onAfterRender(this, scene, camera, renderTarget);
      return renderContext;
    }
    _setXRLayerSize(width, height) {
      this._width = width;
      this._height = height;
      this.setViewport(0, 0, width, height);
    }
    /**
     * The output pass performs tone mapping and color space conversion.
     *
     * @private
     * @param {RenderTarget} renderTarget - The current render target.
     */
    _renderOutput(renderTarget) {
      const quad = this._quad;
      if (this._nodes.hasOutputChange(renderTarget.texture)) {
        quad.material.fragmentNode = this._nodes.getOutputNode(renderTarget.texture);
        quad.material.needsUpdate = true;
      }
      const currentAutoClear = this.autoClear;
      const currentXR = this.xr.enabled;
      this.autoClear = false;
      this.xr.enabled = false;
      this._renderScene(quad, quad.camera, false);
      this.autoClear = currentAutoClear;
      this.xr.enabled = currentXR;
    }
    /**
     * Returns the maximum available anisotropy for texture filtering.
     *
     * @return {number} The maximum available anisotropy.
     */
    getMaxAnisotropy() {
      return this.backend.getMaxAnisotropy();
    }
    /**
     * Returns the active cube face.
     *
     * @return {number} The active cube face.
     */
    getActiveCubeFace() {
      return this._activeCubeFace;
    }
    /**
     * Returns the active mipmap level.
     *
     * @return {number} The active mipmap level.
     */
    getActiveMipmapLevel() {
      return this._activeMipmapLevel;
    }
    /**
     * Applications are advised to always define the animation loop
     * with this method and not manually with `requestAnimationFrame()`
     * for best compatibility.
     *
     * @async
     * @param {?Function} callback - The application's animation loop.
     * @return {Promise} A Promise that resolves when the set has been executed.
     */
    async setAnimationLoop(callback) {
      if (this._initialized === false) await this.init();
      this._animation.setAnimationLoop(callback);
    }
    /**
     * Can be used to transfer buffer data from a storage buffer attribute
     * from the GPU to the CPU in context of compute shaders.
     *
     * @async
     * @param {StorageBufferAttribute} attribute - The storage buffer attribute.
     * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.
     */
    async getArrayBufferAsync(attribute2) {
      return await this.backend.getArrayBufferAsync(attribute2);
    }
    /**
     * Returns the rendering context.
     *
     * @return {GPUCanvasContext|WebGL2RenderingContext} The rendering context.
     */
    getContext() {
      return this.backend.getContext();
    }
    /**
     * Returns the pixel ratio.
     *
     * @return {number} The pixel ratio.
     */
    getPixelRatio() {
      return this._pixelRatio;
    }
    /**
     * Returns the drawing buffer size in physical pixels. This method honors the pixel ratio.
     *
     * @param {Vector2} target - The method writes the result in this target object.
     * @return {Vector2} The drawing buffer size.
     */
    getDrawingBufferSize(target) {
      return target.set(this._width * this._pixelRatio, this._height * this._pixelRatio).floor();
    }
    /**
     * Returns the renderer's size in logical pixels. This method does not honor the pixel ratio.
     *
     * @param {Vector2} target - The method writes the result in this target object.
     * @return {Vector2} The renderer's size in logical pixels.
     */
    getSize(target) {
      return target.set(this._width, this._height);
    }
    /**
     * Sets the given pixel ratio and resizes the canvas if necessary.
     *
     * @param {number} [value=1] - The pixel ratio.
     */
    setPixelRatio(value = 1) {
      if (this._pixelRatio === value) return;
      this._pixelRatio = value;
      this.setSize(this._width, this._height, false);
    }
    /**
     * This method allows to define the drawing buffer size by specifying
     * width, height and pixel ratio all at once. The size of the drawing
     * buffer is computed with this formula:
     * ```js
     * size.x = width * pixelRatio;
     * size.y = height * pixelRatio;
     * ```
     *
     * @param {number} width - The width in logical pixels.
     * @param {number} height - The height in logical pixels.
     * @param {number} pixelRatio - The pixel ratio.
     */
    setDrawingBufferSize(width, height, pixelRatio) {
      if (this.xr && this.xr.isPresenting) return;
      this._width = width;
      this._height = height;
      this._pixelRatio = pixelRatio;
      this.domElement.width = Math.floor(width * pixelRatio);
      this.domElement.height = Math.floor(height * pixelRatio);
      this.setViewport(0, 0, width, height);
      if (this._initialized) this.backend.updateSize();
    }
    /**
     * Sets the size of the renderer.
     *
     * @param {number} width - The width in logical pixels.
     * @param {number} height - The height in logical pixels.
     * @param {boolean} [updateStyle=true] - Whether to update the `style` attribute of the canvas or not.
     */
    setSize(width, height, updateStyle = true) {
      if (this.xr && this.xr.isPresenting) return;
      this._width = width;
      this._height = height;
      this.domElement.width = Math.floor(width * this._pixelRatio);
      this.domElement.height = Math.floor(height * this._pixelRatio);
      if (updateStyle === true) {
        this.domElement.style.width = width + "px";
        this.domElement.style.height = height + "px";
      }
      this.setViewport(0, 0, width, height);
      if (this._initialized) this.backend.updateSize();
    }
    /**
     * Defines a manual sort function for the opaque render list.
     * Pass `null` to use the default sort.
     *
     * @param {Function} method - The sort function.
     */
    setOpaqueSort(method) {
      this._opaqueSort = method;
    }
    /**
     * Defines a manual sort function for the transparent render list.
     * Pass `null` to use the default sort.
     *
     * @param {Function} method - The sort function.
     */
    setTransparentSort(method) {
      this._transparentSort = method;
    }
    /**
     * Returns the scissor rectangle.
     *
     * @param {Vector4} target - The method writes the result in this target object.
     * @return {Vector4} The scissor rectangle.
     */
    getScissor(target) {
      const scissor = this._scissor;
      target.x = scissor.x;
      target.y = scissor.y;
      target.width = scissor.width;
      target.height = scissor.height;
      return target;
    }
    /**
     * Defines the scissor rectangle.
     *
     * @param {number | Vector4} x - The horizontal coordinate for the lower left corner of the box in logical pixel unit.
     * Instead of passing four arguments, the method also works with a single four-dimensional vector.
     * @param {number} y - The vertical coordinate for the lower left corner of the box in logical pixel unit.
     * @param {number} width - The width of the scissor box in logical pixel unit.
     * @param {number} height - The height of the scissor box in logical pixel unit.
     */
    setScissor(x, y, width, height) {
      const scissor = this._scissor;
      if (x.isVector4) {
        scissor.copy(x);
      } else {
        scissor.set(x, y, width, height);
      }
    }
    /**
     * Returns the scissor test value.
     *
     * @return {boolean} Whether the scissor test should be enabled or not.
     */
    getScissorTest() {
      return this._scissorTest;
    }
    /**
     * Defines the scissor test.
     *
     * @param {boolean} boolean - Whether the scissor test should be enabled or not.
     */
    setScissorTest(boolean) {
      this._scissorTest = boolean;
      this.backend.setScissorTest(boolean);
    }
    /**
     * Returns the viewport definition.
     *
     * @param {Vector4} target - The method writes the result in this target object.
     * @return {Vector4} The viewport definition.
     */
    getViewport(target) {
      return target.copy(this._viewport);
    }
    /**
     * Defines the viewport.
     *
     * @param {number | Vector4} x - The horizontal coordinate for the lower left corner of the viewport origin in logical pixel unit.
     * @param {number} y - The vertical coordinate for the lower left corner of the viewport origin  in logical pixel unit.
     * @param {number} width - The width of the viewport in logical pixel unit.
     * @param {number} height - The height of the viewport in logical pixel unit.
     * @param {number} minDepth - The minimum depth value of the viewport. WebGPU only.
     * @param {number} maxDepth - The maximum depth value of the viewport. WebGPU only.
     */
    setViewport(x, y, width, height, minDepth = 0, maxDepth = 1) {
      const viewport2 = this._viewport;
      if (x.isVector4) {
        viewport2.copy(x);
      } else {
        viewport2.set(x, y, width, height);
      }
      viewport2.minDepth = minDepth;
      viewport2.maxDepth = maxDepth;
    }
    /**
     * Returns the clear color.
     *
     * @param {Color} target - The method writes the result in this target object.
     * @return {Color} The clear color.
     */
    getClearColor(target) {
      return target.copy(this._clearColor);
    }
    /**
     * Defines the clear color and optionally the clear alpha.
     *
     * @param {Color} color - The clear color.
     * @param {number} [alpha=1] - The clear alpha.
     */
    setClearColor(color2, alpha = 1) {
      this._clearColor.set(color2);
      this._clearColor.a = alpha;
    }
    /**
     * Returns the clear alpha.
     *
     * @return {number} The clear alpha.
     */
    getClearAlpha() {
      return this._clearColor.a;
    }
    /**
     * Defines the clear alpha.
     *
     * @param {number} alpha - The clear alpha.
     */
    setClearAlpha(alpha) {
      this._clearColor.a = alpha;
    }
    /**
     * Returns the clear depth.
     *
     * @return {number} The clear depth.
     */
    getClearDepth() {
      return this._clearDepth;
    }
    /**
     * Defines the clear depth.
     *
     * @param {number} depth - The clear depth.
     */
    setClearDepth(depth2) {
      this._clearDepth = depth2;
    }
    /**
     * Returns the clear stencil.
     *
     * @return {number} The clear stencil.
     */
    getClearStencil() {
      return this._clearStencil;
    }
    /**
     * Defines the clear stencil.
     *
     * @param {number} stencil - The clear stencil.
     */
    setClearStencil(stencil) {
      this._clearStencil = stencil;
    }
    /**
     * This method performs an occlusion query for the given 3D object.
     * It returns `true` if the given 3D object is fully occluded by other
     * 3D objects in the scene.
     *
     * @param {Object3D} object - The 3D object to test.
     * @return {boolean} Whether the 3D object is fully occluded or not.
     */
    isOccluded(object) {
      const renderContext = this._currentRenderContext;
      return renderContext && this.backend.isOccluded(renderContext, object);
    }
    /**
     * Performs a manual clear operation. This method ignores `autoClear` properties.
     *
     * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.
     * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.
     * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.
     * @return {Promise} A Promise that resolves when the clear operation has been executed.
     * Only returned when the renderer has not been initialized.
     */
    clear(color2 = true, depth2 = true, stencil = true) {
      if (this._initialized === false) {
        console.warn("THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead.");
        return this.clearAsync(color2, depth2, stencil);
      }
      const renderTarget = this._renderTarget || this._getFrameBufferTarget();
      let renderContext = null;
      if (renderTarget !== null) {
        this._textures.updateRenderTarget(renderTarget);
        const renderTargetData = this._textures.get(renderTarget);
        renderContext = this._renderContexts.getForClear(renderTarget);
        renderContext.textures = renderTargetData.textures;
        renderContext.depthTexture = renderTargetData.depthTexture;
        renderContext.width = renderTargetData.width;
        renderContext.height = renderTargetData.height;
        renderContext.renderTarget = renderTarget;
        renderContext.depth = renderTarget.depthBuffer;
        renderContext.stencil = renderTarget.stencilBuffer;
        renderContext.clearColorValue = this.backend.getClearColor();
        renderContext.activeCubeFace = this.getActiveCubeFace();
        renderContext.activeMipmapLevel = this.getActiveMipmapLevel();
      }
      this.backend.clear(color2, depth2, stencil, renderContext);
      if (renderTarget !== null && this._renderTarget === null) {
        this._renderOutput(renderTarget);
      }
    }
    /**
     * Performs a manual clear operation of the color buffer. This method ignores `autoClear` properties.
     *
     * @return {Promise} A Promise that resolves when the clear operation has been executed.
     * Only returned when the renderer has not been initialized.
     */
    clearColor() {
      return this.clear(true, false, false);
    }
    /**
     * Performs a manual clear operation of the depth buffer. This method ignores `autoClear` properties.
     *
     * @return {Promise} A Promise that resolves when the clear operation has been executed.
     * Only returned when the renderer has not been initialized.
     */
    clearDepth() {
      return this.clear(false, true, false);
    }
    /**
     * Performs a manual clear operation of the stencil buffer. This method ignores `autoClear` properties.
     *
     * @return {Promise} A Promise that resolves when the clear operation has been executed.
     * Only returned when the renderer has not been initialized.
     */
    clearStencil() {
      return this.clear(false, false, true);
    }
    /**
     * Async version of {@link Renderer#clear}.
     *
     * @async
     * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.
     * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.
     * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.
     * @return {Promise} A Promise that resolves when the clear operation has been executed.
     */
    async clearAsync(color2 = true, depth2 = true, stencil = true) {
      if (this._initialized === false) await this.init();
      this.clear(color2, depth2, stencil);
    }
    /**
     * Async version of {@link Renderer#clearColor}.
     *
     * @async
     * @return {Promise} A Promise that resolves when the clear operation has been executed.
     */
    async clearColorAsync() {
      this.clearAsync(true, false, false);
    }
    /**
     * Async version of {@link Renderer#clearDepth}.
     *
     * @async
     * @return {Promise} A Promise that resolves when the clear operation has been executed.
     */
    async clearDepthAsync() {
      this.clearAsync(false, true, false);
    }
    /**
     * Async version of {@link Renderer#clearStencil}.
     *
     * @async
     * @return {Promise} A Promise that resolves when the clear operation has been executed.
     */
    async clearStencilAsync() {
      this.clearAsync(false, false, true);
    }
    /**
     * The current output tone mapping of the renderer. When a render target is set,
     * the output tone mapping is always `NoToneMapping`.
     *
     * @type {number}
     */
    get currentToneMapping() {
      return this.isOutputTarget ? this.toneMapping : NoToneMapping;
    }
    /**
     * The current output color space of the renderer. When a render target is set,
     * the output color space is always `LinearSRGBColorSpace`.
     *
     * @type {string}
     */
    get currentColorSpace() {
      return this.isOutputTarget ? this.outputColorSpace : LinearSRGBColorSpace;
    }
    /**
     * Returns `true` if the rendering settings are set to screen output.
     *
     * @returns {boolean} True if the current render target is the same of output render target or `null`, otherwise false.
     */
    get isOutputTarget() {
      return this._renderTarget === this._outputRenderTarget || this._renderTarget === null;
    }
    /**
     * Frees all internal resources of the renderer. Call this method if the renderer
     * is no longer in use by your app.
     */
    dispose() {
      this.info.dispose();
      this.backend.dispose();
      this._animation.dispose();
      this._objects.dispose();
      this._pipelines.dispose();
      this._nodes.dispose();
      this._bindings.dispose();
      this._renderLists.dispose();
      this._renderContexts.dispose();
      this._textures.dispose();
      if (this._frameBufferTarget !== null) this._frameBufferTarget.dispose();
      Object.values(this.backend.timestampQueryPool).forEach((queryPool) => {
        if (queryPool !== null) queryPool.dispose();
      });
      this.setRenderTarget(null);
      this.setAnimationLoop(null);
    }
    /**
     * Sets the given render target. Calling this method means the renderer does not
     * target the default framebuffer (meaning the canvas) anymore but a custom framebuffer.
     * Use `null` as the first argument to reset the state.
     *
     * @param {?RenderTarget} renderTarget - The render target to set.
     * @param {number} [activeCubeFace=0] - The active cube face.
     * @param {number} [activeMipmapLevel=0] - The active mipmap level.
     */
    setRenderTarget(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
      this._renderTarget = renderTarget;
      this._activeCubeFace = activeCubeFace;
      this._activeMipmapLevel = activeMipmapLevel;
    }
    /**
     * Returns the current render target.
     *
     * @return {?RenderTarget} The render target. Returns `null` if no render target is set.
     */
    getRenderTarget() {
      return this._renderTarget;
    }
    /**
     * Sets the output render target for the renderer.
     *
     * @param {Object} renderTarget - The render target to set as the output target.
     */
    setOutputRenderTarget(renderTarget) {
      this._outputRenderTarget = renderTarget;
    }
    /**
     * Returns the current output target.
     *
     * @return {?RenderTarget} The current output render target. Returns `null` if no output target is set.
     */
    getOutputRenderTarget() {
      return this._outputRenderTarget;
    }
    /**
     * Resets the renderer to the initial state before WebXR started.
     *
     */
    _resetXRState() {
      this.backend.setXRTarget(null);
      this.setOutputRenderTarget(null);
      this.setRenderTarget(null);
      this._frameBufferTarget.dispose();
      this._frameBufferTarget = null;
    }
    /**
     * Callback for {@link Renderer#setRenderObjectFunction}.
     *
     * @callback renderObjectFunction
     * @param {Object3D} object - The 3D object.
     * @param {Scene} scene - The scene the 3D object belongs to.
     * @param {Camera} camera - The camera the object should be rendered with.
     * @param {BufferGeometry} geometry - The object's geometry.
     * @param {Material} material - The object's material.
     * @param {?Object} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.
     * @param {LightsNode} lightsNode - The current lights node.
     * @param {ClippingContext} clippingContext - The clipping context.
     * @param {?string} [passId=null] - An optional ID for identifying the pass.
     */
    /**
     * Sets the given render object function. Calling this method overwrites the default implementation
     * which is {@link Renderer#renderObject}. Defining a custom function can be useful
     * if you want to modify the way objects are rendered. For example you can define things like "every
     * object that has material of a certain type should perform a pre-pass with a special overwrite material".
     * The custom function must always call `renderObject()` in its implementation.
     *
     * Use `null` as the first argument to reset the state.
     *
     * @param {?renderObjectFunction} renderObjectFunction - The render object function.
     */
    setRenderObjectFunction(renderObjectFunction) {
      this._renderObjectFunction = renderObjectFunction;
    }
    /**
     * Returns the current render object function.
     *
     * @return {?Function} The current render object function. Returns `null` if no function is set.
     */
    getRenderObjectFunction() {
      return this._renderObjectFunction;
    }
    /**
     * Execute a single or an array of compute nodes. This method can only be called
     * if the renderer has been initialized.
     *
     * @param {Node|Array<Node>} computeNodes - The compute node(s).
     * @return {Promise|undefined} A Promise that resolve when the compute has finished. Only returned when the renderer has not been initialized.
     */
    compute(computeNodes) {
      if (this._isDeviceLost === true) return;
      if (this._initialized === false) {
        console.warn("THREE.Renderer: .compute() called before the backend is initialized. Try using .computeAsync() instead.");
        return this.computeAsync(computeNodes);
      }
      const nodeFrame = this._nodes.nodeFrame;
      const previousRenderId = nodeFrame.renderId;
      this.info.calls++;
      this.info.compute.calls++;
      this.info.compute.frameCalls++;
      nodeFrame.renderId = this.info.calls;
      const backend = this.backend;
      const pipelines = this._pipelines;
      const bindings = this._bindings;
      const nodes = this._nodes;
      const computeList = Array.isArray(computeNodes) ? computeNodes : [computeNodes];
      if (computeList[0] === void 0 || computeList[0].isComputeNode !== true) {
        throw new Error("THREE.Renderer: .compute() expects a ComputeNode.");
      }
      backend.beginCompute(computeNodes);
      for (const computeNode of computeList) {
        if (pipelines.has(computeNode) === false) {
          const dispose = () => {
            computeNode.removeEventListener("dispose", dispose);
            pipelines.delete(computeNode);
            bindings.delete(computeNode);
            nodes.delete(computeNode);
          };
          computeNode.addEventListener("dispose", dispose);
          const onInitFn = computeNode.onInitFunction;
          if (onInitFn !== null) {
            onInitFn.call(computeNode, { renderer: this });
          }
        }
        nodes.updateForCompute(computeNode);
        bindings.updateForCompute(computeNode);
        const computeBindings = bindings.getForCompute(computeNode);
        const computePipeline = pipelines.getForCompute(computeNode, computeBindings);
        backend.compute(computeNodes, computeNode, computeBindings, computePipeline);
      }
      backend.finishCompute(computeNodes);
      nodeFrame.renderId = previousRenderId;
    }
    /**
     * Execute a single or an array of compute nodes.
     *
     * @async
     * @param {Node|Array<Node>} computeNodes - The compute node(s).
     * @return {Promise} A Promise that resolve when the compute has finished.
     */
    async computeAsync(computeNodes) {
      if (this._initialized === false) await this.init();
      this.compute(computeNodes);
    }
    /**
     * Checks if the given feature is supported by the selected backend.
     *
     * @async
     * @param {string} name - The feature's name.
     * @return {Promise<boolean>} A Promise that resolves with a bool that indicates whether the feature is supported or not.
     */
    async hasFeatureAsync(name2) {
      if (this._initialized === false) await this.init();
      return this.backend.hasFeature(name2);
    }
    async resolveTimestampsAsync(type = "render") {
      if (this._initialized === false) await this.init();
      return this.backend.resolveTimestampsAsync(type);
    }
    /**
     * Checks if the given feature is supported by the selected backend. If the
     * renderer has not been initialized, this method always returns `false`.
     *
     * @param {string} name - The feature's name.
     * @return {boolean} Whether the feature is supported or not.
     */
    hasFeature(name2) {
      if (this._initialized === false) {
        console.warn("THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead.");
        return false;
      }
      return this.backend.hasFeature(name2);
    }
    /**
     * Returns `true` when the renderer has been initialized.
     *
     * @return {boolean} Whether the renderer has been initialized or not.
     */
    hasInitialized() {
      return this._initialized;
    }
    /**
     * Initializes the given textures. Useful for preloading a texture rather than waiting until first render
     * (which can cause noticeable lags due to decode and GPU upload overhead).
     *
     * @async
     * @param {Texture} texture - The texture.
     * @return {Promise} A Promise that resolves when the texture has been initialized.
     */
    async initTextureAsync(texture2) {
      if (this._initialized === false) await this.init();
      this._textures.updateTexture(texture2);
    }
    /**
     * Initializes the given texture. Useful for preloading a texture rather than waiting until first render
     * (which can cause noticeable lags due to decode and GPU upload overhead).
     *
     * This method can only be used if the renderer has been initialized.
     *
     * @param {Texture} texture - The texture.
     */
    initTexture(texture2) {
      if (this._initialized === false) {
        console.warn("THREE.Renderer: .initTexture() called before the backend is initialized. Try using .initTextureAsync() instead.");
      }
      this._textures.updateTexture(texture2);
    }
    /**
     * Copies the current bound framebuffer into the given texture.
     *
     * @param {FramebufferTexture} framebufferTexture - The texture.
     * @param {?Vector2|Vector4} [rectangle=null] - A two or four dimensional vector that defines the rectangular portion of the framebuffer that should be copied.
     */
    copyFramebufferToTexture(framebufferTexture, rectangle = null) {
      if (rectangle !== null) {
        if (rectangle.isVector2) {
          rectangle = _vector4.set(rectangle.x, rectangle.y, framebufferTexture.image.width, framebufferTexture.image.height).floor();
        } else if (rectangle.isVector4) {
          rectangle = _vector4.copy(rectangle).floor();
        } else {
          console.error("THREE.Renderer.copyFramebufferToTexture: Invalid rectangle.");
          return;
        }
      } else {
        rectangle = _vector4.set(0, 0, framebufferTexture.image.width, framebufferTexture.image.height);
      }
      let renderContext = this._currentRenderContext;
      let renderTarget;
      if (renderContext !== null) {
        renderTarget = renderContext.renderTarget;
      } else {
        renderTarget = this._renderTarget || this._getFrameBufferTarget();
        if (renderTarget !== null) {
          this._textures.updateRenderTarget(renderTarget);
          renderContext = this._textures.get(renderTarget);
        }
      }
      this._textures.updateTexture(framebufferTexture, { renderTarget });
      this.backend.copyFramebufferToTexture(framebufferTexture, renderContext, rectangle);
    }
    /**
     * Copies data of the given source texture into a destination texture.
     *
     * @param {Texture} srcTexture - The source texture.
     * @param {Texture} dstTexture - The destination texture.
     * @param {Box2|Box3} [srcRegion=null] - A bounding box which describes the source region. Can be two or three-dimensional.
     * @param {Vector2|Vector3} [dstPosition=null] - A vector that represents the origin of the destination region. Can be two or three-dimensional.
     * @param {number} [srcLevel=0] - The source mip level to copy from.
     * @param {number} [dstLevel=0] - The destination mip level to copy to.
     */
    copyTextureToTexture(srcTexture, dstTexture, srcRegion = null, dstPosition = null, srcLevel = 0, dstLevel = 0) {
      this._textures.updateTexture(srcTexture);
      this._textures.updateTexture(dstTexture);
      this.backend.copyTextureToTexture(srcTexture, dstTexture, srcRegion, dstPosition, srcLevel, dstLevel);
    }
    /**
     * Reads pixel data from the given render target.
     *
     * @async
     * @param {RenderTarget} renderTarget - The render target to read from.
     * @param {number} x - The `x` coordinate of the copy region's origin.
     * @param {number} y - The `y` coordinate of the copy region's origin.
     * @param {number} width - The width of the copy region.
     * @param {number} height - The height of the copy region.
     * @param {number} [textureIndex=0] - The texture index of a MRT render target.
     * @param {number} [faceIndex=0] - The active cube face index.
     * @return {Promise<TypedArray>} A Promise that resolves when the read has been finished. The resolve provides the read data as a typed array.
     */
    async readRenderTargetPixelsAsync(renderTarget, x, y, width, height, textureIndex = 0, faceIndex = 0) {
      return this.backend.copyTextureToBuffer(renderTarget.textures[textureIndex], x, y, width, height, faceIndex);
    }
    /**
     * Analyzes the given 3D object's hierarchy and builds render lists from the
     * processed hierarchy.
     *
     * @param {Object3D} object - The 3D object to process (usually a scene).
     * @param {Camera} camera - The camera the object is rendered with.
     * @param {number} groupOrder - The group order is derived from the `renderOrder` of groups and is used to group 3D objects within groups.
     * @param {RenderList} renderList - The current render list.
     * @param {ClippingContext} clippingContext - The current clipping context.
     */
    _projectObject(object, camera, groupOrder, renderList, clippingContext) {
      if (object.visible === false) return;
      const visible = object.layers.test(camera.layers);
      if (visible) {
        if (object.isGroup) {
          groupOrder = object.renderOrder;
          if (object.isClippingGroup && object.enabled) clippingContext = clippingContext.getGroupContext(object);
        } else if (object.isLOD) {
          if (object.autoUpdate === true) object.update(camera);
        } else if (object.isLight) {
          renderList.pushLight(object);
        } else if (object.isSprite) {
          const frustum = camera.isArrayCamera ? _frustumArray : _frustum;
          if (!object.frustumCulled || frustum.intersectsSprite(object, camera)) {
            if (this.sortObjects === true) {
              _vector4.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix2);
            }
            const { geometry, material: material2 } = object;
            if (material2.visible) {
              renderList.push(object, geometry, material2, groupOrder, _vector4.z, null, clippingContext);
            }
          }
        } else if (object.isLineLoop) {
          console.error("THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.");
        } else if (object.isMesh || object.isLine || object.isPoints) {
          const frustum = camera.isArrayCamera ? _frustumArray : _frustum;
          if (!object.frustumCulled || frustum.intersectsObject(object, camera)) {
            const { geometry, material: material2 } = object;
            if (this.sortObjects === true) {
              if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
              _vector4.copy(geometry.boundingSphere.center).applyMatrix4(object.matrixWorld).applyMatrix4(_projScreenMatrix2);
            }
            if (Array.isArray(material2)) {
              const groups = geometry.groups;
              for (let i = 0, l = groups.length; i < l; i++) {
                const group = groups[i];
                const groupMaterial = material2[group.materialIndex];
                if (groupMaterial && groupMaterial.visible) {
                  renderList.push(object, geometry, groupMaterial, groupOrder, _vector4.z, group, clippingContext);
                }
              }
            } else if (material2.visible) {
              renderList.push(object, geometry, material2, groupOrder, _vector4.z, null, clippingContext);
            }
          }
        }
      }
      if (object.isBundleGroup === true && this.backend.beginBundle !== void 0) {
        const baseRenderList = renderList;
        renderList = this._renderLists.get(object, camera);
        renderList.begin();
        baseRenderList.pushBundle({
          bundleGroup: object,
          camera,
          renderList
        });
        renderList.finish();
      }
      const children = object.children;
      for (let i = 0, l = children.length; i < l; i++) {
        this._projectObject(children[i], camera, groupOrder, renderList, clippingContext);
      }
    }
    /**
     * Renders the given render bundles.
     *
     * @private
     * @param {Array<Object>} bundles - Array with render bundle data.
     * @param {Scene} sceneRef - The scene the render bundles belong to.
     * @param {LightsNode} lightsNode - The current lights node.
     */
    _renderBundles(bundles, sceneRef, lightsNode) {
      for (const bundle of bundles) {
        this._renderBundle(bundle, sceneRef, lightsNode);
      }
    }
    /**
     * Renders the transparent objects from the given render lists.
     *
     * @private
     * @param {Array<Object>} renderList - The transparent render list.
     * @param {Array<Object>} doublePassList - The list of transparent objects which require a double pass (e.g. because of transmission).
     * @param {Camera} camera - The camera the render list should be rendered with.
     * @param {Scene} scene - The scene the render list belongs to.
     * @param {LightsNode} lightsNode - The current lights node.
     */
    _renderTransparents(renderList, doublePassList, camera, scene, lightsNode) {
      if (doublePassList.length > 0) {
        for (const { material: material2 } of doublePassList) {
          material2.side = BackSide;
        }
        this._renderObjects(doublePassList, camera, scene, lightsNode, "backSide");
        for (const { material: material2 } of doublePassList) {
          material2.side = FrontSide;
        }
        this._renderObjects(renderList, camera, scene, lightsNode);
        for (const { material: material2 } of doublePassList) {
          material2.side = DoubleSide;
        }
      } else {
        this._renderObjects(renderList, camera, scene, lightsNode);
      }
    }
    /**
     * Renders the objects from the given render list.
     *
     * @private
     * @param {Array<Object>} renderList - The render list.
     * @param {Camera} camera - The camera the render list should be rendered with.
     * @param {Scene} scene - The scene the render list belongs to.
     * @param {LightsNode} lightsNode - The current lights node.
     * @param {?string} [passId=null] - An optional ID for identifying the pass.
     */
    _renderObjects(renderList, camera, scene, lightsNode, passId = null) {
      for (let i = 0, il = renderList.length; i < il; i++) {
        const { object, geometry, material: material2, group, clippingContext } = renderList[i];
        this._currentRenderObjectFunction(object, scene, camera, geometry, material2, group, lightsNode, clippingContext, passId);
      }
    }
    /**
     * This method represents the default render object function that manages the render lifecycle
     * of the object.
     *
     * @param {Object3D} object - The 3D object.
     * @param {Scene} scene - The scene the 3D object belongs to.
     * @param {Camera} camera - The camera the object should be rendered with.
     * @param {BufferGeometry} geometry - The object's geometry.
     * @param {Material} material - The object's material.
     * @param {?Object} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.
     * @param {LightsNode} lightsNode - The current lights node.
     * @param {?ClippingContext} clippingContext - The clipping context.
     * @param {?string} [passId=null] - An optional ID for identifying the pass.
     */
    renderObject(object, scene, camera, geometry, material2, group, lightsNode, clippingContext = null, passId = null) {
      let overridePositionNode;
      let overrideColorNode;
      let overrideDepthNode;
      object.onBeforeRender(this, scene, camera, geometry, material2, group);
      if (material2.allowOverride === true && scene.overrideMaterial !== null) {
        const overrideMaterial = scene.overrideMaterial;
        if (material2.positionNode && material2.positionNode.isNode) {
          overridePositionNode = overrideMaterial.positionNode;
          overrideMaterial.positionNode = material2.positionNode;
        }
        overrideMaterial.alphaTest = material2.alphaTest;
        overrideMaterial.alphaMap = material2.alphaMap;
        overrideMaterial.transparent = material2.transparent || material2.transmission > 0;
        if (overrideMaterial.isShadowPassMaterial) {
          overrideMaterial.side = material2.shadowSide === null ? material2.side : material2.shadowSide;
          if (material2.depthNode && material2.depthNode.isNode) {
            overrideDepthNode = overrideMaterial.depthNode;
            overrideMaterial.depthNode = material2.depthNode;
          }
          if (material2.castShadowNode && material2.castShadowNode.isNode) {
            overrideColorNode = overrideMaterial.colorNode;
            overrideMaterial.colorNode = material2.castShadowNode;
          }
          if (material2.castShadowPositionNode && material2.castShadowPositionNode.isNode) {
            overridePositionNode = overrideMaterial.positionNode;
            overrideMaterial.positionNode = material2.castShadowPositionNode;
          }
        }
        material2 = overrideMaterial;
      }
      if (material2.transparent === true && material2.side === DoubleSide && material2.forceSinglePass === false) {
        material2.side = BackSide;
        this._handleObjectFunction(object, material2, scene, camera, lightsNode, group, clippingContext, "backSide");
        material2.side = FrontSide;
        this._handleObjectFunction(object, material2, scene, camera, lightsNode, group, clippingContext, passId);
        material2.side = DoubleSide;
      } else {
        this._handleObjectFunction(object, material2, scene, camera, lightsNode, group, clippingContext, passId);
      }
      if (overridePositionNode !== void 0) {
        scene.overrideMaterial.positionNode = overridePositionNode;
      }
      if (overrideDepthNode !== void 0) {
        scene.overrideMaterial.depthNode = overrideDepthNode;
      }
      if (overrideColorNode !== void 0) {
        scene.overrideMaterial.colorNode = overrideColorNode;
      }
      object.onAfterRender(this, scene, camera, geometry, material2, group);
    }
    /**
     * This method represents the default `_handleObjectFunction` implementation which creates
     * a render object from the given data and performs the draw command with the selected backend.
     *
     * @private
     * @param {Object3D} object - The 3D object.
     * @param {Material} material - The object's material.
     * @param {Scene} scene - The scene the 3D object belongs to.
     * @param {Camera} camera - The camera the object should be rendered with.
     * @param {LightsNode} lightsNode - The current lights node.
     * @param {?{start: number, count: number}} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.
     * @param {ClippingContext} clippingContext - The clipping context.
     * @param {?string} [passId=null] - An optional ID for identifying the pass.
     */
    _renderObjectDirect(object, material2, scene, camera, lightsNode, group, clippingContext, passId) {
      const renderObject = this._objects.get(object, material2, scene, camera, lightsNode, this._currentRenderContext, clippingContext, passId);
      renderObject.drawRange = object.geometry.drawRange;
      renderObject.group = group;
      const needsRefresh = this._nodes.needsRefresh(renderObject);
      if (needsRefresh) {
        this._nodes.updateBefore(renderObject);
        this._geometries.updateForRender(renderObject);
        this._nodes.updateForRender(renderObject);
        this._bindings.updateForRender(renderObject);
      }
      this._pipelines.updateForRender(renderObject);
      if (this._currentRenderBundle !== null) {
        const renderBundleData = this.backend.get(this._currentRenderBundle);
        renderBundleData.renderObjects.push(renderObject);
        renderObject.bundle = this._currentRenderBundle.bundleGroup;
      }
      this.backend.draw(renderObject, this.info);
      if (needsRefresh) this._nodes.updateAfter(renderObject);
    }
    /**
     * A different implementation for `_handleObjectFunction` which only makes sure the object is ready for rendering.
     * Used in `compileAsync()`.
     *
     * @private
     * @param {Object3D} object - The 3D object.
     * @param {Material} material - The object's material.
     * @param {Scene} scene - The scene the 3D object belongs to.
     * @param {Camera} camera - The camera the object should be rendered with.
     * @param {LightsNode} lightsNode - The current lights node.
     * @param {?{start: number, count: number}} group - Only relevant for objects using multiple materials. This represents a group entry from the respective `BufferGeometry`.
     * @param {ClippingContext} clippingContext - The clipping context.
     * @param {?string} [passId=null] - An optional ID for identifying the pass.
     */
    _createObjectPipeline(object, material2, scene, camera, lightsNode, group, clippingContext, passId) {
      const renderObject = this._objects.get(object, material2, scene, camera, lightsNode, this._currentRenderContext, clippingContext, passId);
      renderObject.drawRange = object.geometry.drawRange;
      renderObject.group = group;
      this._nodes.updateBefore(renderObject);
      this._geometries.updateForRender(renderObject);
      this._nodes.updateForRender(renderObject);
      this._bindings.updateForRender(renderObject);
      this._pipelines.getForRender(renderObject, this._compilationPromises);
      this._nodes.updateAfter(renderObject);
    }
    /**
     * Alias for `compileAsync()`.
     *
     * @method
     * @param {Object3D} scene - The scene or 3D object to precompile.
     * @param {Camera} camera - The camera that is used to render the scene.
     * @param {Scene} targetScene - If the first argument is a 3D object, this parameter must represent the scene the 3D object is going to be added.
     * @return {function(Object3D, Camera, ?Scene): Promise|undefined} A Promise that resolves when the compile has been finished.
     */
    get compile() {
      return this.compileAsync;
    }
  };
  var Binding = class {
    /**
     * Constructs a new binding.
     *
     * @param {string} [name=''] - The binding's name.
     */
    constructor(name2 = "") {
      this.name = name2;
      this.visibility = 0;
    }
    /**
     * Makes sure binding's resource is visible for the given shader stage.
     *
     * @param {number} visibility - The shader stage.
     */
    setVisibility(visibility) {
      this.visibility |= visibility;
    }
    /**
     * Clones the binding.
     *
     * @return {Binding} The cloned binding.
     */
    clone() {
      return Object.assign(new this.constructor(), this);
    }
  };
  function getFloatLength(floatLength) {
    return floatLength + (GPU_CHUNK_BYTES - floatLength % GPU_CHUNK_BYTES) % GPU_CHUNK_BYTES;
  }
  var Buffer = class extends Binding {
    /**
     * Constructs a new buffer.
     *
     * @param {string} name - The buffer's name.
     * @param {TypedArray} [buffer=null] - The buffer.
     */
    constructor(name2, buffer2 = null) {
      super(name2);
      this.isBuffer = true;
      this.bytesPerElement = Float32Array.BYTES_PER_ELEMENT;
      this._buffer = buffer2;
    }
    /**
     * The buffer's byte length.
     *
     * @type {number}
     * @readonly
     */
    get byteLength() {
      return getFloatLength(this._buffer.byteLength);
    }
    /**
     * A reference to the internal buffer.
     *
     * @type {Float32Array}
     * @readonly
     */
    get buffer() {
      return this._buffer;
    }
    /**
     * Updates the binding.
     *
     * @return {boolean} Whether the buffer has been updated and must be
     * uploaded to the GPU.
     */
    update() {
      return true;
    }
  };
  var UniformBuffer = class extends Buffer {
    /**
     * Constructs a new uniform buffer.
     *
     * @param {string} name - The buffer's name.
     * @param {TypedArray} [buffer=null] - The buffer.
     */
    constructor(name2, buffer2 = null) {
      super(name2, buffer2);
      this.isUniformBuffer = true;
    }
  };
  var _id$4 = 0;
  var NodeUniformBuffer = class extends UniformBuffer {
    /**
     * Constructs a new node-based uniform buffer.
     *
     * @param {BufferNode} nodeUniform - The uniform buffer node.
     * @param {UniformGroupNode} groupNode - The uniform group node.
     */
    constructor(nodeUniform, groupNode) {
      super("UniformBuffer_" + _id$4++, nodeUniform ? nodeUniform.value : null);
      this.nodeUniform = nodeUniform;
      this.groupNode = groupNode;
    }
    /**
     * The uniform buffer.
     *
     * @type {Float32Array}
     */
    get buffer() {
      return this.nodeUniform.value;
    }
  };
  var UniformsGroup = class extends UniformBuffer {
    /**
     * Constructs a new uniforms group.
     *
     * @param {string} name - The group's name.
     */
    constructor(name2) {
      super(name2);
      this.isUniformsGroup = true;
      this._values = null;
      this.uniforms = [];
    }
    /**
     * Adds a uniform to this group.
     *
     * @param {Uniform} uniform - The uniform to add.
     * @return {UniformsGroup} A reference to this group.
     */
    addUniform(uniform2) {
      this.uniforms.push(uniform2);
      return this;
    }
    /**
     * Removes a uniform from this group.
     *
     * @param {Uniform} uniform - The uniform to remove.
     * @return {UniformsGroup} A reference to this group.
     */
    removeUniform(uniform2) {
      const index = this.uniforms.indexOf(uniform2);
      if (index !== -1) {
        this.uniforms.splice(index, 1);
      }
      return this;
    }
    /**
     * An array with the raw uniform values.
     *
     * @type {Array<number>}
     */
    get values() {
      if (this._values === null) {
        this._values = Array.from(this.buffer);
      }
      return this._values;
    }
    /**
     * A Float32 array buffer with the uniform values.
     *
     * @type {Float32Array}
     */
    get buffer() {
      let buffer2 = this._buffer;
      if (buffer2 === null) {
        const byteLength = this.byteLength;
        buffer2 = new Float32Array(new ArrayBuffer(byteLength));
        this._buffer = buffer2;
      }
      return buffer2;
    }
    /**
     * The byte length of the buffer with correct buffer alignment.
     *
     * @type {number}
     */
    get byteLength() {
      const bytesPerElement = this.bytesPerElement;
      let offset = 0;
      for (let i = 0, l = this.uniforms.length; i < l; i++) {
        const uniform2 = this.uniforms[i];
        const boundary = uniform2.boundary;
        const itemSize = uniform2.itemSize * bytesPerElement;
        const chunkOffset = offset % GPU_CHUNK_BYTES;
        const chunkPadding = chunkOffset % boundary;
        const chunkStart = chunkOffset + chunkPadding;
        offset += chunkPadding;
        if (chunkStart !== 0 && GPU_CHUNK_BYTES - chunkStart < itemSize) {
          offset += GPU_CHUNK_BYTES - chunkStart;
        }
        uniform2.offset = offset / bytesPerElement;
        offset += itemSize;
      }
      return Math.ceil(offset / GPU_CHUNK_BYTES) * GPU_CHUNK_BYTES;
    }
    /**
     * Updates this group by updating each uniform object of
     * the internal uniform list. The uniform objects check if their
     * values has actually changed so this method only returns
     * `true` if there is a real value change.
     *
     * @return {boolean} Whether the uniforms have been updated and
     * must be uploaded to the GPU.
     */
    update() {
      let updated = false;
      for (const uniform2 of this.uniforms) {
        if (this.updateByType(uniform2) === true) {
          updated = true;
        }
      }
      return updated;
    }
    /**
     * Updates a given uniform by calling an update method matching
     * the uniforms type.
     *
     * @param {Uniform} uniform - The uniform to update.
     * @return {boolean} Whether the uniform has been updated or not.
     */
    updateByType(uniform2) {
      if (uniform2.isNumberUniform) return this.updateNumber(uniform2);
      if (uniform2.isVector2Uniform) return this.updateVector2(uniform2);
      if (uniform2.isVector3Uniform) return this.updateVector3(uniform2);
      if (uniform2.isVector4Uniform) return this.updateVector4(uniform2);
      if (uniform2.isColorUniform) return this.updateColor(uniform2);
      if (uniform2.isMatrix3Uniform) return this.updateMatrix3(uniform2);
      if (uniform2.isMatrix4Uniform) return this.updateMatrix4(uniform2);
      console.error("THREE.WebGPUUniformsGroup: Unsupported uniform type.", uniform2);
    }
    /**
     * Updates a given Number uniform.
     *
     * @param {NumberUniform} uniform - The Number uniform.
     * @return {boolean} Whether the uniform has been updated or not.
     */
    updateNumber(uniform2) {
      let updated = false;
      const a = this.values;
      const v = uniform2.getValue();
      const offset = uniform2.offset;
      const type = uniform2.getType();
      if (a[offset] !== v) {
        const b = this._getBufferForType(type);
        b[offset] = a[offset] = v;
        updated = true;
      }
      return updated;
    }
    /**
     * Updates a given Vector2 uniform.
     *
     * @param {Vector2Uniform} uniform - The Vector2 uniform.
     * @return {boolean} Whether the uniform has been updated or not.
     */
    updateVector2(uniform2) {
      let updated = false;
      const a = this.values;
      const v = uniform2.getValue();
      const offset = uniform2.offset;
      const type = uniform2.getType();
      if (a[offset + 0] !== v.x || a[offset + 1] !== v.y) {
        const b = this._getBufferForType(type);
        b[offset + 0] = a[offset + 0] = v.x;
        b[offset + 1] = a[offset + 1] = v.y;
        updated = true;
      }
      return updated;
    }
    /**
     * Updates a given Vector3 uniform.
     *
     * @param {Vector3Uniform} uniform - The Vector3 uniform.
     * @return {boolean} Whether the uniform has been updated or not.
     */
    updateVector3(uniform2) {
      let updated = false;
      const a = this.values;
      const v = uniform2.getValue();
      const offset = uniform2.offset;
      const type = uniform2.getType();
      if (a[offset + 0] !== v.x || a[offset + 1] !== v.y || a[offset + 2] !== v.z) {
        const b = this._getBufferForType(type);
        b[offset + 0] = a[offset + 0] = v.x;
        b[offset + 1] = a[offset + 1] = v.y;
        b[offset + 2] = a[offset + 2] = v.z;
        updated = true;
      }
      return updated;
    }
    /**
     * Updates a given Vector4 uniform.
     *
     * @param {Vector4Uniform} uniform - The Vector4 uniform.
     * @return {boolean} Whether the uniform has been updated or not.
     */
    updateVector4(uniform2) {
      let updated = false;
      const a = this.values;
      const v = uniform2.getValue();
      const offset = uniform2.offset;
      const type = uniform2.getType();
      if (a[offset + 0] !== v.x || a[offset + 1] !== v.y || a[offset + 2] !== v.z || a[offset + 4] !== v.w) {
        const b = this._getBufferForType(type);
        b[offset + 0] = a[offset + 0] = v.x;
        b[offset + 1] = a[offset + 1] = v.y;
        b[offset + 2] = a[offset + 2] = v.z;
        b[offset + 3] = a[offset + 3] = v.w;
        updated = true;
      }
      return updated;
    }
    /**
     * Updates a given Color uniform.
     *
     * @param {ColorUniform} uniform - The Color uniform.
     * @return {boolean} Whether the uniform has been updated or not.
     */
    updateColor(uniform2) {
      let updated = false;
      const a = this.values;
      const c = uniform2.getValue();
      const offset = uniform2.offset;
      if (a[offset + 0] !== c.r || a[offset + 1] !== c.g || a[offset + 2] !== c.b) {
        const b = this.buffer;
        b[offset + 0] = a[offset + 0] = c.r;
        b[offset + 1] = a[offset + 1] = c.g;
        b[offset + 2] = a[offset + 2] = c.b;
        updated = true;
      }
      return updated;
    }
    /**
     * Updates a given Matrix3 uniform.
     *
     * @param {Matrix3Uniform} uniform - The Matrix3 uniform.
     * @return {boolean} Whether the uniform has been updated or not.
     */
    updateMatrix3(uniform2) {
      let updated = false;
      const a = this.values;
      const e = uniform2.getValue().elements;
      const offset = uniform2.offset;
      if (a[offset + 0] !== e[0] || a[offset + 1] !== e[1] || a[offset + 2] !== e[2] || a[offset + 4] !== e[3] || a[offset + 5] !== e[4] || a[offset + 6] !== e[5] || a[offset + 8] !== e[6] || a[offset + 9] !== e[7] || a[offset + 10] !== e[8]) {
        const b = this.buffer;
        b[offset + 0] = a[offset + 0] = e[0];
        b[offset + 1] = a[offset + 1] = e[1];
        b[offset + 2] = a[offset + 2] = e[2];
        b[offset + 4] = a[offset + 4] = e[3];
        b[offset + 5] = a[offset + 5] = e[4];
        b[offset + 6] = a[offset + 6] = e[5];
        b[offset + 8] = a[offset + 8] = e[6];
        b[offset + 9] = a[offset + 9] = e[7];
        b[offset + 10] = a[offset + 10] = e[8];
        updated = true;
      }
      return updated;
    }
    /**
     * Updates a given Matrix4 uniform.
     *
     * @param {Matrix4Uniform} uniform - The Matrix4 uniform.
     * @return {boolean} Whether the uniform has been updated or not.
     */
    updateMatrix4(uniform2) {
      let updated = false;
      const a = this.values;
      const e = uniform2.getValue().elements;
      const offset = uniform2.offset;
      if (arraysEqual(a, e, offset) === false) {
        const b = this.buffer;
        b.set(e, offset);
        setArray(a, e, offset);
        updated = true;
      }
      return updated;
    }
    /**
     * Returns a typed array that matches the given data type.
     *
     * @param {string} type - The data type.
     * @return {TypedArray} The typed array.
     */
    _getBufferForType(type) {
      if (type === "int" || type === "ivec2" || type === "ivec3" || type === "ivec4") return new Int32Array(this.buffer.buffer);
      if (type === "uint" || type === "uvec2" || type === "uvec3" || type === "uvec4") return new Uint32Array(this.buffer.buffer);
      return this.buffer;
    }
  };
  function setArray(a, b, offset) {
    for (let i = 0, l = b.length; i < l; i++) {
      a[offset + i] = b[i];
    }
  }
  function arraysEqual(a, b, offset) {
    for (let i = 0, l = b.length; i < l; i++) {
      if (a[offset + i] !== b[i]) return false;
    }
    return true;
  }
  var _id$3 = 0;
  var NodeUniformsGroup = class extends UniformsGroup {
    /**
     * Constructs a new node-based uniforms group.
     *
     * @param {string} name - The group's name.
     * @param {UniformGroupNode} groupNode - The uniform group node.
     */
    constructor(name2, groupNode) {
      super(name2);
      this.id = _id$3++;
      this.groupNode = groupNode;
      this.isNodeUniformsGroup = true;
    }
  };
  var _id$22 = 0;
  var SampledTexture = class extends Binding {
    /**
     * Constructs a new sampled texture.
     *
     * @param {string} name - The sampled texture's name.
     * @param {?Texture} texture - The texture this binding is referring to.
     */
    constructor(name2, texture2) {
      super(name2);
      this.id = _id$22++;
      this.texture = texture2;
      this.version = texture2 ? texture2.version : 0;
      this.store = false;
      this.generation = null;
      this.isSampledTexture = true;
    }
    /**
     * Returns `true` whether this binding requires an update for the
     * given generation.
     *
     * @param {number} generation - The generation.
     * @return {boolean} Whether an update is required or not.
     */
    needsBindingsUpdate(generation) {
      const { texture: texture2 } = this;
      if (generation !== this.generation) {
        this.generation = generation;
        return true;
      }
      return texture2.isVideoTexture;
    }
    /**
     * Updates the binding.
     *
     * @return {boolean} Whether the texture has been updated and must be
     * uploaded to the GPU.
     */
    update() {
      const { texture: texture2, version } = this;
      if (version !== texture2.version) {
        this.version = texture2.version;
        return true;
      }
      return false;
    }
  };
  var NodeSampledTexture = class extends SampledTexture {
    /**
     * Constructs a new node-based sampled texture.
     *
     * @param {string} name - The textures's name.
     * @param {TextureNode} textureNode - The texture node.
     * @param {UniformGroupNode} groupNode - The uniform group node.
     * @param {?string} [access=null] - The access type.
     */
    constructor(name2, textureNode, groupNode, access = null) {
      super(name2, textureNode ? textureNode.value : null);
      this.textureNode = textureNode;
      this.groupNode = groupNode;
      this.access = access;
    }
    /**
     * Overwrites the default to additionally check if the node value has changed.
     *
     * @param {number} generation - The generation.
     * @return {boolean} Whether an update is required or not.
     */
    needsBindingsUpdate(generation) {
      return this.textureNode.value !== this.texture || super.needsBindingsUpdate(generation);
    }
    /**
     * Updates the binding.
     *
     * @return {boolean} Whether the texture has been updated and must be
     * uploaded to the GPU.
     */
    update() {
      const { textureNode } = this;
      if (this.texture !== textureNode.value) {
        this.texture = textureNode.value;
        return true;
      }
      return super.update();
    }
  };
  var NodeSampledCubeTexture = class extends NodeSampledTexture {
    /**
     * Constructs a new node-based sampled cube texture.
     *
     * @param {string} name - The textures's name.
     * @param {TextureNode} textureNode - The texture node.
     * @param {UniformGroupNode} groupNode - The uniform group node.
     * @param {?string} [access=null] - The access type.
     */
    constructor(name2, textureNode, groupNode, access = null) {
      super(name2, textureNode, groupNode, access);
      this.isSampledCubeTexture = true;
    }
  };
  var NodeSampledTexture3D = class extends NodeSampledTexture {
    /**
     * Constructs a new node-based sampled 3D texture.
     *
     * @param {string} name - The textures's name.
     * @param {TextureNode} textureNode - The texture node.
     * @param {UniformGroupNode} groupNode - The uniform group node.
     * @param {?string} [access=null] - The access type.
     */
    constructor(name2, textureNode, groupNode, access = null) {
      super(name2, textureNode, groupNode, access);
      this.isSampledTexture3D = true;
    }
  };
  var glslMethods = {
    textureDimensions: "textureSize",
    equals: "equal"
  };
  var precisionLib = {
    low: "lowp",
    medium: "mediump",
    high: "highp"
  };
  var supports$1 = {
    swizzleAssign: true,
    storageBuffer: false
  };
  var interpolationTypeMap = {
    perspective: "smooth",
    linear: "noperspective"
  };
  var interpolationModeMap = {
    "centroid": "centroid",
    "flat first": "flat",
    "flat either": "flat"
  };
  var defaultPrecisions = `
precision highp float;
precision highp int;
precision highp sampler2D;
precision highp sampler3D;
precision highp samplerCube;
precision highp sampler2DArray;

precision highp usampler2D;
precision highp usampler3D;
precision highp usamplerCube;
precision highp usampler2DArray;

precision highp isampler2D;
precision highp isampler3D;
precision highp isamplerCube;
precision highp isampler2DArray;

precision lowp sampler2DShadow;
precision lowp sampler2DArrayShadow;
precision lowp samplerCubeShadow;
`;
  var GLSLNodeBuilder = class extends NodeBuilder2 {
    /**
     * Constructs a new GLSL node builder renderer.
     *
     * @param {Object3D} object - The 3D object.
     * @param {Renderer} renderer - The renderer.
     */
    constructor(object, renderer) {
      super(object, renderer, new GLSLNodeParser());
      this.uniformGroups = {};
      this.transforms = [];
      this.extensions = {};
      this.builtins = { vertex: [], fragment: [], compute: [] };
    }
    /**
     * Checks if the given texture requires a manual conversion to the working color space.
     *
     * @param {Texture} texture - The texture to check.
     * @return {boolean} Whether the given texture requires a conversion to working color space or not.
     */
    needsToWorkingColorSpace(texture2) {
      return texture2.isVideoTexture === true && texture2.colorSpace !== NoColorSpace;
    }
    /**
     * Returns the native shader method name for a given generic name.
     *
     * @param {string} method - The method name to resolve.
     * @return {string} The resolved GLSL method name.
     */
    getMethod(method) {
      return glslMethods[method] || method;
    }
    /**
     * Returns the output struct name. Not relevant for GLSL.
     *
     * @return {string}
     */
    getOutputStructName() {
      return "";
    }
    /**
     * Builds the given shader node.
     *
     * @param {ShaderNodeInternal} shaderNode - The shader node.
     * @return {string} The GLSL function code.
     */
    buildFunctionCode(shaderNode) {
      const layout = shaderNode.layout;
      const flowData = this.flowShaderNode(shaderNode);
      const parameters = [];
      for (const input of layout.inputs) {
        parameters.push(this.getType(input.type) + " " + input.name);
      }
      const code = `${this.getType(layout.type)} ${layout.name}( ${parameters.join(", ")} ) {

	${flowData.vars}

${flowData.code}
	return ${flowData.result};

}`;
      return code;
    }
    /**
     * Setups the Pixel Buffer Object (PBO) for the given storage
     * buffer node.
     *
     * @param {StorageBufferNode} storageBufferNode - The storage buffer node.
     */
    setupPBO(storageBufferNode) {
      const attribute2 = storageBufferNode.value;
      if (attribute2.pbo === void 0) {
        const originalArray = attribute2.array;
        const numElements = attribute2.count * attribute2.itemSize;
        const { itemSize } = attribute2;
        const isInteger = attribute2.array.constructor.name.toLowerCase().includes("int");
        let format = isInteger ? RedIntegerFormat : RedFormat;
        if (itemSize === 2) {
          format = isInteger ? RGIntegerFormat : RGFormat;
        } else if (itemSize === 3) {
          format = isInteger ? RGBIntegerFormat : RGBFormat;
        } else if (itemSize === 4) {
          format = isInteger ? RGBAIntegerFormat : RGBAFormat;
        }
        const typeMap = {
          Float32Array: FloatType,
          Uint8Array: UnsignedByteType,
          Uint16Array: UnsignedShortType,
          Uint32Array: UnsignedIntType,
          Int8Array: ByteType,
          Int16Array: ShortType,
          Int32Array: IntType,
          Uint8ClampedArray: UnsignedByteType
        };
        const width = Math.pow(2, Math.ceil(Math.log2(Math.sqrt(numElements / itemSize))));
        let height = Math.ceil(numElements / itemSize / width);
        if (width * height * itemSize < numElements) height++;
        const newSize = width * height * itemSize;
        const newArray = new originalArray.constructor(newSize);
        newArray.set(originalArray, 0);
        attribute2.array = newArray;
        const pboTexture = new DataTexture(attribute2.array, width, height, format, typeMap[attribute2.array.constructor.name] || FloatType);
        pboTexture.needsUpdate = true;
        pboTexture.isPBOTexture = true;
        const pbo = new TextureNode(pboTexture, null, null);
        pbo.setPrecision("high");
        attribute2.pboNode = pbo;
        attribute2.pbo = pbo.value;
        this.getUniformFromNode(attribute2.pboNode, "texture", this.shaderStage, this.context.label);
      }
    }
    /**
     * Returns a GLSL snippet that represents the property name of the given node.
     *
     * @param {Node} node - The node.
     * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
     * @return {string} The property name.
     */
    getPropertyName(node, shaderStage = this.shaderStage) {
      if (node.isNodeUniform && node.node.isTextureNode !== true && node.node.isBufferNode !== true) {
        return shaderStage.charAt(0) + "_" + node.name;
      }
      return super.getPropertyName(node, shaderStage);
    }
    /**
     * Setups the Pixel Buffer Object (PBO) for the given storage
     * buffer node.
     *
     * @param {StorageArrayElementNode} storageArrayElementNode - The storage array element node.
     * @return {string} The property name.
     */
    generatePBO(storageArrayElementNode) {
      const { node, indexNode } = storageArrayElementNode;
      const attribute2 = node.value;
      if (this.renderer.backend.has(attribute2)) {
        const attributeData = this.renderer.backend.get(attribute2);
        attributeData.pbo = attribute2.pbo;
      }
      const nodeUniform = this.getUniformFromNode(attribute2.pboNode, "texture", this.shaderStage, this.context.label);
      const textureName = this.getPropertyName(nodeUniform);
      this.increaseUsage(indexNode);
      const indexSnippet = indexNode.build(this, "uint");
      const elementNodeData = this.getDataFromNode(storageArrayElementNode);
      let propertyName2 = elementNodeData.propertyName;
      if (propertyName2 === void 0) {
        const nodeVar = this.getVarFromNode(storageArrayElementNode);
        propertyName2 = this.getPropertyName(nodeVar);
        const bufferNodeData = this.getDataFromNode(node);
        let propertySizeName = bufferNodeData.propertySizeName;
        if (propertySizeName === void 0) {
          propertySizeName = propertyName2 + "Size";
          this.getVarFromNode(node, propertySizeName, "uint");
          this.addLineFlowCode(`${propertySizeName} = uint( textureSize( ${textureName}, 0 ).x )`, storageArrayElementNode);
          bufferNodeData.propertySizeName = propertySizeName;
        }
        const { itemSize } = attribute2;
        const channel = "." + vectorComponents.join("").slice(0, itemSize);
        const uvSnippet = `ivec2(${indexSnippet} % ${propertySizeName}, ${indexSnippet} / ${propertySizeName})`;
        const snippet2 = this.generateTextureLoad(null, textureName, uvSnippet, null, "0");
        let prefix = "vec4";
        if (attribute2.pbo.type === UnsignedIntType) {
          prefix = "uvec4";
        } else if (attribute2.pbo.type === IntType) {
          prefix = "ivec4";
        }
        this.addLineFlowCode(`${propertyName2} = ${prefix}(${snippet2})${channel}`, storageArrayElementNode);
        elementNodeData.propertyName = propertyName2;
      }
      return propertyName2;
    }
    /**
     * Generates the GLSL snippet that reads a single texel from a texture without sampling or filtering.
     *
     * @param {Texture} texture - The texture.
     * @param {string} textureProperty - The name of the texture uniform in the shader.
     * @param {string} uvIndexSnippet - A GLSL snippet that represents texture coordinates used for sampling.
     * @param {?string} depthSnippet - A GLSL snippet that represents the 0-based texture array index to sample.
     * @param {string} [levelSnippet='0u'] - A GLSL snippet that represents the mip level, with level 0 containing a full size version of the texture.
     * @return {string} The GLSL snippet.
     */
    generateTextureLoad(texture2, textureProperty, uvIndexSnippet, depthSnippet, levelSnippet = "0") {
      if (depthSnippet) {
        return `texelFetch( ${textureProperty}, ivec3( ${uvIndexSnippet}, ${depthSnippet} ), ${levelSnippet} )`;
      } else {
        return `texelFetch( ${textureProperty}, ${uvIndexSnippet}, ${levelSnippet} )`;
      }
    }
    /**
     * Generates the GLSL snippet for sampling/loading the given texture.
     *
     * @param {Texture} texture - The texture.
     * @param {string} textureProperty - The name of the texture uniform in the shader.
     * @param {string} uvSnippet - A GLSL snippet that represents texture coordinates used for sampling.
     * @param {?string} depthSnippet -  A GLSL snippet that represents the 0-based texture array index to sample.
     * @return {string} The GLSL snippet.
     */
    generateTexture(texture2, textureProperty, uvSnippet, depthSnippet) {
      if (texture2.isDepthTexture) {
        if (depthSnippet) uvSnippet = `vec4( ${uvSnippet}, ${depthSnippet} )`;
        return `texture( ${textureProperty}, ${uvSnippet} ).x`;
      } else {
        if (depthSnippet) uvSnippet = `vec3( ${uvSnippet}, ${depthSnippet} )`;
        return `texture( ${textureProperty}, ${uvSnippet} )`;
      }
    }
    /**
     * Generates the GLSL snippet when sampling textures with explicit mip level.
     *
     * @param {Texture} texture - The texture.
     * @param {string} textureProperty - The name of the texture uniform in the shader.
     * @param {string} uvSnippet - A GLSL snippet that represents texture coordinates used for sampling.
     * @param {string} levelSnippet - A GLSL snippet that represents the mip level, with level 0 containing a full size version of the texture.
     * @return {string} The GLSL snippet.
     */
    generateTextureLevel(texture2, textureProperty, uvSnippet, levelSnippet) {
      return `textureLod( ${textureProperty}, ${uvSnippet}, ${levelSnippet} )`;
    }
    /**
     * Generates the GLSL snippet when sampling textures with a bias to the mip level.
     *
     * @param {Texture} texture - The texture.
     * @param {string} textureProperty - The name of the texture uniform in the shader.
     * @param {string} uvSnippet - A GLSL snippet that represents texture coordinates used for sampling.
     * @param {string} biasSnippet - A GLSL snippet that represents the bias to apply to the mip level before sampling.
     * @return {string} The GLSL snippet.
     */
    generateTextureBias(texture2, textureProperty, uvSnippet, biasSnippet) {
      return `texture( ${textureProperty}, ${uvSnippet}, ${biasSnippet} )`;
    }
    /**
     * Generates the GLSL snippet for sampling/loading the given texture using explicit gradients.
     *
     * @param {Texture} texture - The texture.
     * @param {string} textureProperty - The name of the texture uniform in the shader.
     * @param {string} uvSnippet - A GLSL snippet that represents texture coordinates used for sampling.
     * @param {Array<string>} gradSnippet - An array holding both gradient GLSL snippets.
     * @return {string} The GLSL snippet.
     */
    generateTextureGrad(texture2, textureProperty, uvSnippet, gradSnippet) {
      return `textureGrad( ${textureProperty}, ${uvSnippet}, ${gradSnippet[0]}, ${gradSnippet[1]} )`;
    }
    /**
     * Generates the GLSL snippet for sampling a depth texture and comparing the sampled depth values
     * against a reference value.
     *
     * @param {Texture} texture - The texture.
     * @param {string} textureProperty - The name of the texture uniform in the shader.
     * @param {string} uvSnippet - A GLSL snippet that represents texture coordinates used for sampling.
     * @param {string} compareSnippet -  A GLSL snippet that represents the reference value.
     * @param {?string} depthSnippet - A GLSL snippet that represents 0-based texture array index to sample.
     * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
     * @return {string} The GLSL snippet.
     */
    generateTextureCompare(texture2, textureProperty, uvSnippet, compareSnippet, depthSnippet, shaderStage = this.shaderStage) {
      if (shaderStage === "fragment") {
        if (depthSnippet) {
          return `texture( ${textureProperty}, vec4( ${uvSnippet}, ${depthSnippet}, ${compareSnippet} ) )`;
        }
        return `texture( ${textureProperty}, vec3( ${uvSnippet}, ${compareSnippet} ) )`;
      } else {
        console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${shaderStage} shader.`);
      }
    }
    /**
     * Returns the variables of the given shader stage as a GLSL string.
     *
     * @param {string} shaderStage - The shader stage.
     * @return {string} The GLSL snippet that defines the variables.
     */
    getVars(shaderStage) {
      const snippets2 = [];
      const vars = this.vars[shaderStage];
      if (vars !== void 0) {
        for (const variable of vars) {
          snippets2.push(`${this.getVar(variable.type, variable.name, variable.count)};`);
        }
      }
      return snippets2.join("\n	");
    }
    /**
     * Returns the uniforms of the given shader stage as a GLSL string.
     *
     * @param {string} shaderStage - The shader stage.
     * @return {string} The GLSL snippet that defines the uniforms.
     */
    getUniforms(shaderStage) {
      const uniforms = this.uniforms[shaderStage];
      const bindingSnippets = [];
      const uniformGroups = {};
      for (const uniform2 of uniforms) {
        let snippet2 = null;
        let group = false;
        if (uniform2.type === "texture" || uniform2.type === "texture3D") {
          const texture2 = uniform2.node.value;
          let typePrefix = "";
          if (texture2.isDataTexture === true || texture2.isData3DTexture === true) {
            if (texture2.type === UnsignedIntType) {
              typePrefix = "u";
            } else if (texture2.type === IntType) {
              typePrefix = "i";
            }
          }
          if (uniform2.type === "texture3D" && texture2.isArrayTexture === false) {
            snippet2 = `${typePrefix}sampler3D ${uniform2.name};`;
          } else if (texture2.compareFunction) {
            if (texture2.isArrayTexture === true) {
              snippet2 = `sampler2DArrayShadow ${uniform2.name};`;
            } else {
              snippet2 = `sampler2DShadow ${uniform2.name};`;
            }
          } else if (texture2.isArrayTexture === true || texture2.isDataArrayTexture === true || texture2.isCompressedArrayTexture === true) {
            snippet2 = `${typePrefix}sampler2DArray ${uniform2.name};`;
          } else {
            snippet2 = `${typePrefix}sampler2D ${uniform2.name};`;
          }
        } else if (uniform2.type === "cubeTexture") {
          snippet2 = `samplerCube ${uniform2.name};`;
        } else if (uniform2.type === "buffer") {
          const bufferNode = uniform2.node;
          const bufferType = this.getType(bufferNode.bufferType);
          const bufferCount = bufferNode.bufferCount;
          const bufferCountSnippet = bufferCount > 0 ? bufferCount : "";
          snippet2 = `${bufferNode.name} {
	${bufferType} ${uniform2.name}[${bufferCountSnippet}];
};
`;
        } else {
          const vectorType = this.getVectorType(uniform2.type);
          snippet2 = `${vectorType} ${this.getPropertyName(uniform2, shaderStage)};`;
          group = true;
        }
        const precision = uniform2.node.precision;
        if (precision !== null) {
          snippet2 = precisionLib[precision] + " " + snippet2;
        }
        if (group) {
          snippet2 = "	" + snippet2;
          const groupName = uniform2.groupNode.name;
          const groupSnippets = uniformGroups[groupName] || (uniformGroups[groupName] = []);
          groupSnippets.push(snippet2);
        } else {
          snippet2 = "uniform " + snippet2;
          bindingSnippets.push(snippet2);
        }
      }
      let output2 = "";
      for (const name2 in uniformGroups) {
        const groupSnippets = uniformGroups[name2];
        output2 += this._getGLSLUniformStruct(shaderStage + "_" + name2, groupSnippets.join("\n")) + "\n";
      }
      output2 += bindingSnippets.join("\n");
      return output2;
    }
    /**
     * Returns the type for a given buffer attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute.
     * @return {string} The type.
     */
    getTypeFromAttribute(attribute2) {
      let nodeType = super.getTypeFromAttribute(attribute2);
      if (/^[iu]/.test(nodeType) && attribute2.gpuType !== IntType) {
        let dataAttribute = attribute2;
        if (attribute2.isInterleavedBufferAttribute) dataAttribute = attribute2.data;
        const array2 = dataAttribute.array;
        if ((array2 instanceof Uint32Array || array2 instanceof Int32Array) === false) {
          nodeType = nodeType.slice(1);
        }
      }
      return nodeType;
    }
    /**
     * Returns the shader attributes of the given shader stage as a GLSL string.
     *
     * @param {string} shaderStage - The shader stage.
     * @return {string} The GLSL snippet that defines the shader attributes.
     */
    getAttributes(shaderStage) {
      let snippet2 = "";
      if (shaderStage === "vertex" || shaderStage === "compute") {
        const attributes = this.getAttributesArray();
        let location = 0;
        for (const attribute2 of attributes) {
          snippet2 += `layout( location = ${location++} ) in ${attribute2.type} ${attribute2.name};
`;
        }
      }
      return snippet2;
    }
    /**
     * Returns the members of the given struct type node as a GLSL string.
     *
     * @param {StructTypeNode} struct - The struct type node.
     * @return {string} The GLSL snippet that defines the struct members.
     */
    getStructMembers(struct) {
      const snippets2 = [];
      for (const member of struct.members) {
        snippets2.push(`	${member.type} ${member.name};`);
      }
      return snippets2.join("\n");
    }
    /**
     * Returns the structs of the given shader stage as a GLSL string.
     *
     * @param {string} shaderStage - The shader stage.
     * @return {string} The GLSL snippet that defines the structs.
     */
    getStructs(shaderStage) {
      const snippets2 = [];
      const structs = this.structs[shaderStage];
      const outputSnippet = [];
      for (const struct of structs) {
        if (struct.output) {
          for (const member of struct.members) {
            outputSnippet.push(`layout( location = ${member.index} ) out ${member.type} ${member.name};`);
          }
        } else {
          let snippet2 = "struct " + struct.name + " {\n";
          snippet2 += this.getStructMembers(struct);
          snippet2 += "\n};\n";
          snippets2.push(snippet2);
        }
      }
      if (outputSnippet.length === 0) {
        outputSnippet.push("layout( location = 0 ) out vec4 fragColor;");
      }
      return "\n" + outputSnippet.join("\n") + "\n\n" + snippets2.join("\n");
    }
    /**
     * Returns the varyings of the given shader stage as a GLSL string.
     *
     * @param {string} shaderStage - The shader stage.
     * @return {string} The GLSL snippet that defines the varyings.
     */
    getVaryings(shaderStage) {
      let snippet2 = "";
      const varyings = this.varyings;
      if (shaderStage === "vertex" || shaderStage === "compute") {
        for (const varying2 of varyings) {
          if (shaderStage === "compute") varying2.needsInterpolation = true;
          const type = this.getType(varying2.type);
          if (varying2.needsInterpolation) {
            if (varying2.interpolationType) {
              const interpolationType = interpolationTypeMap[varying2.interpolationType] || varying2.interpolationType;
              const sampling = interpolationModeMap[varying2.interpolationSampling] || "";
              snippet2 += `${interpolationType} ${sampling} out ${type} ${varying2.name};
`;
            } else {
              const flat = type.includes("int") || type.includes("uv") || type.includes("iv") ? "flat " : "";
              snippet2 += `${flat}out ${type} ${varying2.name};
`;
            }
          } else {
            snippet2 += `${type} ${varying2.name};
`;
          }
        }
      } else if (shaderStage === "fragment") {
        for (const varying2 of varyings) {
          if (varying2.needsInterpolation) {
            const type = this.getType(varying2.type);
            if (varying2.interpolationType) {
              const interpolationType = interpolationTypeMap[varying2.interpolationType] || varying2.interpolationType;
              const sampling = interpolationModeMap[varying2.interpolationSampling] || "";
              snippet2 += `${interpolationType} ${sampling} in ${type} ${varying2.name};
`;
            } else {
              const flat = type.includes("int") || type.includes("uv") || type.includes("iv") ? "flat " : "";
              snippet2 += `${flat}in ${type} ${varying2.name};
`;
            }
          }
        }
      }
      for (const builtin2 of this.builtins[shaderStage]) {
        snippet2 += `${builtin2};
`;
      }
      return snippet2;
    }
    /**
     * Returns the vertex index builtin.
     *
     * @return {string} The vertex index.
     */
    getVertexIndex() {
      return "uint( gl_VertexID )";
    }
    /**
     * Returns the instance index builtin.
     *
     * @return {string} The instance index.
     */
    getInstanceIndex() {
      return "uint( gl_InstanceID )";
    }
    /**
     * Returns the invocation local index builtin.
     *
     * @return {string} The invocation local index.
     */
    getInvocationLocalIndex() {
      const workgroupSize = this.object.workgroupSize;
      const size = workgroupSize.reduce((acc, curr) => acc * curr, 1);
      return `uint( gl_InstanceID ) % ${size}u`;
    }
    /**
     * Returns the draw index builtin.
     *
     * @return {?string} The drawIndex shader string. Returns `null` if `WEBGL_multi_draw` isn't supported by the device.
     */
    getDrawIndex() {
      const extensions = this.renderer.backend.extensions;
      if (extensions.has("WEBGL_multi_draw")) {
        return "uint( gl_DrawID )";
      }
      return null;
    }
    /**
     * Returns the front facing builtin.
     *
     * @return {string} The front facing builtin.
     */
    getFrontFacing() {
      return "gl_FrontFacing";
    }
    /**
     * Returns the frag coord builtin.
     *
     * @return {string} The frag coord builtin.
     */
    getFragCoord() {
      return "gl_FragCoord.xy";
    }
    /**
     * Returns the frag depth builtin.
     *
     * @return {string} The frag depth builtin.
     */
    getFragDepth() {
      return "gl_FragDepth";
    }
    /**
     * Enables the given extension.
     *
     * @param {string} name - The extension name.
     * @param {string} behavior - The extension behavior.
     * @param {string} [shaderStage=this.shaderStage] - The shader stage.
     */
    enableExtension(name2, behavior, shaderStage = this.shaderStage) {
      const map = this.extensions[shaderStage] || (this.extensions[shaderStage] = /* @__PURE__ */ new Map());
      if (map.has(name2) === false) {
        map.set(name2, {
          name: name2,
          behavior
        });
      }
    }
    /**
     * Returns the enabled extensions of the given shader stage as a GLSL string.
     *
     * @param {string} shaderStage - The shader stage.
     * @return {string} The GLSL snippet that defines the enabled extensions.
     */
    getExtensions(shaderStage) {
      const snippets2 = [];
      if (shaderStage === "vertex") {
        const ext = this.renderer.backend.extensions;
        const isBatchedMesh = this.object.isBatchedMesh;
        if (isBatchedMesh && ext.has("WEBGL_multi_draw")) {
          this.enableExtension("GL_ANGLE_multi_draw", "require", shaderStage);
        }
      }
      const extensions = this.extensions[shaderStage];
      if (extensions !== void 0) {
        for (const { name: name2, behavior } of extensions.values()) {
          snippets2.push(`#extension ${name2} : ${behavior}`);
        }
      }
      return snippets2.join("\n");
    }
    /**
     * Returns the clip distances builtin.
     *
     * @return {string} The clip distances builtin.
     */
    getClipDistance() {
      return "gl_ClipDistance";
    }
    /**
     * Whether the requested feature is available or not.
     *
     * @param {string} name - The requested feature.
     * @return {boolean} Whether the requested feature is supported or not.
     */
    isAvailable(name2) {
      let result = supports$1[name2];
      if (result === void 0) {
        let extensionName;
        result = false;
        switch (name2) {
          case "float32Filterable":
            extensionName = "OES_texture_float_linear";
            break;
          case "clipDistance":
            extensionName = "WEBGL_clip_cull_distance";
            break;
        }
        if (extensionName !== void 0) {
          const extensions = this.renderer.backend.extensions;
          if (extensions.has(extensionName)) {
            extensions.get(extensionName);
            result = true;
          }
        }
        supports$1[name2] = result;
      }
      return result;
    }
    /**
     * Whether to flip texture data along its vertical axis or not.
     *
     * @return {boolean} Returns always `true` in context of GLSL.
     */
    isFlipY() {
      return true;
    }
    /**
     * Enables hardware clipping.
     *
     * @param {string} planeCount - The clipping plane count.
     */
    enableHardwareClipping(planeCount) {
      this.enableExtension("GL_ANGLE_clip_cull_distance", "require");
      this.builtins["vertex"].push(`out float gl_ClipDistance[ ${planeCount} ]`);
    }
    /**
     * Enables multiview.
     */
    enableMultiview() {
      this.enableExtension("GL_OVR_multiview2", "require", "fragment");
      this.enableExtension("GL_OVR_multiview2", "require", "vertex");
      this.builtins["vertex"].push("layout(num_views = 2) in");
    }
    /**
     * Registers a transform in context of Transform Feedback.
     *
     * @param {string} varyingName - The varying name.
     * @param {AttributeNode} attributeNode - The attribute node.
     */
    registerTransform(varyingName, attributeNode) {
      this.transforms.push({ varyingName, attributeNode });
    }
    /**
     * Returns the transforms of the given shader stage as a GLSL string.
     *
     * @param {string} shaderStage - The shader stage.
     * @return {string} The GLSL snippet that defines the transforms.
     */
    getTransforms() {
      const transforms = this.transforms;
      let snippet2 = "";
      for (let i = 0; i < transforms.length; i++) {
        const transform = transforms[i];
        const attributeName = this.getPropertyName(transform.attributeNode);
        if (attributeName) snippet2 += `${transform.varyingName} = ${attributeName};
	`;
      }
      return snippet2;
    }
    /**
     * Returns a GLSL struct based on the given name and variables.
     *
     * @private
     * @param {string} name - The struct name.
     * @param {string} vars - The struct variables.
     * @return {string} The GLSL snippet representing a struct.
     */
    _getGLSLUniformStruct(name2, vars) {
      return `
layout( std140 ) uniform ${name2} {
${vars}
};`;
    }
    /**
     * Returns a GLSL vertex shader based on the given shader data.
     *
     * @private
     * @param {Object} shaderData - The shader data.
     * @return {string} The vertex shader.
     */
    _getGLSLVertexCode(shaderData) {
      return `#version 300 es

${this.getSignature()}

// extensions
${shaderData.extensions}

// precision
${defaultPrecisions}

// uniforms
${shaderData.uniforms}

// varyings
${shaderData.varyings}

// attributes
${shaderData.attributes}

// codes
${shaderData.codes}

void main() {

	// vars
	${shaderData.vars}

	// transforms
	${shaderData.transforms}

	// flow
	${shaderData.flow}

	gl_PointSize = 1.0;

}
`;
    }
    /**
     * Returns a GLSL fragment shader based on the given shader data.
     *
     * @private
     * @param {Object} shaderData - The shader data.
     * @return {string} The vertex shader.
     */
    _getGLSLFragmentCode(shaderData) {
      return `#version 300 es

${this.getSignature()}

// extensions
${shaderData.extensions}

// precision
${defaultPrecisions}

// uniforms
${shaderData.uniforms}

// varyings
${shaderData.varyings}

// codes
${shaderData.codes}

// structs
${shaderData.structs}

void main() {

	// vars
	${shaderData.vars}

	// flow
	${shaderData.flow}

}
`;
    }
    /**
     * Controls the code build of the shader stages.
     */
    buildCode() {
      const shadersData = this.material !== null ? { fragment: {}, vertex: {} } : { compute: {} };
      this.sortBindingGroups();
      for (const shaderStage in shadersData) {
        let flow = "// code\n\n";
        flow += this.flowCode[shaderStage];
        const flowNodes = this.flowNodes[shaderStage];
        const mainNode = flowNodes[flowNodes.length - 1];
        for (const node of flowNodes) {
          const flowSlotData = this.getFlowData(
            node
            /*, shaderStage*/
          );
          const slotName = node.name;
          if (slotName) {
            if (flow.length > 0) flow += "\n";
            flow += `	// flow -> ${slotName}
	`;
          }
          flow += `${flowSlotData.code}
	`;
          if (node === mainNode && shaderStage !== "compute") {
            flow += "// result\n	";
            if (shaderStage === "vertex") {
              flow += "gl_Position = ";
              flow += `${flowSlotData.result};`;
            } else if (shaderStage === "fragment") {
              if (!node.outputNode.isOutputStructNode) {
                flow += "fragColor = ";
                flow += `${flowSlotData.result};`;
              }
            }
          }
        }
        const stageData = shadersData[shaderStage];
        stageData.extensions = this.getExtensions(shaderStage);
        stageData.uniforms = this.getUniforms(shaderStage);
        stageData.attributes = this.getAttributes(shaderStage);
        stageData.varyings = this.getVaryings(shaderStage);
        stageData.vars = this.getVars(shaderStage);
        stageData.structs = this.getStructs(shaderStage);
        stageData.codes = this.getCodes(shaderStage);
        stageData.transforms = this.getTransforms(shaderStage);
        stageData.flow = flow;
      }
      if (this.material !== null) {
        this.vertexShader = this._getGLSLVertexCode(shadersData.vertex);
        this.fragmentShader = this._getGLSLFragmentCode(shadersData.fragment);
      } else {
        this.computeShader = this._getGLSLVertexCode(shadersData.compute);
      }
    }
    /**
     * This method is one of the more important ones since it's responsible
     * for generating a matching binding instance for the given uniform node.
     *
     * These bindings are later used in the renderer to create bind groups
     * and layouts.
     *
     * @param {UniformNode} node - The uniform node.
     * @param {string} type - The node data type.
     * @param {string} shaderStage - The shader stage.
     * @param {?string} [name=null] - An optional uniform name.
     * @return {NodeUniform} The node uniform object.
     */
    getUniformFromNode(node, type, shaderStage, name2 = null) {
      const uniformNode = super.getUniformFromNode(node, type, shaderStage, name2);
      const nodeData = this.getDataFromNode(node, shaderStage, this.globalCache);
      let uniformGPU = nodeData.uniformGPU;
      if (uniformGPU === void 0) {
        const group = node.groupNode;
        const groupName = group.name;
        const bindings = this.getBindGroupArray(groupName, shaderStage);
        if (type === "texture") {
          uniformGPU = new NodeSampledTexture(uniformNode.name, uniformNode.node, group);
          bindings.push(uniformGPU);
        } else if (type === "cubeTexture") {
          uniformGPU = new NodeSampledCubeTexture(uniformNode.name, uniformNode.node, group);
          bindings.push(uniformGPU);
        } else if (type === "texture3D") {
          uniformGPU = new NodeSampledTexture3D(uniformNode.name, uniformNode.node, group);
          bindings.push(uniformGPU);
        } else if (type === "buffer") {
          node.name = `NodeBuffer_${node.id}`;
          uniformNode.name = `buffer${node.id}`;
          const buffer2 = new NodeUniformBuffer(node, group);
          buffer2.name = node.name;
          bindings.push(buffer2);
          uniformGPU = buffer2;
        } else {
          const uniformsStage = this.uniformGroups[shaderStage] || (this.uniformGroups[shaderStage] = {});
          let uniformsGroup = uniformsStage[groupName];
          if (uniformsGroup === void 0) {
            uniformsGroup = new NodeUniformsGroup(shaderStage + "_" + groupName, group);
            uniformsStage[groupName] = uniformsGroup;
            bindings.push(uniformsGroup);
          }
          uniformGPU = this.getNodeUniform(uniformNode, type);
          uniformsGroup.addUniform(uniformGPU);
        }
        nodeData.uniformGPU = uniformGPU;
      }
      return uniformNode;
    }
  };
  var _vector22 = null;
  var _color4 = null;
  var Backend = class {
    /**
     * Constructs a new backend.
     *
     * @param {Object} parameters - An object holding parameters for the backend.
     */
    constructor(parameters = {}) {
      this.parameters = Object.assign({}, parameters);
      this.data = /* @__PURE__ */ new WeakMap();
      this.renderer = null;
      this.domElement = null;
      this.timestampQueryPool = {
        "render": null,
        "compute": null
      };
      this.trackTimestamp = parameters.trackTimestamp === true;
    }
    /**
     * Initializes the backend so it is ready for usage. Concrete backends
     * are supposed to implement their rendering context creation and related
     * operations in this method.
     *
     * @async
     * @param {Renderer} renderer - The renderer.
     * @return {Promise} A Promise that resolves when the backend has been initialized.
     */
    async init(renderer) {
      this.renderer = renderer;
    }
    /**
     * The coordinate system of the backend.
     *
     * @abstract
     * @type {number}
     * @readonly
     */
    get coordinateSystem() {
    }
    // render context
    /**
     * This method is executed at the beginning of a render call and
     * can be used by the backend to prepare the state for upcoming
     * draw calls.
     *
     * @abstract
     * @param {RenderContext} renderContext - The render context.
     */
    beginRender() {
    }
    /**
     * This method is executed at the end of a render call and
     * can be used by the backend to finalize work after draw
     * calls.
     *
     * @abstract
     * @param {RenderContext} renderContext - The render context.
     */
    finishRender() {
    }
    /**
     * This method is executed at the beginning of a compute call and
     * can be used by the backend to prepare the state for upcoming
     * compute tasks.
     *
     * @abstract
     * @param {Node|Array<Node>} computeGroup - The compute node(s).
     */
    beginCompute() {
    }
    /**
     * This method is executed at the end of a compute call and
     * can be used by the backend to finalize work after compute
     * tasks.
     *
     * @abstract
     * @param {Node|Array<Node>} computeGroup - The compute node(s).
     */
    finishCompute() {
    }
    // render object
    /**
     * Executes a draw command for the given render object.
     *
     * @abstract
     * @param {RenderObject} renderObject - The render object to draw.
     * @param {Info} info - Holds a series of statistical information about the GPU memory and the rendering process.
     */
    draw() {
    }
    // compute node
    /**
     * Executes a compute command for the given compute node.
     *
     * @abstract
     * @param {Node|Array<Node>} computeGroup - The group of compute nodes of a compute call. Can be a single compute node.
     * @param {Node} computeNode - The compute node.
     * @param {Array<BindGroup>} bindings - The bindings.
     * @param {ComputePipeline} computePipeline - The compute pipeline.
     */
    compute() {
    }
    // program
    /**
     * Creates a shader program from the given programmable stage.
     *
     * @abstract
     * @param {ProgrammableStage} program - The programmable stage.
     */
    createProgram() {
    }
    /**
     * Destroys the shader program of the given programmable stage.
     *
     * @abstract
     * @param {ProgrammableStage} program - The programmable stage.
     */
    destroyProgram() {
    }
    // bindings
    /**
     * Creates bindings from the given bind group definition.
     *
     * @abstract
     * @param {BindGroup} bindGroup - The bind group.
     * @param {Array<BindGroup>} bindings - Array of bind groups.
     * @param {number} cacheIndex - The cache index.
     * @param {number} version - The version.
     */
    createBindings() {
    }
    /**
     * Updates the given bind group definition.
     *
     * @abstract
     * @param {BindGroup} bindGroup - The bind group.
     * @param {Array<BindGroup>} bindings - Array of bind groups.
     * @param {number} cacheIndex - The cache index.
     * @param {number} version - The version.
     */
    updateBindings() {
    }
    /**
     * Updates a buffer binding.
     *
     * @abstract
     * @param {Buffer} binding - The buffer binding to update.
     */
    updateBinding() {
    }
    // pipeline
    /**
     * Creates a render pipeline for the given render object.
     *
     * @abstract
     * @param {RenderObject} renderObject - The render object.
     * @param {Array<Promise>} promises - An array of compilation promises which are used in `compileAsync()`.
     */
    createRenderPipeline() {
    }
    /**
     * Creates a compute pipeline for the given compute node.
     *
     * @abstract
     * @param {ComputePipeline} computePipeline - The compute pipeline.
     * @param {Array<BindGroup>} bindings - The bindings.
     */
    createComputePipeline() {
    }
    // cache key
    /**
     * Returns `true` if the render pipeline requires an update.
     *
     * @abstract
     * @param {RenderObject} renderObject - The render object.
     * @return {boolean} Whether the render pipeline requires an update or not.
     */
    needsRenderUpdate() {
    }
    /**
     * Returns a cache key that is used to identify render pipelines.
     *
     * @abstract
     * @param {RenderObject} renderObject - The render object.
     * @return {string} The cache key.
     */
    getRenderCacheKey() {
    }
    // node builder
    /**
     * Returns a node builder for the given render object.
     *
     * @abstract
     * @param {RenderObject} renderObject - The render object.
     * @param {Renderer} renderer - The renderer.
     * @return {NodeBuilder} The node builder.
     */
    createNodeBuilder() {
    }
    // textures
    /**
     * Creates a GPU sampler for the given texture.
     *
     * @abstract
     * @param {Texture} texture - The texture to create the sampler for.
     */
    createSampler() {
    }
    /**
     * Destroys the GPU sampler for the given texture.
     *
     * @abstract
     * @param {Texture} texture - The texture to destroy the sampler for.
     */
    destroySampler() {
    }
    /**
     * Creates a default texture for the given texture that can be used
     * as a placeholder until the actual texture is ready for usage.
     *
     * @abstract
     * @param {Texture} texture - The texture to create a default texture for.
     */
    createDefaultTexture() {
    }
    /**
     * Defines a texture on the GPU for the given texture object.
     *
     * @abstract
     * @param {Texture} texture - The texture.
     * @param {Object} [options={}] - Optional configuration parameter.
     */
    createTexture() {
    }
    /**
     * Uploads the updated texture data to the GPU.
     *
     * @abstract
     * @param {Texture} texture - The texture.
     * @param {Object} [options={}] - Optional configuration parameter.
     */
    updateTexture() {
    }
    /**
     * Generates mipmaps for the given texture.
     *
     * @abstract
     * @param {Texture} texture - The texture.
     */
    generateMipmaps() {
    }
    /**
     * Destroys the GPU data for the given texture object.
     *
     * @abstract
     * @param {Texture} texture - The texture.
     */
    destroyTexture() {
    }
    /**
     * Returns texture data as a typed array.
     *
     * @abstract
     * @async
     * @param {Texture} texture - The texture to copy.
     * @param {number} x - The x coordinate of the copy origin.
     * @param {number} y - The y coordinate of the copy origin.
     * @param {number} width - The width of the copy.
     * @param {number} height - The height of the copy.
     * @param {number} faceIndex - The face index.
     * @return {Promise<TypedArray>} A Promise that resolves with a typed array when the copy operation has finished.
     */
    async copyTextureToBuffer() {
    }
    /**
     * Copies data of the given source texture to the given destination texture.
     *
     * @abstract
     * @param {Texture} srcTexture - The source texture.
     * @param {Texture} dstTexture - The destination texture.
     * @param {?(Box3|Box2)} [srcRegion=null] - The region of the source texture to copy.
     * @param {?(Vector2|Vector3)} [dstPosition=null] - The destination position of the copy.
     * @param {number} [srcLevel=0] - The source mip level to copy from.
     * @param {number} [dstLevel=0] - The destination mip level to copy to.
     */
    copyTextureToTexture() {
    }
    /**
    * Copies the current bound framebuffer to the given texture.
    *
    * @abstract
    * @param {Texture} texture - The destination texture.
    * @param {RenderContext} renderContext - The render context.
    * @param {Vector4} rectangle - A four dimensional vector defining the origin and dimension of the copy.
    */
    copyFramebufferToTexture() {
    }
    // attributes
    /**
     * Creates the GPU buffer of a shader attribute.
     *
     * @abstract
     * @param {BufferAttribute} attribute - The buffer attribute.
     */
    createAttribute() {
    }
    /**
     * Creates the GPU buffer of an indexed shader attribute.
     *
     * @abstract
     * @param {BufferAttribute} attribute - The indexed buffer attribute.
     */
    createIndexAttribute() {
    }
    /**
     * Creates the GPU buffer of a storage attribute.
     *
     * @abstract
     * @param {BufferAttribute} attribute - The buffer attribute.
     */
    createStorageAttribute() {
    }
    /**
     * Updates the GPU buffer of a shader attribute.
     *
     * @abstract
     * @param {BufferAttribute} attribute - The buffer attribute to update.
     */
    updateAttribute() {
    }
    /**
     * Destroys the GPU buffer of a shader attribute.
     *
     * @abstract
     * @param {BufferAttribute} attribute - The buffer attribute to destroy.
     */
    destroyAttribute() {
    }
    // canvas
    /**
     * Returns the backend's rendering context.
     *
     * @abstract
     * @return {Object} The rendering context.
     */
    getContext() {
    }
    /**
     * Backends can use this method if they have to run
     * logic when the renderer gets resized.
     *
     * @abstract
     */
    updateSize() {
    }
    /**
     * Updates the viewport with the values from the given render context.
     *
     * @abstract
     * @param {RenderContext} renderContext - The render context.
     */
    updateViewport() {
    }
    // utils
    /**
     * Returns `true` if the given 3D object is fully occluded by other
     * 3D objects in the scene. Backends must implement this method by using
     * a Occlusion Query API.
     *
     * @abstract
     * @param {RenderContext} renderContext - The render context.
     * @param {Object3D} object - The 3D object to test.
     * @return {boolean} Whether the 3D object is fully occluded or not.
     */
    isOccluded() {
    }
    /**
     * Resolves the time stamp for the given render context and type.
     *
     * @async
     * @abstract
     * @param {string} [type='render'] - The type of the time stamp.
     * @return {Promise<number>} A Promise that resolves with the time stamp.
     */
    async resolveTimestampsAsync(type = "render") {
      if (!this.trackTimestamp) {
        warnOnce("WebGPURenderer: Timestamp tracking is disabled.");
        return;
      }
      const queryPool = this.timestampQueryPool[type];
      if (!queryPool) {
        warnOnce(`WebGPURenderer: No timestamp query pool for type '${type}' found.`);
        return;
      }
      const duration = await queryPool.resolveQueriesAsync();
      this.renderer.info[type].timestamp = duration;
      return duration;
    }
    /**
     * Can be used to synchronize CPU operations with GPU tasks. So when this method is called,
     * the CPU waits for the GPU to complete its operation (e.g. a compute task).
     *
     * @async
     * @abstract
     * @return {Promise} A Promise that resolves when synchronization has been finished.
     */
    async waitForGPU() {
    }
    /**
     * This method performs a readback operation by moving buffer data from
     * a storage buffer attribute from the GPU to the CPU.
     *
     * @async
     * @param {StorageBufferAttribute} attribute - The storage buffer attribute.
     * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.
     */
    async getArrayBufferAsync() {
    }
    /**
     * Checks if the given feature is supported by the backend.
     *
     * @async
     * @abstract
     * @param {string} name - The feature's name.
     * @return {Promise<boolean>} A Promise that resolves with a bool that indicates whether the feature is supported or not.
     */
    async hasFeatureAsync() {
    }
    /**
     * Checks if the given feature is supported  by the backend.
     *
     * @abstract
     * @param {string} name - The feature's name.
     * @return {boolean} Whether the feature is supported or not.
     */
    hasFeature() {
    }
    /**
     * Returns the maximum anisotropy texture filtering value.
     *
     * @abstract
     * @return {number} The maximum anisotropy texture filtering value.
     */
    getMaxAnisotropy() {
    }
    /**
     * Returns the drawing buffer size.
     *
     * @return {Vector2} The drawing buffer size.
     */
    getDrawingBufferSize() {
      _vector22 = _vector22 || new Vector2();
      return this.renderer.getDrawingBufferSize(_vector22);
    }
    /**
     * Defines the scissor test.
     *
     * @abstract
     * @param {boolean} boolean - Whether the scissor test should be enabled or not.
     */
    setScissorTest() {
    }
    /**
     * Returns the clear color and alpha into a single
     * color object.
     *
     * @return {Color4} The clear color.
     */
    getClearColor() {
      const renderer = this.renderer;
      _color4 = _color4 || new Color4();
      renderer.getClearColor(_color4);
      _color4.getRGB(_color4);
      return _color4;
    }
    /**
     * Returns the DOM element. If no DOM element exists, the backend
     * creates a new one.
     *
     * @return {HTMLCanvasElement} The DOM element.
     */
    getDomElement() {
      let domElement = this.domElement;
      if (domElement === null) {
        domElement = this.parameters.canvas !== void 0 ? this.parameters.canvas : createCanvasElement();
        if ("setAttribute" in domElement) domElement.setAttribute("data-engine", `three.js r${REVISION} webgpu`);
        this.domElement = domElement;
      }
      return domElement;
    }
    /**
     * Sets a dictionary for the given object into the
     * internal data structure.
     *
     * @param {Object} object - The object.
     * @param {Object} value - The dictionary to set.
     */
    set(object, value) {
      this.data.set(object, value);
    }
    /**
     * Returns the dictionary for the given object.
     *
     * @param {Object} object - The object.
     * @return {Object} The object's dictionary.
     */
    get(object) {
      let map = this.data.get(object);
      if (map === void 0) {
        map = {};
        this.data.set(object, map);
      }
      return map;
    }
    /**
     * Checks if the given object has a dictionary
     * with data defined.
     *
     * @param {Object} object - The object.
     * @return {boolean} Whether a dictionary for the given object as been defined or not.
     */
    has(object) {
      return this.data.has(object);
    }
    /**
     * Deletes an object from the internal data structure.
     *
     * @param {Object} object - The object to delete.
     */
    delete(object) {
      this.data.delete(object);
    }
    /**
     * Frees internal resources.
     *
     * @abstract
     */
    dispose() {
    }
  };
  var _id$12 = 0;
  var DualAttributeData = class {
    constructor(attributeData, dualBuffer) {
      this.buffers = [attributeData.bufferGPU, dualBuffer];
      this.type = attributeData.type;
      this.bufferType = attributeData.bufferType;
      this.pbo = attributeData.pbo;
      this.byteLength = attributeData.byteLength;
      this.bytesPerElement = attributeData.BYTES_PER_ELEMENT;
      this.version = attributeData.version;
      this.isInteger = attributeData.isInteger;
      this.activeBufferIndex = 0;
      this.baseId = attributeData.id;
    }
    get id() {
      return `${this.baseId}|${this.activeBufferIndex}`;
    }
    get bufferGPU() {
      return this.buffers[this.activeBufferIndex];
    }
    get transformBuffer() {
      return this.buffers[this.activeBufferIndex ^ 1];
    }
    switchBuffers() {
      this.activeBufferIndex ^= 1;
    }
  };
  var WebGLAttributeUtils = class {
    /**
     * Constructs a new utility object.
     *
     * @param {WebGLBackend} backend - The WebGL 2 backend.
     */
    constructor(backend) {
      this.backend = backend;
    }
    /**
     * Creates the GPU buffer for the given buffer attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute.
     * @param {GLenum } bufferType - A flag that indicates the buffer type and thus binding point target.
     */
    createAttribute(attribute2, bufferType) {
      const backend = this.backend;
      const { gl } = backend;
      const array2 = attribute2.array;
      const usage = attribute2.usage || gl.STATIC_DRAW;
      const bufferAttribute2 = attribute2.isInterleavedBufferAttribute ? attribute2.data : attribute2;
      const bufferData = backend.get(bufferAttribute2);
      let bufferGPU = bufferData.bufferGPU;
      if (bufferGPU === void 0) {
        bufferGPU = this._createBuffer(gl, bufferType, array2, usage);
        bufferData.bufferGPU = bufferGPU;
        bufferData.bufferType = bufferType;
        bufferData.version = bufferAttribute2.version;
      }
      let type;
      if (array2 instanceof Float32Array) {
        type = gl.FLOAT;
      } else if (array2 instanceof Uint16Array) {
        if (attribute2.isFloat16BufferAttribute) {
          type = gl.HALF_FLOAT;
        } else {
          type = gl.UNSIGNED_SHORT;
        }
      } else if (array2 instanceof Int16Array) {
        type = gl.SHORT;
      } else if (array2 instanceof Uint32Array) {
        type = gl.UNSIGNED_INT;
      } else if (array2 instanceof Int32Array) {
        type = gl.INT;
      } else if (array2 instanceof Int8Array) {
        type = gl.BYTE;
      } else if (array2 instanceof Uint8Array) {
        type = gl.UNSIGNED_BYTE;
      } else if (array2 instanceof Uint8ClampedArray) {
        type = gl.UNSIGNED_BYTE;
      } else {
        throw new Error("THREE.WebGLBackend: Unsupported buffer data format: " + array2);
      }
      let attributeData = {
        bufferGPU,
        bufferType,
        type,
        byteLength: array2.byteLength,
        bytesPerElement: array2.BYTES_PER_ELEMENT,
        version: attribute2.version,
        pbo: attribute2.pbo,
        isInteger: type === gl.INT || type === gl.UNSIGNED_INT || attribute2.gpuType === IntType,
        id: _id$12++
      };
      if (attribute2.isStorageBufferAttribute || attribute2.isStorageInstancedBufferAttribute) {
        const bufferGPUDual = this._createBuffer(gl, bufferType, array2, usage);
        attributeData = new DualAttributeData(attributeData, bufferGPUDual);
      }
      backend.set(attribute2, attributeData);
    }
    /**
     * Updates the GPU buffer of the given buffer attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute.
     */
    updateAttribute(attribute2) {
      const backend = this.backend;
      const { gl } = backend;
      const array2 = attribute2.array;
      const bufferAttribute2 = attribute2.isInterleavedBufferAttribute ? attribute2.data : attribute2;
      const bufferData = backend.get(bufferAttribute2);
      const bufferType = bufferData.bufferType;
      const updateRanges = attribute2.isInterleavedBufferAttribute ? attribute2.data.updateRanges : attribute2.updateRanges;
      gl.bindBuffer(bufferType, bufferData.bufferGPU);
      if (updateRanges.length === 0) {
        gl.bufferSubData(bufferType, 0, array2);
      } else {
        for (let i = 0, l = updateRanges.length; i < l; i++) {
          const range = updateRanges[i];
          gl.bufferSubData(
            bufferType,
            range.start * array2.BYTES_PER_ELEMENT,
            array2,
            range.start,
            range.count
          );
        }
        bufferAttribute2.clearUpdateRanges();
      }
      gl.bindBuffer(bufferType, null);
      bufferData.version = bufferAttribute2.version;
    }
    /**
     * Destroys the GPU buffer of the given buffer attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute.
     */
    destroyAttribute(attribute2) {
      const backend = this.backend;
      const { gl } = backend;
      if (attribute2.isInterleavedBufferAttribute) {
        backend.delete(attribute2.data);
      }
      const attributeData = backend.get(attribute2);
      gl.deleteBuffer(attributeData.bufferGPU);
      backend.delete(attribute2);
    }
    /**
     * This method performs a readback operation by moving buffer data from
     * a storage buffer attribute from the GPU to the CPU.
     *
     * @async
     * @param {StorageBufferAttribute} attribute - The storage buffer attribute.
     * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.
     */
    async getArrayBufferAsync(attribute2) {
      const backend = this.backend;
      const { gl } = backend;
      const bufferAttribute2 = attribute2.isInterleavedBufferAttribute ? attribute2.data : attribute2;
      const { bufferGPU } = backend.get(bufferAttribute2);
      const array2 = attribute2.array;
      const byteLength = array2.byteLength;
      gl.bindBuffer(gl.COPY_READ_BUFFER, bufferGPU);
      const writeBuffer = gl.createBuffer();
      gl.bindBuffer(gl.COPY_WRITE_BUFFER, writeBuffer);
      gl.bufferData(gl.COPY_WRITE_BUFFER, byteLength, gl.STREAM_READ);
      gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 0, byteLength);
      await backend.utils._clientWaitAsync();
      const dstBuffer = new attribute2.array.constructor(array2.length);
      gl.bindBuffer(gl.COPY_WRITE_BUFFER, writeBuffer);
      gl.getBufferSubData(gl.COPY_WRITE_BUFFER, 0, dstBuffer);
      gl.deleteBuffer(writeBuffer);
      gl.bindBuffer(gl.COPY_READ_BUFFER, null);
      gl.bindBuffer(gl.COPY_WRITE_BUFFER, null);
      return dstBuffer.buffer;
    }
    /**
     * Creates a WebGL buffer with the given data.
     *
     * @private
     * @param {WebGL2RenderingContext} gl - The rendering context.
     * @param {GLenum } bufferType - A flag that indicates the buffer type and thus binding point target.
     * @param {TypedArray} array - The array of the buffer attribute.
     * @param {GLenum} usage - The usage.
     * @return {WebGLBuffer} The WebGL buffer.
     */
    _createBuffer(gl, bufferType, array2, usage) {
      const bufferGPU = gl.createBuffer();
      gl.bindBuffer(bufferType, bufferGPU);
      gl.bufferData(bufferType, array2, usage);
      gl.bindBuffer(bufferType, null);
      return bufferGPU;
    }
  };
  var equationToGL;
  var factorToGL;
  var WebGLState = class {
    /**
     * Constructs a new utility object.
     *
     * @param {WebGLBackend} backend - The WebGL 2 backend.
     */
    constructor(backend) {
      this.backend = backend;
      this.gl = this.backend.gl;
      this.enabled = {};
      this.currentFlipSided = null;
      this.currentCullFace = null;
      this.currentProgram = null;
      this.currentBlendingEnabled = false;
      this.currentBlending = null;
      this.currentBlendSrc = null;
      this.currentBlendDst = null;
      this.currentBlendSrcAlpha = null;
      this.currentBlendDstAlpha = null;
      this.currentPremultipledAlpha = null;
      this.currentPolygonOffsetFactor = null;
      this.currentPolygonOffsetUnits = null;
      this.currentColorMask = null;
      this.currentDepthFunc = null;
      this.currentDepthMask = null;
      this.currentStencilFunc = null;
      this.currentStencilRef = null;
      this.currentStencilFuncMask = null;
      this.currentStencilFail = null;
      this.currentStencilZFail = null;
      this.currentStencilZPass = null;
      this.currentStencilMask = null;
      this.currentLineWidth = null;
      this.currentClippingPlanes = 0;
      this.currentVAO = null;
      this.currentIndex = null;
      this.currentBoundFramebuffers = {};
      this.currentDrawbuffers = /* @__PURE__ */ new WeakMap();
      this.maxTextures = this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS);
      this.currentTextureSlot = null;
      this.currentBoundTextures = {};
      this.currentBoundBufferBases = {};
      this._init();
    }
    /**
     * Inits the state of the utility.
     *
     * @private
     */
    _init() {
      const gl = this.gl;
      equationToGL = {
        [AddEquation]: gl.FUNC_ADD,
        [SubtractEquation]: gl.FUNC_SUBTRACT,
        [ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT
      };
      factorToGL = {
        [ZeroFactor]: gl.ZERO,
        [OneFactor]: gl.ONE,
        [SrcColorFactor]: gl.SRC_COLOR,
        [SrcAlphaFactor]: gl.SRC_ALPHA,
        [SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,
        [DstColorFactor]: gl.DST_COLOR,
        [DstAlphaFactor]: gl.DST_ALPHA,
        [OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,
        [OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,
        [OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,
        [OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA
      };
      const scissorParam = gl.getParameter(gl.SCISSOR_BOX);
      const viewportParam = gl.getParameter(gl.VIEWPORT);
      this.currentScissor = new Vector4().fromArray(scissorParam);
      this.currentViewport = new Vector4().fromArray(viewportParam);
      this._tempVec4 = new Vector4();
    }
    /**
     * Enables the given WebGL capability.
     *
     * This method caches the capability state so
     * `gl.enable()` is only called when necessary.
     *
     * @param {GLenum} id - The capability to enable.
     */
    enable(id2) {
      const { enabled } = this;
      if (enabled[id2] !== true) {
        this.gl.enable(id2);
        enabled[id2] = true;
      }
    }
    /**
     * Disables the given WebGL capability.
     *
     * This method caches the capability state so
     * `gl.disable()` is only called when necessary.
     *
     * @param {GLenum} id - The capability to enable.
     */
    disable(id2) {
      const { enabled } = this;
      if (enabled[id2] !== false) {
        this.gl.disable(id2);
        enabled[id2] = false;
      }
    }
    /**
     * Specifies whether polygons are front- or back-facing
     * by setting the winding orientation.
     *
     * This method caches the state so `gl.frontFace()` is only
     * called when necessary.
     *
     * @param {boolean} flipSided - Whether triangles flipped their sides or not.
     */
    setFlipSided(flipSided) {
      if (this.currentFlipSided !== flipSided) {
        const { gl } = this;
        if (flipSided) {
          gl.frontFace(gl.CW);
        } else {
          gl.frontFace(gl.CCW);
        }
        this.currentFlipSided = flipSided;
      }
    }
    /**
     * Specifies whether or not front- and/or back-facing
     * polygons can be culled.
     *
     * This method caches the state so `gl.cullFace()` is only
     * called when necessary.
     *
     * @param {number} cullFace - Defines which polygons are candidates for culling.
     */
    setCullFace(cullFace) {
      const { gl } = this;
      if (cullFace !== CullFaceNone) {
        this.enable(gl.CULL_FACE);
        if (cullFace !== this.currentCullFace) {
          if (cullFace === CullFaceBack) {
            gl.cullFace(gl.BACK);
          } else if (cullFace === CullFaceFront) {
            gl.cullFace(gl.FRONT);
          } else {
            gl.cullFace(gl.FRONT_AND_BACK);
          }
        }
      } else {
        this.disable(gl.CULL_FACE);
      }
      this.currentCullFace = cullFace;
    }
    /**
     * Specifies the width of line primitives.
     *
     * This method caches the state so `gl.lineWidth()` is only
     * called when necessary.
     *
     * @param {number} width - The line width.
     */
    setLineWidth(width) {
      const { currentLineWidth, gl } = this;
      if (width !== currentLineWidth) {
        gl.lineWidth(width);
        this.currentLineWidth = width;
      }
    }
    /**
     * Defines the blending.
     *
     * This method caches the state so `gl.blendEquation()`, `gl.blendEquationSeparate()`,
     * `gl.blendFunc()` and  `gl.blendFuncSeparate()` are only called when necessary.
     *
     * @param {number} blending - The blending type.
     * @param {number} blendEquation - The blending equation.
     * @param {number} blendSrc - Only relevant for custom blending. The RGB source blending factor.
     * @param {number} blendDst - Only relevant for custom blending. The RGB destination blending factor.
     * @param {number} blendEquationAlpha - Only relevant for custom blending. The blending equation for alpha.
     * @param {number} blendSrcAlpha - Only relevant for custom blending. The alpha source blending factor.
     * @param {number} blendDstAlpha - Only relevant for custom blending. The alpha destination blending factor.
     * @param {boolean} premultipliedAlpha - Whether premultiplied alpha is enabled or not.
     */
    setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
      const { gl } = this;
      if (blending === NoBlending) {
        if (this.currentBlendingEnabled === true) {
          this.disable(gl.BLEND);
          this.currentBlendingEnabled = false;
        }
        return;
      }
      if (this.currentBlendingEnabled === false) {
        this.enable(gl.BLEND);
        this.currentBlendingEnabled = true;
      }
      if (blending !== CustomBlending) {
        if (blending !== this.currentBlending || premultipliedAlpha !== this.currentPremultipledAlpha) {
          if (this.currentBlendEquation !== AddEquation || this.currentBlendEquationAlpha !== AddEquation) {
            gl.blendEquation(gl.FUNC_ADD);
            this.currentBlendEquation = AddEquation;
            this.currentBlendEquationAlpha = AddEquation;
          }
          if (premultipliedAlpha) {
            switch (blending) {
              case NormalBlending:
                gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                break;
              case AdditiveBlending:
                gl.blendFunc(gl.ONE, gl.ONE);
                break;
              case SubtractiveBlending:
                gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
                break;
              case MultiplyBlending:
                gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);
                break;
              default:
                console.error("THREE.WebGLState: Invalid blending: ", blending);
                break;
            }
          } else {
            switch (blending) {
              case NormalBlending:
                gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                break;
              case AdditiveBlending:
                gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
                break;
              case SubtractiveBlending:
                gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
                break;
              case MultiplyBlending:
                gl.blendFunc(gl.ZERO, gl.SRC_COLOR);
                break;
              default:
                console.error("THREE.WebGLState: Invalid blending: ", blending);
                break;
            }
          }
          this.currentBlendSrc = null;
          this.currentBlendDst = null;
          this.currentBlendSrcAlpha = null;
          this.currentBlendDstAlpha = null;
          this.currentBlending = blending;
          this.currentPremultipledAlpha = premultipliedAlpha;
        }
        return;
      }
      blendEquationAlpha = blendEquationAlpha || blendEquation;
      blendSrcAlpha = blendSrcAlpha || blendSrc;
      blendDstAlpha = blendDstAlpha || blendDst;
      if (blendEquation !== this.currentBlendEquation || blendEquationAlpha !== this.currentBlendEquationAlpha) {
        gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
        this.currentBlendEquation = blendEquation;
        this.currentBlendEquationAlpha = blendEquationAlpha;
      }
      if (blendSrc !== this.currentBlendSrc || blendDst !== this.currentBlendDst || blendSrcAlpha !== this.currentBlendSrcAlpha || blendDstAlpha !== this.currentBlendDstAlpha) {
        gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
        this.currentBlendSrc = blendSrc;
        this.currentBlendDst = blendDst;
        this.currentBlendSrcAlpha = blendSrcAlpha;
        this.currentBlendDstAlpha = blendDstAlpha;
      }
      this.currentBlending = blending;
      this.currentPremultipledAlpha = false;
    }
    /**
     * Specifies whether colors can be written when rendering
     * into a framebuffer or not.
     *
     * This method caches the state so `gl.colorMask()` is only
     * called when necessary.
     *
     * @param {boolean} colorMask - The color mask.
     */
    setColorMask(colorMask) {
      if (this.currentColorMask !== colorMask) {
        this.gl.colorMask(colorMask, colorMask, colorMask, colorMask);
        this.currentColorMask = colorMask;
      }
    }
    /**
     * Specifies whether the depth test is enabled or not.
     *
     * @param {boolean} depthTest - Whether the depth test is enabled or not.
     */
    setDepthTest(depthTest) {
      const { gl } = this;
      if (depthTest) {
        this.enable(gl.DEPTH_TEST);
      } else {
        this.disable(gl.DEPTH_TEST);
      }
    }
    /**
     * Specifies whether depth values can be written when rendering
     * into a framebuffer or not.
     *
     * This method caches the state so `gl.depthMask()` is only
     * called when necessary.
     *
     * @param {boolean} depthMask - The depth mask.
     */
    setDepthMask(depthMask) {
      if (this.currentDepthMask !== depthMask) {
        this.gl.depthMask(depthMask);
        this.currentDepthMask = depthMask;
      }
    }
    /**
     * Specifies the depth compare function.
     *
     * This method caches the state so `gl.depthFunc()` is only
     * called when necessary.
     *
     * @param {number} depthFunc - The depth compare function.
     */
    setDepthFunc(depthFunc) {
      if (this.currentDepthFunc !== depthFunc) {
        const { gl } = this;
        switch (depthFunc) {
          case NeverDepth:
            gl.depthFunc(gl.NEVER);
            break;
          case AlwaysDepth:
            gl.depthFunc(gl.ALWAYS);
            break;
          case LessDepth:
            gl.depthFunc(gl.LESS);
            break;
          case LessEqualDepth:
            gl.depthFunc(gl.LEQUAL);
            break;
          case EqualDepth:
            gl.depthFunc(gl.EQUAL);
            break;
          case GreaterEqualDepth:
            gl.depthFunc(gl.GEQUAL);
            break;
          case GreaterDepth:
            gl.depthFunc(gl.GREATER);
            break;
          case NotEqualDepth:
            gl.depthFunc(gl.NOTEQUAL);
            break;
          default:
            gl.depthFunc(gl.LEQUAL);
        }
        this.currentDepthFunc = depthFunc;
      }
    }
    /**
     * Specifies the scissor box.
     *
     * @param {number} x - The x-coordinate of the lower left corner of the viewport.
     * @param {number} y - The y-coordinate of the lower left corner of the viewport.
     * @param {number} width - The width of the viewport.
     * @param {number} height - The height of the viewport.
     *
     */
    scissor(x, y, width, height) {
      const scissor = this._tempVec4.set(x, y, width, height);
      if (this.currentScissor.equals(scissor) === false) {
        const { gl } = this;
        gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);
        this.currentScissor.copy(scissor);
      }
    }
    /**
     * Specifies the viewport.
     *
     * @param {number} x - The x-coordinate of the lower left corner of the viewport.
     * @param {number} y - The y-coordinate of the lower left corner of the viewport.
     * @param {number} width - The width of the viewport.
     * @param {number} height - The height of the viewport.
     *
     */
    viewport(x, y, width, height) {
      const viewport2 = this._tempVec4.set(x, y, width, height);
      if (this.currentViewport.equals(viewport2) === false) {
        const { gl } = this;
        gl.viewport(viewport2.x, viewport2.y, viewport2.z, viewport2.w);
        this.currentViewport.copy(viewport2);
      }
    }
    /**
     * Defines the scissor test.
     *
     * @param {boolean} boolean - Whether the scissor test should be enabled or not.
     */
    setScissorTest(boolean) {
      const gl = this.gl;
      if (boolean) {
        gl.enable(gl.SCISSOR_TEST);
      } else {
        gl.disable(gl.SCISSOR_TEST);
      }
    }
    /**
     * Specifies whether the stencil test is enabled or not.
     *
     * @param {boolean} stencilTest - Whether the stencil test is enabled or not.
     */
    setStencilTest(stencilTest) {
      const { gl } = this;
      if (stencilTest) {
        this.enable(gl.STENCIL_TEST);
      } else {
        this.disable(gl.STENCIL_TEST);
      }
    }
    /**
     * Specifies whether stencil values can be written when rendering
     * into a framebuffer or not.
     *
     * This method caches the state so `gl.stencilMask()` is only
     * called when necessary.
     *
     * @param {boolean} stencilMask - The stencil mask.
     */
    setStencilMask(stencilMask) {
      if (this.currentStencilMask !== stencilMask) {
        this.gl.stencilMask(stencilMask);
        this.currentStencilMask = stencilMask;
      }
    }
    /**
     * Specifies whether the stencil test functions.
     *
     * This method caches the state so `gl.stencilFunc()` is only
     * called when necessary.
     *
     * @param {number} stencilFunc - The stencil compare function.
     * @param {number} stencilRef - The reference value for the stencil test.
     * @param {number} stencilMask - A bit-wise mask that is used to AND the reference value and the stored stencil value when the test is done.
     */
    setStencilFunc(stencilFunc, stencilRef, stencilMask) {
      if (this.currentStencilFunc !== stencilFunc || this.currentStencilRef !== stencilRef || this.currentStencilFuncMask !== stencilMask) {
        this.gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
        this.currentStencilFunc = stencilFunc;
        this.currentStencilRef = stencilRef;
        this.currentStencilFuncMask = stencilMask;
      }
    }
    /**
     * Specifies whether the stencil test operation.
     *
     * This method caches the state so `gl.stencilOp()` is only
     * called when necessary.
     *
     * @param {number} stencilFail - The function to use when the stencil test fails.
     * @param {number} stencilZFail - The function to use when the stencil test passes, but the depth test fail.
     * @param {number} stencilZPass - The function to use when both the stencil test and the depth test pass,
     * or when the stencil test passes and there is no depth buffer or depth testing is disabled.
     */
    setStencilOp(stencilFail, stencilZFail, stencilZPass) {
      if (this.currentStencilFail !== stencilFail || this.currentStencilZFail !== stencilZFail || this.currentStencilZPass !== stencilZPass) {
        this.gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
        this.currentStencilFail = stencilFail;
        this.currentStencilZFail = stencilZFail;
        this.currentStencilZPass = stencilZPass;
      }
    }
    /**
     * Configures the WebGL state for the given material.
     *
     * @param {Material} material - The material to configure the state for.
     * @param {number} frontFaceCW - Whether the front faces are counter-clockwise or not.
     * @param {number} hardwareClippingPlanes - The number of hardware clipping planes.
     */
    setMaterial(material2, frontFaceCW, hardwareClippingPlanes) {
      const { gl } = this;
      material2.side === DoubleSide ? this.disable(gl.CULL_FACE) : this.enable(gl.CULL_FACE);
      let flipSided = material2.side === BackSide;
      if (frontFaceCW) flipSided = !flipSided;
      this.setFlipSided(flipSided);
      material2.blending === NormalBlending && material2.transparent === false ? this.setBlending(NoBlending) : this.setBlending(material2.blending, material2.blendEquation, material2.blendSrc, material2.blendDst, material2.blendEquationAlpha, material2.blendSrcAlpha, material2.blendDstAlpha, material2.premultipliedAlpha);
      this.setDepthFunc(material2.depthFunc);
      this.setDepthTest(material2.depthTest);
      this.setDepthMask(material2.depthWrite);
      this.setColorMask(material2.colorWrite);
      const stencilWrite = material2.stencilWrite;
      this.setStencilTest(stencilWrite);
      if (stencilWrite) {
        this.setStencilMask(material2.stencilWriteMask);
        this.setStencilFunc(material2.stencilFunc, material2.stencilRef, material2.stencilFuncMask);
        this.setStencilOp(material2.stencilFail, material2.stencilZFail, material2.stencilZPass);
      }
      this.setPolygonOffset(material2.polygonOffset, material2.polygonOffsetFactor, material2.polygonOffsetUnits);
      material2.alphaToCoverage === true && this.backend.renderer.samples > 1 ? this.enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : this.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
      if (hardwareClippingPlanes > 0) {
        if (this.currentClippingPlanes !== hardwareClippingPlanes) {
          const CLIP_DISTANCE0_WEBGL = 12288;
          for (let i = 0; i < 8; i++) {
            if (i < hardwareClippingPlanes) {
              this.enable(CLIP_DISTANCE0_WEBGL + i);
            } else {
              this.disable(CLIP_DISTANCE0_WEBGL + i);
            }
          }
        }
      }
    }
    /**
     * Specifies the polygon offset.
     *
     * This method caches the state so `gl.polygonOffset()` is only
     * called when necessary.
     *
     * @param {boolean} polygonOffset - Whether polygon offset is enabled or not.
     * @param {number} factor - The scale factor for the variable depth offset for each polygon.
     * @param {number} units - The multiplier by which an implementation-specific value is multiplied with to create a constant depth offset.
     */
    setPolygonOffset(polygonOffset, factor, units) {
      const { gl } = this;
      if (polygonOffset) {
        this.enable(gl.POLYGON_OFFSET_FILL);
        if (this.currentPolygonOffsetFactor !== factor || this.currentPolygonOffsetUnits !== units) {
          gl.polygonOffset(factor, units);
          this.currentPolygonOffsetFactor = factor;
          this.currentPolygonOffsetUnits = units;
        }
      } else {
        this.disable(gl.POLYGON_OFFSET_FILL);
      }
    }
    /**
     * Defines the usage of the given WebGL program.
     *
     * This method caches the state so `gl.useProgram()` is only
     * called when necessary.
     *
     * @param {WebGLProgram} program - The WebGL program to use.
     * @return {boolean} Whether a program change has been executed or not.
     */
    useProgram(program) {
      if (this.currentProgram !== program) {
        this.gl.useProgram(program);
        this.currentProgram = program;
        return true;
      }
      return false;
    }
    /**
     * Sets the vertex state by binding the given VAO and element buffer.
     *
     * @param {WebGLVertexArrayObject} vao - The VAO.
     * @param {WebGLBuffer} indexBuffer - The index buffer.
     * @return {boolean} Whether a vertex state has been changed or not.
     */
    setVertexState(vao, indexBuffer = null) {
      const gl = this.gl;
      if (this.currentVAO !== vao || this.currentIndex !== indexBuffer) {
        gl.bindVertexArray(vao);
        if (indexBuffer !== null) {
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
        }
        this.currentVAO = vao;
        this.currentIndex = indexBuffer;
        return true;
      }
      return false;
    }
    /**
     * Resets the vertex array state by resetting the VAO and element buffer.
     */
    resetVertexState() {
      const gl = this.gl;
      gl.bindVertexArray(null);
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
      this.currentVAO = null;
      this.currentIndex = null;
    }
    // framebuffer
    /**
     * Binds the given framebuffer.
     *
     * This method caches the state so `gl.bindFramebuffer()` is only
     * called when necessary.
     *
     * @param {number} target - The binding point (target).
     * @param {WebGLFramebuffer} framebuffer - The WebGL framebuffer to bind.
     * @return {boolean} Whether a bind has been executed or not.
     */
    bindFramebuffer(target, framebuffer) {
      const { gl, currentBoundFramebuffers } = this;
      if (currentBoundFramebuffers[target] !== framebuffer) {
        gl.bindFramebuffer(target, framebuffer);
        currentBoundFramebuffers[target] = framebuffer;
        if (target === gl.DRAW_FRAMEBUFFER) {
          currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;
        }
        if (target === gl.FRAMEBUFFER) {
          currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;
        }
        return true;
      }
      return false;
    }
    /**
     * Defines draw buffers to which fragment colors are written into.
     * Configures the MRT setup of custom framebuffers.
     *
     * This method caches the state so `gl.drawBuffers()` is only
     * called when necessary.
     *
     * @param {RenderContext} renderContext - The render context.
     * @param {WebGLFramebuffer} framebuffer - The WebGL framebuffer.
     */
    drawBuffers(renderContext, framebuffer) {
      const { gl } = this;
      let drawBuffers = [];
      let needsUpdate = false;
      if (renderContext.textures !== null) {
        drawBuffers = this.currentDrawbuffers.get(framebuffer);
        if (drawBuffers === void 0) {
          drawBuffers = [];
          this.currentDrawbuffers.set(framebuffer, drawBuffers);
        }
        const textures = renderContext.textures;
        if (drawBuffers.length !== textures.length || drawBuffers[0] !== gl.COLOR_ATTACHMENT0) {
          for (let i = 0, il = textures.length; i < il; i++) {
            drawBuffers[i] = gl.COLOR_ATTACHMENT0 + i;
          }
          drawBuffers.length = textures.length;
          needsUpdate = true;
        }
      } else {
        if (drawBuffers[0] !== gl.BACK) {
          drawBuffers[0] = gl.BACK;
          needsUpdate = true;
        }
      }
      if (needsUpdate) {
        gl.drawBuffers(drawBuffers);
      }
    }
    // texture
    /**
     * Makes the given texture unit active.
     *
     * This method caches the state so `gl.activeTexture()` is only
     * called when necessary.
     *
     * @param {number} webglSlot - The texture unit to make active.
     */
    activeTexture(webglSlot) {
      const { gl, currentTextureSlot, maxTextures } = this;
      if (webglSlot === void 0) webglSlot = gl.TEXTURE0 + maxTextures - 1;
      if (currentTextureSlot !== webglSlot) {
        gl.activeTexture(webglSlot);
        this.currentTextureSlot = webglSlot;
      }
    }
    /**
     * Binds the given WebGL texture to a target.
     *
     * This method caches the state so `gl.bindTexture()` is only
     * called when necessary.
     *
     * @param {number} webglType - The binding point (target).
     * @param {WebGLTexture} webglTexture - The WebGL texture to bind.
     * @param {number} webglSlot - The texture.
     */
    bindTexture(webglType, webglTexture, webglSlot) {
      const { gl, currentTextureSlot, currentBoundTextures, maxTextures } = this;
      if (webglSlot === void 0) {
        if (currentTextureSlot === null) {
          webglSlot = gl.TEXTURE0 + maxTextures - 1;
        } else {
          webglSlot = currentTextureSlot;
        }
      }
      let boundTexture = currentBoundTextures[webglSlot];
      if (boundTexture === void 0) {
        boundTexture = { type: void 0, texture: void 0 };
        currentBoundTextures[webglSlot] = boundTexture;
      }
      if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
        if (currentTextureSlot !== webglSlot) {
          gl.activeTexture(webglSlot);
          this.currentTextureSlot = webglSlot;
        }
        gl.bindTexture(webglType, webglTexture);
        boundTexture.type = webglType;
        boundTexture.texture = webglTexture;
      }
    }
    /**
     * Binds a given WebGL buffer to a given binding point (target) at a given index.
     *
     * This method caches the state so `gl.bindBufferBase()` is only
     * called when necessary.
     *
     * @param {number} target - The target for the bind operation.
     * @param {number} index - The index of the target.
     * @param {WebGLBuffer} buffer - The WebGL buffer.
     * @return {boolean} Whether a bind has been executed or not.
     */
    bindBufferBase(target, index, buffer2) {
      const { gl } = this;
      const key = `${target}-${index}`;
      if (this.currentBoundBufferBases[key] !== buffer2) {
        gl.bindBufferBase(target, index, buffer2);
        this.currentBoundBufferBases[key] = buffer2;
        return true;
      }
      return false;
    }
    /**
     * Unbinds the current bound texture.
     *
     * This method caches the state so `gl.bindTexture()` is only
     * called when necessary.
     */
    unbindTexture() {
      const { gl, currentTextureSlot, currentBoundTextures } = this;
      const boundTexture = currentBoundTextures[currentTextureSlot];
      if (boundTexture !== void 0 && boundTexture.type !== void 0) {
        gl.bindTexture(boundTexture.type, null);
        boundTexture.type = void 0;
        boundTexture.texture = void 0;
      }
    }
  };
  var WebGLUtils = class {
    /**
     * Constructs a new utility object.
     *
     * @param {WebGLBackend} backend - The WebGL 2 backend.
     */
    constructor(backend) {
      this.backend = backend;
      this.gl = this.backend.gl;
      this.extensions = backend.extensions;
    }
    /**
     * Converts the given three.js constant into a WebGL constant.
     * The method currently supports the conversion of texture formats
     * and types.
     *
     * @param {number} p - The three.js constant.
     * @param {string} [colorSpace=NoColorSpace] - The color space.
     * @return {?number} The corresponding WebGL constant.
     */
    convert(p, colorSpace = NoColorSpace) {
      const { gl, extensions } = this;
      let extension;
      const transfer = ColorManagement.getTransfer(colorSpace);
      if (p === UnsignedByteType) return gl.UNSIGNED_BYTE;
      if (p === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;
      if (p === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;
      if (p === UnsignedInt5999Type) return gl.UNSIGNED_INT_5_9_9_9_REV;
      if (p === ByteType) return gl.BYTE;
      if (p === ShortType) return gl.SHORT;
      if (p === UnsignedShortType) return gl.UNSIGNED_SHORT;
      if (p === IntType) return gl.INT;
      if (p === UnsignedIntType) return gl.UNSIGNED_INT;
      if (p === FloatType) return gl.FLOAT;
      if (p === HalfFloatType) {
        return gl.HALF_FLOAT;
      }
      if (p === AlphaFormat) return gl.ALPHA;
      if (p === RGBFormat) return gl.RGB;
      if (p === RGBAFormat) return gl.RGBA;
      if (p === DepthFormat) return gl.DEPTH_COMPONENT;
      if (p === DepthStencilFormat) return gl.DEPTH_STENCIL;
      if (p === RedFormat) return gl.RED;
      if (p === RedIntegerFormat) return gl.RED_INTEGER;
      if (p === RGFormat) return gl.RG;
      if (p === RGIntegerFormat) return gl.RG_INTEGER;
      if (p === RGBAIntegerFormat) return gl.RGBA_INTEGER;
      if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {
        if (transfer === SRGBTransfer) {
          extension = extensions.get("WEBGL_compressed_texture_s3tc_srgb");
          if (extension !== null) {
            if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
            if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
          } else {
            return null;
          }
        } else {
          extension = extensions.get("WEBGL_compressed_texture_s3tc");
          if (extension !== null) {
            if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
            if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
          } else {
            return null;
          }
        }
      }
      if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {
        extension = extensions.get("WEBGL_compressed_texture_pvrtc");
        if (extension !== null) {
          if (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
          if (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
          if (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
          if (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
        } else {
          return null;
        }
      }
      if (p === RGB_ETC1_Format || p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {
        extension = extensions.get("WEBGL_compressed_texture_etc");
        if (extension !== null) {
          if (p === RGB_ETC1_Format || p === RGB_ETC2_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
          if (p === RGBA_ETC2_EAC_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
        } else {
          return null;
        }
      }
      if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format) {
        extension = extensions.get("WEBGL_compressed_texture_astc");
        if (extension !== null) {
          if (p === RGBA_ASTC_4x4_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
          if (p === RGBA_ASTC_5x4_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
          if (p === RGBA_ASTC_5x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
          if (p === RGBA_ASTC_6x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
          if (p === RGBA_ASTC_6x6_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
          if (p === RGBA_ASTC_8x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
          if (p === RGBA_ASTC_8x6_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
          if (p === RGBA_ASTC_8x8_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
          if (p === RGBA_ASTC_10x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
          if (p === RGBA_ASTC_10x6_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
          if (p === RGBA_ASTC_10x8_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
          if (p === RGBA_ASTC_10x10_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
          if (p === RGBA_ASTC_12x10_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
          if (p === RGBA_ASTC_12x12_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;
        } else {
          return null;
        }
      }
      if (p === RGBA_BPTC_Format) {
        extension = extensions.get("EXT_texture_compression_bptc");
        if (extension !== null) {
          if (p === RGBA_BPTC_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
        } else {
          return null;
        }
      }
      if (p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format) {
        extension = extensions.get("EXT_texture_compression_rgtc");
        if (extension !== null) {
          if (p === RGBA_BPTC_Format) return extension.COMPRESSED_RED_RGTC1_EXT;
          if (p === SIGNED_RED_RGTC1_Format) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;
          if (p === RED_GREEN_RGTC2_Format) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;
          if (p === SIGNED_RED_GREEN_RGTC2_Format) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
        } else {
          return null;
        }
      }
      if (p === UnsignedInt248Type) {
        return gl.UNSIGNED_INT_24_8;
      }
      return gl[p] !== void 0 ? gl[p] : null;
    }
    /**
     * This method can be used to synchronize the CPU with the GPU by waiting until
     * ongoing GPU commands have been completed.
     *
     * @private
     * @return {Promise} A promise that resolves when all ongoing GPU commands have been completed.
     */
    _clientWaitAsync() {
      const { gl } = this;
      const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
      gl.flush();
      return new Promise((resolve, reject) => {
        function test() {
          const res = gl.clientWaitSync(sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0);
          if (res === gl.WAIT_FAILED) {
            gl.deleteSync(sync);
            reject();
            return;
          }
          if (res === gl.TIMEOUT_EXPIRED) {
            requestAnimationFrame(test);
            return;
          }
          gl.deleteSync(sync);
          resolve();
        }
        test();
      });
    }
  };
  var initialized = false;
  var wrappingToGL;
  var filterToGL;
  var compareToGL;
  var WebGLTextureUtils = class {
    /**
     * Constructs a new utility object.
     *
     * @param {WebGLBackend} backend - The WebGL 2 backend.
     */
    constructor(backend) {
      this.backend = backend;
      this.gl = backend.gl;
      this.extensions = backend.extensions;
      this.defaultTextures = {};
      if (initialized === false) {
        this._init();
        initialized = true;
      }
    }
    /**
     * Inits the state of the utility.
     *
     * @private
     */
    _init() {
      const gl = this.gl;
      wrappingToGL = {
        [RepeatWrapping]: gl.REPEAT,
        [ClampToEdgeWrapping]: gl.CLAMP_TO_EDGE,
        [MirroredRepeatWrapping]: gl.MIRRORED_REPEAT
      };
      filterToGL = {
        [NearestFilter]: gl.NEAREST,
        [NearestMipmapNearestFilter]: gl.NEAREST_MIPMAP_NEAREST,
        [NearestMipmapLinearFilter]: gl.NEAREST_MIPMAP_LINEAR,
        [LinearFilter]: gl.LINEAR,
        [LinearMipmapNearestFilter]: gl.LINEAR_MIPMAP_NEAREST,
        [LinearMipmapLinearFilter]: gl.LINEAR_MIPMAP_LINEAR
      };
      compareToGL = {
        [NeverCompare]: gl.NEVER,
        [AlwaysCompare]: gl.ALWAYS,
        [LessCompare]: gl.LESS,
        [LessEqualCompare]: gl.LEQUAL,
        [EqualCompare]: gl.EQUAL,
        [GreaterEqualCompare]: gl.GEQUAL,
        [GreaterCompare]: gl.GREATER,
        [NotEqualCompare]: gl.NOTEQUAL
      };
    }
    /**
     * Returns the native texture type for the given texture.
     *
     * @param {Texture} texture - The texture.
     * @return {GLenum} The native texture type.
     */
    getGLTextureType(texture2) {
      const { gl } = this;
      let glTextureType;
      if (texture2.isCubeTexture === true) {
        glTextureType = gl.TEXTURE_CUBE_MAP;
      } else if (texture2.isArrayTexture === true || texture2.isDataArrayTexture === true || texture2.isCompressedArrayTexture === true) {
        glTextureType = gl.TEXTURE_2D_ARRAY;
      } else if (texture2.isData3DTexture === true) {
        glTextureType = gl.TEXTURE_3D;
      } else {
        glTextureType = gl.TEXTURE_2D;
      }
      return glTextureType;
    }
    /**
     * Returns the native texture type for the given texture.
     *
     * @param {?string} internalFormatName - The internal format name. When `null`, the internal format is derived from the subsequent parameters.
     * @param {GLenum} glFormat - The WebGL format.
     * @param {GLenum} glType - The WebGL type.
     * @param {string} colorSpace - The texture's color space.
     * @param {boolean} [forceLinearTransfer=false] - Whether to force a linear transfer or not.
     * @return {GLenum} The internal format.
     */
    getInternalFormat(internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false) {
      const { gl, extensions } = this;
      if (internalFormatName !== null) {
        if (gl[internalFormatName] !== void 0) return gl[internalFormatName];
        console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName + "'");
      }
      let internalFormat = glFormat;
      if (glFormat === gl.RED) {
        if (glType === gl.FLOAT) internalFormat = gl.R32F;
        if (glType === gl.HALF_FLOAT) internalFormat = gl.R16F;
        if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.R8;
        if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.R16;
        if (glType === gl.UNSIGNED_INT) internalFormat = gl.R32UI;
        if (glType === gl.BYTE) internalFormat = gl.R8I;
        if (glType === gl.SHORT) internalFormat = gl.R16I;
        if (glType === gl.INT) internalFormat = gl.R32I;
      }
      if (glFormat === gl.RED_INTEGER) {
        if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.R8UI;
        if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.R16UI;
        if (glType === gl.UNSIGNED_INT) internalFormat = gl.R32UI;
        if (glType === gl.BYTE) internalFormat = gl.R8I;
        if (glType === gl.SHORT) internalFormat = gl.R16I;
        if (glType === gl.INT) internalFormat = gl.R32I;
      }
      if (glFormat === gl.RG) {
        if (glType === gl.FLOAT) internalFormat = gl.RG32F;
        if (glType === gl.HALF_FLOAT) internalFormat = gl.RG16F;
        if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RG8;
        if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.RG16;
        if (glType === gl.UNSIGNED_INT) internalFormat = gl.RG32UI;
        if (glType === gl.BYTE) internalFormat = gl.RG8I;
        if (glType === gl.SHORT) internalFormat = gl.RG16I;
        if (glType === gl.INT) internalFormat = gl.RG32I;
      }
      if (glFormat === gl.RG_INTEGER) {
        if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RG8UI;
        if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.RG16UI;
        if (glType === gl.UNSIGNED_INT) internalFormat = gl.RG32UI;
        if (glType === gl.BYTE) internalFormat = gl.RG8I;
        if (glType === gl.SHORT) internalFormat = gl.RG16I;
        if (glType === gl.INT) internalFormat = gl.RG32I;
      }
      if (glFormat === gl.RGB) {
        const transfer = forceLinearTransfer ? LinearTransfer : ColorManagement.getTransfer(colorSpace);
        if (glType === gl.FLOAT) internalFormat = gl.RGB32F;
        if (glType === gl.HALF_FLOAT) internalFormat = gl.RGB16F;
        if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RGB8;
        if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.RGB16;
        if (glType === gl.UNSIGNED_INT) internalFormat = gl.RGB32UI;
        if (glType === gl.BYTE) internalFormat = gl.RGB8I;
        if (glType === gl.SHORT) internalFormat = gl.RGB16I;
        if (glType === gl.INT) internalFormat = gl.RGB32I;
        if (glType === gl.UNSIGNED_BYTE) internalFormat = transfer === SRGBTransfer ? gl.SRGB8 : gl.RGB8;
        if (glType === gl.UNSIGNED_SHORT_5_6_5) internalFormat = gl.RGB565;
        if (glType === gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = gl.RGB5_A1;
        if (glType === gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = gl.RGB4;
        if (glType === gl.UNSIGNED_INT_5_9_9_9_REV) internalFormat = gl.RGB9_E5;
      }
      if (glFormat === gl.RGB_INTEGER) {
        if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RGB8UI;
        if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.RGB16UI;
        if (glType === gl.UNSIGNED_INT) internalFormat = gl.RGB32UI;
        if (glType === gl.BYTE) internalFormat = gl.RGB8I;
        if (glType === gl.SHORT) internalFormat = gl.RGB16I;
        if (glType === gl.INT) internalFormat = gl.RGB32I;
      }
      if (glFormat === gl.RGBA) {
        const transfer = forceLinearTransfer ? LinearTransfer : ColorManagement.getTransfer(colorSpace);
        if (glType === gl.FLOAT) internalFormat = gl.RGBA32F;
        if (glType === gl.HALF_FLOAT) internalFormat = gl.RGBA16F;
        if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RGBA8;
        if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.RGBA16;
        if (glType === gl.UNSIGNED_INT) internalFormat = gl.RGBA32UI;
        if (glType === gl.BYTE) internalFormat = gl.RGBA8I;
        if (glType === gl.SHORT) internalFormat = gl.RGBA16I;
        if (glType === gl.INT) internalFormat = gl.RGBA32I;
        if (glType === gl.UNSIGNED_BYTE) internalFormat = transfer === SRGBTransfer ? gl.SRGB8_ALPHA8 : gl.RGBA8;
        if (glType === gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = gl.RGBA4;
        if (glType === gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = gl.RGB5_A1;
      }
      if (glFormat === gl.RGBA_INTEGER) {
        if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RGBA8UI;
        if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.RGBA16UI;
        if (glType === gl.UNSIGNED_INT) internalFormat = gl.RGBA32UI;
        if (glType === gl.BYTE) internalFormat = gl.RGBA8I;
        if (glType === gl.SHORT) internalFormat = gl.RGBA16I;
        if (glType === gl.INT) internalFormat = gl.RGBA32I;
      }
      if (glFormat === gl.DEPTH_COMPONENT) {
        if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.DEPTH_COMPONENT16;
        if (glType === gl.UNSIGNED_INT) internalFormat = gl.DEPTH_COMPONENT24;
        if (glType === gl.FLOAT) internalFormat = gl.DEPTH_COMPONENT32F;
      }
      if (glFormat === gl.DEPTH_STENCIL) {
        if (glType === gl.UNSIGNED_INT_24_8) internalFormat = gl.DEPTH24_STENCIL8;
      }
      if (internalFormat === gl.R16F || internalFormat === gl.R32F || internalFormat === gl.RG16F || internalFormat === gl.RG32F || internalFormat === gl.RGBA16F || internalFormat === gl.RGBA32F) {
        extensions.get("EXT_color_buffer_float");
      }
      return internalFormat;
    }
    /**
     * Sets the texture parameters for the given texture.
     *
     * @param {GLenum} textureType - The texture type.
     * @param {Texture} texture - The texture.
     */
    setTextureParameters(textureType, texture2) {
      const { gl, extensions, backend } = this;
      const workingPrimaries = ColorManagement.getPrimaries(ColorManagement.workingColorSpace);
      const texturePrimaries = texture2.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries(texture2.colorSpace);
      const unpackConversion = texture2.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? gl.NONE : gl.BROWSER_DEFAULT_WEBGL;
      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture2.flipY);
      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture2.premultiplyAlpha);
      gl.pixelStorei(gl.UNPACK_ALIGNMENT, texture2.unpackAlignment);
      gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion);
      gl.texParameteri(textureType, gl.TEXTURE_WRAP_S, wrappingToGL[texture2.wrapS]);
      gl.texParameteri(textureType, gl.TEXTURE_WRAP_T, wrappingToGL[texture2.wrapT]);
      if (textureType === gl.TEXTURE_3D || textureType === gl.TEXTURE_2D_ARRAY) {
        if (!texture2.isArrayTexture) {
          gl.texParameteri(textureType, gl.TEXTURE_WRAP_R, wrappingToGL[texture2.wrapR]);
        }
      }
      gl.texParameteri(textureType, gl.TEXTURE_MAG_FILTER, filterToGL[texture2.magFilter]);
      const hasMipmaps = texture2.mipmaps !== void 0 && texture2.mipmaps.length > 0;
      const minFilter = texture2.minFilter === LinearFilter && hasMipmaps ? LinearMipmapLinearFilter : texture2.minFilter;
      gl.texParameteri(textureType, gl.TEXTURE_MIN_FILTER, filterToGL[minFilter]);
      if (texture2.compareFunction) {
        gl.texParameteri(textureType, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);
        gl.texParameteri(textureType, gl.TEXTURE_COMPARE_FUNC, compareToGL[texture2.compareFunction]);
      }
      if (extensions.has("EXT_texture_filter_anisotropic") === true) {
        if (texture2.magFilter === NearestFilter) return;
        if (texture2.minFilter !== NearestMipmapLinearFilter && texture2.minFilter !== LinearMipmapLinearFilter) return;
        if (texture2.type === FloatType && extensions.has("OES_texture_float_linear") === false) return;
        if (texture2.anisotropy > 1) {
          const extension = extensions.get("EXT_texture_filter_anisotropic");
          gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture2.anisotropy, backend.getMaxAnisotropy()));
        }
      }
    }
    /**
     * Creates a default texture for the given texture that can be used
     * as a placeholder until the actual texture is ready for usage.
     *
     * @param {Texture} texture - The texture to create a default texture for.
     */
    createDefaultTexture(texture2) {
      const { gl, backend, defaultTextures } = this;
      const glTextureType = this.getGLTextureType(texture2);
      let textureGPU = defaultTextures[glTextureType];
      if (textureGPU === void 0) {
        textureGPU = gl.createTexture();
        backend.state.bindTexture(glTextureType, textureGPU);
        gl.texParameteri(glTextureType, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(glTextureType, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        defaultTextures[glTextureType] = textureGPU;
      }
      backend.set(texture2, {
        textureGPU,
        glTextureType,
        isDefault: true
      });
    }
    /**
     * Defines a texture on the GPU for the given texture object.
     *
     * @param {Texture} texture - The texture.
     * @param {Object} [options={}] - Optional configuration parameter.
     * @return {undefined}
     */
    createTexture(texture2, options) {
      const { gl, backend } = this;
      const { levels, width, height, depth: depth2 } = options;
      const glFormat = backend.utils.convert(texture2.format, texture2.colorSpace);
      const glType = backend.utils.convert(texture2.type);
      const glInternalFormat = this.getInternalFormat(texture2.internalFormat, glFormat, glType, texture2.colorSpace, texture2.isVideoTexture);
      const textureGPU = gl.createTexture();
      const glTextureType = this.getGLTextureType(texture2);
      backend.state.bindTexture(glTextureType, textureGPU);
      this.setTextureParameters(glTextureType, texture2);
      if (texture2.isArrayTexture || texture2.isDataArrayTexture || texture2.isCompressedArrayTexture) {
        gl.texStorage3D(gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, width, height, depth2);
      } else if (texture2.isData3DTexture) {
        gl.texStorage3D(gl.TEXTURE_3D, levels, glInternalFormat, width, height, depth2);
      } else if (!texture2.isVideoTexture) {
        gl.texStorage2D(glTextureType, levels, glInternalFormat, width, height);
      }
      backend.set(texture2, {
        textureGPU,
        glTextureType,
        glFormat,
        glType,
        glInternalFormat
      });
    }
    /**
     * Uploads texture buffer data to the GPU memory.
     *
     * @param {WebGLBuffer} buffer - The buffer data.
     * @param {Texture} texture - The texture,
     */
    copyBufferToTexture(buffer2, texture2) {
      const { gl, backend } = this;
      const { textureGPU, glTextureType, glFormat, glType } = backend.get(texture2);
      const { width, height } = texture2.source.data;
      gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, buffer2);
      backend.state.bindTexture(glTextureType, textureGPU);
      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
      gl.texSubImage2D(glTextureType, 0, 0, 0, width, height, glFormat, glType, 0);
      gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, null);
      backend.state.unbindTexture();
    }
    /**
     * Uploads the updated texture data to the GPU.
     *
     * @param {Texture} texture - The texture.
     * @param {Object} [options={}] - Optional configuration parameter.
     */
    updateTexture(texture2, options) {
      const { gl } = this;
      const { width, height } = options;
      const { textureGPU, glTextureType, glFormat, glType, glInternalFormat } = this.backend.get(texture2);
      if (texture2.isRenderTargetTexture || textureGPU === void 0)
        return;
      this.backend.state.bindTexture(glTextureType, textureGPU);
      this.setTextureParameters(glTextureType, texture2);
      if (texture2.isCompressedTexture) {
        const mipmaps = texture2.mipmaps;
        const image = options.image;
        for (let i = 0; i < mipmaps.length; i++) {
          const mipmap = mipmaps[i];
          if (texture2.isCompressedArrayTexture) {
            if (texture2.format !== gl.RGBA) {
              if (glFormat !== null) {
                gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data);
              } else {
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
              }
            } else {
              gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data);
            }
          } else {
            if (glFormat !== null) {
              gl.compressedTexSubImage2D(gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
            } else {
              console.warn("Unsupported compressed texture format");
            }
          }
        }
      } else if (texture2.isCubeTexture) {
        const images = options.images;
        for (let i = 0; i < 6; i++) {
          const image = getImage(images[i]);
          gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, width, height, glFormat, glType, image);
        }
      } else if (texture2.isDataArrayTexture || texture2.isArrayTexture) {
        const image = options.image;
        gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
      } else if (texture2.isData3DTexture) {
        const image = options.image;
        gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
      } else if (texture2.isVideoTexture) {
        texture2.update();
        gl.texImage2D(glTextureType, 0, glInternalFormat, glFormat, glType, options.image);
      } else {
        const image = getImage(options.image);
        gl.texSubImage2D(glTextureType, 0, 0, 0, width, height, glFormat, glType, image);
      }
    }
    /**
     * Generates mipmaps for the given texture.
     *
     * @param {Texture} texture - The texture.
     */
    generateMipmaps(texture2) {
      const { gl, backend } = this;
      const { textureGPU, glTextureType } = backend.get(texture2);
      backend.state.bindTexture(glTextureType, textureGPU);
      gl.generateMipmap(glTextureType);
    }
    /**
     * Deallocates the render buffers of the given render target.
     *
     * @param {RenderTarget} renderTarget - The render target.
     */
    deallocateRenderBuffers(renderTarget) {
      const { gl, backend } = this;
      if (renderTarget) {
        const renderContextData = backend.get(renderTarget);
        renderContextData.renderBufferStorageSetup = void 0;
        if (renderContextData.framebuffers) {
          for (const cacheKey in renderContextData.framebuffers) {
            gl.deleteFramebuffer(renderContextData.framebuffers[cacheKey]);
          }
          delete renderContextData.framebuffers;
        }
        if (renderContextData.depthRenderbuffer) {
          gl.deleteRenderbuffer(renderContextData.depthRenderbuffer);
          delete renderContextData.depthRenderbuffer;
        }
        if (renderContextData.stencilRenderbuffer) {
          gl.deleteRenderbuffer(renderContextData.stencilRenderbuffer);
          delete renderContextData.stencilRenderbuffer;
        }
        if (renderContextData.msaaFrameBuffer) {
          gl.deleteFramebuffer(renderContextData.msaaFrameBuffer);
          delete renderContextData.msaaFrameBuffer;
        }
        if (renderContextData.msaaRenderbuffers) {
          for (let i = 0; i < renderContextData.msaaRenderbuffers.length; i++) {
            gl.deleteRenderbuffer(renderContextData.msaaRenderbuffers[i]);
          }
          delete renderContextData.msaaRenderbuffers;
        }
      }
    }
    /**
     * Destroys the GPU data for the given texture object.
     *
     * @param {Texture} texture - The texture.
     */
    destroyTexture(texture2) {
      const { gl, backend } = this;
      const { textureGPU, renderTarget } = backend.get(texture2);
      this.deallocateRenderBuffers(renderTarget);
      gl.deleteTexture(textureGPU);
      backend.delete(texture2);
    }
    /**
     * Copies data of the given source texture to the given destination texture.
     *
     * @param {Texture} srcTexture - The source texture.
     * @param {Texture} dstTexture - The destination texture.
     * @param {?(Box3|Box2)} [srcRegion=null] - The region of the source texture to copy.
     * @param {?(Vector2|Vector3)} [dstPosition=null] - The destination position of the copy.
     * @param {number} [srcLevel=0] - The source mip level to copy from.
     * @param {number} [dstLevel=0] - The destination mip level to copy to.
     */
    copyTextureToTexture(srcTexture, dstTexture, srcRegion = null, dstPosition = null, srcLevel = 0, dstLevel = 0) {
      const { gl, backend } = this;
      const { state } = this.backend;
      const { textureGPU: dstTextureGPU, glTextureType, glType, glFormat } = backend.get(dstTexture);
      state.bindTexture(glTextureType, dstTextureGPU);
      let width, height, depth2, minX, minY, minZ;
      let dstX, dstY, dstZ;
      const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[dstLevel] : srcTexture.image;
      if (srcRegion !== null) {
        width = srcRegion.max.x - srcRegion.min.x;
        height = srcRegion.max.y - srcRegion.min.y;
        depth2 = srcRegion.isBox3 ? srcRegion.max.z - srcRegion.min.z : 1;
        minX = srcRegion.min.x;
        minY = srcRegion.min.y;
        minZ = srcRegion.isBox3 ? srcRegion.min.z : 0;
      } else {
        const levelScale = Math.pow(2, -srcLevel);
        width = Math.floor(image.width * levelScale);
        height = Math.floor(image.height * levelScale);
        if (srcTexture.isDataArrayTexture || srcTexture.isArrayTexture) {
          depth2 = image.depth;
        } else if (srcTexture.isData3DTexture) {
          depth2 = Math.floor(image.depth * levelScale);
        } else {
          depth2 = 1;
        }
        minX = 0;
        minY = 0;
        minZ = 0;
      }
      if (dstPosition !== null) {
        dstX = dstPosition.x;
        dstY = dstPosition.y;
        dstZ = dstPosition.z;
      } else {
        dstX = 0;
        dstY = 0;
        dstZ = 0;
      }
      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
      gl.pixelStorei(gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
      const currentUnpackRowLen = gl.getParameter(gl.UNPACK_ROW_LENGTH);
      const currentUnpackImageHeight = gl.getParameter(gl.UNPACK_IMAGE_HEIGHT);
      const currentUnpackSkipPixels = gl.getParameter(gl.UNPACK_SKIP_PIXELS);
      const currentUnpackSkipRows = gl.getParameter(gl.UNPACK_SKIP_ROWS);
      const currentUnpackSkipImages = gl.getParameter(gl.UNPACK_SKIP_IMAGES);
      gl.pixelStorei(gl.UNPACK_ROW_LENGTH, image.width);
      gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, image.height);
      gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, minX);
      gl.pixelStorei(gl.UNPACK_SKIP_ROWS, minY);
      gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, minZ);
      const isDst3D = dstTexture.isDataArrayTexture || dstTexture.isData3DTexture || dstTexture.isArrayTexture;
      if (srcTexture.isRenderTargetTexture || srcTexture.isDepthTexture) {
        const srcTextureData = backend.get(srcTexture);
        const dstTextureData = backend.get(dstTexture);
        const srcRenderContextData = backend.get(srcTextureData.renderTarget);
        const dstRenderContextData = backend.get(dstTextureData.renderTarget);
        const srcFramebuffer = srcRenderContextData.framebuffers[srcTextureData.cacheKey];
        const dstFramebuffer = dstRenderContextData.framebuffers[dstTextureData.cacheKey];
        state.bindFramebuffer(gl.READ_FRAMEBUFFER, srcFramebuffer);
        state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, dstFramebuffer);
        let mask = gl.COLOR_BUFFER_BIT;
        if (srcTexture.isDepthTexture) mask = gl.DEPTH_BUFFER_BIT;
        gl.blitFramebuffer(minX, minY, width, height, dstX, dstY, width, height, mask, gl.NEAREST);
        state.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
        state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
      } else {
        if (isDst3D) {
          if (srcTexture.isDataTexture || srcTexture.isData3DTexture) {
            gl.texSubImage3D(glTextureType, dstLevel, dstX, dstY, dstZ, width, height, depth2, glFormat, glType, image.data);
          } else if (dstTexture.isCompressedArrayTexture) {
            gl.compressedTexSubImage3D(glTextureType, dstLevel, dstX, dstY, dstZ, width, height, depth2, glFormat, image.data);
          } else {
            gl.texSubImage3D(glTextureType, dstLevel, dstX, dstY, dstZ, width, height, depth2, glFormat, glType, image);
          }
        } else {
          if (srcTexture.isDataTexture) {
            gl.texSubImage2D(glTextureType, dstLevel, dstX, dstY, width, height, glFormat, glType, image.data);
          } else if (srcTexture.isCompressedTexture) {
            gl.compressedTexSubImage2D(glTextureType, dstLevel, dstX, dstY, image.width, image.height, glFormat, image.data);
          } else {
            gl.texSubImage2D(glTextureType, dstLevel, dstX, dstY, width, height, glFormat, glType, image);
          }
        }
      }
      gl.pixelStorei(gl.UNPACK_ROW_LENGTH, currentUnpackRowLen);
      gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight);
      gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels);
      gl.pixelStorei(gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows);
      gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages);
      if (dstLevel === 0 && dstTexture.generateMipmaps) {
        gl.generateMipmap(glTextureType);
      }
      state.unbindTexture();
    }
    /**
     * Copies the current bound framebuffer to the given texture.
     *
     * @param {Texture} texture - The destination texture.
     * @param {RenderContext} renderContext - The render context.
     * @param {Vector4} rectangle - A four dimensional vector defining the origin and dimension of the copy.
     */
    copyFramebufferToTexture(texture2, renderContext, rectangle) {
      const { gl } = this;
      const { state } = this.backend;
      const { textureGPU } = this.backend.get(texture2);
      const { x, y, z: width, w: height } = rectangle;
      const requireDrawFrameBuffer = texture2.isDepthTexture === true || renderContext.renderTarget && renderContext.renderTarget.samples > 0;
      const srcHeight = renderContext.renderTarget ? renderContext.renderTarget.height : this.backend.getDrawingBufferSize().y;
      if (requireDrawFrameBuffer) {
        const partial = x !== 0 || y !== 0;
        let mask;
        let attachment;
        if (texture2.isDepthTexture === true) {
          mask = gl.DEPTH_BUFFER_BIT;
          attachment = gl.DEPTH_ATTACHMENT;
          if (renderContext.stencil) {
            mask |= gl.STENCIL_BUFFER_BIT;
          }
        } else {
          mask = gl.COLOR_BUFFER_BIT;
          attachment = gl.COLOR_ATTACHMENT0;
        }
        if (partial) {
          const renderTargetContextData = this.backend.get(renderContext.renderTarget);
          const fb = renderTargetContextData.framebuffers[renderContext.getCacheKey()];
          const msaaFrameBuffer = renderTargetContextData.msaaFrameBuffer;
          state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb);
          state.bindFramebuffer(gl.READ_FRAMEBUFFER, msaaFrameBuffer);
          const flippedY = srcHeight - y - height;
          gl.blitFramebuffer(x, flippedY, x + width, flippedY + height, x, flippedY, x + width, flippedY + height, mask, gl.NEAREST);
          state.bindFramebuffer(gl.READ_FRAMEBUFFER, fb);
          state.bindTexture(gl.TEXTURE_2D, textureGPU);
          gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, x, flippedY, width, height);
          state.unbindTexture();
        } else {
          const fb = gl.createFramebuffer();
          state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb);
          gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureGPU, 0);
          gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, gl.NEAREST);
          gl.deleteFramebuffer(fb);
        }
      } else {
        state.bindTexture(gl.TEXTURE_2D, textureGPU);
        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, x, srcHeight - height - y, width, height);
        state.unbindTexture();
      }
      if (texture2.generateMipmaps) this.generateMipmaps(texture2);
      this.backend._setFramebuffer(renderContext);
    }
    /**
     * SetupS storage for internal depth/stencil buffers and bind to correct framebuffer.
     *
     * @param {WebGLRenderbuffer} renderbuffer - The render buffer.
     * @param {RenderContext} renderContext - The render context.
     * @param {number} samples - The MSAA sample count.
     * @param {boolean} [useMultisampledRTT=false] - Whether to use WEBGL_multisampled_render_to_texture or not.
     */
    setupRenderBufferStorage(renderbuffer, renderContext, samples, useMultisampledRTT = false) {
      const { gl } = this;
      const renderTarget = renderContext.renderTarget;
      const { depthTexture, depthBuffer, stencilBuffer, width, height } = renderTarget;
      gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
      if (depthBuffer && !stencilBuffer) {
        let glInternalFormat = gl.DEPTH_COMPONENT24;
        if (useMultisampledRTT === true) {
          const multisampledRTTExt = this.extensions.get("WEBGL_multisampled_render_to_texture");
          multisampledRTTExt.renderbufferStorageMultisampleEXT(gl.RENDERBUFFER, renderTarget.samples, glInternalFormat, width, height);
        } else if (samples > 0) {
          if (depthTexture && depthTexture.isDepthTexture) {
            if (depthTexture.type === gl.FLOAT) {
              glInternalFormat = gl.DEPTH_COMPONENT32F;
            }
          }
          gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, glInternalFormat, width, height);
        } else {
          gl.renderbufferStorage(gl.RENDERBUFFER, glInternalFormat, width, height);
        }
        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);
      } else if (depthBuffer && stencilBuffer) {
        if (samples > 0) {
          gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, gl.DEPTH24_STENCIL8, width, height);
        } else {
          gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);
        }
        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);
      }
    }
    /**
     * Returns texture data as a typed array.
     *
     * @async
     * @param {Texture} texture - The texture to copy.
     * @param {number} x - The x coordinate of the copy origin.
     * @param {number} y - The y coordinate of the copy origin.
     * @param {number} width - The width of the copy.
     * @param {number} height - The height of the copy.
     * @param {number} faceIndex - The face index.
     * @return {Promise<TypedArray>} A Promise that resolves with a typed array when the copy operation has finished.
     */
    async copyTextureToBuffer(texture2, x, y, width, height, faceIndex) {
      const { backend, gl } = this;
      const { textureGPU, glFormat, glType } = this.backend.get(texture2);
      const fb = gl.createFramebuffer();
      gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fb);
      const target = texture2.isCubeTexture ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D;
      gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, target, textureGPU, 0);
      const typedArrayType = this._getTypedArrayType(glType);
      const bytesPerTexel = this._getBytesPerTexel(glType, glFormat);
      const elementCount = width * height;
      const byteLength = elementCount * bytesPerTexel;
      const buffer2 = gl.createBuffer();
      gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buffer2);
      gl.bufferData(gl.PIXEL_PACK_BUFFER, byteLength, gl.STREAM_READ);
      gl.readPixels(x, y, width, height, glFormat, glType, 0);
      gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);
      await backend.utils._clientWaitAsync();
      const dstBuffer = new typedArrayType(byteLength / typedArrayType.BYTES_PER_ELEMENT);
      gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buffer2);
      gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, dstBuffer);
      gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);
      gl.deleteFramebuffer(fb);
      return dstBuffer;
    }
    /**
     * Returns the corresponding typed array type for the given WebGL data type.
     *
     * @private
     * @param {GLenum} glType - The WebGL data type.
     * @return {TypedArray.constructor} The typed array type.
     */
    _getTypedArrayType(glType) {
      const { gl } = this;
      if (glType === gl.UNSIGNED_BYTE) return Uint8Array;
      if (glType === gl.UNSIGNED_SHORT_4_4_4_4) return Uint16Array;
      if (glType === gl.UNSIGNED_SHORT_5_5_5_1) return Uint16Array;
      if (glType === gl.UNSIGNED_SHORT_5_6_5) return Uint16Array;
      if (glType === gl.UNSIGNED_SHORT) return Uint16Array;
      if (glType === gl.UNSIGNED_INT) return Uint32Array;
      if (glType === gl.HALF_FLOAT) return Uint16Array;
      if (glType === gl.FLOAT) return Float32Array;
      throw new Error(`Unsupported WebGL type: ${glType}`);
    }
    /**
     * Returns the bytes-per-texel value for the given WebGL data type and texture format.
     *
     * @private
     * @param {GLenum} glType - The WebGL data type.
     * @param {GLenum} glFormat - The WebGL texture format.
     * @return {number} The bytes-per-texel.
     */
    _getBytesPerTexel(glType, glFormat) {
      const { gl } = this;
      let bytesPerComponent = 0;
      if (glType === gl.UNSIGNED_BYTE) bytesPerComponent = 1;
      if (glType === gl.UNSIGNED_SHORT_4_4_4_4 || glType === gl.UNSIGNED_SHORT_5_5_5_1 || glType === gl.UNSIGNED_SHORT_5_6_5 || glType === gl.UNSIGNED_SHORT || glType === gl.HALF_FLOAT) bytesPerComponent = 2;
      if (glType === gl.UNSIGNED_INT || glType === gl.FLOAT) bytesPerComponent = 4;
      if (glFormat === gl.RGBA) return bytesPerComponent * 4;
      if (glFormat === gl.RGB) return bytesPerComponent * 3;
      if (glFormat === gl.ALPHA) return bytesPerComponent;
    }
  };
  function getImage(source) {
    if (source.isDataTexture) {
      return source.image.data;
    } else if (typeof HTMLImageElement !== "undefined" && source instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && source instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && source instanceof ImageBitmap || typeof OffscreenCanvas !== "undefined" && source instanceof OffscreenCanvas) {
      return source;
    }
    return source.data;
  }
  var WebGLExtensions = class {
    /**
     * Constructs a new utility object.
     *
     * @param {WebGLBackend} backend - The WebGL 2 backend.
     */
    constructor(backend) {
      this.backend = backend;
      this.gl = this.backend.gl;
      this.availableExtensions = this.gl.getSupportedExtensions();
      this.extensions = {};
    }
    /**
     * Returns the extension object for the given extension name.
     *
     * @param {string} name - The extension name.
     * @return {Object} The extension object.
     */
    get(name2) {
      let extension = this.extensions[name2];
      if (extension === void 0) {
        extension = this.gl.getExtension(name2);
        this.extensions[name2] = extension;
      }
      return extension;
    }
    /**
     * Returns `true` if the requested extension is available.
     *
     * @param {string} name - The extension name.
     * @return {boolean} Whether the given extension is available or not.
     */
    has(name2) {
      return this.availableExtensions.includes(name2);
    }
  };
  var WebGLCapabilities = class {
    /**
     * Constructs a new utility object.
     *
     * @param {WebGLBackend} backend - The WebGL 2 backend.
     */
    constructor(backend) {
      this.backend = backend;
      this.maxAnisotropy = null;
    }
    /**
     * Returns the maximum anisotropy texture filtering value. This value
     * depends on the device and is reported by the `EXT_texture_filter_anisotropic`
     * WebGL extension.
     *
     * @return {number} The maximum anisotropy texture filtering value.
     */
    getMaxAnisotropy() {
      if (this.maxAnisotropy !== null) return this.maxAnisotropy;
      const gl = this.backend.gl;
      const extensions = this.backend.extensions;
      if (extensions.has("EXT_texture_filter_anisotropic") === true) {
        const extension = extensions.get("EXT_texture_filter_anisotropic");
        this.maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
      } else {
        this.maxAnisotropy = 0;
      }
      return this.maxAnisotropy;
    }
  };
  var GLFeatureName = {
    "WEBGL_multi_draw": "WEBGL_multi_draw",
    "WEBGL_compressed_texture_astc": "texture-compression-astc",
    "WEBGL_compressed_texture_etc": "texture-compression-etc2",
    "WEBGL_compressed_texture_etc1": "texture-compression-etc1",
    "WEBGL_compressed_texture_pvrtc": "texture-compression-pvrtc",
    "WEBKIT_WEBGL_compressed_texture_pvrtc": "texture-compression-pvrtc",
    "WEBGL_compressed_texture_s3tc": "texture-compression-bc",
    "EXT_texture_compression_bptc": "texture-compression-bptc",
    "EXT_disjoint_timer_query_webgl2": "timestamp-query",
    "OVR_multiview2": "OVR_multiview2"
  };
  var WebGLBufferRenderer = class {
    constructor(backend) {
      this.gl = backend.gl;
      this.extensions = backend.extensions;
      this.info = backend.renderer.info;
      this.mode = null;
      this.index = 0;
      this.type = null;
      this.object = null;
    }
    render(start, count) {
      const { gl, mode, object, type, info, index } = this;
      if (index !== 0) {
        gl.drawElements(mode, count, type, start);
      } else {
        gl.drawArrays(mode, start, count);
      }
      info.update(object, count, 1);
    }
    renderInstances(start, count, primcount) {
      const { gl, mode, type, index, object, info } = this;
      if (primcount === 0) return;
      if (index !== 0) {
        gl.drawElementsInstanced(mode, count, type, start, primcount);
      } else {
        gl.drawArraysInstanced(mode, start, count, primcount);
      }
      info.update(object, count, primcount);
    }
    renderMultiDraw(starts, counts, drawCount) {
      const { extensions, mode, object, info } = this;
      if (drawCount === 0) return;
      const extension = extensions.get("WEBGL_multi_draw");
      if (extension === null) {
        for (let i = 0; i < drawCount; i++) {
          this.render(starts[i], counts[i]);
        }
      } else {
        if (this.index !== 0) {
          extension.multiDrawElementsWEBGL(mode, counts, 0, this.type, starts, 0, drawCount);
        } else {
          extension.multiDrawArraysWEBGL(mode, starts, 0, counts, 0, drawCount);
        }
        let elementCount = 0;
        for (let i = 0; i < drawCount; i++) {
          elementCount += counts[i];
        }
        info.update(object, elementCount, 1);
      }
    }
    renderMultiDrawInstances(starts, counts, drawCount, primcount) {
      const { extensions, mode, object, info } = this;
      if (drawCount === 0) return;
      const extension = extensions.get("WEBGL_multi_draw");
      if (extension === null) {
        for (let i = 0; i < drawCount; i++) {
          this.renderInstances(starts[i], counts[i], primcount[i]);
        }
      } else {
        if (this.index !== 0) {
          extension.multiDrawElementsInstancedWEBGL(mode, counts, 0, this.type, starts, 0, primcount, 0, drawCount);
        } else {
          extension.multiDrawArraysInstancedWEBGL(mode, starts, 0, counts, 0, primcount, 0, drawCount);
        }
        let elementCount = 0;
        for (let i = 0; i < drawCount; i++) {
          elementCount += counts[i] * primcount[i];
        }
        info.update(object, elementCount, 1);
      }
    }
    //
  };
  var TimestampQueryPool = class {
    /**
     * Creates a new timestamp query pool.
     *
     * @param {number} [maxQueries=256] - Maximum number of queries this pool can hold.
     */
    constructor(maxQueries = 256) {
      this.trackTimestamp = true;
      this.maxQueries = maxQueries;
      this.currentQueryIndex = 0;
      this.queryOffsets = /* @__PURE__ */ new Map();
      this.isDisposed = false;
      this.lastValue = 0;
      this.pendingResolve = false;
    }
    /**
     * Allocate queries for a specific renderContext.
     *
     * @abstract
     * @param {Object} renderContext - The render context to allocate queries for.
     * @returns {?number}
     */
    allocateQueriesForContext() {
    }
    /**
     * Resolve all timestamps and return data (or process them).
     *
     * @abstract
     * @async
     * @returns {Promise<number>|number} The resolved timestamp value.
     */
    async resolveQueriesAsync() {
    }
    /**
     * Dispose of the query pool.
     *
     * @abstract
     */
    dispose() {
    }
  };
  var WebGLTimestampQueryPool = class extends TimestampQueryPool {
    /**
     * Creates a new WebGL timestamp query pool.
     *
     * @param {WebGLRenderingContext|WebGL2RenderingContext} gl - The WebGL context.
     * @param {string} type - The type identifier for this query pool.
     * @param {number} [maxQueries=2048] - Maximum number of queries this pool can hold.
     */
    constructor(gl, type, maxQueries = 2048) {
      super(maxQueries);
      this.gl = gl;
      this.type = type;
      this.ext = gl.getExtension("EXT_disjoint_timer_query_webgl2") || gl.getExtension("EXT_disjoint_timer_query");
      if (!this.ext) {
        console.warn("EXT_disjoint_timer_query not supported; timestamps will be disabled.");
        this.trackTimestamp = false;
        return;
      }
      this.queries = [];
      for (let i = 0; i < this.maxQueries; i++) {
        this.queries.push(gl.createQuery());
      }
      this.activeQuery = null;
      this.queryStates = /* @__PURE__ */ new Map();
    }
    /**
     * Allocates a pair of queries for a given render context.
     *
     * @param {Object} renderContext - The render context to allocate queries for.
     * @returns {?number} The base offset for the allocated queries, or null if allocation failed.
     */
    allocateQueriesForContext(renderContext) {
      if (!this.trackTimestamp) return null;
      if (this.currentQueryIndex + 2 > this.maxQueries) {
        warnOnce(`WebGPUTimestampQueryPool [${this.type}]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${this.type.toUpperCase()} ).`);
        return null;
      }
      const baseOffset = this.currentQueryIndex;
      this.currentQueryIndex += 2;
      this.queryStates.set(baseOffset, "inactive");
      this.queryOffsets.set(renderContext.id, baseOffset);
      return baseOffset;
    }
    /**
     * Begins a timestamp query for the specified render context.
     *
     * @param {Object} renderContext - The render context to begin timing for.
     */
    beginQuery(renderContext) {
      if (!this.trackTimestamp || this.isDisposed) {
        return;
      }
      const baseOffset = this.queryOffsets.get(renderContext.id);
      if (baseOffset == null) {
        return;
      }
      if (this.activeQuery !== null) {
        return;
      }
      const query = this.queries[baseOffset];
      if (!query) {
        return;
      }
      try {
        if (this.queryStates.get(baseOffset) === "inactive") {
          this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, query);
          this.activeQuery = baseOffset;
          this.queryStates.set(baseOffset, "started");
        }
      } catch (error) {
        console.error("Error in beginQuery:", error);
        this.activeQuery = null;
        this.queryStates.set(baseOffset, "inactive");
      }
    }
    /**
     * Ends the active timestamp query for the specified render context.
     *
     * @param {Object} renderContext - The render context to end timing for.
     * @param {string} renderContext.id - Unique identifier for the render context.
     */
    endQuery(renderContext) {
      if (!this.trackTimestamp || this.isDisposed) {
        return;
      }
      const baseOffset = this.queryOffsets.get(renderContext.id);
      if (baseOffset == null) {
        return;
      }
      if (this.activeQuery !== baseOffset) {
        return;
      }
      try {
        this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);
        this.queryStates.set(baseOffset, "ended");
        this.activeQuery = null;
      } catch (error) {
        console.error("Error in endQuery:", error);
        this.queryStates.set(baseOffset, "inactive");
        this.activeQuery = null;
      }
    }
    /**
     * Asynchronously resolves all completed queries and returns the total duration.
     *
     * @async
     * @returns {Promise<number>} The total duration in milliseconds, or the last valid value if resolution fails.
     */
    async resolveQueriesAsync() {
      if (!this.trackTimestamp || this.pendingResolve) {
        return this.lastValue;
      }
      this.pendingResolve = true;
      try {
        const resolvePromises = [];
        for (const [baseOffset, state] of this.queryStates) {
          if (state === "ended") {
            const query = this.queries[baseOffset];
            resolvePromises.push(this.resolveQuery(query));
          }
        }
        if (resolvePromises.length === 0) {
          return this.lastValue;
        }
        const results = await Promise.all(resolvePromises);
        const totalDuration = results.reduce((acc, val) => acc + val, 0);
        this.lastValue = totalDuration;
        this.currentQueryIndex = 0;
        this.queryOffsets.clear();
        this.queryStates.clear();
        this.activeQuery = null;
        return totalDuration;
      } catch (error) {
        console.error("Error resolving queries:", error);
        return this.lastValue;
      } finally {
        this.pendingResolve = false;
      }
    }
    /**
     * Resolves a single query, checking for completion and disjoint operation.
     *
     * @async
     * @param {WebGLQuery} query - The query object to resolve.
     * @returns {Promise<number>} The elapsed time in milliseconds.
     */
    async resolveQuery(query) {
      return new Promise((resolve) => {
        if (this.isDisposed) {
          resolve(this.lastValue);
          return;
        }
        let timeoutId;
        let isResolved = false;
        const cleanup = () => {
          if (timeoutId) {
            clearTimeout(timeoutId);
            timeoutId = null;
          }
        };
        const finalizeResolution = (value) => {
          if (!isResolved) {
            isResolved = true;
            cleanup();
            resolve(value);
          }
        };
        const checkQuery = () => {
          if (this.isDisposed) {
            finalizeResolution(this.lastValue);
            return;
          }
          try {
            const disjoint = this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);
            if (disjoint) {
              finalizeResolution(this.lastValue);
              return;
            }
            const available = this.gl.getQueryParameter(query, this.gl.QUERY_RESULT_AVAILABLE);
            if (!available) {
              timeoutId = setTimeout(checkQuery, 1);
              return;
            }
            const elapsed = this.gl.getQueryParameter(query, this.gl.QUERY_RESULT);
            resolve(Number(elapsed) / 1e6);
          } catch (error) {
            console.error("Error checking query:", error);
            resolve(this.lastValue);
          }
        };
        checkQuery();
      });
    }
    /**
     * Releases all resources held by this query pool.
     * This includes deleting all query objects and clearing internal state.
     */
    dispose() {
      if (this.isDisposed) {
        return;
      }
      this.isDisposed = true;
      if (!this.trackTimestamp) return;
      for (const query of this.queries) {
        this.gl.deleteQuery(query);
      }
      this.queries = [];
      this.queryStates.clear();
      this.queryOffsets.clear();
      this.lastValue = 0;
      this.activeQuery = null;
    }
  };
  var _drawingBufferSize = /* @__PURE__ */ new Vector2();
  var WebGLBackend = class extends Backend {
    /**
     * WebGLBackend options.
     *
     * @typedef {Object} WebGLBackend~Options
     * @property {boolean} [logarithmicDepthBuffer=false] - Whether logarithmic depth buffer is enabled or not.
     * @property {boolean} [alpha=true] - Whether the default framebuffer (which represents the final contents of the canvas) should be transparent or opaque.
     * @property {boolean} [depth=true] - Whether the default framebuffer should have a depth buffer or not.
     * @property {boolean} [stencil=false] - Whether the default framebuffer should have a stencil buffer or not.
     * @property {boolean} [antialias=false] - Whether MSAA as the default anti-aliasing should be enabled or not.
     * @property {number} [samples=0] - When `antialias` is `true`, `4` samples are used by default. Set this parameter to any other integer value than 0 to overwrite the default.
     * @property {boolean} [forceWebGL=false] - If set to `true`, the renderer uses a WebGL 2 backend no matter if WebGPU is supported or not.
     * @property {WebGL2RenderingContext} [context=undefined] - A WebGL 2 rendering context.
     */
    /**
     * Constructs a new WebGPU backend.
     *
     * @param {WebGLBackend~Options} [parameters] - The configuration parameter.
     */
    constructor(parameters = {}) {
      super(parameters);
      this.isWebGLBackend = true;
      this.attributeUtils = null;
      this.extensions = null;
      this.capabilities = null;
      this.textureUtils = null;
      this.bufferRenderer = null;
      this.gl = null;
      this.state = null;
      this.utils = null;
      this.vaoCache = {};
      this.transformFeedbackCache = {};
      this.discard = false;
      this.disjoint = null;
      this.parallel = null;
      this._currentContext = null;
      this._knownBindings = /* @__PURE__ */ new WeakSet();
      this._supportsInvalidateFramebuffer = typeof navigator === "undefined" ? false : /OculusBrowser/g.test(navigator.userAgent);
      this._xrFramebuffer = null;
    }
    /**
     * Initializes the backend so it is ready for usage.
     *
     * @param {Renderer} renderer - The renderer.
     */
    init(renderer) {
      super.init(renderer);
      const parameters = this.parameters;
      const contextAttributes = {
        antialias: renderer.samples > 0,
        alpha: true,
        // always true for performance reasons
        depth: renderer.depth,
        stencil: renderer.stencil
      };
      const glContext = parameters.context !== void 0 ? parameters.context : renderer.domElement.getContext("webgl2", contextAttributes);
      function onContextLost(event) {
        event.preventDefault();
        const contextLossInfo = {
          api: "WebGL",
          message: event.statusMessage || "Unknown reason",
          reason: null,
          originalEvent: event
        };
        renderer.onDeviceLost(contextLossInfo);
      }
      this._onContextLost = onContextLost;
      renderer.domElement.addEventListener("webglcontextlost", onContextLost, false);
      this.gl = glContext;
      this.extensions = new WebGLExtensions(this);
      this.capabilities = new WebGLCapabilities(this);
      this.attributeUtils = new WebGLAttributeUtils(this);
      this.textureUtils = new WebGLTextureUtils(this);
      this.bufferRenderer = new WebGLBufferRenderer(this);
      this.state = new WebGLState(this);
      this.utils = new WebGLUtils(this);
      this.extensions.get("EXT_color_buffer_float");
      this.extensions.get("WEBGL_clip_cull_distance");
      this.extensions.get("OES_texture_float_linear");
      this.extensions.get("EXT_color_buffer_half_float");
      this.extensions.get("WEBGL_multisampled_render_to_texture");
      this.extensions.get("WEBGL_render_shared_exponent");
      this.extensions.get("WEBGL_multi_draw");
      this.extensions.get("OVR_multiview2");
      this.disjoint = this.extensions.get("EXT_disjoint_timer_query_webgl2");
      this.parallel = this.extensions.get("KHR_parallel_shader_compile");
    }
    /**
     * The coordinate system of the backend.
     *
     * @type {number}
     * @readonly
     */
    get coordinateSystem() {
      return WebGLCoordinateSystem;
    }
    /**
     * This method performs a readback operation by moving buffer data from
     * a storage buffer attribute from the GPU to the CPU.
     *
     * @async
     * @param {StorageBufferAttribute} attribute - The storage buffer attribute.
     * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.
     */
    async getArrayBufferAsync(attribute2) {
      return await this.attributeUtils.getArrayBufferAsync(attribute2);
    }
    /**
     * Can be used to synchronize CPU operations with GPU tasks. So when this method is called,
     * the CPU waits for the GPU to complete its operation (e.g. a compute task).
     *
     * @async
     * @return {Promise} A Promise that resolves when synchronization has been finished.
     */
    async waitForGPU() {
      await this.utils._clientWaitAsync();
    }
    /**
     * Ensures the backend is XR compatible.
     *
     * @async
     * @return {Promise} A Promise that resolve when the renderer is XR compatible.
     */
    async makeXRCompatible() {
      const attributes = this.gl.getContextAttributes();
      if (attributes.xrCompatible !== true) {
        await this.gl.makeXRCompatible();
      }
    }
    /**
     * Sets the XR rendering destination.
     *
     * @param {WebGLFramebuffer} xrFramebuffer - The XR framebuffer.
     */
    setXRTarget(xrFramebuffer) {
      this._xrFramebuffer = xrFramebuffer;
    }
    /**
     * Configures the given XR render target with external textures.
     *
     * This method is only relevant when using the WebXR Layers API.
     *
     * @param {XRRenderTarget} renderTarget - The XR render target.
     * @param {WebGLTexture} colorTexture - A native color texture.
     * @param {?WebGLTexture} [depthTexture=null] - A native depth texture.
     */
    setXRRenderTargetTextures(renderTarget, colorTexture, depthTexture = null) {
      const gl = this.gl;
      this.set(renderTarget.texture, { textureGPU: colorTexture, glInternalFormat: gl.RGBA8 });
      if (depthTexture !== null) {
        const glInternalFormat = renderTarget.stencilBuffer ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
        this.set(renderTarget.depthTexture, { textureGPU: depthTexture, glInternalFormat });
        if (this.extensions.has("WEBGL_multisampled_render_to_texture") === true && renderTarget.autoAllocateDepthBuffer === true && renderTarget.multiview === false) {
          console.warn("THREE.WebGLBackend: Render-to-texture extension was disabled because an external texture was provided");
        }
        renderTarget.autoAllocateDepthBuffer = false;
      }
    }
    /**
     * Inits a time stamp query for the given render context.
     *
     * @param {RenderContext} renderContext - The render context.
     */
    initTimestampQuery(renderContext) {
      if (!this.disjoint || !this.trackTimestamp) return;
      const type = renderContext.isComputeNode ? "compute" : "render";
      if (!this.timestampQueryPool[type]) {
        this.timestampQueryPool[type] = new WebGLTimestampQueryPool(this.gl, type, 2048);
      }
      const timestampQueryPool = this.timestampQueryPool[type];
      const baseOffset = timestampQueryPool.allocateQueriesForContext(renderContext);
      if (baseOffset !== null) {
        timestampQueryPool.beginQuery(renderContext);
      }
    }
    // timestamp utils
    /**
     * Prepares the timestamp buffer.
     *
     * @param {RenderContext} renderContext - The render context.
     */
    prepareTimestampBuffer(renderContext) {
      if (!this.disjoint || !this.trackTimestamp) return;
      const type = renderContext.isComputeNode ? "compute" : "render";
      const timestampQueryPool = this.timestampQueryPool[type];
      timestampQueryPool.endQuery(renderContext);
    }
    /**
     * Returns the backend's rendering context.
     *
     * @return {WebGL2RenderingContext} The rendering context.
     */
    getContext() {
      return this.gl;
    }
    /**
     * This method is executed at the beginning of a render call and prepares
     * the WebGL state for upcoming render calls
     *
     * @param {RenderContext} renderContext - The render context.
     */
    beginRender(renderContext) {
      const { state } = this;
      const renderContextData = this.get(renderContext);
      if (renderContext.viewport) {
        this.updateViewport(renderContext);
      } else {
        const { width, height } = this.getDrawingBufferSize(_drawingBufferSize);
        state.viewport(0, 0, width, height);
      }
      if (renderContext.scissor) {
        const { x, y, width, height } = renderContext.scissorValue;
        state.scissor(x, renderContext.height - height - y, width, height);
      }
      this.initTimestampQuery(renderContext);
      renderContextData.previousContext = this._currentContext;
      this._currentContext = renderContext;
      this._setFramebuffer(renderContext);
      this.clear(renderContext.clearColor, renderContext.clearDepth, renderContext.clearStencil, renderContext, false);
      const occlusionQueryCount = renderContext.occlusionQueryCount;
      if (occlusionQueryCount > 0) {
        renderContextData.currentOcclusionQueries = renderContextData.occlusionQueries;
        renderContextData.currentOcclusionQueryObjects = renderContextData.occlusionQueryObjects;
        renderContextData.lastOcclusionObject = null;
        renderContextData.occlusionQueries = new Array(occlusionQueryCount);
        renderContextData.occlusionQueryObjects = new Array(occlusionQueryCount);
        renderContextData.occlusionQueryIndex = 0;
      }
    }
    /**
     * This method is executed at the end of a render call and finalizes work
     * after draw calls.
     *
     * @param {RenderContext} renderContext - The render context.
     */
    finishRender(renderContext) {
      const { gl, state } = this;
      const renderContextData = this.get(renderContext);
      const previousContext = renderContextData.previousContext;
      state.resetVertexState();
      const occlusionQueryCount = renderContext.occlusionQueryCount;
      if (occlusionQueryCount > 0) {
        if (occlusionQueryCount > renderContextData.occlusionQueryIndex) {
          gl.endQuery(gl.ANY_SAMPLES_PASSED);
        }
        this.resolveOccludedAsync(renderContext);
      }
      const textures = renderContext.textures;
      if (textures !== null) {
        for (let i = 0; i < textures.length; i++) {
          const texture2 = textures[i];
          if (texture2.generateMipmaps) {
            this.generateMipmaps(texture2);
          }
        }
      }
      this._currentContext = previousContext;
      if (renderContext.textures !== null && renderContext.renderTarget) {
        const renderTargetContextData = this.get(renderContext.renderTarget);
        const { resolveDepthBuffer, samples } = renderContext.renderTarget;
        if (samples > 0 && this._useMultisampledExtension(renderContext.renderTarget) === false) {
          const fb = renderTargetContextData.framebuffers[renderContext.getCacheKey()];
          const mask = gl.COLOR_BUFFER_BIT;
          const msaaFrameBuffer = renderTargetContextData.msaaFrameBuffer;
          const textures2 = renderContext.textures;
          state.bindFramebuffer(gl.READ_FRAMEBUFFER, msaaFrameBuffer);
          state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb);
          for (let i = 0; i < textures2.length; i++) {
            if (renderContext.scissor) {
              const { x, y, width, height } = renderContext.scissorValue;
              const viewY = renderContext.height - height - y;
              gl.blitFramebuffer(x, viewY, x + width, viewY + height, x, viewY, x + width, viewY + height, mask, gl.NEAREST);
              if (this._supportsInvalidateFramebuffer === true) {
                gl.invalidateSubFramebuffer(gl.READ_FRAMEBUFFER, renderTargetContextData.invalidationArray, x, viewY, width, height);
              }
            } else {
              gl.blitFramebuffer(0, 0, renderContext.width, renderContext.height, 0, 0, renderContext.width, renderContext.height, mask, gl.NEAREST);
              if (this._supportsInvalidateFramebuffer === true) {
                gl.invalidateFramebuffer(gl.READ_FRAMEBUFFER, renderTargetContextData.invalidationArray);
              }
            }
          }
        } else if (resolveDepthBuffer === false && renderTargetContextData.framebuffers) {
          const fb = renderTargetContextData.framebuffers[renderContext.getCacheKey()];
          state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb);
          gl.invalidateFramebuffer(gl.DRAW_FRAMEBUFFER, renderTargetContextData.depthInvalidationArray);
        }
      }
      if (previousContext !== null) {
        this._setFramebuffer(previousContext);
        if (previousContext.viewport) {
          this.updateViewport(previousContext);
        } else {
          const { width, height } = this.getDrawingBufferSize(_drawingBufferSize);
          state.viewport(0, 0, width, height);
        }
      }
      this.prepareTimestampBuffer(renderContext);
    }
    /**
     * This method processes the result of occlusion queries and writes it
     * into render context data.
     *
     * @async
     * @param {RenderContext} renderContext - The render context.
     */
    resolveOccludedAsync(renderContext) {
      const renderContextData = this.get(renderContext);
      const { currentOcclusionQueries, currentOcclusionQueryObjects } = renderContextData;
      if (currentOcclusionQueries && currentOcclusionQueryObjects) {
        const occluded = /* @__PURE__ */ new WeakSet();
        const { gl } = this;
        renderContextData.currentOcclusionQueryObjects = null;
        renderContextData.currentOcclusionQueries = null;
        const check = () => {
          let completed = 0;
          for (let i = 0; i < currentOcclusionQueries.length; i++) {
            const query = currentOcclusionQueries[i];
            if (query === null) continue;
            if (gl.getQueryParameter(query, gl.QUERY_RESULT_AVAILABLE)) {
              if (gl.getQueryParameter(query, gl.QUERY_RESULT) === 0) occluded.add(currentOcclusionQueryObjects[i]);
              currentOcclusionQueries[i] = null;
              gl.deleteQuery(query);
              completed++;
            }
          }
          if (completed < currentOcclusionQueries.length) {
            requestAnimationFrame(check);
          } else {
            renderContextData.occluded = occluded;
          }
        };
        check();
      }
    }
    /**
     * Returns `true` if the given 3D object is fully occluded by other
     * 3D objects in the scene.
     *
     * @param {RenderContext} renderContext - The render context.
     * @param {Object3D} object - The 3D object to test.
     * @return {boolean} Whether the 3D object is fully occluded or not.
     */
    isOccluded(renderContext, object) {
      const renderContextData = this.get(renderContext);
      return renderContextData.occluded && renderContextData.occluded.has(object);
    }
    /**
     * Updates the viewport with the values from the given render context.
     *
     * @param {RenderContext} renderContext - The render context.
     */
    updateViewport(renderContext) {
      const { state } = this;
      const { x, y, width, height } = renderContext.viewportValue;
      state.viewport(x, renderContext.height - height - y, width, height);
    }
    /**
     * Defines the scissor test.
     *
     * @param {boolean} boolean - Whether the scissor test should be enabled or not.
     */
    setScissorTest(boolean) {
      const state = this.state;
      state.setScissorTest(boolean);
    }
    /**
     * Returns the clear color and alpha into a single
     * color object.
     *
     * @return {Color4} The clear color.
     */
    getClearColor() {
      const clearColor = super.getClearColor();
      clearColor.r *= clearColor.a;
      clearColor.g *= clearColor.a;
      clearColor.b *= clearColor.a;
      return clearColor;
    }
    /**
     * Performs a clear operation.
     *
     * @param {boolean} color - Whether the color buffer should be cleared or not.
     * @param {boolean} depth - Whether the depth buffer should be cleared or not.
     * @param {boolean} stencil - Whether the stencil buffer should be cleared or not.
     * @param {?Object} [descriptor=null] - The render context of the current set render target.
     * @param {boolean} [setFrameBuffer=true] - TODO.
     */
    clear(color2, depth2, stencil, descriptor = null, setFrameBuffer = true) {
      const { gl, renderer } = this;
      if (descriptor === null) {
        const clearColor = this.getClearColor();
        descriptor = {
          textures: null,
          clearColorValue: clearColor
        };
      }
      let clear = 0;
      if (color2) clear |= gl.COLOR_BUFFER_BIT;
      if (depth2) clear |= gl.DEPTH_BUFFER_BIT;
      if (stencil) clear |= gl.STENCIL_BUFFER_BIT;
      if (clear !== 0) {
        let clearColor;
        if (descriptor.clearColorValue) {
          clearColor = descriptor.clearColorValue;
        } else {
          clearColor = this.getClearColor();
        }
        const clearDepth = renderer.getClearDepth();
        const clearStencil = renderer.getClearStencil();
        if (depth2) this.state.setDepthMask(true);
        if (descriptor.textures === null) {
          gl.clearColor(clearColor.r, clearColor.g, clearColor.b, clearColor.a);
          gl.clear(clear);
        } else {
          if (setFrameBuffer) this._setFramebuffer(descriptor);
          if (color2) {
            for (let i = 0; i < descriptor.textures.length; i++) {
              if (i === 0) {
                gl.clearBufferfv(gl.COLOR, i, [clearColor.r, clearColor.g, clearColor.b, clearColor.a]);
              } else {
                gl.clearBufferfv(gl.COLOR, i, [0, 0, 0, 1]);
              }
            }
          }
          if (depth2 && stencil) {
            gl.clearBufferfi(gl.DEPTH_STENCIL, 0, clearDepth, clearStencil);
          } else if (depth2) {
            gl.clearBufferfv(gl.DEPTH, 0, [clearDepth]);
          } else if (stencil) {
            gl.clearBufferiv(gl.STENCIL, 0, [clearStencil]);
          }
        }
      }
    }
    /**
     * This method is executed at the beginning of a compute call and
     * prepares the state for upcoming compute tasks.
     *
     * @param {Node|Array<Node>} computeGroup - The compute node(s).
     */
    beginCompute(computeGroup) {
      const { state, gl } = this;
      state.bindFramebuffer(gl.FRAMEBUFFER, null);
      this.initTimestampQuery(computeGroup);
    }
    /**
     * Executes a compute command for the given compute node.
     *
     * @param {Node|Array<Node>} computeGroup - The group of compute nodes of a compute call. Can be a single compute node.
     * @param {Node} computeNode - The compute node.
     * @param {Array<BindGroup>} bindings - The bindings.
     * @param {ComputePipeline} pipeline - The compute pipeline.
     */
    compute(computeGroup, computeNode, bindings, pipeline) {
      const { state, gl } = this;
      if (this.discard === false) {
        gl.enable(gl.RASTERIZER_DISCARD);
        this.discard = true;
      }
      const { programGPU, transformBuffers, attributes } = this.get(pipeline);
      const vaoKey = this._getVaoKey(attributes);
      const vaoGPU = this.vaoCache[vaoKey];
      if (vaoGPU === void 0) {
        this._createVao(attributes);
      } else {
        state.setVertexState(vaoGPU);
      }
      state.useProgram(programGPU);
      this._bindUniforms(bindings);
      const transformFeedbackGPU = this._getTransformFeedback(transformBuffers);
      gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, transformFeedbackGPU);
      gl.beginTransformFeedback(gl.POINTS);
      if (attributes[0].isStorageInstancedBufferAttribute) {
        gl.drawArraysInstanced(gl.POINTS, 0, 1, computeNode.count);
      } else {
        gl.drawArrays(gl.POINTS, 0, computeNode.count);
      }
      gl.endTransformFeedback();
      gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
      for (let i = 0; i < transformBuffers.length; i++) {
        const dualAttributeData = transformBuffers[i];
        if (dualAttributeData.pbo) {
          this.textureUtils.copyBufferToTexture(dualAttributeData.transformBuffer, dualAttributeData.pbo);
        }
        dualAttributeData.switchBuffers();
      }
    }
    /**
     * This method is executed at the end of a compute call and
     * finalizes work after compute tasks.
     *
     * @param {Node|Array<Node>} computeGroup - The compute node(s).
     */
    finishCompute(computeGroup) {
      const gl = this.gl;
      this.discard = false;
      gl.disable(gl.RASTERIZER_DISCARD);
      this.prepareTimestampBuffer(computeGroup);
      if (this._currentContext) {
        this._setFramebuffer(this._currentContext);
      }
    }
    /**
     * Internal to determine if the current render target is a render target array with depth 2D array texture.
     *
     * @param {RenderContext} renderContext - The render context.
     * @return {boolean} Whether the render target is a render target array with depth 2D array texture.
     *
     * @private
     */
    _isRenderCameraDepthArray(renderContext) {
      return renderContext.depthTexture && renderContext.depthTexture.isArrayTexture && renderContext.camera.isArrayCamera;
    }
    /**
     * Executes a draw command for the given render object.
     *
     * @param {RenderObject} renderObject - The render object to draw.
     * @param {Info} info - Holds a series of statistical information about the GPU memory and the rendering process.
     */
    draw(renderObject) {
      const { object, pipeline, material: material2, context: context2, hardwareClippingPlanes } = renderObject;
      const { programGPU } = this.get(pipeline);
      const { gl, state } = this;
      const contextData = this.get(context2);
      const drawParams = renderObject.getDrawParameters();
      if (drawParams === null) return;
      this._bindUniforms(renderObject.getBindings());
      const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
      state.setMaterial(material2, frontFaceCW, hardwareClippingPlanes);
      state.useProgram(programGPU);
      const renderObjectData = this.get(renderObject);
      let vaoGPU = renderObjectData.staticVao;
      if (vaoGPU === void 0 || renderObjectData.geometryId !== renderObject.geometry.id) {
        const vaoKey = this._getVaoKey(renderObject.getAttributes());
        vaoGPU = this.vaoCache[vaoKey];
        if (vaoGPU === void 0) {
          let staticVao;
          ({ vaoGPU, staticVao } = this._createVao(renderObject.getAttributes()));
          if (staticVao) {
            renderObjectData.staticVao = vaoGPU;
            renderObjectData.geometryId = renderObject.geometry.id;
          }
        }
      }
      const index = renderObject.getIndex();
      const indexGPU = index !== null ? this.get(index).bufferGPU : null;
      state.setVertexState(vaoGPU, indexGPU);
      const lastObject = contextData.lastOcclusionObject;
      if (lastObject !== object && lastObject !== void 0) {
        if (lastObject !== null && lastObject.occlusionTest === true) {
          gl.endQuery(gl.ANY_SAMPLES_PASSED);
          contextData.occlusionQueryIndex++;
        }
        if (object.occlusionTest === true) {
          const query = gl.createQuery();
          gl.beginQuery(gl.ANY_SAMPLES_PASSED, query);
          contextData.occlusionQueries[contextData.occlusionQueryIndex] = query;
          contextData.occlusionQueryObjects[contextData.occlusionQueryIndex] = object;
        }
        contextData.lastOcclusionObject = object;
      }
      const renderer = this.bufferRenderer;
      if (object.isPoints) renderer.mode = gl.POINTS;
      else if (object.isLineSegments) renderer.mode = gl.LINES;
      else if (object.isLine) renderer.mode = gl.LINE_STRIP;
      else if (object.isLineLoop) renderer.mode = gl.LINE_LOOP;
      else {
        if (material2.wireframe === true) {
          state.setLineWidth(material2.wireframeLinewidth * this.renderer.getPixelRatio());
          renderer.mode = gl.LINES;
        } else {
          renderer.mode = gl.TRIANGLES;
        }
      }
      const { vertexCount, instanceCount } = drawParams;
      let { firstVertex } = drawParams;
      renderer.object = object;
      if (index !== null) {
        firstVertex *= index.array.BYTES_PER_ELEMENT;
        const indexData = this.get(index);
        renderer.index = index.count;
        renderer.type = indexData.type;
      } else {
        renderer.index = 0;
      }
      const draw = () => {
        if (object.isBatchedMesh) {
          if (object._multiDrawInstances !== null) {
            warnOnce("THREE.WebGLBackend: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection.");
            renderer.renderMultiDrawInstances(object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount, object._multiDrawInstances);
          } else if (!this.hasFeature("WEBGL_multi_draw")) {
            warnOnce("THREE.WebGLRenderer: WEBGL_multi_draw not supported.");
          } else {
            renderer.renderMultiDraw(object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount);
          }
        } else if (instanceCount > 1) {
          renderer.renderInstances(firstVertex, vertexCount, instanceCount);
        } else {
          renderer.render(firstVertex, vertexCount);
        }
      };
      if (renderObject.camera.isArrayCamera === true && renderObject.camera.cameras.length > 0 && renderObject.camera.isMultiViewCamera === false) {
        const cameraData = this.get(renderObject.camera);
        const cameras = renderObject.camera.cameras;
        const cameraIndex2 = renderObject.getBindingGroup("cameraIndex").bindings[0];
        if (cameraData.indexesGPU === void 0 || cameraData.indexesGPU.length !== cameras.length) {
          const data = new Uint32Array([0, 0, 0, 0]);
          const indexesGPU = [];
          for (let i = 0, len = cameras.length; i < len; i++) {
            const bufferGPU = gl.createBuffer();
            data[0] = i;
            gl.bindBuffer(gl.UNIFORM_BUFFER, bufferGPU);
            gl.bufferData(gl.UNIFORM_BUFFER, data, gl.STATIC_DRAW);
            indexesGPU.push(bufferGPU);
          }
          cameraData.indexesGPU = indexesGPU;
        }
        const cameraIndexData = this.get(cameraIndex2);
        const pixelRatio = this.renderer.getPixelRatio();
        const renderTarget = this._currentContext.renderTarget;
        const isRenderCameraDepthArray = this._isRenderCameraDepthArray(this._currentContext);
        const prevActiveCubeFace = this._currentContext.activeCubeFace;
        if (isRenderCameraDepthArray) {
          const textureData = this.get(renderTarget.depthTexture);
          if (textureData.clearedRenderId !== this.renderer._nodes.nodeFrame.renderId) {
            textureData.clearedRenderId = this.renderer._nodes.nodeFrame.renderId;
            const { stencilBuffer } = renderTarget;
            for (let i = 0, len = cameras.length; i < len; i++) {
              this.renderer._activeCubeFace = i;
              this._currentContext.activeCubeFace = i;
              this._setFramebuffer(this._currentContext);
              this.clear(false, true, stencilBuffer, this._currentContext, false);
            }
            this.renderer._activeCubeFace = prevActiveCubeFace;
            this._currentContext.activeCubeFace = prevActiveCubeFace;
          }
        }
        for (let i = 0, len = cameras.length; i < len; i++) {
          const subCamera = cameras[i];
          if (object.layers.test(subCamera.layers)) {
            if (isRenderCameraDepthArray) {
              this.renderer._activeCubeFace = i;
              this._currentContext.activeCubeFace = i;
              this._setFramebuffer(this._currentContext);
            }
            const vp = subCamera.viewport;
            if (vp !== void 0) {
              const x = vp.x * pixelRatio;
              const y = vp.y * pixelRatio;
              const width = vp.width * pixelRatio;
              const height = vp.height * pixelRatio;
              state.viewport(
                Math.floor(x),
                Math.floor(renderObject.context.height - height - y),
                Math.floor(width),
                Math.floor(height)
              );
            }
            state.bindBufferBase(gl.UNIFORM_BUFFER, cameraIndexData.index, cameraData.indexesGPU[i]);
            draw();
          }
          this._currentContext.activeCubeFace = prevActiveCubeFace;
          this.renderer._activeCubeFace = prevActiveCubeFace;
        }
      } else {
        draw();
      }
    }
    /**
     * Explain why always null is returned.
     *
     * @param {RenderObject} renderObject - The render object.
     * @return {boolean} Whether the render pipeline requires an update or not.
     */
    needsRenderUpdate() {
      return false;
    }
    /**
     * Explain why no cache key is computed.
     *
     * @param {RenderObject} renderObject - The render object.
     * @return {string} The cache key.
     */
    getRenderCacheKey() {
      return "";
    }
    // textures
    /**
     * Creates a default texture for the given texture that can be used
     * as a placeholder until the actual texture is ready for usage.
     *
     * @param {Texture} texture - The texture to create a default texture for.
     */
    createDefaultTexture(texture2) {
      this.textureUtils.createDefaultTexture(texture2);
    }
    /**
     * Defines a texture on the GPU for the given texture object.
     *
     * @param {Texture} texture - The texture.
     * @param {Object} [options={}] - Optional configuration parameter.
     */
    createTexture(texture2, options) {
      this.textureUtils.createTexture(texture2, options);
    }
    /**
     * Uploads the updated texture data to the GPU.
     *
     * @param {Texture} texture - The texture.
     * @param {Object} [options={}] - Optional configuration parameter.
     */
    updateTexture(texture2, options) {
      this.textureUtils.updateTexture(texture2, options);
    }
    /**
     * Generates mipmaps for the given texture.
     *
     * @param {Texture} texture - The texture.
     */
    generateMipmaps(texture2) {
      this.textureUtils.generateMipmaps(texture2);
    }
    /**
     * Destroys the GPU data for the given texture object.
     *
     * @param {Texture} texture - The texture.
     */
    destroyTexture(texture2) {
      this.textureUtils.destroyTexture(texture2);
    }
    /**
     * Returns texture data as a typed array.
     *
     * @async
     * @param {Texture} texture - The texture to copy.
     * @param {number} x - The x coordinate of the copy origin.
     * @param {number} y - The y coordinate of the copy origin.
     * @param {number} width - The width of the copy.
     * @param {number} height - The height of the copy.
     * @param {number} faceIndex - The face index.
     * @return {Promise<TypedArray>} A Promise that resolves with a typed array when the copy operation has finished.
     */
    async copyTextureToBuffer(texture2, x, y, width, height, faceIndex) {
      return this.textureUtils.copyTextureToBuffer(texture2, x, y, width, height, faceIndex);
    }
    /**
     * This method does nothing since WebGL 2 has no concept of samplers.
     *
     * @param {Texture} texture - The texture to create the sampler for.
     */
    createSampler() {
    }
    /**
     * This method does nothing since WebGL 2 has no concept of samplers.
     *
     * @param {Texture} texture - The texture to destroy the sampler for.
     */
    destroySampler() {
    }
    // node builder
    /**
     * Returns a node builder for the given render object.
     *
     * @param {RenderObject} object - The render object.
     * @param {Renderer} renderer - The renderer.
     * @return {GLSLNodeBuilder} The node builder.
     */
    createNodeBuilder(object, renderer) {
      return new GLSLNodeBuilder(object, renderer);
    }
    // program
    /**
     * Creates a shader program from the given programmable stage.
     *
     * @param {ProgrammableStage} program - The programmable stage.
     */
    createProgram(program) {
      const gl = this.gl;
      const { stage, code } = program;
      const shader = stage === "fragment" ? gl.createShader(gl.FRAGMENT_SHADER) : gl.createShader(gl.VERTEX_SHADER);
      gl.shaderSource(shader, code);
      gl.compileShader(shader);
      this.set(program, {
        shaderGPU: shader
      });
    }
    /**
     * Destroys the shader program of the given programmable stage.
     *
     * @param {ProgrammableStage} program - The programmable stage.
     */
    destroyProgram(program) {
      this.delete(program);
    }
    /**
     * Creates a render pipeline for the given render object.
     *
     * @param {RenderObject} renderObject - The render object.
     * @param {Array<Promise>} promises - An array of compilation promises which are used in `compileAsync()`.
     */
    createRenderPipeline(renderObject, promises) {
      const gl = this.gl;
      const pipeline = renderObject.pipeline;
      const { fragmentProgram, vertexProgram } = pipeline;
      const programGPU = gl.createProgram();
      const fragmentShader = this.get(fragmentProgram).shaderGPU;
      const vertexShader = this.get(vertexProgram).shaderGPU;
      gl.attachShader(programGPU, fragmentShader);
      gl.attachShader(programGPU, vertexShader);
      gl.linkProgram(programGPU);
      this.set(pipeline, {
        programGPU,
        fragmentShader,
        vertexShader
      });
      if (promises !== null && this.parallel) {
        const p = new Promise((resolve) => {
          const parallel = this.parallel;
          const checkStatus = () => {
            if (gl.getProgramParameter(programGPU, parallel.COMPLETION_STATUS_KHR)) {
              this._completeCompile(renderObject, pipeline);
              resolve();
            } else {
              requestAnimationFrame(checkStatus);
            }
          };
          checkStatus();
        });
        promises.push(p);
        return;
      }
      this._completeCompile(renderObject, pipeline);
    }
    /**
     * Formats the source code of error messages.
     *
     * @private
     * @param {string} string - The code.
     * @param {number} errorLine - The error line.
     * @return {string} The formatted code.
     */
    _handleSource(string2, errorLine) {
      const lines = string2.split("\n");
      const lines2 = [];
      const from = Math.max(errorLine - 6, 0);
      const to = Math.min(errorLine + 6, lines.length);
      for (let i = from; i < to; i++) {
        const line = i + 1;
        lines2.push(`${line === errorLine ? ">" : " "} ${line}: ${lines[i]}`);
      }
      return lines2.join("\n");
    }
    /**
     * Gets the shader compilation errors from the info log.
     *
     * @private
     * @param {WebGL2RenderingContext} gl - The rendering context.
     * @param {WebGLShader} shader - The WebGL shader object.
     * @param {string} type - The shader type.
     * @return {string} The shader errors.
     */
    _getShaderErrors(gl, shader, type) {
      const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
      const errors = gl.getShaderInfoLog(shader).trim();
      if (status && errors === "") return "";
      const errorMatches = /ERROR: 0:(\d+)/.exec(errors);
      if (errorMatches) {
        const errorLine = parseInt(errorMatches[1]);
        return type.toUpperCase() + "\n\n" + errors + "\n\n" + this._handleSource(gl.getShaderSource(shader), errorLine);
      } else {
        return errors;
      }
    }
    /**
     * Logs shader compilation errors.
     *
     * @private
     * @param {WebGLProgram} programGPU - The WebGL program.
     * @param {WebGLShader} glFragmentShader - The fragment shader as a native WebGL shader object.
     * @param {WebGLShader} glVertexShader - The vertex shader as a native WebGL shader object.
     */
    _logProgramError(programGPU, glFragmentShader, glVertexShader) {
      if (this.renderer.debug.checkShaderErrors) {
        const gl = this.gl;
        const programLog = gl.getProgramInfoLog(programGPU).trim();
        if (gl.getProgramParameter(programGPU, gl.LINK_STATUS) === false) {
          if (typeof this.renderer.debug.onShaderError === "function") {
            this.renderer.debug.onShaderError(gl, programGPU, glVertexShader, glFragmentShader);
          } else {
            const vertexErrors = this._getShaderErrors(gl, glVertexShader, "vertex");
            const fragmentErrors = this._getShaderErrors(gl, glFragmentShader, "fragment");
            console.error(
              "THREE.WebGLProgram: Shader Error " + gl.getError() + " - VALIDATE_STATUS " + gl.getProgramParameter(programGPU, gl.VALIDATE_STATUS) + "\n\nProgram Info Log: " + programLog + "\n" + vertexErrors + "\n" + fragmentErrors
            );
          }
        } else if (programLog !== "") {
          console.warn("THREE.WebGLProgram: Program Info Log:", programLog);
        }
      }
    }
    /**
     * Completes the shader program setup for the given render object.
     *
     * @private
     * @param {RenderObject} renderObject - The render object.
     * @param {RenderPipeline} pipeline - The render pipeline.
     */
    _completeCompile(renderObject, pipeline) {
      const { state, gl } = this;
      const pipelineData = this.get(pipeline);
      const { programGPU, fragmentShader, vertexShader } = pipelineData;
      if (gl.getProgramParameter(programGPU, gl.LINK_STATUS) === false) {
        this._logProgramError(programGPU, fragmentShader, vertexShader);
      }
      state.useProgram(programGPU);
      const bindings = renderObject.getBindings();
      this._setupBindings(bindings, programGPU);
      this.set(pipeline, {
        programGPU
      });
    }
    /**
     * Creates a compute pipeline for the given compute node.
     *
     * @param {ComputePipeline} computePipeline - The compute pipeline.
     * @param {Array<BindGroup>} bindings - The bindings.
     */
    createComputePipeline(computePipeline, bindings) {
      const { state, gl } = this;
      const fragmentProgram = {
        stage: "fragment",
        code: "#version 300 es\nprecision highp float;\nvoid main() {}"
      };
      this.createProgram(fragmentProgram);
      const { computeProgram } = computePipeline;
      const programGPU = gl.createProgram();
      const fragmentShader = this.get(fragmentProgram).shaderGPU;
      const vertexShader = this.get(computeProgram).shaderGPU;
      const transforms = computeProgram.transforms;
      const transformVaryingNames = [];
      const transformAttributeNodes = [];
      for (let i = 0; i < transforms.length; i++) {
        const transform = transforms[i];
        transformVaryingNames.push(transform.varyingName);
        transformAttributeNodes.push(transform.attributeNode);
      }
      gl.attachShader(programGPU, fragmentShader);
      gl.attachShader(programGPU, vertexShader);
      gl.transformFeedbackVaryings(
        programGPU,
        transformVaryingNames,
        gl.SEPARATE_ATTRIBS
      );
      gl.linkProgram(programGPU);
      if (gl.getProgramParameter(programGPU, gl.LINK_STATUS) === false) {
        this._logProgramError(programGPU, fragmentShader, vertexShader);
      }
      state.useProgram(programGPU);
      this._setupBindings(bindings, programGPU);
      const attributeNodes = computeProgram.attributes;
      const attributes = [];
      const transformBuffers = [];
      for (let i = 0; i < attributeNodes.length; i++) {
        const attribute2 = attributeNodes[i].node.attribute;
        attributes.push(attribute2);
        if (!this.has(attribute2)) this.attributeUtils.createAttribute(attribute2, gl.ARRAY_BUFFER);
      }
      for (let i = 0; i < transformAttributeNodes.length; i++) {
        const attribute2 = transformAttributeNodes[i].attribute;
        if (!this.has(attribute2)) this.attributeUtils.createAttribute(attribute2, gl.ARRAY_BUFFER);
        const attributeData = this.get(attribute2);
        transformBuffers.push(attributeData);
      }
      this.set(computePipeline, {
        programGPU,
        transformBuffers,
        attributes
      });
    }
    /**
     * Creates bindings from the given bind group definition.
     *
     * @param {BindGroup} bindGroup - The bind group.
     * @param {Array<BindGroup>} bindings - Array of bind groups.
     * @param {number} cacheIndex - The cache index.
     * @param {number} version - The version.
     */
    createBindings(bindGroup, bindings) {
      if (this._knownBindings.has(bindings) === false) {
        this._knownBindings.add(bindings);
        let uniformBuffers = 0;
        let textures = 0;
        for (const bindGroup2 of bindings) {
          this.set(bindGroup2, {
            textures,
            uniformBuffers
          });
          for (const binding of bindGroup2.bindings) {
            if (binding.isUniformBuffer) uniformBuffers++;
            if (binding.isSampledTexture) textures++;
          }
        }
      }
      this.updateBindings(bindGroup, bindings);
    }
    /**
     * Updates the given bind group definition.
     *
     * @param {BindGroup} bindGroup - The bind group.
     * @param {Array<BindGroup>} bindings - Array of bind groups.
     * @param {number} cacheIndex - The cache index.
     * @param {number} version - The version.
     */
    updateBindings(bindGroup) {
      const { gl } = this;
      const bindGroupData = this.get(bindGroup);
      let i = bindGroupData.uniformBuffers;
      let t2 = bindGroupData.textures;
      for (const binding of bindGroup.bindings) {
        if (binding.isUniformsGroup || binding.isUniformBuffer) {
          const data = binding.buffer;
          const bufferGPU = gl.createBuffer();
          gl.bindBuffer(gl.UNIFORM_BUFFER, bufferGPU);
          gl.bufferData(gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW);
          this.set(binding, {
            index: i++,
            bufferGPU
          });
        } else if (binding.isSampledTexture) {
          const { textureGPU, glTextureType } = this.get(binding.texture);
          this.set(binding, {
            index: t2++,
            textureGPU,
            glTextureType
          });
        }
      }
    }
    /**
     * Updates a buffer binding.
     *
     *  @param {Buffer} binding - The buffer binding to update.
     */
    updateBinding(binding) {
      const gl = this.gl;
      if (binding.isUniformsGroup || binding.isUniformBuffer) {
        const bindingData = this.get(binding);
        const bufferGPU = bindingData.bufferGPU;
        const data = binding.buffer;
        gl.bindBuffer(gl.UNIFORM_BUFFER, bufferGPU);
        gl.bufferData(gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW);
      }
    }
    // attributes
    /**
     * Creates the GPU buffer of an indexed shader attribute.
     *
     * @param {BufferAttribute} attribute - The indexed buffer attribute.
     */
    createIndexAttribute(attribute2) {
      const gl = this.gl;
      this.attributeUtils.createAttribute(attribute2, gl.ELEMENT_ARRAY_BUFFER);
    }
    /**
     * Creates the GPU buffer of a shader attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute.
     */
    createAttribute(attribute2) {
      if (this.has(attribute2)) return;
      const gl = this.gl;
      this.attributeUtils.createAttribute(attribute2, gl.ARRAY_BUFFER);
    }
    /**
     * Creates the GPU buffer of a storage attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute.
     */
    createStorageAttribute(attribute2) {
      if (this.has(attribute2)) return;
      const gl = this.gl;
      this.attributeUtils.createAttribute(attribute2, gl.ARRAY_BUFFER);
    }
    /**
     * Updates the GPU buffer of a shader attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute to update.
     */
    updateAttribute(attribute2) {
      this.attributeUtils.updateAttribute(attribute2);
    }
    /**
     * Destroys the GPU buffer of a shader attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute to destroy.
     */
    destroyAttribute(attribute2) {
      this.attributeUtils.destroyAttribute(attribute2);
    }
    /**
     * Checks if the given feature is supported  by the backend.
     *
     * @param {string} name - The feature's name.
     * @return {boolean} Whether the feature is supported or not.
     */
    hasFeature(name2) {
      const keysMatching = Object.keys(GLFeatureName).filter((key) => GLFeatureName[key] === name2);
      const extensions = this.extensions;
      for (let i = 0; i < keysMatching.length; i++) {
        if (extensions.has(keysMatching[i])) return true;
      }
      return false;
    }
    /**
     * Returns the maximum anisotropy texture filtering value.
     *
     * @return {number} The maximum anisotropy texture filtering value.
     */
    getMaxAnisotropy() {
      return this.capabilities.getMaxAnisotropy();
    }
    /**
     * Copies data of the given source texture to the given destination texture.
     *
     * @param {Texture} srcTexture - The source texture.
     * @param {Texture} dstTexture - The destination texture.
     * @param {?(Box3|Box2)} [srcRegion=null] - The region of the source texture to copy.
     * @param {?(Vector2|Vector3)} [dstPosition=null] - The destination position of the copy.
     * @param {number} [srcLevel=0] - The source mip level to copy from.
     * @param {number} [dstLevel=0] - The destination mip level to copy to.
     */
    copyTextureToTexture(srcTexture, dstTexture, srcRegion = null, dstPosition = null, srcLevel = 0, dstLevel = 0) {
      this.textureUtils.copyTextureToTexture(srcTexture, dstTexture, srcRegion, dstPosition, srcLevel, dstLevel);
    }
    /**
     * Copies the current bound framebuffer to the given texture.
     *
     * @param {Texture} texture - The destination texture.
     * @param {RenderContext} renderContext - The render context.
     * @param {Vector4} rectangle - A four dimensional vector defining the origin and dimension of the copy.
     */
    copyFramebufferToTexture(texture2, renderContext, rectangle) {
      this.textureUtils.copyFramebufferToTexture(texture2, renderContext, rectangle);
    }
    /**
     * Configures the active framebuffer from the given render context.
     *
     * @private
     * @param {RenderContext} descriptor - The render context.
     */
    _setFramebuffer(descriptor) {
      const { gl, state } = this;
      let currentFrameBuffer = null;
      if (descriptor.textures !== null) {
        const renderTarget = descriptor.renderTarget;
        const renderTargetContextData = this.get(renderTarget);
        const { samples, depthBuffer, stencilBuffer } = renderTarget;
        const isCube = renderTarget.isWebGLCubeRenderTarget === true;
        const isRenderTarget3D = renderTarget.isRenderTarget3D === true;
        const isRenderTargetArray = renderTarget.depth > 1;
        const isXRRenderTarget = renderTarget.isXRRenderTarget === true;
        const hasExternalTextures = isXRRenderTarget === true && renderTarget.hasExternalTextures === true;
        let msaaFb = renderTargetContextData.msaaFrameBuffer;
        let depthRenderbuffer = renderTargetContextData.depthRenderbuffer;
        const multisampledRTTExt = this.extensions.get("WEBGL_multisampled_render_to_texture");
        const multiviewExt = this.extensions.get("OVR_multiview2");
        const useMultisampledRTT = this._useMultisampledExtension(renderTarget);
        const cacheKey = getCacheKey(descriptor);
        let fb;
        if (isCube) {
          renderTargetContextData.cubeFramebuffers || (renderTargetContextData.cubeFramebuffers = {});
          fb = renderTargetContextData.cubeFramebuffers[cacheKey];
        } else if (isXRRenderTarget && hasExternalTextures === false) {
          fb = this._xrFramebuffer;
        } else {
          renderTargetContextData.framebuffers || (renderTargetContextData.framebuffers = {});
          fb = renderTargetContextData.framebuffers[cacheKey];
        }
        if (fb === void 0) {
          fb = gl.createFramebuffer();
          state.bindFramebuffer(gl.FRAMEBUFFER, fb);
          const textures = descriptor.textures;
          const depthInvalidationArray = [];
          if (isCube) {
            renderTargetContextData.cubeFramebuffers[cacheKey] = fb;
            const { textureGPU } = this.get(textures[0]);
            const cubeFace = this.renderer._activeCubeFace;
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + cubeFace, textureGPU, 0);
          } else {
            renderTargetContextData.framebuffers[cacheKey] = fb;
            for (let i = 0; i < textures.length; i++) {
              const texture2 = textures[i];
              const textureData = this.get(texture2);
              textureData.renderTarget = descriptor.renderTarget;
              textureData.cacheKey = cacheKey;
              const attachment = gl.COLOR_ATTACHMENT0 + i;
              if (renderTarget.multiview) {
                multiviewExt.framebufferTextureMultisampleMultiviewOVR(gl.FRAMEBUFFER, attachment, textureData.textureGPU, 0, samples, 0, 2);
              } else if (isRenderTarget3D || isRenderTargetArray) {
                const layer2 = this.renderer._activeCubeFace;
                gl.framebufferTextureLayer(gl.FRAMEBUFFER, attachment, textureData.textureGPU, 0, layer2);
              } else {
                if (useMultisampledRTT) {
                  multisampledRTTExt.framebufferTexture2DMultisampleEXT(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureData.textureGPU, 0, samples);
                } else {
                  gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureData.textureGPU, 0);
                }
              }
            }
            state.drawBuffers(descriptor, fb);
          }
          const depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;
          if (renderTarget.autoAllocateDepthBuffer === true) {
            const renderbuffer = gl.createRenderbuffer();
            this.textureUtils.setupRenderBufferStorage(renderbuffer, descriptor, 0, useMultisampledRTT);
            renderTargetContextData.xrDepthRenderbuffer = renderbuffer;
            depthInvalidationArray.push(stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT);
            gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, depthStyle, gl.RENDERBUFFER, renderbuffer);
          } else {
            if (descriptor.depthTexture !== null) {
              depthInvalidationArray.push(stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT);
              const textureData = this.get(descriptor.depthTexture);
              textureData.renderTarget = descriptor.renderTarget;
              textureData.cacheKey = cacheKey;
              if (renderTarget.multiview) {
                multiviewExt.framebufferTextureMultisampleMultiviewOVR(gl.FRAMEBUFFER, depthStyle, textureData.textureGPU, 0, samples, 0, 2);
              } else if (hasExternalTextures && useMultisampledRTT) {
                multisampledRTTExt.framebufferTexture2DMultisampleEXT(gl.FRAMEBUFFER, depthStyle, gl.TEXTURE_2D, textureData.textureGPU, 0, samples);
              } else {
                if (descriptor.depthTexture.isArrayTexture) {
                  const layer2 = this.renderer._activeCubeFace;
                  gl.framebufferTextureLayer(gl.FRAMEBUFFER, depthStyle, textureData.textureGPU, 0, layer2);
                } else {
                  gl.framebufferTexture2D(gl.FRAMEBUFFER, depthStyle, gl.TEXTURE_2D, textureData.textureGPU, 0);
                }
              }
            }
          }
          renderTargetContextData.depthInvalidationArray = depthInvalidationArray;
        } else {
          const isRenderCameraDepthArray = this._isRenderCameraDepthArray(descriptor);
          if (isRenderCameraDepthArray) {
            state.bindFramebuffer(gl.FRAMEBUFFER, fb);
            const layer2 = this.renderer._activeCubeFace;
            const depthData = this.get(descriptor.depthTexture);
            const depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;
            gl.framebufferTextureLayer(
              gl.FRAMEBUFFER,
              depthStyle,
              depthData.textureGPU,
              0,
              layer2
            );
          }
          if (isXRRenderTarget || useMultisampledRTT || renderTarget.multiview) {
            state.bindFramebuffer(gl.FRAMEBUFFER, fb);
            const textureData = this.get(descriptor.textures[0]);
            if (renderTarget.multiview) {
              multiviewExt.framebufferTextureMultisampleMultiviewOVR(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, textureData.textureGPU, 0, samples, 0, 2);
            } else if (useMultisampledRTT) {
              multisampledRTTExt.framebufferTexture2DMultisampleEXT(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, textureData.textureGPU, 0, samples);
            } else {
              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, textureData.textureGPU, 0);
            }
            const depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;
            if (renderTarget.autoAllocateDepthBuffer === true) {
              const renderbuffer = renderTargetContextData.xrDepthRenderbuffer;
              gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
              gl.framebufferRenderbuffer(gl.FRAMEBUFFER, depthStyle, gl.RENDERBUFFER, renderbuffer);
            } else {
              const textureData2 = this.get(descriptor.depthTexture);
              if (renderTarget.multiview) {
                multiviewExt.framebufferTextureMultisampleMultiviewOVR(gl.FRAMEBUFFER, depthStyle, textureData2.textureGPU, 0, samples, 0, 2);
              } else if (useMultisampledRTT) {
                multisampledRTTExt.framebufferTexture2DMultisampleEXT(gl.FRAMEBUFFER, depthStyle, gl.TEXTURE_2D, textureData2.textureGPU, 0, samples);
              } else {
                gl.framebufferTexture2D(gl.FRAMEBUFFER, depthStyle, gl.TEXTURE_2D, textureData2.textureGPU, 0);
              }
            }
          }
        }
        if (samples > 0 && useMultisampledRTT === false && !renderTarget.multiview) {
          if (msaaFb === void 0) {
            const invalidationArray = [];
            msaaFb = gl.createFramebuffer();
            state.bindFramebuffer(gl.FRAMEBUFFER, msaaFb);
            const msaaRenderbuffers = [];
            const textures = descriptor.textures;
            for (let i = 0; i < textures.length; i++) {
              msaaRenderbuffers[i] = gl.createRenderbuffer();
              gl.bindRenderbuffer(gl.RENDERBUFFER, msaaRenderbuffers[i]);
              invalidationArray.push(gl.COLOR_ATTACHMENT0 + i);
              if (depthBuffer) {
                const depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;
                invalidationArray.push(depthStyle);
              }
              const texture2 = descriptor.textures[i];
              const textureData = this.get(texture2);
              gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, textureData.glInternalFormat, descriptor.width, descriptor.height);
              gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.RENDERBUFFER, msaaRenderbuffers[i]);
            }
            renderTargetContextData.msaaFrameBuffer = msaaFb;
            renderTargetContextData.msaaRenderbuffers = msaaRenderbuffers;
            if (depthRenderbuffer === void 0) {
              depthRenderbuffer = gl.createRenderbuffer();
              this.textureUtils.setupRenderBufferStorage(depthRenderbuffer, descriptor, samples);
              renderTargetContextData.depthRenderbuffer = depthRenderbuffer;
              const depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;
              invalidationArray.push(depthStyle);
            }
            renderTargetContextData.invalidationArray = invalidationArray;
          }
          currentFrameBuffer = renderTargetContextData.msaaFrameBuffer;
        } else {
          currentFrameBuffer = fb;
        }
      }
      state.bindFramebuffer(gl.FRAMEBUFFER, currentFrameBuffer);
    }
    /**
     * Computes the VAO key for the given index and attributes.
     *
     * @private
     * @param {Array<BufferAttribute>} attributes - An array of buffer attributes.
     * @return {string} The VAO key.
     */
    _getVaoKey(attributes) {
      let key = "";
      for (let i = 0; i < attributes.length; i++) {
        const attributeData = this.get(attributes[i]);
        key += ":" + attributeData.id;
      }
      return key;
    }
    /**
     * Creates a VAO from the index and attributes.
     *
     * @private
     * @param {Array<BufferAttribute>} attributes - An array of buffer attributes.
     * @return {Object} The VAO data.
     */
    _createVao(attributes) {
      const { gl } = this;
      const vaoGPU = gl.createVertexArray();
      let key = "";
      let staticVao = true;
      gl.bindVertexArray(vaoGPU);
      for (let i = 0; i < attributes.length; i++) {
        const attribute2 = attributes[i];
        const attributeData = this.get(attribute2);
        key += ":" + attributeData.id;
        gl.bindBuffer(gl.ARRAY_BUFFER, attributeData.bufferGPU);
        gl.enableVertexAttribArray(i);
        if (attribute2.isStorageBufferAttribute || attribute2.isStorageInstancedBufferAttribute) staticVao = false;
        let stride, offset;
        if (attribute2.isInterleavedBufferAttribute === true) {
          stride = attribute2.data.stride * attributeData.bytesPerElement;
          offset = attribute2.offset * attributeData.bytesPerElement;
        } else {
          stride = 0;
          offset = 0;
        }
        if (attributeData.isInteger) {
          gl.vertexAttribIPointer(i, attribute2.itemSize, attributeData.type, stride, offset);
        } else {
          gl.vertexAttribPointer(i, attribute2.itemSize, attributeData.type, attribute2.normalized, stride, offset);
        }
        if (attribute2.isInstancedBufferAttribute && !attribute2.isInterleavedBufferAttribute) {
          gl.vertexAttribDivisor(i, attribute2.meshPerAttribute);
        } else if (attribute2.isInterleavedBufferAttribute && attribute2.data.isInstancedInterleavedBuffer) {
          gl.vertexAttribDivisor(i, attribute2.data.meshPerAttribute);
        }
      }
      gl.bindBuffer(gl.ARRAY_BUFFER, null);
      this.vaoCache[key] = vaoGPU;
      return { vaoGPU, staticVao };
    }
    /**
     * Creates a transform feedback from the given transform buffers.
     *
     * @private
     * @param {Array<DualAttributeData>} transformBuffers - The transform buffers.
     * @return {WebGLTransformFeedback} The transform feedback.
     */
    _getTransformFeedback(transformBuffers) {
      let key = "";
      for (let i = 0; i < transformBuffers.length; i++) {
        key += ":" + transformBuffers[i].id;
      }
      let transformFeedbackGPU = this.transformFeedbackCache[key];
      if (transformFeedbackGPU !== void 0) {
        return transformFeedbackGPU;
      }
      const { gl } = this;
      transformFeedbackGPU = gl.createTransformFeedback();
      gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, transformFeedbackGPU);
      for (let i = 0; i < transformBuffers.length; i++) {
        const attributeData = transformBuffers[i];
        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, i, attributeData.transformBuffer);
      }
      gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
      this.transformFeedbackCache[key] = transformFeedbackGPU;
      return transformFeedbackGPU;
    }
    /**
     * Setups the given bindings.
     *
     * @private
     * @param {Array<BindGroup>} bindings - The bindings.
     * @param {WebGLProgram} programGPU - The WebGL program.
     */
    _setupBindings(bindings, programGPU) {
      const gl = this.gl;
      for (const bindGroup of bindings) {
        for (const binding of bindGroup.bindings) {
          const bindingData = this.get(binding);
          const index = bindingData.index;
          if (binding.isUniformsGroup || binding.isUniformBuffer) {
            const location = gl.getUniformBlockIndex(programGPU, binding.name);
            gl.uniformBlockBinding(programGPU, location, index);
          } else if (binding.isSampledTexture) {
            const location = gl.getUniformLocation(programGPU, binding.name);
            gl.uniform1i(location, index);
          }
        }
      }
    }
    /**
     * Binds the given uniforms.
     *
     * @private
     * @param {Array<BindGroup>} bindings - The bindings.
     */
    _bindUniforms(bindings) {
      const { gl, state } = this;
      for (const bindGroup of bindings) {
        for (const binding of bindGroup.bindings) {
          const bindingData = this.get(binding);
          const index = bindingData.index;
          if (binding.isUniformsGroup || binding.isUniformBuffer) {
            state.bindBufferBase(gl.UNIFORM_BUFFER, index, bindingData.bufferGPU);
          } else if (binding.isSampledTexture) {
            state.bindTexture(bindingData.glTextureType, bindingData.textureGPU, gl.TEXTURE0 + index);
          }
        }
      }
    }
    /**
     * Returns `true` if the `WEBGL_multisampled_render_to_texture` extension
     * should be used when MSAA is enabled.
     *
     * @private
     * @param {RenderTarget} renderTarget - The render target that should be multisampled.
     * @return {boolean} Whether to use the `WEBGL_multisampled_render_to_texture` extension for MSAA or not.
     */
    _useMultisampledExtension(renderTarget) {
      if (renderTarget.multiview === true) {
        return true;
      }
      return renderTarget.samples > 0 && this.extensions.has("WEBGL_multisampled_render_to_texture") === true && renderTarget.autoAllocateDepthBuffer !== false;
    }
    /**
     * Frees internal resources.
     */
    dispose() {
      const extension = this.extensions.get("WEBGL_lose_context");
      if (extension) extension.loseContext();
      this.renderer.domElement.removeEventListener("webglcontextlost", this._onContextLost);
    }
  };
  var GPUPrimitiveTopology = {
    PointList: "point-list",
    LineList: "line-list",
    LineStrip: "line-strip",
    TriangleList: "triangle-list",
    TriangleStrip: "triangle-strip"
  };
  var GPUCompareFunction = {
    Never: "never",
    Less: "less",
    Equal: "equal",
    LessEqual: "less-equal",
    Greater: "greater",
    NotEqual: "not-equal",
    GreaterEqual: "greater-equal",
    Always: "always"
  };
  var GPUStoreOp = {
    Store: "store"
  };
  var GPULoadOp = {
    Load: "load",
    Clear: "clear"
  };
  var GPUFrontFace = {
    CCW: "ccw"
  };
  var GPUCullMode = {
    None: "none",
    Front: "front",
    Back: "back"
  };
  var GPUIndexFormat = {
    Uint16: "uint16",
    Uint32: "uint32"
  };
  var GPUTextureFormat = {
    // 8-bit formats
    R8Unorm: "r8unorm",
    R8Snorm: "r8snorm",
    R8Uint: "r8uint",
    R8Sint: "r8sint",
    // 16-bit formats
    R16Uint: "r16uint",
    R16Sint: "r16sint",
    R16Float: "r16float",
    RG8Unorm: "rg8unorm",
    RG8Snorm: "rg8snorm",
    RG8Uint: "rg8uint",
    RG8Sint: "rg8sint",
    // 32-bit formats
    R32Uint: "r32uint",
    R32Sint: "r32sint",
    R32Float: "r32float",
    RG16Uint: "rg16uint",
    RG16Sint: "rg16sint",
    RG16Float: "rg16float",
    RGBA8Unorm: "rgba8unorm",
    RGBA8UnormSRGB: "rgba8unorm-srgb",
    RGBA8Snorm: "rgba8snorm",
    RGBA8Uint: "rgba8uint",
    RGBA8Sint: "rgba8sint",
    BGRA8Unorm: "bgra8unorm",
    BGRA8UnormSRGB: "bgra8unorm-srgb",
    // Packed 32-bit formats
    RGB9E5UFloat: "rgb9e5ufloat",
    RGB10A2Unorm: "rgb10a2unorm",
    RG11B10UFloat: "rgb10a2unorm",
    // 64-bit formats
    RG32Uint: "rg32uint",
    RG32Sint: "rg32sint",
    RG32Float: "rg32float",
    RGBA16Uint: "rgba16uint",
    RGBA16Sint: "rgba16sint",
    RGBA16Float: "rgba16float",
    // 128-bit formats
    RGBA32Uint: "rgba32uint",
    RGBA32Sint: "rgba32sint",
    RGBA32Float: "rgba32float",
    Depth16Unorm: "depth16unorm",
    Depth24Plus: "depth24plus",
    Depth24PlusStencil8: "depth24plus-stencil8",
    Depth32Float: "depth32float",
    // 'depth32float-stencil8' extension
    Depth32FloatStencil8: "depth32float-stencil8",
    // BC compressed formats usable if 'texture-compression-bc' is both
    // supported by the device/user agent and enabled in requestDevice.
    BC1RGBAUnorm: "bc1-rgba-unorm",
    BC1RGBAUnormSRGB: "bc1-rgba-unorm-srgb",
    BC2RGBAUnorm: "bc2-rgba-unorm",
    BC2RGBAUnormSRGB: "bc2-rgba-unorm-srgb",
    BC3RGBAUnorm: "bc3-rgba-unorm",
    BC3RGBAUnormSRGB: "bc3-rgba-unorm-srgb",
    BC4RUnorm: "bc4-r-unorm",
    BC4RSnorm: "bc4-r-snorm",
    BC5RGUnorm: "bc5-rg-unorm",
    BC5RGSnorm: "bc5-rg-snorm",
    BC6HRGBUFloat: "bc6h-rgb-ufloat",
    BC6HRGBFloat: "bc6h-rgb-float",
    BC7RGBAUnorm: "bc7-rgba-unorm",
    BC7RGBAUnormSRGB: "bc7-rgba-srgb",
    // ETC2 compressed formats usable if 'texture-compression-etc2' is both
    // supported by the device/user agent and enabled in requestDevice.
    ETC2RGB8Unorm: "etc2-rgb8unorm",
    ETC2RGB8UnormSRGB: "etc2-rgb8unorm-srgb",
    ETC2RGB8A1Unorm: "etc2-rgb8a1unorm",
    ETC2RGB8A1UnormSRGB: "etc2-rgb8a1unorm-srgb",
    ETC2RGBA8Unorm: "etc2-rgba8unorm",
    ETC2RGBA8UnormSRGB: "etc2-rgba8unorm-srgb",
    EACR11Unorm: "eac-r11unorm",
    EACR11Snorm: "eac-r11snorm",
    EACRG11Unorm: "eac-rg11unorm",
    EACRG11Snorm: "eac-rg11snorm",
    // ASTC compressed formats usable if 'texture-compression-astc' is both
    // supported by the device/user agent and enabled in requestDevice.
    ASTC4x4Unorm: "astc-4x4-unorm",
    ASTC4x4UnormSRGB: "astc-4x4-unorm-srgb",
    ASTC5x4Unorm: "astc-5x4-unorm",
    ASTC5x4UnormSRGB: "astc-5x4-unorm-srgb",
    ASTC5x5Unorm: "astc-5x5-unorm",
    ASTC5x5UnormSRGB: "astc-5x5-unorm-srgb",
    ASTC6x5Unorm: "astc-6x5-unorm",
    ASTC6x5UnormSRGB: "astc-6x5-unorm-srgb",
    ASTC6x6Unorm: "astc-6x6-unorm",
    ASTC6x6UnormSRGB: "astc-6x6-unorm-srgb",
    ASTC8x5Unorm: "astc-8x5-unorm",
    ASTC8x5UnormSRGB: "astc-8x5-unorm-srgb",
    ASTC8x6Unorm: "astc-8x6-unorm",
    ASTC8x6UnormSRGB: "astc-8x6-unorm-srgb",
    ASTC8x8Unorm: "astc-8x8-unorm",
    ASTC8x8UnormSRGB: "astc-8x8-unorm-srgb",
    ASTC10x5Unorm: "astc-10x5-unorm",
    ASTC10x5UnormSRGB: "astc-10x5-unorm-srgb",
    ASTC10x6Unorm: "astc-10x6-unorm",
    ASTC10x6UnormSRGB: "astc-10x6-unorm-srgb",
    ASTC10x8Unorm: "astc-10x8-unorm",
    ASTC10x8UnormSRGB: "astc-10x8-unorm-srgb",
    ASTC10x10Unorm: "astc-10x10-unorm",
    ASTC10x10UnormSRGB: "astc-10x10-unorm-srgb",
    ASTC12x10Unorm: "astc-12x10-unorm",
    ASTC12x10UnormSRGB: "astc-12x10-unorm-srgb",
    ASTC12x12Unorm: "astc-12x12-unorm",
    ASTC12x12UnormSRGB: "astc-12x12-unorm-srgb"
  };
  var GPUAddressMode = {
    ClampToEdge: "clamp-to-edge",
    Repeat: "repeat",
    MirrorRepeat: "mirror-repeat"
  };
  var GPUFilterMode = {
    Linear: "linear",
    Nearest: "nearest"
  };
  var GPUBlendFactor = {
    Zero: "zero",
    One: "one",
    Src: "src",
    OneMinusSrc: "one-minus-src",
    SrcAlpha: "src-alpha",
    OneMinusSrcAlpha: "one-minus-src-alpha",
    Dst: "dst",
    OneMinusDst: "one-minus-dst",
    DstAlpha: "dst-alpha",
    OneMinusDstAlpha: "one-minus-dst-alpha",
    SrcAlphaSaturated: "src-alpha-saturated",
    Constant: "constant",
    OneMinusConstant: "one-minus-constant"
  };
  var GPUBlendOperation = {
    Add: "add",
    Subtract: "subtract",
    ReverseSubtract: "reverse-subtract",
    Min: "min",
    Max: "max"
  };
  var GPUColorWriteFlags = {
    None: 0,
    All: 15
  };
  var GPUStencilOperation = {
    Keep: "keep",
    Zero: "zero",
    Replace: "replace",
    Invert: "invert",
    IncrementClamp: "increment-clamp",
    DecrementClamp: "decrement-clamp",
    IncrementWrap: "increment-wrap",
    DecrementWrap: "decrement-wrap"
  };
  var GPUBufferBindingType = {
    Storage: "storage",
    ReadOnlyStorage: "read-only-storage"
  };
  var GPUStorageTextureAccess = {
    WriteOnly: "write-only",
    ReadOnly: "read-only",
    ReadWrite: "read-write"
  };
  var GPUSamplerBindingType = {
    NonFiltering: "non-filtering",
    Comparison: "comparison"
  };
  var GPUTextureSampleType = {
    Float: "float",
    UnfilterableFloat: "unfilterable-float",
    Depth: "depth",
    SInt: "sint",
    UInt: "uint"
  };
  var GPUTextureDimension = {
    TwoD: "2d",
    ThreeD: "3d"
  };
  var GPUTextureViewDimension = {
    TwoD: "2d",
    TwoDArray: "2d-array",
    Cube: "cube",
    ThreeD: "3d"
  };
  var GPUTextureAspect = {
    All: "all"
  };
  var GPUInputStepMode = {
    Vertex: "vertex",
    Instance: "instance"
  };
  var GPUFeatureName = {
    DepthClipControl: "depth-clip-control",
    Depth32FloatStencil8: "depth32float-stencil8",
    TextureCompressionBC: "texture-compression-bc",
    TextureCompressionETC2: "texture-compression-etc2",
    TextureCompressionASTC: "texture-compression-astc",
    TimestampQuery: "timestamp-query",
    IndirectFirstInstance: "indirect-first-instance",
    ShaderF16: "shader-f16",
    RG11B10UFloat: "rg11b10ufloat-renderable",
    BGRA8UNormStorage: "bgra8unorm-storage",
    Float32Filterable: "float32-filterable",
    ClipDistances: "clip-distances",
    DualSourceBlending: "dual-source-blending",
    Subgroups: "subgroups"
  };
  var Sampler = class extends Binding {
    /**
     * Constructs a new sampler.
     *
     * @param {string} name - The samplers's name.
     * @param {?Texture} texture - The texture this binding is referring to.
     */
    constructor(name2, texture2) {
      super(name2);
      this.texture = texture2;
      this.version = texture2 ? texture2.version : 0;
      this.isSampler = true;
    }
  };
  var NodeSampler = class extends Sampler {
    /**
     * Constructs a new node-based sampler.
     *
     * @param {string} name - The samplers's name.
     * @param {TextureNode} textureNode - The texture node.
     * @param {UniformGroupNode} groupNode - The uniform group node.
     */
    constructor(name2, textureNode, groupNode) {
      super(name2, textureNode ? textureNode.value : null);
      this.textureNode = textureNode;
      this.groupNode = groupNode;
    }
    /**
     * Updates the texture value of this sampler.
     */
    update() {
      this.texture = this.textureNode.value;
    }
  };
  var StorageBuffer = class extends Buffer {
    /**
     * Constructs a new uniform buffer.
     *
     * @param {string} name - The buffer's name.
     * @param {BufferAttribute} attribute - The buffer attribute.
     */
    constructor(name2, attribute2) {
      super(name2, attribute2 ? attribute2.array : null);
      this.attribute = attribute2;
      this.isStorageBuffer = true;
    }
  };
  var _id = 0;
  var NodeStorageBuffer = class extends StorageBuffer {
    /**
     * Constructs a new node-based storage buffer.
     *
     * @param {StorageBufferNode} nodeUniform - The storage buffer node.
     * @param {UniformGroupNode} groupNode - The uniform group node.
     */
    constructor(nodeUniform, groupNode) {
      super("StorageBuffer_" + _id++, nodeUniform ? nodeUniform.value : null);
      this.nodeUniform = nodeUniform;
      this.access = nodeUniform ? nodeUniform.access : NodeAccess.READ_WRITE;
      this.groupNode = groupNode;
    }
    /**
     * The storage buffer.
     *
     * @type {BufferAttribute}
     */
    get buffer() {
      return this.nodeUniform.value;
    }
  };
  var WebGPUTexturePassUtils = class extends DataMap {
    /**
     * Constructs a new utility object.
     *
     * @param {GPUDevice} device - The WebGPU device.
     */
    constructor(device) {
      super();
      this.device = device;
      const mipmapVertexSource = `
struct VarysStruct {
	@builtin( position ) Position: vec4<f32>,
	@location( 0 ) vTex : vec2<f32>
};

@vertex
fn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {

	var Varys : VarysStruct;

	var pos = array< vec2<f32>, 4 >(
		vec2<f32>( -1.0,  1.0 ),
		vec2<f32>(  1.0,  1.0 ),
		vec2<f32>( -1.0, -1.0 ),
		vec2<f32>(  1.0, -1.0 )
	);

	var tex = array< vec2<f32>, 4 >(
		vec2<f32>( 0.0, 0.0 ),
		vec2<f32>( 1.0, 0.0 ),
		vec2<f32>( 0.0, 1.0 ),
		vec2<f32>( 1.0, 1.0 )
	);

	Varys.vTex = tex[ vertexIndex ];
	Varys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );

	return Varys;

}
`;
      const mipmapFragmentSource = `
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vTex );

}
`;
      const flipYFragmentSource = `
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );

}
`;
      this.mipmapSampler = device.createSampler({ minFilter: GPUFilterMode.Linear });
      this.flipYSampler = device.createSampler({ minFilter: GPUFilterMode.Nearest });
      this.transferPipelines = {};
      this.flipYPipelines = {};
      this.mipmapVertexShaderModule = device.createShaderModule({
        label: "mipmapVertex",
        code: mipmapVertexSource
      });
      this.mipmapFragmentShaderModule = device.createShaderModule({
        label: "mipmapFragment",
        code: mipmapFragmentSource
      });
      this.flipYFragmentShaderModule = device.createShaderModule({
        label: "flipYFragment",
        code: flipYFragmentSource
      });
    }
    /**
     * Returns a render pipeline for the internal copy render pass. The pass
     * requires a unique render pipeline for each texture format.
     *
     * @param {string} format - The GPU texture format
     * @return {GPURenderPipeline} The GPU render pipeline.
     */
    getTransferPipeline(format) {
      let pipeline = this.transferPipelines[format];
      if (pipeline === void 0) {
        pipeline = this.device.createRenderPipeline({
          label: `mipmap-${format}`,
          vertex: {
            module: this.mipmapVertexShaderModule,
            entryPoint: "main"
          },
          fragment: {
            module: this.mipmapFragmentShaderModule,
            entryPoint: "main",
            targets: [{ format }]
          },
          primitive: {
            topology: GPUPrimitiveTopology.TriangleStrip,
            stripIndexFormat: GPUIndexFormat.Uint32
          },
          layout: "auto"
        });
        this.transferPipelines[format] = pipeline;
      }
      return pipeline;
    }
    /**
     * Returns a render pipeline for the flipY render pass. The pass
     * requires a unique render pipeline for each texture format.
     *
     * @param {string} format - The GPU texture format
     * @return {GPURenderPipeline} The GPU render pipeline.
     */
    getFlipYPipeline(format) {
      let pipeline = this.flipYPipelines[format];
      if (pipeline === void 0) {
        pipeline = this.device.createRenderPipeline({
          label: `flipY-${format}`,
          vertex: {
            module: this.mipmapVertexShaderModule,
            entryPoint: "main"
          },
          fragment: {
            module: this.flipYFragmentShaderModule,
            entryPoint: "main",
            targets: [{ format }]
          },
          primitive: {
            topology: GPUPrimitiveTopology.TriangleStrip,
            stripIndexFormat: GPUIndexFormat.Uint32
          },
          layout: "auto"
        });
        this.flipYPipelines[format] = pipeline;
      }
      return pipeline;
    }
    /**
     * Flip the contents of the given GPU texture along its vertical axis.
     *
     * @param {GPUTexture} textureGPU - The GPU texture object.
     * @param {Object} textureGPUDescriptor - The texture descriptor.
     * @param {number} [baseArrayLayer=0] - The index of the first array layer accessible to the texture view.
     */
    flipY(textureGPU, textureGPUDescriptor, baseArrayLayer = 0) {
      const format = textureGPUDescriptor.format;
      const { width, height } = textureGPUDescriptor.size;
      const transferPipeline = this.getTransferPipeline(format);
      const flipYPipeline = this.getFlipYPipeline(format);
      const tempTexture = this.device.createTexture({
        size: { width, height, depthOrArrayLayers: 1 },
        format,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING
      });
      const srcView = textureGPU.createView({
        baseMipLevel: 0,
        mipLevelCount: 1,
        dimension: GPUTextureViewDimension.TwoD,
        baseArrayLayer
      });
      const dstView = tempTexture.createView({
        baseMipLevel: 0,
        mipLevelCount: 1,
        dimension: GPUTextureViewDimension.TwoD,
        baseArrayLayer: 0
      });
      const commandEncoder = this.device.createCommandEncoder({});
      const pass = (pipeline, sourceView, destinationView) => {
        const bindGroupLayout = pipeline.getBindGroupLayout(0);
        const bindGroup = this.device.createBindGroup({
          layout: bindGroupLayout,
          entries: [{
            binding: 0,
            resource: this.flipYSampler
          }, {
            binding: 1,
            resource: sourceView
          }]
        });
        const passEncoder = commandEncoder.beginRenderPass({
          colorAttachments: [{
            view: destinationView,
            loadOp: GPULoadOp.Clear,
            storeOp: GPUStoreOp.Store,
            clearValue: [0, 0, 0, 0]
          }]
        });
        passEncoder.setPipeline(pipeline);
        passEncoder.setBindGroup(0, bindGroup);
        passEncoder.draw(4, 1, 0, 0);
        passEncoder.end();
      };
      pass(transferPipeline, srcView, dstView);
      pass(flipYPipeline, dstView, srcView);
      this.device.queue.submit([commandEncoder.finish()]);
      tempTexture.destroy();
    }
    /**
     * Generates mipmaps for the given GPU texture.
     *
     * @param {GPUTexture} textureGPU - The GPU texture object.
     * @param {Object} textureGPUDescriptor - The texture descriptor.
     * @param {number} [baseArrayLayer=0] - The index of the first array layer accessible to the texture view.
     */
    generateMipmaps(textureGPU, textureGPUDescriptor, baseArrayLayer = 0) {
      const textureData = this.get(textureGPU);
      if (textureData.useCount === void 0) {
        textureData.useCount = 0;
        textureData.layers = [];
      }
      const passes = textureData.layers[baseArrayLayer] || this._mipmapCreateBundles(textureGPU, textureGPUDescriptor, baseArrayLayer);
      const commandEncoder = this.device.createCommandEncoder({});
      this._mipmapRunBundles(commandEncoder, passes);
      this.device.queue.submit([commandEncoder.finish()]);
      if (textureData.useCount !== 0) textureData.layers[baseArrayLayer] = passes;
      textureData.useCount++;
    }
    /**
     * Since multiple copy render passes are required to generate mipmaps, the passes
     * are managed as render bundles to improve performance.
     *
     * @param {GPUTexture} textureGPU - The GPU texture object.
     * @param {Object} textureGPUDescriptor - The texture descriptor.
     * @param {number} baseArrayLayer - The index of the first array layer accessible to the texture view.
     * @return {Array<Object>} An array of render bundles.
     */
    _mipmapCreateBundles(textureGPU, textureGPUDescriptor, baseArrayLayer) {
      const pipeline = this.getTransferPipeline(textureGPUDescriptor.format);
      const bindGroupLayout = pipeline.getBindGroupLayout(0);
      let srcView = textureGPU.createView({
        baseMipLevel: 0,
        mipLevelCount: 1,
        dimension: GPUTextureViewDimension.TwoD,
        baseArrayLayer
      });
      const passes = [];
      for (let i = 1; i < textureGPUDescriptor.mipLevelCount; i++) {
        const bindGroup = this.device.createBindGroup({
          layout: bindGroupLayout,
          entries: [{
            binding: 0,
            resource: this.mipmapSampler
          }, {
            binding: 1,
            resource: srcView
          }]
        });
        const dstView = textureGPU.createView({
          baseMipLevel: i,
          mipLevelCount: 1,
          dimension: GPUTextureViewDimension.TwoD,
          baseArrayLayer
        });
        const passDescriptor = {
          colorAttachments: [{
            view: dstView,
            loadOp: GPULoadOp.Clear,
            storeOp: GPUStoreOp.Store,
            clearValue: [0, 0, 0, 0]
          }]
        };
        const passEncoder = this.device.createRenderBundleEncoder({
          colorFormats: [textureGPUDescriptor.format]
        });
        passEncoder.setPipeline(pipeline);
        passEncoder.setBindGroup(0, bindGroup);
        passEncoder.draw(4, 1, 0, 0);
        passes.push({
          renderBundles: [passEncoder.finish()],
          passDescriptor
        });
        srcView = dstView;
      }
      return passes;
    }
    /**
     * Executes the render bundles.
     *
     * @param {GPUCommandEncoder} commandEncoder - The GPU command encoder.
     * @param {Array<Object>} passes - An array of render bundles.
     */
    _mipmapRunBundles(commandEncoder, passes) {
      const levels = passes.length;
      for (let i = 0; i < levels; i++) {
        const pass = passes[i];
        const passEncoder = commandEncoder.beginRenderPass(pass.passDescriptor);
        passEncoder.executeBundles(pass.renderBundles);
        passEncoder.end();
      }
    }
  };
  var _compareToWebGPU = {
    [NeverCompare]: "never",
    [LessCompare]: "less",
    [EqualCompare]: "equal",
    [LessEqualCompare]: "less-equal",
    [GreaterCompare]: "greater",
    [GreaterEqualCompare]: "greater-equal",
    [AlwaysCompare]: "always",
    [NotEqualCompare]: "not-equal"
  };
  var _flipMap = [0, 1, 3, 2, 4, 5];
  var WebGPUTextureUtils = class {
    /**
     * Constructs a new utility object.
     *
     * @param {WebGPUBackend} backend - The WebGPU backend.
     */
    constructor(backend) {
      this.backend = backend;
      this._passUtils = null;
      this.defaultTexture = {};
      this.defaultCubeTexture = {};
      this.defaultVideoFrame = null;
      this.colorBuffer = null;
      this.depthTexture = new DepthTexture();
      this.depthTexture.name = "depthBuffer";
    }
    /**
     * Creates a GPU sampler for the given texture.
     *
     * @param {Texture} texture - The texture to create the sampler for.
     */
    createSampler(texture2) {
      const backend = this.backend;
      const device = backend.device;
      const textureGPU = backend.get(texture2);
      const samplerDescriptorGPU = {
        addressModeU: this._convertAddressMode(texture2.wrapS),
        addressModeV: this._convertAddressMode(texture2.wrapT),
        addressModeW: this._convertAddressMode(texture2.wrapR),
        magFilter: this._convertFilterMode(texture2.magFilter),
        minFilter: this._convertFilterMode(texture2.minFilter),
        mipmapFilter: this._convertFilterMode(texture2.minFilter),
        maxAnisotropy: 1
      };
      if (samplerDescriptorGPU.magFilter === GPUFilterMode.Linear && samplerDescriptorGPU.minFilter === GPUFilterMode.Linear && samplerDescriptorGPU.mipmapFilter === GPUFilterMode.Linear) {
        samplerDescriptorGPU.maxAnisotropy = texture2.anisotropy;
      }
      if (texture2.isDepthTexture && texture2.compareFunction !== null) {
        samplerDescriptorGPU.compare = _compareToWebGPU[texture2.compareFunction];
      }
      textureGPU.sampler = device.createSampler(samplerDescriptorGPU);
    }
    /**
     * Creates a default texture for the given texture that can be used
     * as a placeholder until the actual texture is ready for usage.
     *
     * @param {Texture} texture - The texture to create a default texture for.
     */
    createDefaultTexture(texture2) {
      let textureGPU;
      const format = getFormat(texture2);
      if (texture2.isCubeTexture) {
        textureGPU = this._getDefaultCubeTextureGPU(format);
      } else if (texture2.isVideoTexture) {
        this.backend.get(texture2).externalTexture = this._getDefaultVideoFrame();
      } else {
        textureGPU = this._getDefaultTextureGPU(format);
      }
      this.backend.get(texture2).texture = textureGPU;
    }
    /**
     * Defines a texture on the GPU for the given texture object.
     *
     * @param {Texture} texture - The texture.
     * @param {Object} [options={}] - Optional configuration parameter.
     */
    createTexture(texture2, options = {}) {
      const backend = this.backend;
      const textureData = backend.get(texture2);
      if (textureData.initialized) {
        throw new Error("WebGPUTextureUtils: Texture already initialized.");
      }
      if (options.needsMipmaps === void 0) options.needsMipmaps = false;
      if (options.levels === void 0) options.levels = 1;
      if (options.depth === void 0) options.depth = 1;
      const { width, height, depth: depth2, levels } = options;
      if (texture2.isFramebufferTexture) {
        if (options.renderTarget) {
          options.format = this.backend.utils.getCurrentColorFormat(options.renderTarget);
        } else {
          options.format = this.backend.utils.getPreferredCanvasFormat();
        }
      }
      const dimension = this._getDimension(texture2);
      const format = texture2.internalFormat || options.format || getFormat(texture2, backend.device);
      textureData.format = format;
      const { samples, primarySamples, isMSAA } = backend.utils.getTextureSampleData(texture2);
      let usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC;
      if (texture2.isStorageTexture === true) {
        usage |= GPUTextureUsage.STORAGE_BINDING;
      }
      if (texture2.isCompressedTexture !== true && texture2.isCompressedArrayTexture !== true) {
        usage |= GPUTextureUsage.RENDER_ATTACHMENT;
      }
      const textureDescriptorGPU = {
        label: texture2.name,
        size: {
          width,
          height,
          depthOrArrayLayers: depth2
        },
        mipLevelCount: levels,
        sampleCount: primarySamples,
        dimension,
        format,
        usage
      };
      if (texture2.isVideoTexture) {
        const video = texture2.source.data;
        const videoFrame = new VideoFrame(video);
        textureDescriptorGPU.size.width = videoFrame.displayWidth;
        textureDescriptorGPU.size.height = videoFrame.displayHeight;
        videoFrame.close();
        textureData.externalTexture = video;
      } else {
        if (format === void 0) {
          console.warn("WebGPURenderer: Texture format not supported.");
          this.createDefaultTexture(texture2);
          return;
        }
        if (texture2.isCubeTexture) {
          textureDescriptorGPU.textureBindingViewDimension = GPUTextureViewDimension.Cube;
        }
        textureData.texture = backend.device.createTexture(textureDescriptorGPU);
      }
      if (isMSAA) {
        const msaaTextureDescriptorGPU = Object.assign({}, textureDescriptorGPU);
        msaaTextureDescriptorGPU.label = msaaTextureDescriptorGPU.label + "-msaa";
        msaaTextureDescriptorGPU.sampleCount = samples;
        textureData.msaaTexture = backend.device.createTexture(msaaTextureDescriptorGPU);
      }
      textureData.initialized = true;
      textureData.textureDescriptorGPU = textureDescriptorGPU;
    }
    /**
     * Destroys the GPU data for the given texture object.
     *
     * @param {Texture} texture - The texture.
     */
    destroyTexture(texture2) {
      const backend = this.backend;
      const textureData = backend.get(texture2);
      if (textureData.texture !== void 0) textureData.texture.destroy();
      if (textureData.msaaTexture !== void 0) textureData.msaaTexture.destroy();
      backend.delete(texture2);
    }
    /**
     * Destroys the GPU sampler for the given texture.
     *
     * @param {Texture} texture - The texture to destroy the sampler for.
     */
    destroySampler(texture2) {
      const backend = this.backend;
      const textureData = backend.get(texture2);
      delete textureData.sampler;
    }
    /**
     * Generates mipmaps for the given texture.
     *
     * @param {Texture} texture - The texture.
     */
    generateMipmaps(texture2) {
      const textureData = this.backend.get(texture2);
      if (texture2.isCubeTexture) {
        for (let i = 0; i < 6; i++) {
          this._generateMipmaps(textureData.texture, textureData.textureDescriptorGPU, i);
        }
      } else {
        const depth2 = texture2.image.depth || 1;
        for (let i = 0; i < depth2; i++) {
          this._generateMipmaps(textureData.texture, textureData.textureDescriptorGPU, i);
        }
      }
    }
    /**
     * Returns the color buffer representing the color
     * attachment of the default framebuffer.
     *
     * @return {GPUTexture} The color buffer.
     */
    getColorBuffer() {
      if (this.colorBuffer) this.colorBuffer.destroy();
      const backend = this.backend;
      const { width, height } = backend.getDrawingBufferSize();
      this.colorBuffer = backend.device.createTexture({
        label: "colorBuffer",
        size: {
          width,
          height,
          depthOrArrayLayers: 1
        },
        sampleCount: backend.utils.getSampleCount(backend.renderer.samples),
        format: backend.utils.getPreferredCanvasFormat(),
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC
      });
      return this.colorBuffer;
    }
    /**
     * Returns the depth buffer representing the depth
     * attachment of the default framebuffer.
     *
     * @param {boolean} [depth=true] - Whether depth is enabled or not.
     * @param {boolean} [stencil=false] -  Whether stencil is enabled or not.
     * @return {GPUTexture} The depth buffer.
     */
    getDepthBuffer(depth2 = true, stencil = false) {
      const backend = this.backend;
      const { width, height } = backend.getDrawingBufferSize();
      const depthTexture = this.depthTexture;
      const depthTextureGPU = backend.get(depthTexture).texture;
      let format, type;
      if (stencil) {
        format = DepthStencilFormat;
        type = UnsignedInt248Type;
      } else if (depth2) {
        format = DepthFormat;
        type = UnsignedIntType;
      }
      if (depthTextureGPU !== void 0) {
        if (depthTexture.image.width === width && depthTexture.image.height === height && depthTexture.format === format && depthTexture.type === type) {
          return depthTextureGPU;
        }
        this.destroyTexture(depthTexture);
      }
      depthTexture.name = "depthBuffer";
      depthTexture.format = format;
      depthTexture.type = type;
      depthTexture.image.width = width;
      depthTexture.image.height = height;
      this.createTexture(depthTexture, { width, height });
      return backend.get(depthTexture).texture;
    }
    /**
     * Uploads the updated texture data to the GPU.
     *
     * @param {Texture} texture - The texture.
     * @param {Object} [options={}] - Optional configuration parameter.
     */
    updateTexture(texture2, options) {
      const textureData = this.backend.get(texture2);
      const { textureDescriptorGPU } = textureData;
      if (texture2.isRenderTargetTexture || textureDescriptorGPU === void 0)
        return;
      if (texture2.isDataTexture) {
        this._copyBufferToTexture(options.image, textureData.texture, textureDescriptorGPU, 0, texture2.flipY);
      } else if (texture2.isArrayTexture || texture2.isDataArrayTexture || texture2.isData3DTexture) {
        for (let i = 0; i < options.image.depth; i++) {
          this._copyBufferToTexture(options.image, textureData.texture, textureDescriptorGPU, i, texture2.flipY, i);
        }
      } else if (texture2.isCompressedTexture || texture2.isCompressedArrayTexture) {
        this._copyCompressedBufferToTexture(texture2.mipmaps, textureData.texture, textureDescriptorGPU);
      } else if (texture2.isCubeTexture) {
        this._copyCubeMapToTexture(options.images, textureData.texture, textureDescriptorGPU, texture2.flipY, texture2.premultiplyAlpha);
      } else if (texture2.isVideoTexture) {
        const video = texture2.source.data;
        textureData.externalTexture = video;
      } else {
        this._copyImageToTexture(options.image, textureData.texture, textureDescriptorGPU, 0, texture2.flipY, texture2.premultiplyAlpha);
      }
      textureData.version = texture2.version;
      if (texture2.onUpdate) texture2.onUpdate(texture2);
    }
    /**
     * Returns texture data as a typed array.
     *
     * @async
     * @param {Texture} texture - The texture to copy.
     * @param {number} x - The x coordinate of the copy origin.
     * @param {number} y - The y coordinate of the copy origin.
     * @param {number} width - The width of the copy.
     * @param {number} height - The height of the copy.
     * @param {number} faceIndex - The face index.
     * @return {Promise<TypedArray>} A Promise that resolves with a typed array when the copy operation has finished.
     */
    async copyTextureToBuffer(texture2, x, y, width, height, faceIndex) {
      const device = this.backend.device;
      const textureData = this.backend.get(texture2);
      const textureGPU = textureData.texture;
      const format = textureData.textureDescriptorGPU.format;
      const bytesPerTexel = this._getBytesPerTexel(format);
      let bytesPerRow = width * bytesPerTexel;
      bytesPerRow = Math.ceil(bytesPerRow / 256) * 256;
      const readBuffer = device.createBuffer(
        {
          size: width * height * bytesPerTexel,
          usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ
        }
      );
      const encoder = device.createCommandEncoder();
      encoder.copyTextureToBuffer(
        {
          texture: textureGPU,
          origin: { x, y, z: faceIndex }
        },
        {
          buffer: readBuffer,
          bytesPerRow
        },
        {
          width,
          height
        }
      );
      const typedArrayType = this._getTypedArrayType(format);
      device.queue.submit([encoder.finish()]);
      await readBuffer.mapAsync(GPUMapMode.READ);
      const buffer2 = readBuffer.getMappedRange();
      return new typedArrayType(buffer2);
    }
    /**
     * Returns the default GPU texture for the given format.
     *
     * @private
     * @param {string} format - The GPU format.
     * @return {GPUTexture} The GPU texture.
     */
    _getDefaultTextureGPU(format) {
      let defaultTexture = this.defaultTexture[format];
      if (defaultTexture === void 0) {
        const texture2 = new Texture();
        texture2.minFilter = NearestFilter;
        texture2.magFilter = NearestFilter;
        this.createTexture(texture2, { width: 1, height: 1, format });
        this.defaultTexture[format] = defaultTexture = texture2;
      }
      return this.backend.get(defaultTexture).texture;
    }
    /**
     * Returns the default GPU cube texture for the given format.
     *
     * @private
     * @param {string} format - The GPU format.
     * @return {GPUTexture} The GPU texture.
     */
    _getDefaultCubeTextureGPU(format) {
      let defaultCubeTexture = this.defaultTexture[format];
      if (defaultCubeTexture === void 0) {
        const texture2 = new CubeTexture();
        texture2.minFilter = NearestFilter;
        texture2.magFilter = NearestFilter;
        this.createTexture(texture2, { width: 1, height: 1, depth: 6 });
        this.defaultCubeTexture[format] = defaultCubeTexture = texture2;
      }
      return this.backend.get(defaultCubeTexture).texture;
    }
    /**
     * Returns the default video frame used as default data in context of video textures.
     *
     * @private
     * @return {VideoFrame} The video frame.
     */
    _getDefaultVideoFrame() {
      let defaultVideoFrame = this.defaultVideoFrame;
      if (defaultVideoFrame === null) {
        const init = {
          timestamp: 0,
          codedWidth: 1,
          codedHeight: 1,
          format: "RGBA"
        };
        this.defaultVideoFrame = defaultVideoFrame = new VideoFrame(new Uint8Array([0, 0, 0, 255]), init);
      }
      return defaultVideoFrame;
    }
    /**
     * Uploads cube texture image data to the GPU memory.
     *
     * @private
     * @param {Array} images - The cube image data.
     * @param {GPUTexture} textureGPU - The GPU texture.
     * @param {Object} textureDescriptorGPU - The GPU texture descriptor.
     * @param {boolean} flipY - Whether to flip texture data along their vertical axis or not.
     * @param {boolean} premultiplyAlpha - Whether the texture should have its RGB channels premultiplied by the alpha channel or not.
     */
    _copyCubeMapToTexture(images, textureGPU, textureDescriptorGPU, flipY, premultiplyAlpha) {
      for (let i = 0; i < 6; i++) {
        const image = images[i];
        const flipIndex = flipY === true ? _flipMap[i] : i;
        if (image.isDataTexture) {
          this._copyBufferToTexture(image.image, textureGPU, textureDescriptorGPU, flipIndex, flipY);
        } else {
          this._copyImageToTexture(image, textureGPU, textureDescriptorGPU, flipIndex, flipY, premultiplyAlpha);
        }
      }
    }
    /**
     * Uploads texture image data to the GPU memory.
     *
     * @private
     * @param {HTMLImageElement|ImageBitmap|HTMLCanvasElement} image - The image data.
     * @param {GPUTexture} textureGPU - The GPU texture.
     * @param {Object} textureDescriptorGPU - The GPU texture descriptor.
     * @param {number} originDepth - The origin depth.
     * @param {boolean} flipY - Whether to flip texture data along their vertical axis or not.
     * @param {boolean} premultiplyAlpha - Whether the texture should have its RGB channels premultiplied by the alpha channel or not.
     */
    _copyImageToTexture(image, textureGPU, textureDescriptorGPU, originDepth, flipY, premultiplyAlpha) {
      const device = this.backend.device;
      device.queue.copyExternalImageToTexture(
        {
          source: image,
          flipY
        },
        {
          texture: textureGPU,
          mipLevel: 0,
          origin: { x: 0, y: 0, z: originDepth },
          premultipliedAlpha: premultiplyAlpha
        },
        {
          width: image.width,
          height: image.height,
          depthOrArrayLayers: 1
        }
      );
    }
    /**
     * Returns the pass utils singleton.
     *
     * @private
     * @return {WebGPUTexturePassUtils} The utils instance.
     */
    _getPassUtils() {
      let passUtils = this._passUtils;
      if (passUtils === null) {
        this._passUtils = passUtils = new WebGPUTexturePassUtils(this.backend.device);
      }
      return passUtils;
    }
    /**
     * Generates mipmaps for the given GPU texture.
     *
     * @private
     * @param {GPUTexture} textureGPU - The GPU texture object.
     * @param {Object} textureDescriptorGPU - The texture descriptor.
     * @param {number} [baseArrayLayer=0] - The index of the first array layer accessible to the texture view.
     */
    _generateMipmaps(textureGPU, textureDescriptorGPU, baseArrayLayer = 0) {
      this._getPassUtils().generateMipmaps(textureGPU, textureDescriptorGPU, baseArrayLayer);
    }
    /**
     * Flip the contents of the given GPU texture along its vertical axis.
     *
     * @private
     * @param {GPUTexture} textureGPU - The GPU texture object.
     * @param {Object} textureDescriptorGPU - The texture descriptor.
     * @param {number} [originDepth=0] - The origin depth.
     */
    _flipY(textureGPU, textureDescriptorGPU, originDepth = 0) {
      this._getPassUtils().flipY(textureGPU, textureDescriptorGPU, originDepth);
    }
    /**
     * Uploads texture buffer data to the GPU memory.
     *
     * @private
     * @param {Object} image - An object defining the image buffer data.
     * @param {GPUTexture} textureGPU - The GPU texture.
     * @param {Object} textureDescriptorGPU - The GPU texture descriptor.
     * @param {number} originDepth - The origin depth.
     * @param {boolean} flipY - Whether to flip texture data along their vertical axis or not.
     * @param {number} [depth=0] - TODO.
     */
    _copyBufferToTexture(image, textureGPU, textureDescriptorGPU, originDepth, flipY, depth2 = 0) {
      const device = this.backend.device;
      const data = image.data;
      const bytesPerTexel = this._getBytesPerTexel(textureDescriptorGPU.format);
      const bytesPerRow = image.width * bytesPerTexel;
      device.queue.writeTexture(
        {
          texture: textureGPU,
          mipLevel: 0,
          origin: { x: 0, y: 0, z: originDepth }
        },
        data,
        {
          offset: image.width * image.height * bytesPerTexel * depth2,
          bytesPerRow
        },
        {
          width: image.width,
          height: image.height,
          depthOrArrayLayers: 1
        }
      );
      if (flipY === true) {
        this._flipY(textureGPU, textureDescriptorGPU, originDepth);
      }
    }
    /**
     * Uploads compressed texture data to the GPU memory.
     *
     * @private
     * @param {Array<Object>} mipmaps - An array with mipmap data.
     * @param {GPUTexture} textureGPU - The GPU texture.
     * @param {Object} textureDescriptorGPU - The GPU texture descriptor.
     */
    _copyCompressedBufferToTexture(mipmaps, textureGPU, textureDescriptorGPU) {
      const device = this.backend.device;
      const blockData = this._getBlockData(textureDescriptorGPU.format);
      const isArrayTexture = textureDescriptorGPU.size.depthOrArrayLayers > 1;
      for (let i = 0; i < mipmaps.length; i++) {
        const mipmap = mipmaps[i];
        const width = mipmap.width;
        const height = mipmap.height;
        const depth2 = isArrayTexture ? textureDescriptorGPU.size.depthOrArrayLayers : 1;
        const bytesPerRow = Math.ceil(width / blockData.width) * blockData.byteLength;
        const bytesPerImage = bytesPerRow * Math.ceil(height / blockData.height);
        for (let j = 0; j < depth2; j++) {
          device.queue.writeTexture(
            {
              texture: textureGPU,
              mipLevel: i,
              origin: { x: 0, y: 0, z: j }
            },
            mipmap.data,
            {
              offset: j * bytesPerImage,
              bytesPerRow,
              rowsPerImage: Math.ceil(height / blockData.height)
            },
            {
              width: Math.ceil(width / blockData.width) * blockData.width,
              height: Math.ceil(height / blockData.height) * blockData.height,
              depthOrArrayLayers: 1
            }
          );
        }
      }
    }
    /**
     * This method is only relevant for compressed texture formats. It returns a block
     * data descriptor for the given GPU compressed texture format.
     *
     * @private
     * @param {string} format - The GPU compressed texture format.
     * @return {Object} The block data descriptor.
     */
    _getBlockData(format) {
      if (format === GPUTextureFormat.BC1RGBAUnorm || format === GPUTextureFormat.BC1RGBAUnormSRGB) return { byteLength: 8, width: 4, height: 4 };
      if (format === GPUTextureFormat.BC2RGBAUnorm || format === GPUTextureFormat.BC2RGBAUnormSRGB) return { byteLength: 16, width: 4, height: 4 };
      if (format === GPUTextureFormat.BC3RGBAUnorm || format === GPUTextureFormat.BC3RGBAUnormSRGB) return { byteLength: 16, width: 4, height: 4 };
      if (format === GPUTextureFormat.BC4RUnorm || format === GPUTextureFormat.BC4RSnorm) return { byteLength: 8, width: 4, height: 4 };
      if (format === GPUTextureFormat.BC5RGUnorm || format === GPUTextureFormat.BC5RGSnorm) return { byteLength: 16, width: 4, height: 4 };
      if (format === GPUTextureFormat.BC6HRGBUFloat || format === GPUTextureFormat.BC6HRGBFloat) return { byteLength: 16, width: 4, height: 4 };
      if (format === GPUTextureFormat.BC7RGBAUnorm || format === GPUTextureFormat.BC7RGBAUnormSRGB) return { byteLength: 16, width: 4, height: 4 };
      if (format === GPUTextureFormat.ETC2RGB8Unorm || format === GPUTextureFormat.ETC2RGB8UnormSRGB) return { byteLength: 8, width: 4, height: 4 };
      if (format === GPUTextureFormat.ETC2RGB8A1Unorm || format === GPUTextureFormat.ETC2RGB8A1UnormSRGB) return { byteLength: 8, width: 4, height: 4 };
      if (format === GPUTextureFormat.ETC2RGBA8Unorm || format === GPUTextureFormat.ETC2RGBA8UnormSRGB) return { byteLength: 16, width: 4, height: 4 };
      if (format === GPUTextureFormat.EACR11Unorm) return { byteLength: 8, width: 4, height: 4 };
      if (format === GPUTextureFormat.EACR11Snorm) return { byteLength: 8, width: 4, height: 4 };
      if (format === GPUTextureFormat.EACRG11Unorm) return { byteLength: 16, width: 4, height: 4 };
      if (format === GPUTextureFormat.EACRG11Snorm) return { byteLength: 16, width: 4, height: 4 };
      if (format === GPUTextureFormat.ASTC4x4Unorm || format === GPUTextureFormat.ASTC4x4UnormSRGB) return { byteLength: 16, width: 4, height: 4 };
      if (format === GPUTextureFormat.ASTC5x4Unorm || format === GPUTextureFormat.ASTC5x4UnormSRGB) return { byteLength: 16, width: 5, height: 4 };
      if (format === GPUTextureFormat.ASTC5x5Unorm || format === GPUTextureFormat.ASTC5x5UnormSRGB) return { byteLength: 16, width: 5, height: 5 };
      if (format === GPUTextureFormat.ASTC6x5Unorm || format === GPUTextureFormat.ASTC6x5UnormSRGB) return { byteLength: 16, width: 6, height: 5 };
      if (format === GPUTextureFormat.ASTC6x6Unorm || format === GPUTextureFormat.ASTC6x6UnormSRGB) return { byteLength: 16, width: 6, height: 6 };
      if (format === GPUTextureFormat.ASTC8x5Unorm || format === GPUTextureFormat.ASTC8x5UnormSRGB) return { byteLength: 16, width: 8, height: 5 };
      if (format === GPUTextureFormat.ASTC8x6Unorm || format === GPUTextureFormat.ASTC8x6UnormSRGB) return { byteLength: 16, width: 8, height: 6 };
      if (format === GPUTextureFormat.ASTC8x8Unorm || format === GPUTextureFormat.ASTC8x8UnormSRGB) return { byteLength: 16, width: 8, height: 8 };
      if (format === GPUTextureFormat.ASTC10x5Unorm || format === GPUTextureFormat.ASTC10x5UnormSRGB) return { byteLength: 16, width: 10, height: 5 };
      if (format === GPUTextureFormat.ASTC10x6Unorm || format === GPUTextureFormat.ASTC10x6UnormSRGB) return { byteLength: 16, width: 10, height: 6 };
      if (format === GPUTextureFormat.ASTC10x8Unorm || format === GPUTextureFormat.ASTC10x8UnormSRGB) return { byteLength: 16, width: 10, height: 8 };
      if (format === GPUTextureFormat.ASTC10x10Unorm || format === GPUTextureFormat.ASTC10x10UnormSRGB) return { byteLength: 16, width: 10, height: 10 };
      if (format === GPUTextureFormat.ASTC12x10Unorm || format === GPUTextureFormat.ASTC12x10UnormSRGB) return { byteLength: 16, width: 12, height: 10 };
      if (format === GPUTextureFormat.ASTC12x12Unorm || format === GPUTextureFormat.ASTC12x12UnormSRGB) return { byteLength: 16, width: 12, height: 12 };
    }
    /**
     * Converts the three.js uv wrapping constants to GPU address mode constants.
     *
     * @private
     * @param {number} value - The three.js constant defining a uv wrapping mode.
     * @return {string} The GPU address mode.
     */
    _convertAddressMode(value) {
      let addressMode = GPUAddressMode.ClampToEdge;
      if (value === RepeatWrapping) {
        addressMode = GPUAddressMode.Repeat;
      } else if (value === MirroredRepeatWrapping) {
        addressMode = GPUAddressMode.MirrorRepeat;
      }
      return addressMode;
    }
    /**
     * Converts the three.js filter constants to GPU filter constants.
     *
     * @private
     * @param {number} value - The three.js constant defining a filter mode.
     * @return {string} The GPU filter mode.
     */
    _convertFilterMode(value) {
      let filterMode = GPUFilterMode.Linear;
      if (value === NearestFilter || value === NearestMipmapNearestFilter || value === NearestMipmapLinearFilter) {
        filterMode = GPUFilterMode.Nearest;
      }
      return filterMode;
    }
    /**
     * Returns the bytes-per-texel value for the given GPU texture format.
     *
     * @private
     * @param {string} format - The GPU texture format.
     * @return {number} The bytes-per-texel.
     */
    _getBytesPerTexel(format) {
      if (format === GPUTextureFormat.R8Unorm || format === GPUTextureFormat.R8Snorm || format === GPUTextureFormat.R8Uint || format === GPUTextureFormat.R8Sint) return 1;
      if (format === GPUTextureFormat.R16Uint || format === GPUTextureFormat.R16Sint || format === GPUTextureFormat.R16Float || format === GPUTextureFormat.RG8Unorm || format === GPUTextureFormat.RG8Snorm || format === GPUTextureFormat.RG8Uint || format === GPUTextureFormat.RG8Sint) return 2;
      if (format === GPUTextureFormat.R32Uint || format === GPUTextureFormat.R32Sint || format === GPUTextureFormat.R32Float || format === GPUTextureFormat.RG16Uint || format === GPUTextureFormat.RG16Sint || format === GPUTextureFormat.RG16Float || format === GPUTextureFormat.RGBA8Unorm || format === GPUTextureFormat.RGBA8UnormSRGB || format === GPUTextureFormat.RGBA8Snorm || format === GPUTextureFormat.RGBA8Uint || format === GPUTextureFormat.RGBA8Sint || format === GPUTextureFormat.BGRA8Unorm || format === GPUTextureFormat.BGRA8UnormSRGB || // Packed 32-bit formats
      format === GPUTextureFormat.RGB9E5UFloat || format === GPUTextureFormat.RGB10A2Unorm || format === GPUTextureFormat.RG11B10UFloat || format === GPUTextureFormat.Depth32Float || format === GPUTextureFormat.Depth24Plus || format === GPUTextureFormat.Depth24PlusStencil8 || format === GPUTextureFormat.Depth32FloatStencil8) return 4;
      if (format === GPUTextureFormat.RG32Uint || format === GPUTextureFormat.RG32Sint || format === GPUTextureFormat.RG32Float || format === GPUTextureFormat.RGBA16Uint || format === GPUTextureFormat.RGBA16Sint || format === GPUTextureFormat.RGBA16Float) return 8;
      if (format === GPUTextureFormat.RGBA32Uint || format === GPUTextureFormat.RGBA32Sint || format === GPUTextureFormat.RGBA32Float) return 16;
    }
    /**
     * Returns the corresponding typed array type for the given GPU texture format.
     *
     * @private
     * @param {string} format - The GPU texture format.
     * @return {TypedArray.constructor} The typed array type.
     */
    _getTypedArrayType(format) {
      if (format === GPUTextureFormat.R8Uint) return Uint8Array;
      if (format === GPUTextureFormat.R8Sint) return Int8Array;
      if (format === GPUTextureFormat.R8Unorm) return Uint8Array;
      if (format === GPUTextureFormat.R8Snorm) return Int8Array;
      if (format === GPUTextureFormat.RG8Uint) return Uint8Array;
      if (format === GPUTextureFormat.RG8Sint) return Int8Array;
      if (format === GPUTextureFormat.RG8Unorm) return Uint8Array;
      if (format === GPUTextureFormat.RG8Snorm) return Int8Array;
      if (format === GPUTextureFormat.RGBA8Uint) return Uint8Array;
      if (format === GPUTextureFormat.RGBA8Sint) return Int8Array;
      if (format === GPUTextureFormat.RGBA8Unorm) return Uint8Array;
      if (format === GPUTextureFormat.RGBA8Snorm) return Int8Array;
      if (format === GPUTextureFormat.R16Uint) return Uint16Array;
      if (format === GPUTextureFormat.R16Sint) return Int16Array;
      if (format === GPUTextureFormat.RG16Uint) return Uint16Array;
      if (format === GPUTextureFormat.RG16Sint) return Int16Array;
      if (format === GPUTextureFormat.RGBA16Uint) return Uint16Array;
      if (format === GPUTextureFormat.RGBA16Sint) return Int16Array;
      if (format === GPUTextureFormat.R16Float) return Uint16Array;
      if (format === GPUTextureFormat.RG16Float) return Uint16Array;
      if (format === GPUTextureFormat.RGBA16Float) return Uint16Array;
      if (format === GPUTextureFormat.R32Uint) return Uint32Array;
      if (format === GPUTextureFormat.R32Sint) return Int32Array;
      if (format === GPUTextureFormat.R32Float) return Float32Array;
      if (format === GPUTextureFormat.RG32Uint) return Uint32Array;
      if (format === GPUTextureFormat.RG32Sint) return Int32Array;
      if (format === GPUTextureFormat.RG32Float) return Float32Array;
      if (format === GPUTextureFormat.RGBA32Uint) return Uint32Array;
      if (format === GPUTextureFormat.RGBA32Sint) return Int32Array;
      if (format === GPUTextureFormat.RGBA32Float) return Float32Array;
      if (format === GPUTextureFormat.BGRA8Unorm) return Uint8Array;
      if (format === GPUTextureFormat.BGRA8UnormSRGB) return Uint8Array;
      if (format === GPUTextureFormat.RGB10A2Unorm) return Uint32Array;
      if (format === GPUTextureFormat.RGB9E5UFloat) return Uint32Array;
      if (format === GPUTextureFormat.RG11B10UFloat) return Uint32Array;
      if (format === GPUTextureFormat.Depth32Float) return Float32Array;
      if (format === GPUTextureFormat.Depth24Plus) return Uint32Array;
      if (format === GPUTextureFormat.Depth24PlusStencil8) return Uint32Array;
      if (format === GPUTextureFormat.Depth32FloatStencil8) return Float32Array;
    }
    /**
     * Returns the GPU dimensions for the given texture.
     *
     * @private
     * @param {Texture} texture - The texture.
     * @return {string} The GPU dimension.
     */
    _getDimension(texture2) {
      let dimension;
      if (texture2.isData3DTexture) {
        dimension = GPUTextureDimension.ThreeD;
      } else {
        dimension = GPUTextureDimension.TwoD;
      }
      return dimension;
    }
  };
  function getFormat(texture2, device = null) {
    const format = texture2.format;
    const type = texture2.type;
    const colorSpace = texture2.colorSpace;
    const transfer = ColorManagement.getTransfer(colorSpace);
    let formatGPU;
    if (texture2.isCompressedTexture === true || texture2.isCompressedArrayTexture === true) {
      switch (format) {
        case RGBA_S3TC_DXT1_Format:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.BC1RGBAUnormSRGB : GPUTextureFormat.BC1RGBAUnorm;
          break;
        case RGBA_S3TC_DXT3_Format:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.BC2RGBAUnormSRGB : GPUTextureFormat.BC2RGBAUnorm;
          break;
        case RGBA_S3TC_DXT5_Format:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.BC3RGBAUnormSRGB : GPUTextureFormat.BC3RGBAUnorm;
          break;
        case RGB_ETC2_Format:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ETC2RGB8UnormSRGB : GPUTextureFormat.ETC2RGB8Unorm;
          break;
        case RGBA_ETC2_EAC_Format:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ETC2RGBA8UnormSRGB : GPUTextureFormat.ETC2RGBA8Unorm;
          break;
        case RGBA_ASTC_4x4_Format:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC4x4UnormSRGB : GPUTextureFormat.ASTC4x4Unorm;
          break;
        case RGBA_ASTC_5x4_Format:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC5x4UnormSRGB : GPUTextureFormat.ASTC5x4Unorm;
          break;
        case RGBA_ASTC_5x5_Format:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC5x5UnormSRGB : GPUTextureFormat.ASTC5x5Unorm;
          break;
        case RGBA_ASTC_6x5_Format:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC6x5UnormSRGB : GPUTextureFormat.ASTC6x5Unorm;
          break;
        case RGBA_ASTC_6x6_Format:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC6x6UnormSRGB : GPUTextureFormat.ASTC6x6Unorm;
          break;
        case RGBA_ASTC_8x5_Format:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC8x5UnormSRGB : GPUTextureFormat.ASTC8x5Unorm;
          break;
        case RGBA_ASTC_8x6_Format:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC8x6UnormSRGB : GPUTextureFormat.ASTC8x6Unorm;
          break;
        case RGBA_ASTC_8x8_Format:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC8x8UnormSRGB : GPUTextureFormat.ASTC8x8Unorm;
          break;
        case RGBA_ASTC_10x5_Format:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC10x5UnormSRGB : GPUTextureFormat.ASTC10x5Unorm;
          break;
        case RGBA_ASTC_10x6_Format:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC10x6UnormSRGB : GPUTextureFormat.ASTC10x6Unorm;
          break;
        case RGBA_ASTC_10x8_Format:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC10x8UnormSRGB : GPUTextureFormat.ASTC10x8Unorm;
          break;
        case RGBA_ASTC_10x10_Format:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC10x10UnormSRGB : GPUTextureFormat.ASTC10x10Unorm;
          break;
        case RGBA_ASTC_12x10_Format:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC12x10UnormSRGB : GPUTextureFormat.ASTC12x10Unorm;
          break;
        case RGBA_ASTC_12x12_Format:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.ASTC12x12UnormSRGB : GPUTextureFormat.ASTC12x12Unorm;
          break;
        case RGBAFormat:
          formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.RGBA8UnormSRGB : GPUTextureFormat.RGBA8Unorm;
          break;
        default:
          console.error("WebGPURenderer: Unsupported texture format.", format);
      }
    } else {
      switch (format) {
        case RGBAFormat:
          switch (type) {
            case ByteType:
              formatGPU = GPUTextureFormat.RGBA8Snorm;
              break;
            case ShortType:
              formatGPU = GPUTextureFormat.RGBA16Sint;
              break;
            case UnsignedShortType:
              formatGPU = GPUTextureFormat.RGBA16Uint;
              break;
            case UnsignedIntType:
              formatGPU = GPUTextureFormat.RGBA32Uint;
              break;
            case IntType:
              formatGPU = GPUTextureFormat.RGBA32Sint;
              break;
            case UnsignedByteType:
              formatGPU = transfer === SRGBTransfer ? GPUTextureFormat.RGBA8UnormSRGB : GPUTextureFormat.RGBA8Unorm;
              break;
            case HalfFloatType:
              formatGPU = GPUTextureFormat.RGBA16Float;
              break;
            case FloatType:
              formatGPU = GPUTextureFormat.RGBA32Float;
              break;
            default:
              console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.", type);
          }
          break;
        case RGBFormat:
          switch (type) {
            case UnsignedInt5999Type:
              formatGPU = GPUTextureFormat.RGB9E5UFloat;
              break;
            default:
              console.error("WebGPURenderer: Unsupported texture type with RGBFormat.", type);
          }
          break;
        case RedFormat:
          switch (type) {
            case ByteType:
              formatGPU = GPUTextureFormat.R8Snorm;
              break;
            case ShortType:
              formatGPU = GPUTextureFormat.R16Sint;
              break;
            case UnsignedShortType:
              formatGPU = GPUTextureFormat.R16Uint;
              break;
            case UnsignedIntType:
              formatGPU = GPUTextureFormat.R32Uint;
              break;
            case IntType:
              formatGPU = GPUTextureFormat.R32Sint;
              break;
            case UnsignedByteType:
              formatGPU = GPUTextureFormat.R8Unorm;
              break;
            case HalfFloatType:
              formatGPU = GPUTextureFormat.R16Float;
              break;
            case FloatType:
              formatGPU = GPUTextureFormat.R32Float;
              break;
            default:
              console.error("WebGPURenderer: Unsupported texture type with RedFormat.", type);
          }
          break;
        case RGFormat:
          switch (type) {
            case ByteType:
              formatGPU = GPUTextureFormat.RG8Snorm;
              break;
            case ShortType:
              formatGPU = GPUTextureFormat.RG16Sint;
              break;
            case UnsignedShortType:
              formatGPU = GPUTextureFormat.RG16Uint;
              break;
            case UnsignedIntType:
              formatGPU = GPUTextureFormat.RG32Uint;
              break;
            case IntType:
              formatGPU = GPUTextureFormat.RG32Sint;
              break;
            case UnsignedByteType:
              formatGPU = GPUTextureFormat.RG8Unorm;
              break;
            case HalfFloatType:
              formatGPU = GPUTextureFormat.RG16Float;
              break;
            case FloatType:
              formatGPU = GPUTextureFormat.RG32Float;
              break;
            default:
              console.error("WebGPURenderer: Unsupported texture type with RGFormat.", type);
          }
          break;
        case DepthFormat:
          switch (type) {
            case UnsignedShortType:
              formatGPU = GPUTextureFormat.Depth16Unorm;
              break;
            case UnsignedIntType:
              formatGPU = GPUTextureFormat.Depth24Plus;
              break;
            case FloatType:
              formatGPU = GPUTextureFormat.Depth32Float;
              break;
            default:
              console.error("WebGPURenderer: Unsupported texture type with DepthFormat.", type);
          }
          break;
        case DepthStencilFormat:
          switch (type) {
            case UnsignedInt248Type:
              formatGPU = GPUTextureFormat.Depth24PlusStencil8;
              break;
            case FloatType:
              if (device && device.features.has(GPUFeatureName.Depth32FloatStencil8) === false) {
                console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.');
              }
              formatGPU = GPUTextureFormat.Depth32FloatStencil8;
              break;
            default:
              console.error("WebGPURenderer: Unsupported texture type with DepthStencilFormat.", type);
          }
          break;
        case RedIntegerFormat:
          switch (type) {
            case IntType:
              formatGPU = GPUTextureFormat.R32Sint;
              break;
            case UnsignedIntType:
              formatGPU = GPUTextureFormat.R32Uint;
              break;
            default:
              console.error("WebGPURenderer: Unsupported texture type with RedIntegerFormat.", type);
          }
          break;
        case RGIntegerFormat:
          switch (type) {
            case IntType:
              formatGPU = GPUTextureFormat.RG32Sint;
              break;
            case UnsignedIntType:
              formatGPU = GPUTextureFormat.RG32Uint;
              break;
            default:
              console.error("WebGPURenderer: Unsupported texture type with RGIntegerFormat.", type);
          }
          break;
        case RGBAIntegerFormat:
          switch (type) {
            case IntType:
              formatGPU = GPUTextureFormat.RGBA32Sint;
              break;
            case UnsignedIntType:
              formatGPU = GPUTextureFormat.RGBA32Uint;
              break;
            default:
              console.error("WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.", type);
          }
          break;
        default:
          console.error("WebGPURenderer: Unsupported texture format.", format);
      }
    }
    return formatGPU;
  }
  var declarationRegexp = /^[fn]*\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)\s*[\-\>]*\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/i;
  var propertiesRegexp = /([a-z_0-9]+)\s*:\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/ig;
  var wgslTypeLib$1 = {
    "f32": "float",
    "i32": "int",
    "u32": "uint",
    "bool": "bool",
    "vec2<f32>": "vec2",
    "vec2<i32>": "ivec2",
    "vec2<u32>": "uvec2",
    "vec2<bool>": "bvec2",
    "vec2f": "vec2",
    "vec2i": "ivec2",
    "vec2u": "uvec2",
    "vec2b": "bvec2",
    "vec3<f32>": "vec3",
    "vec3<i32>": "ivec3",
    "vec3<u32>": "uvec3",
    "vec3<bool>": "bvec3",
    "vec3f": "vec3",
    "vec3i": "ivec3",
    "vec3u": "uvec3",
    "vec3b": "bvec3",
    "vec4<f32>": "vec4",
    "vec4<i32>": "ivec4",
    "vec4<u32>": "uvec4",
    "vec4<bool>": "bvec4",
    "vec4f": "vec4",
    "vec4i": "ivec4",
    "vec4u": "uvec4",
    "vec4b": "bvec4",
    "mat2x2<f32>": "mat2",
    "mat2x2f": "mat2",
    "mat3x3<f32>": "mat3",
    "mat3x3f": "mat3",
    "mat4x4<f32>": "mat4",
    "mat4x4f": "mat4",
    "sampler": "sampler",
    "texture_1d": "texture",
    "texture_2d": "texture",
    "texture_2d_array": "texture",
    "texture_multisampled_2d": "cubeTexture",
    "texture_depth_2d": "depthTexture",
    "texture_depth_2d_array": "depthTexture",
    "texture_depth_multisampled_2d": "depthTexture",
    "texture_depth_cube": "depthTexture",
    "texture_depth_cube_array": "depthTexture",
    "texture_3d": "texture3D",
    "texture_cube": "cubeTexture",
    "texture_cube_array": "cubeTexture",
    "texture_storage_1d": "storageTexture",
    "texture_storage_2d": "storageTexture",
    "texture_storage_2d_array": "storageTexture",
    "texture_storage_3d": "storageTexture"
  };
  var parse = (source) => {
    source = source.trim();
    const declaration = source.match(declarationRegexp);
    if (declaration !== null && declaration.length === 4) {
      const inputsCode = declaration[2];
      const propsMatches = [];
      let match = null;
      while ((match = propertiesRegexp.exec(inputsCode)) !== null) {
        propsMatches.push({ name: match[1], type: match[2] });
      }
      const inputs = [];
      for (let i = 0; i < propsMatches.length; i++) {
        const { name: name3, type: type2 } = propsMatches[i];
        let resolvedType = type2;
        if (resolvedType.startsWith("ptr")) {
          resolvedType = "pointer";
        } else {
          if (resolvedType.startsWith("texture")) {
            resolvedType = type2.split("<")[0];
          }
          resolvedType = wgslTypeLib$1[resolvedType];
        }
        inputs.push(new NodeFunctionInput(resolvedType, name3));
      }
      const blockCode = source.substring(declaration[0].length);
      const outputType = declaration[3] || "void";
      const name2 = declaration[1] !== void 0 ? declaration[1] : "";
      const type = wgslTypeLib$1[outputType] || outputType;
      return {
        type,
        inputs,
        name: name2,
        inputsCode,
        blockCode,
        outputType
      };
    } else {
      throw new Error("FunctionNode: Function is not a WGSL code.");
    }
  };
  var WGSLNodeFunction = class extends NodeFunction {
    /**
     * Constructs a new WGSL node function.
     *
     * @param {string} source - The WGSL source.
     */
    constructor(source) {
      const { type, inputs, name: name2, inputsCode, blockCode, outputType } = parse(source);
      super(type, inputs, name2);
      this.inputsCode = inputsCode;
      this.blockCode = blockCode;
      this.outputType = outputType;
    }
    /**
     * This method returns the WGSL code of the node function.
     *
     * @param {string} [name=this.name] - The function's name.
     * @return {string} The shader code.
     */
    getCode(name2 = this.name) {
      const outputType = this.outputType !== "void" ? "-> " + this.outputType : "";
      return `fn ${name2} ( ${this.inputsCode.trim()} ) ${outputType}` + this.blockCode;
    }
  };
  var WGSLNodeParser = class extends NodeParser {
    /**
     * The method parses the given WGSL code an returns a node function.
     *
     * @param {string} source - The WGSL code.
     * @return {WGSLNodeFunction} A node function.
     */
    parseFunction(source) {
      return new WGSLNodeFunction(source);
    }
  };
  var GPUShaderStage = typeof self !== "undefined" ? self.GPUShaderStage : { VERTEX: 1, FRAGMENT: 2, COMPUTE: 4 };
  var accessNames = {
    [NodeAccess.READ_ONLY]: "read",
    [NodeAccess.WRITE_ONLY]: "write",
    [NodeAccess.READ_WRITE]: "read_write"
  };
  var wrapNames = {
    [RepeatWrapping]: "repeat",
    [ClampToEdgeWrapping]: "clamp",
    [MirroredRepeatWrapping]: "mirror"
  };
  var gpuShaderStageLib = {
    "vertex": GPUShaderStage ? GPUShaderStage.VERTEX : 1,
    "fragment": GPUShaderStage ? GPUShaderStage.FRAGMENT : 2,
    "compute": GPUShaderStage ? GPUShaderStage.COMPUTE : 4
  };
  var supports = {
    instance: true,
    swizzleAssign: false,
    storageBuffer: true
  };
  var wgslFnOpLib = {
    "^^": "tsl_xor"
  };
  var wgslTypeLib = {
    float: "f32",
    int: "i32",
    uint: "u32",
    bool: "bool",
    color: "vec3<f32>",
    vec2: "vec2<f32>",
    ivec2: "vec2<i32>",
    uvec2: "vec2<u32>",
    bvec2: "vec2<bool>",
    vec3: "vec3<f32>",
    ivec3: "vec3<i32>",
    uvec3: "vec3<u32>",
    bvec3: "vec3<bool>",
    vec4: "vec4<f32>",
    ivec4: "vec4<i32>",
    uvec4: "vec4<u32>",
    bvec4: "vec4<bool>",
    mat2: "mat2x2<f32>",
    mat3: "mat3x3<f32>",
    mat4: "mat4x4<f32>"
  };
  var wgslCodeCache = {};
  var wgslPolyfill = {
    tsl_xor: new CodeNode("fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }"),
    mod_float: new CodeNode("fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }"),
    mod_vec2: new CodeNode("fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }"),
    mod_vec3: new CodeNode("fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }"),
    mod_vec4: new CodeNode("fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }"),
    equals_bool: new CodeNode("fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }"),
    equals_bvec2: new CodeNode("fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }"),
    equals_bvec3: new CodeNode("fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }"),
    equals_bvec4: new CodeNode("fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }"),
    repeatWrapping_float: new CodeNode("fn tsl_repeatWrapping_float( coord: f32 ) -> f32 { return fract( coord ); }"),
    mirrorWrapping_float: new CodeNode("fn tsl_mirrorWrapping_float( coord: f32 ) -> f32 { let mirrored = fract( coord * 0.5 ) * 2.0; return 1.0 - abs( 1.0 - mirrored ); }"),
    clampWrapping_float: new CodeNode("fn tsl_clampWrapping_float( coord: f32 ) -> f32 { return clamp( coord, 0.0, 1.0 ); }"),
    biquadraticTexture: new CodeNode(
      /* wgsl */
      `
fn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, iRes : vec2u, level : u32 ) -> vec4f {

	let res = vec2f( iRes );

	let uvScaled = coord * res;
	let uvWrapping = ( ( uvScaled % res ) + res ) % res;

	// https://www.shadertoy.com/view/WtyXRy

	let uv = uvWrapping - 0.5;
	let iuv = floor( uv );
	let f = fract( uv );

	let rg1 = textureLoad( map, vec2u( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );
	let rg2 = textureLoad( map, vec2u( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );
	let rg3 = textureLoad( map, vec2u( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );
	let rg4 = textureLoad( map, vec2u( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );

	return mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );

}
`
    )
  };
  var wgslMethods = {
    dFdx: "dpdx",
    dFdy: "- dpdy",
    mod_float: "tsl_mod_float",
    mod_vec2: "tsl_mod_vec2",
    mod_vec3: "tsl_mod_vec3",
    mod_vec4: "tsl_mod_vec4",
    equals_bool: "tsl_equals_bool",
    equals_bvec2: "tsl_equals_bvec2",
    equals_bvec3: "tsl_equals_bvec3",
    equals_bvec4: "tsl_equals_bvec4",
    inversesqrt: "inverseSqrt",
    bitcast: "bitcast<f32>"
  };
  if (typeof navigator !== "undefined" && /Windows/g.test(navigator.userAgent)) {
    wgslPolyfill.pow_float = new CodeNode("fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }");
    wgslPolyfill.pow_vec2 = new CodeNode("fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }", [wgslPolyfill.pow_float]);
    wgslPolyfill.pow_vec3 = new CodeNode("fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }", [wgslPolyfill.pow_float]);
    wgslPolyfill.pow_vec4 = new CodeNode("fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }", [wgslPolyfill.pow_float]);
    wgslMethods.pow_float = "tsl_pow_float";
    wgslMethods.pow_vec2 = "tsl_pow_vec2";
    wgslMethods.pow_vec3 = "tsl_pow_vec3";
    wgslMethods.pow_vec4 = "tsl_pow_vec4";
  }
  var diagnostics = "";
  if ((typeof navigator !== "undefined" && /Firefox|Deno/g.test(navigator.userAgent)) !== true) {
    diagnostics += "diagnostic( off, derivative_uniformity );\n";
  }
  var WGSLNodeBuilder = class extends NodeBuilder2 {
    /**
     * Constructs a new WGSL node builder renderer.
     *
     * @param {Object3D} object - The 3D object.
     * @param {Renderer} renderer - The renderer.
     */
    constructor(object, renderer) {
      super(object, renderer, new WGSLNodeParser());
      this.uniformGroups = {};
      this.builtins = {};
      this.directives = {};
      this.scopedArrays = /* @__PURE__ */ new Map();
    }
    /**
     * Checks if the given texture requires a manual conversion to the working color space.
     *
     * @param {Texture} texture - The texture to check.
     * @return {boolean} Whether the given texture requires a conversion to working color space or not.
     */
    needsToWorkingColorSpace(texture2) {
      return texture2.isVideoTexture === true && texture2.colorSpace !== NoColorSpace;
    }
    /**
     * Generates the WGSL snippet for sampled textures.
     *
     * @private
     * @param {Texture} texture - The texture.
     * @param {string} textureProperty - The name of the texture uniform in the shader.
     * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.
     * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
     * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
     * @return {string} The WGSL snippet.
     */
    _generateTextureSample(texture2, textureProperty, uvSnippet, depthSnippet, shaderStage = this.shaderStage) {
      if (shaderStage === "fragment") {
        if (depthSnippet) {
          return `textureSample( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${depthSnippet} )`;
        } else {
          return `textureSample( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet} )`;
        }
      } else {
        return this._generateTextureSampleLevel(texture2, textureProperty, uvSnippet, "0", depthSnippet);
      }
    }
    /**
     * Generates the WGSL snippet when sampling video textures.
     *
     * @private
     * @param {string} textureProperty - The name of the video texture uniform in the shader.
     * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.
     * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
     * @return {string} The WGSL snippet.
     */
    _generateVideoSample(textureProperty, uvSnippet, shaderStage = this.shaderStage) {
      if (shaderStage === "fragment") {
        return `textureSampleBaseClampToEdge( ${textureProperty}, ${textureProperty}_sampler, vec2<f32>( ${uvSnippet}.x, 1.0 - ${uvSnippet}.y ) )`;
      } else {
        console.error(`WebGPURenderer: THREE.VideoTexture does not support ${shaderStage} shader.`);
      }
    }
    /**
     * Generates the WGSL snippet when sampling textures with explicit mip level.
     *
     * @private
     * @param {Texture} texture - The texture.
     * @param {string} textureProperty - The name of the texture uniform in the shader.
     * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.
     * @param {string} levelSnippet - A WGSL snippet that represents the mip level, with level 0 containing a full size version of the texture.
     * @param {string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
     * @return {string} The WGSL snippet.
     */
    _generateTextureSampleLevel(texture2, textureProperty, uvSnippet, levelSnippet, depthSnippet) {
      if (this.isUnfilterable(texture2) === false) {
        return `textureSampleLevel( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${levelSnippet} )`;
      } else if (this.isFilteredTexture(texture2)) {
        return this.generateFilteredTexture(texture2, textureProperty, uvSnippet, levelSnippet);
      } else {
        return this.generateTextureLod(texture2, textureProperty, uvSnippet, depthSnippet, levelSnippet);
      }
    }
    /**
     * Generates a wrap function used in context of textures.
     *
     * @param {Texture} texture - The texture to generate the function for.
     * @return {string} The name of the generated function.
     */
    generateWrapFunction(texture2) {
      const functionName = `tsl_coord_${wrapNames[texture2.wrapS]}S_${wrapNames[texture2.wrapT]}_${texture2.isData3DTexture ? "3d" : "2d"}T`;
      let nodeCode = wgslCodeCache[functionName];
      if (nodeCode === void 0) {
        const includes = [];
        const coordType = texture2.isData3DTexture ? "vec3f" : "vec2f";
        let code = `fn ${functionName}( coord : ${coordType} ) -> ${coordType} {

	return ${coordType}(
`;
        const addWrapSnippet = (wrap, axis) => {
          if (wrap === RepeatWrapping) {
            includes.push(wgslPolyfill.repeatWrapping_float);
            code += `		tsl_repeatWrapping_float( coord.${axis} )`;
          } else if (wrap === ClampToEdgeWrapping) {
            includes.push(wgslPolyfill.clampWrapping_float);
            code += `		tsl_clampWrapping_float( coord.${axis} )`;
          } else if (wrap === MirroredRepeatWrapping) {
            includes.push(wgslPolyfill.mirrorWrapping_float);
            code += `		tsl_mirrorWrapping_float( coord.${axis} )`;
          } else {
            code += `		coord.${axis}`;
            console.warn(`WebGPURenderer: Unsupported texture wrap type "${wrap}" for vertex shader.`);
          }
        };
        addWrapSnippet(texture2.wrapS, "x");
        code += ",\n";
        addWrapSnippet(texture2.wrapT, "y");
        if (texture2.isData3DTexture) {
          code += ",\n";
          addWrapSnippet(texture2.wrapR, "z");
        }
        code += "\n	);\n\n}\n";
        wgslCodeCache[functionName] = nodeCode = new CodeNode(code, includes);
      }
      nodeCode.build(this);
      return functionName;
    }
    /**
     * Generates the array declaration string.
     *
     * @param {string} type - The type.
     * @param {?number} [count] - The count.
     * @return {string} The generated value as a shader string.
     */
    generateArrayDeclaration(type, count) {
      return `array< ${this.getType(type)}, ${count} >`;
    }
    /**
     * Generates a WGSL variable that holds the texture dimension of the given texture.
     * It also returns information about the number of layers (elements) of an arrayed
     * texture as well as the cube face count of cube textures.
     *
     * @param {Texture} texture - The texture to generate the function for.
     * @param {string} textureProperty - The name of the video texture uniform in the shader.
     * @param {string} levelSnippet - A WGSL snippet that represents the mip level, with level 0 containing a full size version of the texture.
     * @return {string} The name of the dimension variable.
     */
    generateTextureDimension(texture2, textureProperty, levelSnippet) {
      const textureData = this.getDataFromNode(texture2, this.shaderStage, this.globalCache);
      if (textureData.dimensionsSnippet === void 0) textureData.dimensionsSnippet = {};
      let textureDimensionNode = textureData.dimensionsSnippet[levelSnippet];
      if (textureData.dimensionsSnippet[levelSnippet] === void 0) {
        let textureDimensionsParams;
        let dimensionType;
        const { primarySamples } = this.renderer.backend.utils.getTextureSampleData(texture2);
        const isMultisampled = primarySamples > 1;
        if (texture2.isData3DTexture) {
          dimensionType = "vec3<u32>";
        } else {
          dimensionType = "vec2<u32>";
        }
        if (isMultisampled || texture2.isVideoTexture || texture2.isStorageTexture) {
          textureDimensionsParams = textureProperty;
        } else {
          textureDimensionsParams = `${textureProperty}${levelSnippet ? `, u32( ${levelSnippet} )` : ""}`;
        }
        textureDimensionNode = new VarNode(new ExpressionNode(`textureDimensions( ${textureDimensionsParams} )`, dimensionType));
        textureData.dimensionsSnippet[levelSnippet] = textureDimensionNode;
        if (texture2.isArrayTexture || texture2.isDataArrayTexture || texture2.isData3DTexture) {
          textureData.arrayLayerCount = new VarNode(
            new ExpressionNode(
              `textureNumLayers(${textureProperty})`,
              "u32"
            )
          );
        }
        if (texture2.isTextureCube) {
          textureData.cubeFaceCount = new VarNode(
            new ExpressionNode("6u", "u32")
          );
        }
      }
      return textureDimensionNode.build(this);
    }
    /**
     * Generates the WGSL snippet for a manual filtered texture.
     *
     * @param {Texture} texture - The texture.
     * @param {string} textureProperty - The name of the texture uniform in the shader.
     * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.
     * @param {string} levelSnippet - A WGSL snippet that represents the mip level, with level 0 containing a full size version of the texture.
     * @return {string} The WGSL snippet.
     */
    generateFilteredTexture(texture2, textureProperty, uvSnippet, levelSnippet = "0u") {
      this._include("biquadraticTexture");
      const wrapFunction = this.generateWrapFunction(texture2);
      const textureDimension = this.generateTextureDimension(texture2, textureProperty, levelSnippet);
      return `tsl_biquadraticTexture( ${textureProperty}, ${wrapFunction}( ${uvSnippet} ), ${textureDimension}, u32( ${levelSnippet} ) )`;
    }
    /**
     * Generates the WGSL snippet for a texture lookup with explicit level-of-detail.
     * Since it's a lookup, no sampling or filtering is applied.
     *
     * @param {Texture} texture - The texture.
     * @param {string} textureProperty - The name of the texture uniform in the shader.
     * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.
     * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
     * @param {string} [levelSnippet='0u'] - A WGSL snippet that represents the mip level, with level 0 containing a full size version of the texture.
     * @return {string} The WGSL snippet.
     */
    generateTextureLod(texture2, textureProperty, uvSnippet, depthSnippet, levelSnippet = "0u") {
      const wrapFunction = this.generateWrapFunction(texture2);
      const textureDimension = this.generateTextureDimension(texture2, textureProperty, levelSnippet);
      const vecType = texture2.isData3DTexture ? "vec3" : "vec2";
      const coordSnippet = `${vecType}<u32>( ${wrapFunction}( ${uvSnippet} ) * ${vecType}<f32>( ${textureDimension} ) )`;
      return this.generateTextureLoad(texture2, textureProperty, coordSnippet, depthSnippet, levelSnippet);
    }
    /**
     * Generates the WGSL snippet that reads a single texel from a texture without sampling or filtering.
     *
     * @param {Texture} texture - The texture.
     * @param {string} textureProperty - The name of the texture uniform in the shader.
     * @param {string} uvIndexSnippet - A WGSL snippet that represents texture coordinates used for sampling.
     * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
     * @param {string} [levelSnippet='0u'] - A WGSL snippet that represents the mip level, with level 0 containing a full size version of the texture.
     * @return {string} The WGSL snippet.
     */
    generateTextureLoad(texture2, textureProperty, uvIndexSnippet, depthSnippet, levelSnippet = "0u") {
      let snippet2;
      if (texture2.isVideoTexture === true) {
        snippet2 = `textureLoad( ${textureProperty}, ${uvIndexSnippet} )`;
      } else if (depthSnippet) {
        snippet2 = `textureLoad( ${textureProperty}, ${uvIndexSnippet}, ${depthSnippet}, u32( ${levelSnippet} ) )`;
      } else {
        snippet2 = `textureLoad( ${textureProperty}, ${uvIndexSnippet}, u32( ${levelSnippet} ) )`;
        if (this.renderer.backend.compatibilityMode && texture2.isDepthTexture) {
          snippet2 += ".x";
        }
      }
      return snippet2;
    }
    /**
     * Generates the WGSL snippet that writes a single texel to a texture.
     *
     * @param {Texture} texture - The texture.
     * @param {string} textureProperty - The name of the texture uniform in the shader.
     * @param {string} uvIndexSnippet - A WGSL snippet that represents texture coordinates used for sampling.
     * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
     * @param {string} valueSnippet - A WGSL snippet that represent the new texel value.
     * @return {string} The WGSL snippet.
     */
    generateTextureStore(texture2, textureProperty, uvIndexSnippet, depthSnippet, valueSnippet) {
      let snippet2;
      if (depthSnippet) {
        snippet2 = `textureStore( ${textureProperty}, ${uvIndexSnippet}, ${depthSnippet}, ${valueSnippet} )`;
      } else {
        snippet2 = `textureStore( ${textureProperty}, ${uvIndexSnippet}, ${valueSnippet} )`;
      }
      return snippet2;
    }
    /**
     * Returns `true` if the sampled values of the given texture should be compared against a reference value.
     *
     * @param {Texture} texture - The texture.
     * @return {boolean} Whether the sampled values of the given texture should be compared against a reference value or not.
     */
    isSampleCompare(texture2) {
      return texture2.isDepthTexture === true && texture2.compareFunction !== null;
    }
    /**
     * Returns `true` if the given texture is unfilterable.
     *
     * @param {Texture} texture - The texture.
     * @return {boolean} Whether the given texture is unfilterable or not.
     */
    isUnfilterable(texture2) {
      return this.getComponentTypeFromTexture(texture2) !== "float" || !this.isAvailable("float32Filterable") && texture2.isDataTexture === true && texture2.type === FloatType || this.isSampleCompare(texture2) === false && texture2.minFilter === NearestFilter && texture2.magFilter === NearestFilter || this.renderer.backend.utils.getTextureSampleData(texture2).primarySamples > 1;
    }
    /**
     * Generates the WGSL snippet for sampling/loading the given texture.
     *
     * @param {Texture} texture - The texture.
     * @param {string} textureProperty - The name of the texture uniform in the shader.
     * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.
     * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
     * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
     * @return {string} The WGSL snippet.
     */
    generateTexture(texture2, textureProperty, uvSnippet, depthSnippet, shaderStage = this.shaderStage) {
      let snippet2 = null;
      if (texture2.isVideoTexture === true) {
        snippet2 = this._generateVideoSample(textureProperty, uvSnippet, shaderStage);
      } else if (this.isUnfilterable(texture2)) {
        snippet2 = this.generateTextureLod(texture2, textureProperty, uvSnippet, depthSnippet, "0", shaderStage);
      } else {
        snippet2 = this._generateTextureSample(texture2, textureProperty, uvSnippet, depthSnippet, shaderStage);
      }
      return snippet2;
    }
    /**
     * Generates the WGSL snippet for sampling/loading the given texture using explicit gradients.
     *
     * @param {Texture} texture - The texture.
     * @param {string} textureProperty - The name of the texture uniform in the shader.
     * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.
     * @param {Array<string>} gradSnippet - An array holding both gradient WGSL snippets.
     * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
     * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
     * @return {string} The WGSL snippet.
     */
    generateTextureGrad(texture2, textureProperty, uvSnippet, gradSnippet, depthSnippet, shaderStage = this.shaderStage) {
      if (shaderStage === "fragment") {
        return `textureSampleGrad( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet},  ${gradSnippet[0]}, ${gradSnippet[1]} )`;
      } else {
        console.error(`WebGPURenderer: THREE.TextureNode.gradient() does not support ${shaderStage} shader.`);
      }
    }
    /**
     * Generates the WGSL snippet for sampling a depth texture and comparing the sampled depth values
     * against a reference value.
     *
     * @param {Texture} texture - The texture.
     * @param {string} textureProperty - The name of the texture uniform in the shader.
     * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.
     * @param {string} compareSnippet -  A WGSL snippet that represents the reference value.
     * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
     * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
     * @return {string} The WGSL snippet.
     */
    generateTextureCompare(texture2, textureProperty, uvSnippet, compareSnippet, depthSnippet, shaderStage = this.shaderStage) {
      if (shaderStage === "fragment") {
        if (texture2.isDepthTexture === true && texture2.isArrayTexture === true) {
          return `textureSampleCompare( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${depthSnippet}, ${compareSnippet} )`;
        }
        return `textureSampleCompare( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${compareSnippet} )`;
      } else {
        console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${shaderStage} shader.`);
      }
    }
    /**
     * Generates the WGSL snippet when sampling textures with explicit mip level.
     *
     * @param {Texture} texture - The texture.
     * @param {string} textureProperty - The name of the texture uniform in the shader.
     * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.
     * @param {string} levelSnippet - A WGSL snippet that represents the mip level, with level 0 containing a full size version of the texture.
     * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
     * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
     * @return {string} The WGSL snippet.
     */
    generateTextureLevel(texture2, textureProperty, uvSnippet, levelSnippet, depthSnippet, shaderStage = this.shaderStage) {
      let snippet2 = null;
      if (texture2.isVideoTexture === true) {
        snippet2 = this._generateVideoSample(textureProperty, uvSnippet, shaderStage);
      } else {
        snippet2 = this._generateTextureSampleLevel(texture2, textureProperty, uvSnippet, levelSnippet, depthSnippet);
      }
      return snippet2;
    }
    /**
     * Generates the WGSL snippet when sampling textures with a bias to the mip level.
     *
     * @param {Texture} texture - The texture.
     * @param {string} textureProperty - The name of the texture uniform in the shader.
     * @param {string} uvSnippet - A WGSL snippet that represents texture coordinates used for sampling.
     * @param {string} biasSnippet - A WGSL snippet that represents the bias to apply to the mip level before sampling.
     * @param {?string} depthSnippet - A WGSL snippet that represents 0-based texture array index to sample.
     * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
     * @return {string} The WGSL snippet.
     */
    generateTextureBias(texture2, textureProperty, uvSnippet, biasSnippet, depthSnippet, shaderStage = this.shaderStage) {
      if (shaderStage === "fragment") {
        return `textureSampleBias( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${biasSnippet} )`;
      } else {
        console.error(`WebGPURenderer: THREE.TextureNode.biasNode does not support ${shaderStage} shader.`);
      }
    }
    /**
     * Returns a WGSL snippet that represents the property name of the given node.
     *
     * @param {Node} node - The node.
     * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
     * @return {string} The property name.
     */
    getPropertyName(node, shaderStage = this.shaderStage) {
      if (node.isNodeVarying === true && node.needsInterpolation === true) {
        if (shaderStage === "vertex") {
          return `varyings.${node.name}`;
        }
      } else if (node.isNodeUniform === true) {
        const name2 = node.name;
        const type = node.type;
        if (type === "texture" || type === "cubeTexture" || type === "storageTexture" || type === "texture3D") {
          return name2;
        } else if (type === "buffer" || type === "storageBuffer" || type === "indirectStorageBuffer") {
          if (this.isCustomStruct(node)) {
            return name2;
          }
          return name2 + ".value";
        } else {
          return node.groupNode.name + "." + name2;
        }
      }
      return super.getPropertyName(node);
    }
    /**
     * Returns the output struct name.
     *
     * @return {string} The name of the output struct.
     */
    getOutputStructName() {
      return "output";
    }
    /**
     * Returns the native shader operator name for a given generic name.
     *
     * @param {string} op - The operator name to resolve.
     * @return {?string} The resolved operator name.
     */
    getFunctionOperator(op) {
      const fnOp = wgslFnOpLib[op];
      if (fnOp !== void 0) {
        this._include(fnOp);
        return fnOp;
      }
      return null;
    }
    /**
     * Returns the node access for the given node and shader stage.
     *
     * @param {StorageTextureNode|StorageBufferNode} node - The storage node.
     * @param {string} shaderStage - The shader stage.
     * @return {string} The node access.
     */
    getNodeAccess(node, shaderStage) {
      if (shaderStage !== "compute")
        return NodeAccess.READ_ONLY;
      return node.access;
    }
    /**
     * Returns A WGSL snippet representing the storage access.
     *
     * @param {StorageTextureNode|StorageBufferNode} node - The storage node.
     * @param {string} shaderStage - The shader stage.
     * @return {string} The WGSL snippet representing the storage access.
     */
    getStorageAccess(node, shaderStage) {
      return accessNames[this.getNodeAccess(node, shaderStage)];
    }
    /**
     * This method is one of the more important ones since it's responsible
     * for generating a matching binding instance for the given uniform node.
     *
     * These bindings are later used in the renderer to create bind groups
     * and layouts.
     *
     * @param {UniformNode} node - The uniform node.
     * @param {string} type - The node data type.
     * @param {string} shaderStage - The shader stage.
     * @param {?string} [name=null] - An optional uniform name.
     * @return {NodeUniform} The node uniform object.
     */
    getUniformFromNode(node, type, shaderStage, name2 = null) {
      const uniformNode = super.getUniformFromNode(node, type, shaderStage, name2);
      const nodeData = this.getDataFromNode(node, shaderStage, this.globalCache);
      if (nodeData.uniformGPU === void 0) {
        let uniformGPU;
        const group = node.groupNode;
        const groupName = group.name;
        const bindings = this.getBindGroupArray(groupName, shaderStage);
        if (type === "texture" || type === "cubeTexture" || type === "storageTexture" || type === "texture3D") {
          let texture2 = null;
          const access = this.getNodeAccess(node, shaderStage);
          if (type === "texture" || type === "storageTexture") {
            texture2 = new NodeSampledTexture(uniformNode.name, uniformNode.node, group, access);
          } else if (type === "cubeTexture") {
            texture2 = new NodeSampledCubeTexture(uniformNode.name, uniformNode.node, group, access);
          } else if (type === "texture3D") {
            texture2 = new NodeSampledTexture3D(uniformNode.name, uniformNode.node, group, access);
          }
          texture2.store = node.isStorageTextureNode === true;
          texture2.setVisibility(gpuShaderStageLib[shaderStage]);
          if (this.isUnfilterable(node.value) === false && texture2.store === false) {
            const sampler = new NodeSampler(`${uniformNode.name}_sampler`, uniformNode.node, group);
            sampler.setVisibility(gpuShaderStageLib[shaderStage]);
            bindings.push(sampler, texture2);
            uniformGPU = [sampler, texture2];
          } else {
            bindings.push(texture2);
            uniformGPU = [texture2];
          }
        } else if (type === "buffer" || type === "storageBuffer" || type === "indirectStorageBuffer") {
          const bufferClass = type === "buffer" ? NodeUniformBuffer : NodeStorageBuffer;
          const buffer2 = new bufferClass(node, group);
          buffer2.setVisibility(gpuShaderStageLib[shaderStage]);
          bindings.push(buffer2);
          uniformGPU = buffer2;
          uniformNode.name = name2 ? name2 : "NodeBuffer_" + uniformNode.id;
        } else {
          const uniformsStage = this.uniformGroups[shaderStage] || (this.uniformGroups[shaderStage] = {});
          let uniformsGroup = uniformsStage[groupName];
          if (uniformsGroup === void 0) {
            uniformsGroup = new NodeUniformsGroup(groupName, group);
            uniformsGroup.setVisibility(gpuShaderStageLib[shaderStage]);
            uniformsStage[groupName] = uniformsGroup;
            bindings.push(uniformsGroup);
          }
          uniformGPU = this.getNodeUniform(uniformNode, type);
          uniformsGroup.addUniform(uniformGPU);
        }
        nodeData.uniformGPU = uniformGPU;
      }
      return uniformNode;
    }
    /**
     * This method should be used whenever builtins are required in nodes.
     * The internal builtins data structure will make sure builtins are
     * defined in the WGSL source.
     *
     * @param {string} name - The builtin name.
     * @param {string} property - The property name.
     * @param {string} type - The node data type.
     * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
     * @return {string} The property name.
     */
    getBuiltin(name2, property2, type, shaderStage = this.shaderStage) {
      const map = this.builtins[shaderStage] || (this.builtins[shaderStage] = /* @__PURE__ */ new Map());
      if (map.has(name2) === false) {
        map.set(name2, {
          name: name2,
          property: property2,
          type
        });
      }
      return property2;
    }
    /**
     * Returns `true` if the given builtin is defined in the given shader stage.
     *
     * @param {string} name - The builtin name.
     * @param {string} [shaderStage=this.shaderStage] - The shader stage this code snippet is generated for.
     * @return {boolean} Whether the given builtin is defined in the given shader stage or not.
     */
    hasBuiltin(name2, shaderStage = this.shaderStage) {
      return this.builtins[shaderStage] !== void 0 && this.builtins[shaderStage].has(name2);
    }
    /**
     * Returns the vertex index builtin.
     *
     * @return {string} The vertex index.
     */
    getVertexIndex() {
      if (this.shaderStage === "vertex") {
        return this.getBuiltin("vertex_index", "vertexIndex", "u32", "attribute");
      }
      return "vertexIndex";
    }
    /**
     * Builds the given shader node.
     *
     * @param {ShaderNodeInternal} shaderNode - The shader node.
     * @return {string} The WGSL function code.
     */
    buildFunctionCode(shaderNode) {
      const layout = shaderNode.layout;
      const flowData = this.flowShaderNode(shaderNode);
      const parameters = [];
      for (const input of layout.inputs) {
        parameters.push(input.name + " : " + this.getType(input.type));
      }
      let code = `fn ${layout.name}( ${parameters.join(", ")} ) -> ${this.getType(layout.type)} {
${flowData.vars}
${flowData.code}
`;
      if (flowData.result) {
        code += `	return ${flowData.result};
`;
      }
      code += "\n}\n";
      return code;
    }
    /**
     * Returns the instance index builtin.
     *
     * @return {string} The instance index.
     */
    getInstanceIndex() {
      if (this.shaderStage === "vertex") {
        return this.getBuiltin("instance_index", "instanceIndex", "u32", "attribute");
      }
      return "instanceIndex";
    }
    /**
     * Returns the invocation local index builtin.
     *
     * @return {string} The invocation local index.
     */
    getInvocationLocalIndex() {
      return this.getBuiltin("local_invocation_index", "invocationLocalIndex", "u32", "attribute");
    }
    /**
     * Returns the subgroup size builtin.
     *
     * @return {string} The subgroup size.
     */
    getSubgroupSize() {
      this.enableSubGroups();
      return this.getBuiltin("subgroup_size", "subgroupSize", "u32", "attribute");
    }
    /**
     * Returns the invocation subgroup index builtin.
     *
     * @return {string} The invocation subgroup index.
     */
    getInvocationSubgroupIndex() {
      this.enableSubGroups();
      return this.getBuiltin("subgroup_invocation_id", "invocationSubgroupIndex", "u32", "attribute");
    }
    /**
     * Returns the subgroup index builtin.
     *
     * @return {string} The subgroup index.
     */
    getSubgroupIndex() {
      this.enableSubGroups();
      return this.getBuiltin("subgroup_id", "subgroupIndex", "u32", "attribute");
    }
    /**
     * Overwritten as a NOP since this method is intended for the WebGL 2 backend.
     *
     * @return {null} Null.
     */
    getDrawIndex() {
      return null;
    }
    /**
     * Returns the front facing builtin.
     *
     * @return {string} The front facing builtin.
     */
    getFrontFacing() {
      return this.getBuiltin("front_facing", "isFront", "bool");
    }
    /**
     * Returns the frag coord builtin.
     *
     * @return {string} The frag coord builtin.
     */
    getFragCoord() {
      return this.getBuiltin("position", "fragCoord", "vec4<f32>") + ".xy";
    }
    /**
     * Returns the frag depth builtin.
     *
     * @return {string} The frag depth builtin.
     */
    getFragDepth() {
      return "output." + this.getBuiltin("frag_depth", "depth", "f32", "output");
    }
    /**
     * Returns the clip distances builtin.
     *
     * @return {string} The clip distances builtin.
     */
    getClipDistance() {
      return "varyings.hw_clip_distances";
    }
    /**
     * Whether to flip texture data along its vertical axis or not.
     *
     * @return {boolean} Returns always `false` in context of WGSL.
     */
    isFlipY() {
      return false;
    }
    /**
     * Enables the given directive for the given shader stage.
     *
     * @param {string} name - The directive name.
     * @param {string} [shaderStage=this.shaderStage] - The shader stage to enable the directive for.
     */
    enableDirective(name2, shaderStage = this.shaderStage) {
      const stage = this.directives[shaderStage] || (this.directives[shaderStage] = /* @__PURE__ */ new Set());
      stage.add(name2);
    }
    /**
     * Returns the directives of the given shader stage as a WGSL string.
     *
     * @param {string} shaderStage - The shader stage.
     * @return {string} A WGSL snippet that enables the directives of the given stage.
     */
    getDirectives(shaderStage) {
      const snippets2 = [];
      const directives = this.directives[shaderStage];
      if (directives !== void 0) {
        for (const directive of directives) {
          snippets2.push(`enable ${directive};`);
        }
      }
      return snippets2.join("\n");
    }
    /**
     * Enables the 'subgroups' directive.
     */
    enableSubGroups() {
      this.enableDirective("subgroups");
    }
    /**
     * Enables the 'subgroups-f16' directive.
     */
    enableSubgroupsF16() {
      this.enableDirective("subgroups-f16");
    }
    /**
     * Enables the 'clip_distances' directive.
     */
    enableClipDistances() {
      this.enableDirective("clip_distances");
    }
    /**
     * Enables the 'f16' directive.
     */
    enableShaderF16() {
      this.enableDirective("f16");
    }
    /**
     * Enables the 'dual_source_blending' directive.
     */
    enableDualSourceBlending() {
      this.enableDirective("dual_source_blending");
    }
    /**
     * Enables hardware clipping.
     *
     * @param {string} planeCount - The clipping plane count.
     */
    enableHardwareClipping(planeCount) {
      this.enableClipDistances();
      this.getBuiltin("clip_distances", "hw_clip_distances", `array<f32, ${planeCount} >`, "vertex");
    }
    /**
     * Returns the builtins of the given shader stage as a WGSL string.
     *
     * @param {string} shaderStage - The shader stage.
     * @return {string} A WGSL snippet that represents the builtins of the given stage.
     */
    getBuiltins(shaderStage) {
      const snippets2 = [];
      const builtins = this.builtins[shaderStage];
      if (builtins !== void 0) {
        for (const { name: name2, property: property2, type } of builtins.values()) {
          snippets2.push(`@builtin( ${name2} ) ${property2} : ${type}`);
        }
      }
      return snippets2.join(",\n	");
    }
    /**
     * This method should be used when a new scoped buffer is used in context of
     * compute shaders. It adds the array to the internal data structure which is
     * later used to generate the respective WGSL.
     *
     * @param {string} name - The array name.
     * @param {string} scope - The scope.
     * @param {string} bufferType - The buffer type.
     * @param {string} bufferCount - The buffer count.
     * @return {string} The array name.
     */
    getScopedArray(name2, scope, bufferType, bufferCount) {
      if (this.scopedArrays.has(name2) === false) {
        this.scopedArrays.set(name2, {
          name: name2,
          scope,
          bufferType,
          bufferCount
        });
      }
      return name2;
    }
    /**
     * Returns the scoped arrays of the given shader stage as a WGSL string.
     *
     * @param {string} shaderStage - The shader stage.
     * @return {string|undefined} The WGSL snippet that defines the scoped arrays.
     * Returns `undefined` when used in the vertex or fragment stage.
     */
    getScopedArrays(shaderStage) {
      if (shaderStage !== "compute") {
        return;
      }
      const snippets2 = [];
      for (const { name: name2, scope, bufferType, bufferCount } of this.scopedArrays.values()) {
        const type = this.getType(bufferType);
        snippets2.push(`var<${scope}> ${name2}: array< ${type}, ${bufferCount} >;`);
      }
      return snippets2.join("\n");
    }
    /**
     * Returns the shader attributes of the given shader stage as a WGSL string.
     *
     * @param {string} shaderStage - The shader stage.
     * @return {string} The WGSL snippet that defines the shader attributes.
     */
    getAttributes(shaderStage) {
      const snippets2 = [];
      if (shaderStage === "compute") {
        this.getBuiltin("global_invocation_id", "globalId", "vec3<u32>", "attribute");
        this.getBuiltin("workgroup_id", "workgroupId", "vec3<u32>", "attribute");
        this.getBuiltin("local_invocation_id", "localId", "vec3<u32>", "attribute");
        this.getBuiltin("num_workgroups", "numWorkgroups", "vec3<u32>", "attribute");
        if (this.renderer.hasFeature("subgroups")) {
          this.enableDirective("subgroups", shaderStage);
          this.getBuiltin("subgroup_size", "subgroupSize", "u32", "attribute");
        }
      }
      if (shaderStage === "vertex" || shaderStage === "compute") {
        const builtins = this.getBuiltins("attribute");
        if (builtins) snippets2.push(builtins);
        const attributes = this.getAttributesArray();
        for (let index = 0, length2 = attributes.length; index < length2; index++) {
          const attribute2 = attributes[index];
          const name2 = attribute2.name;
          const type = this.getType(attribute2.type);
          snippets2.push(`@location( ${index} ) ${name2} : ${type}`);
        }
      }
      return snippets2.join(",\n	");
    }
    /**
     * Returns the members of the given struct type node as a WGSL string.
     *
     * @param {StructTypeNode} struct - The struct type node.
     * @return {string} The WGSL snippet that defines the struct members.
     */
    getStructMembers(struct) {
      const snippets2 = [];
      for (const member of struct.members) {
        const prefix = struct.output ? "@location( " + member.index + " ) " : "";
        let type = this.getType(member.type);
        if (member.atomic) {
          type = "atomic< " + type + " >";
        }
        snippets2.push(`	${prefix + member.name} : ${type}`);
      }
      if (struct.output) {
        snippets2.push(`	${this.getBuiltins("output")}`);
      }
      return snippets2.join(",\n");
    }
    /**
     * Returns the structs of the given shader stage as a WGSL string.
     *
     * @param {string} shaderStage - The shader stage.
     * @return {string} The WGSL snippet that defines the structs.
     */
    getStructs(shaderStage) {
      let result = "";
      const structs = this.structs[shaderStage];
      if (structs.length > 0) {
        const snippets2 = [];
        for (const struct of structs) {
          let snippet2 = `struct ${struct.name} {
`;
          snippet2 += this.getStructMembers(struct);
          snippet2 += "\n};";
          snippets2.push(snippet2);
        }
        result = "\n" + snippets2.join("\n\n") + "\n";
      }
      return result;
    }
    /**
     * Returns a WGSL string representing a variable.
     *
     * @param {string} type - The variable's type.
     * @param {string} name - The variable's name.
     * @param {?number} [count=null] - The array length.
     * @return {string} The WGSL snippet that defines a variable.
     */
    getVar(type, name2, count = null) {
      let snippet2 = `var ${name2} : `;
      if (count !== null) {
        snippet2 += this.generateArrayDeclaration(type, count);
      } else {
        snippet2 += this.getType(type);
      }
      return snippet2;
    }
    /**
     * Returns the variables of the given shader stage as a WGSL string.
     *
     * @param {string} shaderStage - The shader stage.
     * @return {string} The WGSL snippet that defines the variables.
     */
    getVars(shaderStage) {
      const snippets2 = [];
      const vars = this.vars[shaderStage];
      if (vars !== void 0) {
        for (const variable of vars) {
          snippets2.push(`	${this.getVar(variable.type, variable.name, variable.count)};`);
        }
      }
      return `
${snippets2.join("\n")}
`;
    }
    /**
     * Returns the varyings of the given shader stage as a WGSL string.
     *
     * @param {string} shaderStage - The shader stage.
     * @return {string} The WGSL snippet that defines the varyings.
     */
    getVaryings(shaderStage) {
      const snippets2 = [];
      if (shaderStage === "vertex") {
        this.getBuiltin("position", "Vertex", "vec4<f32>", "vertex");
      }
      if (shaderStage === "vertex" || shaderStage === "fragment") {
        const varyings = this.varyings;
        const vars = this.vars[shaderStage];
        for (let index = 0; index < varyings.length; index++) {
          const varying2 = varyings[index];
          if (varying2.needsInterpolation) {
            let attributesSnippet = `@location( ${index} )`;
            if (varying2.interpolationType) {
              const samplingSnippet = varying2.interpolationSampling !== null ? `, ${varying2.interpolationSampling} )` : " )";
              attributesSnippet += ` @interpolate( ${varying2.interpolationType}${samplingSnippet}`;
            } else if (/^(int|uint|ivec|uvec)/.test(varying2.type)) {
              attributesSnippet += ` @interpolate( ${this.renderer.backend.compatibilityMode ? "flat, either" : "flat"} )`;
            }
            snippets2.push(`${attributesSnippet} ${varying2.name} : ${this.getType(varying2.type)}`);
          } else if (shaderStage === "vertex" && vars.includes(varying2) === false) {
            vars.push(varying2);
          }
        }
      }
      const builtins = this.getBuiltins(shaderStage);
      if (builtins) snippets2.push(builtins);
      const code = snippets2.join(",\n	");
      return shaderStage === "vertex" ? this._getWGSLStruct("VaryingsStruct", "	" + code) : code;
    }
    isCustomStruct(nodeUniform) {
      const attribute2 = nodeUniform.value;
      const bufferNode = nodeUniform.node;
      const isAttributeStructType = (attribute2.isBufferAttribute || attribute2.isInstancedBufferAttribute) && bufferNode.structTypeNode !== null;
      const isStructArray = bufferNode.value && bufferNode.value.array && (typeof bufferNode.value.itemSize === "number" && bufferNode.value.array.length > bufferNode.value.itemSize);
      return isAttributeStructType && !isStructArray;
    }
    /**
     * Returns the uniforms of the given shader stage as a WGSL string.
     *
     * @param {string} shaderStage - The shader stage.
     * @return {string} The WGSL snippet that defines the uniforms.
     */
    getUniforms(shaderStage) {
      const uniforms = this.uniforms[shaderStage];
      const bindingSnippets = [];
      const bufferSnippets = [];
      const structSnippets = [];
      const uniformGroups = {};
      for (const uniform2 of uniforms) {
        const groupName = uniform2.groupNode.name;
        const uniformIndexes = this.bindingsIndexes[groupName];
        if (uniform2.type === "texture" || uniform2.type === "cubeTexture" || uniform2.type === "storageTexture" || uniform2.type === "texture3D") {
          const texture2 = uniform2.node.value;
          if (this.isUnfilterable(texture2) === false && uniform2.node.isStorageTextureNode !== true) {
            if (this.isSampleCompare(texture2)) {
              bindingSnippets.push(`@binding( ${uniformIndexes.binding++} ) @group( ${uniformIndexes.group} ) var ${uniform2.name}_sampler : sampler_comparison;`);
            } else {
              bindingSnippets.push(`@binding( ${uniformIndexes.binding++} ) @group( ${uniformIndexes.group} ) var ${uniform2.name}_sampler : sampler;`);
            }
          }
          let textureType;
          let multisampled = "";
          const { primarySamples } = this.renderer.backend.utils.getTextureSampleData(texture2);
          if (primarySamples > 1) {
            multisampled = "_multisampled";
          }
          if (texture2.isCubeTexture === true) {
            textureType = "texture_cube<f32>";
          } else if (texture2.isDepthTexture === true) {
            if (this.renderer.backend.compatibilityMode && texture2.compareFunction === null) {
              textureType = `texture${multisampled}_2d<f32>`;
            } else {
              textureType = `texture_depth${multisampled}_2d${texture2.isArrayTexture === true ? "_array" : ""}`;
            }
          } else if (texture2.isArrayTexture === true || texture2.isDataArrayTexture === true || texture2.isCompressedArrayTexture === true) {
            textureType = "texture_2d_array<f32>";
          } else if (texture2.isVideoTexture === true) {
            textureType = "texture_external";
          } else if (texture2.isData3DTexture === true) {
            textureType = "texture_3d<f32>";
          } else if (uniform2.node.isStorageTextureNode === true) {
            const format = getFormat(texture2);
            const access = this.getStorageAccess(uniform2.node, shaderStage);
            textureType = `texture_storage_2d<${format}, ${access}>`;
          } else {
            const componentPrefix = this.getComponentTypeFromTexture(texture2).charAt(0);
            textureType = `texture${multisampled}_2d<${componentPrefix}32>`;
          }
          bindingSnippets.push(`@binding( ${uniformIndexes.binding++} ) @group( ${uniformIndexes.group} ) var ${uniform2.name} : ${textureType};`);
        } else if (uniform2.type === "buffer" || uniform2.type === "storageBuffer" || uniform2.type === "indirectStorageBuffer") {
          const bufferNode = uniform2.node;
          const bufferType = this.getType(bufferNode.getNodeType(this));
          const bufferCount = bufferNode.bufferCount;
          const bufferCountSnippet = bufferCount > 0 && uniform2.type === "buffer" ? ", " + bufferCount : "";
          const bufferAccessMode = bufferNode.isStorageBufferNode ? `storage, ${this.getStorageAccess(bufferNode, shaderStage)}` : "uniform";
          if (this.isCustomStruct(uniform2)) {
            bufferSnippets.push(`@binding( ${uniformIndexes.binding++} ) @group( ${uniformIndexes.group} ) var<${bufferAccessMode}> ${uniform2.name} : ${bufferType};`);
          } else {
            const bufferTypeSnippet = bufferNode.isAtomic ? `atomic<${bufferType}>` : `${bufferType}`;
            const bufferSnippet = `	value : array< ${bufferTypeSnippet}${bufferCountSnippet} >`;
            bufferSnippets.push(this._getWGSLStructBinding(uniform2.name, bufferSnippet, bufferAccessMode, uniformIndexes.binding++, uniformIndexes.group));
          }
        } else {
          const vectorType = this.getType(this.getVectorType(uniform2.type));
          const groupName2 = uniform2.groupNode.name;
          const group = uniformGroups[groupName2] || (uniformGroups[groupName2] = {
            index: uniformIndexes.binding++,
            id: uniformIndexes.group,
            snippets: []
          });
          group.snippets.push(`	${uniform2.name} : ${vectorType}`);
        }
      }
      for (const name2 in uniformGroups) {
        const group = uniformGroups[name2];
        structSnippets.push(this._getWGSLStructBinding(name2, group.snippets.join(",\n"), "uniform", group.index, group.id));
      }
      let code = bindingSnippets.join("\n");
      code += bufferSnippets.join("\n");
      code += structSnippets.join("\n");
      return code;
    }
    /**
     * Controls the code build of the shader stages.
     */
    buildCode() {
      const shadersData = this.material !== null ? { fragment: {}, vertex: {} } : { compute: {} };
      this.sortBindingGroups();
      for (const shaderStage in shadersData) {
        this.shaderStage = shaderStage;
        const stageData = shadersData[shaderStage];
        stageData.uniforms = this.getUniforms(shaderStage);
        stageData.attributes = this.getAttributes(shaderStage);
        stageData.varyings = this.getVaryings(shaderStage);
        stageData.structs = this.getStructs(shaderStage);
        stageData.vars = this.getVars(shaderStage);
        stageData.codes = this.getCodes(shaderStage);
        stageData.directives = this.getDirectives(shaderStage);
        stageData.scopedArrays = this.getScopedArrays(shaderStage);
        let flow = "// code\n\n";
        flow += this.flowCode[shaderStage];
        const flowNodes = this.flowNodes[shaderStage];
        const mainNode = flowNodes[flowNodes.length - 1];
        const outputNode = mainNode.outputNode;
        const isOutputStruct = outputNode !== void 0 && outputNode.isOutputStructNode === true;
        for (const node of flowNodes) {
          const flowSlotData = this.getFlowData(
            node
            /*, shaderStage*/
          );
          const slotName = node.name;
          if (slotName) {
            if (flow.length > 0) flow += "\n";
            flow += `	// flow -> ${slotName}
`;
          }
          flow += `${flowSlotData.code}
	`;
          if (node === mainNode && shaderStage !== "compute") {
            flow += "// result\n\n	";
            if (shaderStage === "vertex") {
              flow += `varyings.Vertex = ${flowSlotData.result};`;
            } else if (shaderStage === "fragment") {
              if (isOutputStruct) {
                stageData.returnType = outputNode.getNodeType(this);
                stageData.structs += "var<private> output : " + stageData.returnType + ";";
                flow += `return ${flowSlotData.result};`;
              } else {
                let structSnippet = "	@location(0) color: vec4<f32>";
                const builtins = this.getBuiltins("output");
                if (builtins) structSnippet += ",\n	" + builtins;
                stageData.returnType = "OutputStruct";
                stageData.structs += this._getWGSLStruct("OutputStruct", structSnippet);
                stageData.structs += "\nvar<private> output : OutputStruct;";
                flow += `output.color = ${flowSlotData.result};

	return output;`;
              }
            }
          }
        }
        stageData.flow = flow;
      }
      this.shaderStage = null;
      if (this.material !== null) {
        this.vertexShader = this._getWGSLVertexCode(shadersData.vertex);
        this.fragmentShader = this._getWGSLFragmentCode(shadersData.fragment);
      } else {
        this.computeShader = this._getWGSLComputeCode(shadersData.compute, (this.object.workgroupSize || [64]).join(", "));
      }
    }
    /**
     * Returns the native shader method name for a given generic name.
     *
     * @param {string} method - The method name to resolve.
     * @param {?string} [output=null] - An optional output.
     * @return {string} The resolved WGSL method name.
     */
    getMethod(method, output2 = null) {
      let wgslMethod;
      if (output2 !== null) {
        wgslMethod = this._getWGSLMethod(method + "_" + output2);
      }
      if (wgslMethod === void 0) {
        wgslMethod = this._getWGSLMethod(method);
      }
      return wgslMethod || method;
    }
    /**
     * Returns the WGSL type of the given node data type.
     *
     * @param {string} type - The node data type.
     * @return {string} The WGSL type.
     */
    getType(type) {
      return wgslTypeLib[type] || type;
    }
    /**
     * Whether the requested feature is available or not.
     *
     * @param {string} name - The requested feature.
     * @return {boolean} Whether the requested feature is supported or not.
     */
    isAvailable(name2) {
      let result = supports[name2];
      if (result === void 0) {
        if (name2 === "float32Filterable") {
          result = this.renderer.hasFeature("float32-filterable");
        } else if (name2 === "clipDistance") {
          result = this.renderer.hasFeature("clip-distances");
        }
        supports[name2] = result;
      }
      return result;
    }
    /**
     * Returns the native shader method name for a given generic name.
     *
     * @private
     * @param {string} method - The method name to resolve.
     * @return {string} The resolved WGSL method name.
     */
    _getWGSLMethod(method) {
      if (wgslPolyfill[method] !== void 0) {
        this._include(method);
      }
      return wgslMethods[method];
    }
    /**
     * Includes the given method name into the current
     * function node.
     *
     * @private
     * @param {string} name - The method name to include.
     * @return {CodeNode} The respective code node.
     */
    _include(name2) {
      const codeNode = wgslPolyfill[name2];
      codeNode.build(this);
      if (this.currentFunctionNode !== null) {
        this.currentFunctionNode.includes.push(codeNode);
      }
      return codeNode;
    }
    /**
     * Returns a WGSL vertex shader based on the given shader data.
     *
     * @private
     * @param {Object} shaderData - The shader data.
     * @return {string} The vertex shader.
     */
    _getWGSLVertexCode(shaderData) {
      return `${this.getSignature()}
// directives
${shaderData.directives}

// structs
${shaderData.structs}

// uniforms
${shaderData.uniforms}

// varyings
${shaderData.varyings}
var<private> varyings : VaryingsStruct;

// codes
${shaderData.codes}

@vertex
fn main( ${shaderData.attributes} ) -> VaryingsStruct {

	// vars
	${shaderData.vars}

	// flow
	${shaderData.flow}

	return varyings;

}
`;
    }
    /**
     * Returns a WGSL fragment shader based on the given shader data.
     *
     * @private
     * @param {Object} shaderData - The shader data.
     * @return {string} The vertex shader.
     */
    _getWGSLFragmentCode(shaderData) {
      return `${this.getSignature()}
// global
${diagnostics}

// structs
${shaderData.structs}

// uniforms
${shaderData.uniforms}

// codes
${shaderData.codes}

@fragment
fn main( ${shaderData.varyings} ) -> ${shaderData.returnType} {

	// vars
	${shaderData.vars}

	// flow
	${shaderData.flow}

}
`;
    }
    /**
     * Returns a WGSL compute shader based on the given shader data.
     *
     * @private
     * @param {Object} shaderData - The shader data.
     * @param {string} workgroupSize - The workgroup size.
     * @return {string} The vertex shader.
     */
    _getWGSLComputeCode(shaderData, workgroupSize) {
      return `${this.getSignature()}
// directives
${shaderData.directives}

// system
var<private> instanceIndex : u32;

// locals
${shaderData.scopedArrays}

// structs
${shaderData.structs}

// uniforms
${shaderData.uniforms}

// codes
${shaderData.codes}

@compute @workgroup_size( ${workgroupSize} )
fn main( ${shaderData.attributes} ) {

	// system
	instanceIndex = globalId.x + globalId.y * numWorkgroups.x * u32(${workgroupSize}) + globalId.z * numWorkgroups.x * numWorkgroups.y * u32(${workgroupSize});

	// vars
	${shaderData.vars}

	// flow
	${shaderData.flow}

}
`;
    }
    /**
     * Returns a WGSL struct based on the given name and variables.
     *
     * @private
     * @param {string} name - The struct name.
     * @param {string} vars - The struct variables.
     * @return {string} The WGSL snippet representing a struct.
     */
    _getWGSLStruct(name2, vars) {
      return `
struct ${name2} {
${vars}
};`;
    }
    /**
     * Returns a WGSL struct binding.
     *
     * @private
     * @param {string} name - The struct name.
     * @param {string} vars - The struct variables.
     * @param {string} access - The access.
     * @param {number} [binding=0] - The binding index.
     * @param {number} [group=0] - The group index.
     * @return {string} The WGSL snippet representing a struct binding.
     */
    _getWGSLStructBinding(name2, vars, access, binding = 0, group = 0) {
      const structName = name2 + "Struct";
      const structSnippet = this._getWGSLStruct(structName, vars);
      return `${structSnippet}
@binding( ${binding} ) @group( ${group} )
var<${access}> ${name2} : ${structName};`;
    }
  };
  var WebGPUUtils = class {
    /**
     * Constructs a new utility object.
     *
     * @param {WebGPUBackend} backend - The WebGPU backend.
     */
    constructor(backend) {
      this.backend = backend;
    }
    /**
     * Returns the depth/stencil GPU format for the given render context.
     *
     * @param {RenderContext} renderContext - The render context.
     * @return {string} The depth/stencil GPU texture format.
     */
    getCurrentDepthStencilFormat(renderContext) {
      let format;
      if (renderContext.depthTexture !== null) {
        format = this.getTextureFormatGPU(renderContext.depthTexture);
      } else if (renderContext.depth && renderContext.stencil) {
        format = GPUTextureFormat.Depth24PlusStencil8;
      } else if (renderContext.depth) {
        format = GPUTextureFormat.Depth24Plus;
      }
      return format;
    }
    /**
     * Returns the GPU format for the given texture.
     *
     * @param {Texture} texture - The texture.
     * @return {string} The GPU texture format.
     */
    getTextureFormatGPU(texture2) {
      return this.backend.get(texture2).format;
    }
    /**
     * Returns an object that defines the multi-sampling state of the given texture.
     *
     * @param {Texture} texture - The texture.
     * @return {Object} The multi-sampling state.
     */
    getTextureSampleData(texture2) {
      let samples;
      if (texture2.isFramebufferTexture) {
        samples = 1;
      } else if (texture2.isDepthTexture && !texture2.renderTarget) {
        const renderer = this.backend.renderer;
        const renderTarget = renderer.getRenderTarget();
        samples = renderTarget ? renderTarget.samples : renderer.samples;
      } else if (texture2.renderTarget) {
        samples = texture2.renderTarget.samples;
      }
      samples = samples || 1;
      const isMSAA = samples > 1 && texture2.renderTarget !== null && (texture2.isDepthTexture !== true && texture2.isFramebufferTexture !== true);
      const primarySamples = isMSAA ? 1 : samples;
      return { samples, primarySamples, isMSAA };
    }
    /**
     * Returns the default color attachment's GPU format of the current render context.
     *
     * @param {RenderContext} renderContext - The render context.
     * @return {string} The GPU texture format of the default color attachment.
     */
    getCurrentColorFormat(renderContext) {
      let format;
      if (renderContext.textures !== null) {
        format = this.getTextureFormatGPU(renderContext.textures[0]);
      } else {
        format = this.getPreferredCanvasFormat();
      }
      return format;
    }
    /**
     * Returns the output color space of the current render context.
     *
     * @param {RenderContext} renderContext - The render context.
     * @return {string} The output color space.
     */
    getCurrentColorSpace(renderContext) {
      if (renderContext.textures !== null) {
        return renderContext.textures[0].colorSpace;
      }
      return this.backend.renderer.outputColorSpace;
    }
    /**
     * Returns GPU primitive topology for the given object and material.
     *
     * @param {Object3D} object - The 3D object.
     * @param {Material} material - The material.
     * @return {string} The GPU primitive topology.
     */
    getPrimitiveTopology(object, material2) {
      if (object.isPoints) return GPUPrimitiveTopology.PointList;
      else if (object.isLineSegments || object.isMesh && material2.wireframe === true) return GPUPrimitiveTopology.LineList;
      else if (object.isLine) return GPUPrimitiveTopology.LineStrip;
      else if (object.isMesh) return GPUPrimitiveTopology.TriangleList;
    }
    /**
     * Returns a modified sample count from the given sample count value.
     *
     * That is required since WebGPU does not support arbitrary sample counts.
     *
     * @param {number} sampleCount - The input sample count.
     * @return {number} The (potentially updated) output sample count.
     */
    getSampleCount(sampleCount) {
      let count = 1;
      if (sampleCount > 1) {
        count = Math.pow(2, Math.floor(Math.log2(sampleCount)));
        if (count === 2) {
          count = 4;
        }
      }
      return count;
    }
    /**
     * Returns the sample count of the given render context.
     *
     * @param {RenderContext} renderContext - The render context.
     * @return {number} The sample count.
     */
    getSampleCountRenderContext(renderContext) {
      if (renderContext.textures !== null) {
        return this.getSampleCount(renderContext.sampleCount);
      }
      return this.getSampleCount(this.backend.renderer.samples);
    }
    /**
     * Returns the preferred canvas format.
     *
     * There is a separate method for this so it's possible to
     * honor edge cases for specific devices.
     *
     * @return {string} The GPU texture format of the canvas.
     */
    getPreferredCanvasFormat() {
      const outputType = this.backend.parameters.outputType;
      if (outputType === void 0) {
        return navigator.gpu.getPreferredCanvasFormat();
      } else if (outputType === UnsignedByteType) {
        return GPUTextureFormat.BGRA8Unorm;
      } else if (outputType === HalfFloatType) {
        return GPUTextureFormat.RGBA16Float;
      } else {
        throw new Error("Unsupported outputType");
      }
    }
  };
  var typedArraysToVertexFormatPrefix = /* @__PURE__ */ new Map([
    [Int8Array, ["sint8", "snorm8"]],
    [Uint8Array, ["uint8", "unorm8"]],
    [Int16Array, ["sint16", "snorm16"]],
    [Uint16Array, ["uint16", "unorm16"]],
    [Int32Array, ["sint32", "snorm32"]],
    [Uint32Array, ["uint32", "unorm32"]],
    [Float32Array, ["float32"]]
  ]);
  var typedAttributeToVertexFormatPrefix = /* @__PURE__ */ new Map([
    [Float16BufferAttribute, ["float16"]]
  ]);
  var typeArraysToVertexFormatPrefixForItemSize1 = /* @__PURE__ */ new Map([
    [Int32Array, "sint32"],
    [Int16Array, "sint32"],
    // patch for INT16
    [Uint32Array, "uint32"],
    [Uint16Array, "uint32"],
    // patch for UINT16
    [Float32Array, "float32"]
  ]);
  var WebGPUAttributeUtils = class {
    /**
     * Constructs a new utility object.
     *
     * @param {WebGPUBackend} backend - The WebGPU backend.
     */
    constructor(backend) {
      this.backend = backend;
    }
    /**
     * Creates the GPU buffer for the given buffer attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute.
     * @param {GPUBufferUsage} usage - A flag that indicates how the buffer may be used after its creation.
     */
    createAttribute(attribute2, usage) {
      const bufferAttribute2 = this._getBufferAttribute(attribute2);
      const backend = this.backend;
      const bufferData = backend.get(bufferAttribute2);
      let buffer2 = bufferData.buffer;
      if (buffer2 === void 0) {
        const device = backend.device;
        let array2 = bufferAttribute2.array;
        if (attribute2.normalized === false) {
          if (array2.constructor === Int16Array || array2.constructor === Int8Array) {
            array2 = new Int32Array(array2);
          } else if (array2.constructor === Uint16Array || array2.constructor === Uint8Array) {
            array2 = new Uint32Array(array2);
            if (usage & GPUBufferUsage.INDEX) {
              for (let i = 0; i < array2.length; i++) {
                if (array2[i] === 65535) array2[i] = 4294967295;
              }
            }
          }
        }
        bufferAttribute2.array = array2;
        if ((bufferAttribute2.isStorageBufferAttribute || bufferAttribute2.isStorageInstancedBufferAttribute) && bufferAttribute2.itemSize === 3) {
          array2 = new array2.constructor(bufferAttribute2.count * 4);
          for (let i = 0; i < bufferAttribute2.count; i++) {
            array2.set(bufferAttribute2.array.subarray(i * 3, i * 3 + 3), i * 4);
          }
          bufferAttribute2.itemSize = 4;
          bufferAttribute2.array = array2;
          bufferData._force3to4BytesAlignment = true;
        }
        const byteLength = array2.byteLength;
        const size = byteLength + (4 - byteLength % 4) % 4;
        buffer2 = device.createBuffer({
          label: bufferAttribute2.name,
          size,
          usage,
          mappedAtCreation: true
        });
        new array2.constructor(buffer2.getMappedRange()).set(array2);
        buffer2.unmap();
        bufferData.buffer = buffer2;
      }
    }
    /**
     * Updates the GPU buffer of the given buffer attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute.
     */
    updateAttribute(attribute2) {
      const bufferAttribute2 = this._getBufferAttribute(attribute2);
      const backend = this.backend;
      const device = backend.device;
      const bufferData = backend.get(bufferAttribute2);
      const buffer2 = backend.get(bufferAttribute2).buffer;
      let array2 = bufferAttribute2.array;
      if (bufferData._force3to4BytesAlignment === true) {
        array2 = new array2.constructor(bufferAttribute2.count * 4);
        for (let i = 0; i < bufferAttribute2.count; i++) {
          array2.set(bufferAttribute2.array.subarray(i * 3, i * 3 + 3), i * 4);
        }
        bufferAttribute2.array = array2;
      }
      const isTypedArray2 = this._isTypedArray(array2);
      const updateRanges = bufferAttribute2.updateRanges;
      if (updateRanges.length === 0) {
        device.queue.writeBuffer(
          buffer2,
          0,
          array2,
          0
        );
      } else {
        const byteOffsetFactor = isTypedArray2 ? 1 : array2.BYTES_PER_ELEMENT;
        for (let i = 0, l = updateRanges.length; i < l; i++) {
          const range = updateRanges[i];
          let dataOffset, size;
          if (bufferData._force3to4BytesAlignment === true) {
            const vertexStart = Math.floor(range.start / 3);
            const vertexCount = Math.ceil(range.count / 3);
            dataOffset = vertexStart * 4 * byteOffsetFactor;
            size = vertexCount * 4 * byteOffsetFactor;
          } else {
            dataOffset = range.start * byteOffsetFactor;
            size = range.count * byteOffsetFactor;
          }
          const bufferOffset = dataOffset * (isTypedArray2 ? array2.BYTES_PER_ELEMENT : 1);
          device.queue.writeBuffer(
            buffer2,
            bufferOffset,
            array2,
            dataOffset,
            size
          );
        }
        bufferAttribute2.clearUpdateRanges();
      }
    }
    /**
     * This method creates the vertex buffer layout data which are
     * require when creating a render pipeline for the given render object.
     *
     * @param {RenderObject} renderObject - The render object.
     * @return {Array<Object>} An array holding objects which describe the vertex buffer layout.
     */
    createShaderVertexBuffers(renderObject) {
      const attributes = renderObject.getAttributes();
      const vertexBuffers = /* @__PURE__ */ new Map();
      for (let slot = 0; slot < attributes.length; slot++) {
        const geometryAttribute = attributes[slot];
        const bytesPerElement = geometryAttribute.array.BYTES_PER_ELEMENT;
        const bufferAttribute2 = this._getBufferAttribute(geometryAttribute);
        let vertexBufferLayout = vertexBuffers.get(bufferAttribute2);
        if (vertexBufferLayout === void 0) {
          let arrayStride, stepMode;
          if (geometryAttribute.isInterleavedBufferAttribute === true) {
            arrayStride = geometryAttribute.data.stride * bytesPerElement;
            stepMode = geometryAttribute.data.isInstancedInterleavedBuffer ? GPUInputStepMode.Instance : GPUInputStepMode.Vertex;
          } else {
            arrayStride = geometryAttribute.itemSize * bytesPerElement;
            stepMode = geometryAttribute.isInstancedBufferAttribute ? GPUInputStepMode.Instance : GPUInputStepMode.Vertex;
          }
          if (geometryAttribute.normalized === false && (geometryAttribute.array.constructor === Int16Array || geometryAttribute.array.constructor === Uint16Array)) {
            arrayStride = 4;
          }
          vertexBufferLayout = {
            arrayStride,
            attributes: [],
            stepMode
          };
          vertexBuffers.set(bufferAttribute2, vertexBufferLayout);
        }
        const format = this._getVertexFormat(geometryAttribute);
        const offset = geometryAttribute.isInterleavedBufferAttribute === true ? geometryAttribute.offset * bytesPerElement : 0;
        vertexBufferLayout.attributes.push({
          shaderLocation: slot,
          offset,
          format
        });
      }
      return Array.from(vertexBuffers.values());
    }
    /**
     * Destroys the GPU buffer of the given buffer attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute.
     */
    destroyAttribute(attribute2) {
      const backend = this.backend;
      const data = backend.get(this._getBufferAttribute(attribute2));
      data.buffer.destroy();
      backend.delete(attribute2);
    }
    /**
     * This method performs a readback operation by moving buffer data from
     * a storage buffer attribute from the GPU to the CPU.
     *
     * @async
     * @param {StorageBufferAttribute} attribute - The storage buffer attribute.
     * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.
     */
    async getArrayBufferAsync(attribute2) {
      const backend = this.backend;
      const device = backend.device;
      const data = backend.get(this._getBufferAttribute(attribute2));
      const bufferGPU = data.buffer;
      const size = bufferGPU.size;
      const readBufferGPU = device.createBuffer({
        label: `${attribute2.name}_readback`,
        size,
        usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ
      });
      const cmdEncoder = device.createCommandEncoder({
        label: `readback_encoder_${attribute2.name}`
      });
      cmdEncoder.copyBufferToBuffer(
        bufferGPU,
        0,
        readBufferGPU,
        0,
        size
      );
      const gpuCommands = cmdEncoder.finish();
      device.queue.submit([gpuCommands]);
      await readBufferGPU.mapAsync(GPUMapMode.READ);
      const arrayBuffer = readBufferGPU.getMappedRange();
      const dstBuffer = new attribute2.array.constructor(arrayBuffer.slice(0));
      readBufferGPU.unmap();
      return dstBuffer.buffer;
    }
    /**
     * Returns the vertex format of the given buffer attribute.
     *
     * @private
     * @param {BufferAttribute} geometryAttribute - The buffer attribute.
     * @return {string|undefined} The vertex format (e.g. 'float32x3').
     */
    _getVertexFormat(geometryAttribute) {
      const { itemSize, normalized } = geometryAttribute;
      const ArrayType = geometryAttribute.array.constructor;
      const AttributeType2 = geometryAttribute.constructor;
      let format;
      if (itemSize === 1) {
        format = typeArraysToVertexFormatPrefixForItemSize1.get(ArrayType);
      } else {
        const prefixOptions = typedAttributeToVertexFormatPrefix.get(AttributeType2) || typedArraysToVertexFormatPrefix.get(ArrayType);
        const prefix = prefixOptions[normalized ? 1 : 0];
        if (prefix) {
          const bytesPerUnit = ArrayType.BYTES_PER_ELEMENT * itemSize;
          const paddedBytesPerUnit = Math.floor((bytesPerUnit + 3) / 4) * 4;
          const paddedItemSize = paddedBytesPerUnit / ArrayType.BYTES_PER_ELEMENT;
          if (paddedItemSize % 1) {
            throw new Error("THREE.WebGPUAttributeUtils: Bad vertex format item size.");
          }
          format = `${prefix}x${paddedItemSize}`;
        }
      }
      if (!format) {
        console.error("THREE.WebGPUAttributeUtils: Vertex format not supported yet.");
      }
      return format;
    }
    /**
     * Returns `true` if the given array is a typed array.
     *
     * @private
     * @param {any} array - The array.
     * @return {boolean} Whether the given array is a typed array or not.
     */
    _isTypedArray(array2) {
      return ArrayBuffer.isView(array2) && !(array2 instanceof DataView);
    }
    /**
     * Utility method for handling interleaved buffer attributes correctly.
     * To process them, their `InterleavedBuffer` is returned.
     *
     * @private
     * @param {BufferAttribute} attribute - The attribute.
     * @return {BufferAttribute|InterleavedBuffer}
     */
    _getBufferAttribute(attribute2) {
      if (attribute2.isInterleavedBufferAttribute) attribute2 = attribute2.data;
      return attribute2;
    }
  };
  var WebGPUBindingUtils = class {
    /**
     * Constructs a new utility object.
     *
     * @param {WebGPUBackend} backend - The WebGPU backend.
     */
    constructor(backend) {
      this.backend = backend;
      this.bindGroupLayoutCache = /* @__PURE__ */ new WeakMap();
    }
    /**
     * Creates a GPU bind group layout for the given bind group.
     *
     * @param {BindGroup} bindGroup - The bind group.
     * @return {GPUBindGroupLayout} The GPU bind group layout.
     */
    createBindingsLayout(bindGroup) {
      const backend = this.backend;
      const device = backend.device;
      const entries = [];
      let index = 0;
      for (const binding of bindGroup.bindings) {
        const bindingGPU = {
          binding: index++,
          visibility: binding.visibility
        };
        if (binding.isUniformBuffer || binding.isStorageBuffer) {
          const buffer2 = {};
          if (binding.isStorageBuffer) {
            if (binding.visibility & 4) {
              if (binding.access === NodeAccess.READ_WRITE || binding.access === NodeAccess.WRITE_ONLY) {
                buffer2.type = GPUBufferBindingType.Storage;
              } else {
                buffer2.type = GPUBufferBindingType.ReadOnlyStorage;
              }
            } else {
              buffer2.type = GPUBufferBindingType.ReadOnlyStorage;
            }
          }
          bindingGPU.buffer = buffer2;
        } else if (binding.isSampler) {
          const sampler = {};
          if (binding.texture.isDepthTexture) {
            if (binding.texture.compareFunction !== null) {
              sampler.type = GPUSamplerBindingType.Comparison;
            } else if (backend.compatibilityMode) {
              sampler.type = GPUSamplerBindingType.NonFiltering;
            }
          }
          bindingGPU.sampler = sampler;
        } else if (binding.isSampledTexture && binding.texture.isVideoTexture) {
          bindingGPU.externalTexture = {};
        } else if (binding.isSampledTexture && binding.store) {
          const storageTexture = {};
          storageTexture.format = this.backend.get(binding.texture).texture.format;
          const access = binding.access;
          if (access === NodeAccess.READ_WRITE) {
            storageTexture.access = GPUStorageTextureAccess.ReadWrite;
          } else if (access === NodeAccess.WRITE_ONLY) {
            storageTexture.access = GPUStorageTextureAccess.WriteOnly;
          } else {
            storageTexture.access = GPUStorageTextureAccess.ReadOnly;
          }
          bindingGPU.storageTexture = storageTexture;
        } else if (binding.isSampledTexture) {
          const texture2 = {};
          const { primarySamples } = backend.utils.getTextureSampleData(binding.texture);
          if (primarySamples > 1) {
            texture2.multisampled = true;
            if (!binding.texture.isDepthTexture) {
              texture2.sampleType = GPUTextureSampleType.UnfilterableFloat;
            }
          }
          if (binding.texture.isDepthTexture) {
            if (backend.compatibilityMode && binding.texture.compareFunction === null) {
              texture2.sampleType = GPUTextureSampleType.UnfilterableFloat;
            } else {
              texture2.sampleType = GPUTextureSampleType.Depth;
            }
          } else if (binding.texture.isDataTexture || binding.texture.isDataArrayTexture || binding.texture.isData3DTexture) {
            const type = binding.texture.type;
            if (type === IntType) {
              texture2.sampleType = GPUTextureSampleType.SInt;
            } else if (type === UnsignedIntType) {
              texture2.sampleType = GPUTextureSampleType.UInt;
            } else if (type === FloatType) {
              if (this.backend.hasFeature("float32-filterable")) {
                texture2.sampleType = GPUTextureSampleType.Float;
              } else {
                texture2.sampleType = GPUTextureSampleType.UnfilterableFloat;
              }
            }
          }
          if (binding.isSampledCubeTexture) {
            texture2.viewDimension = GPUTextureViewDimension.Cube;
          } else if (binding.texture.isArrayTexture || binding.texture.isDataArrayTexture || binding.texture.isCompressedArrayTexture) {
            texture2.viewDimension = GPUTextureViewDimension.TwoDArray;
          } else if (binding.isSampledTexture3D) {
            texture2.viewDimension = GPUTextureViewDimension.ThreeD;
          }
          bindingGPU.texture = texture2;
        } else {
          console.error(`WebGPUBindingUtils: Unsupported binding "${binding}".`);
        }
        entries.push(bindingGPU);
      }
      return device.createBindGroupLayout({ entries });
    }
    /**
     * Creates bindings from the given bind group definition.
     *
     * @param {BindGroup} bindGroup - The bind group.
     * @param {Array<BindGroup>} bindings - Array of bind groups.
     * @param {number} cacheIndex - The cache index.
     * @param {number} version - The version.
     */
    createBindings(bindGroup, bindings, cacheIndex, version = 0) {
      const { backend, bindGroupLayoutCache } = this;
      const bindingsData = backend.get(bindGroup);
      let bindLayoutGPU = bindGroupLayoutCache.get(bindGroup.bindingsReference);
      if (bindLayoutGPU === void 0) {
        bindLayoutGPU = this.createBindingsLayout(bindGroup);
        bindGroupLayoutCache.set(bindGroup.bindingsReference, bindLayoutGPU);
      }
      let bindGroupGPU;
      if (cacheIndex > 0) {
        if (bindingsData.groups === void 0) {
          bindingsData.groups = [];
          bindingsData.versions = [];
        }
        if (bindingsData.versions[cacheIndex] === version) {
          bindGroupGPU = bindingsData.groups[cacheIndex];
        }
      }
      if (bindGroupGPU === void 0) {
        bindGroupGPU = this.createBindGroup(bindGroup, bindLayoutGPU);
        if (cacheIndex > 0) {
          bindingsData.groups[cacheIndex] = bindGroupGPU;
          bindingsData.versions[cacheIndex] = version;
        }
      }
      bindingsData.group = bindGroupGPU;
      bindingsData.layout = bindLayoutGPU;
    }
    /**
     * Updates a buffer binding.
     *
     *  @param {Buffer} binding - The buffer binding to update.
     */
    updateBinding(binding) {
      const backend = this.backend;
      const device = backend.device;
      const buffer2 = binding.buffer;
      const bufferGPU = backend.get(binding).buffer;
      device.queue.writeBuffer(bufferGPU, 0, buffer2, 0);
    }
    /**
     * Creates a GPU bind group for the camera index.
     *
     * @param {Uint32Array} data - The index data.
     * @param {GPUBindGroupLayout} layout - The GPU bind group layout.
     * @return {GPUBindGroup} The GPU bind group.
     */
    createBindGroupIndex(data, layout) {
      const backend = this.backend;
      const device = backend.device;
      const usage = GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST;
      const index = data[0];
      const buffer2 = device.createBuffer({
        label: "bindingCameraIndex_" + index,
        size: 16,
        // uint(4) * 4
        usage
      });
      device.queue.writeBuffer(buffer2, 0, data, 0);
      const entries = [{ binding: 0, resource: { buffer: buffer2 } }];
      return device.createBindGroup({
        label: "bindGroupCameraIndex_" + index,
        layout,
        entries
      });
    }
    /**
     * Creates a GPU bind group for the given bind group and GPU layout.
     *
     * @param {BindGroup} bindGroup - The bind group.
     * @param {GPUBindGroupLayout} layoutGPU - The GPU bind group layout.
     * @return {GPUBindGroup} The GPU bind group.
     */
    createBindGroup(bindGroup, layoutGPU) {
      const backend = this.backend;
      const device = backend.device;
      let bindingPoint = 0;
      const entriesGPU = [];
      for (const binding of bindGroup.bindings) {
        if (binding.isUniformBuffer) {
          const bindingData = backend.get(binding);
          if (bindingData.buffer === void 0) {
            const byteLength = binding.byteLength;
            const usage = GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST;
            const bufferGPU = device.createBuffer({
              label: "bindingBuffer_" + binding.name,
              size: byteLength,
              usage
            });
            bindingData.buffer = bufferGPU;
          }
          entriesGPU.push({ binding: bindingPoint, resource: { buffer: bindingData.buffer } });
        } else if (binding.isStorageBuffer) {
          const bindingData = backend.get(binding);
          if (bindingData.buffer === void 0) {
            const attribute2 = binding.attribute;
            bindingData.buffer = backend.get(attribute2).buffer;
          }
          entriesGPU.push({ binding: bindingPoint, resource: { buffer: bindingData.buffer } });
        } else if (binding.isSampler) {
          const textureGPU = backend.get(binding.texture);
          entriesGPU.push({ binding: bindingPoint, resource: textureGPU.sampler });
        } else if (binding.isSampledTexture) {
          const textureData = backend.get(binding.texture);
          let resourceGPU;
          if (textureData.externalTexture !== void 0) {
            resourceGPU = device.importExternalTexture({ source: textureData.externalTexture });
          } else {
            const mipLevelCount = binding.store ? 1 : textureData.texture.mipLevelCount;
            const propertyName2 = `view-${textureData.texture.width}-${textureData.texture.height}-${mipLevelCount}`;
            resourceGPU = textureData[propertyName2];
            if (resourceGPU === void 0) {
              const aspectGPU = GPUTextureAspect.All;
              let dimensionViewGPU;
              if (binding.isSampledCubeTexture) {
                dimensionViewGPU = GPUTextureViewDimension.Cube;
              } else if (binding.isSampledTexture3D) {
                dimensionViewGPU = GPUTextureViewDimension.ThreeD;
              } else if (binding.texture.isArrayTexture || binding.texture.isDataArrayTexture || binding.texture.isCompressedArrayTexture) {
                dimensionViewGPU = GPUTextureViewDimension.TwoDArray;
              } else {
                dimensionViewGPU = GPUTextureViewDimension.TwoD;
              }
              resourceGPU = textureData[propertyName2] = textureData.texture.createView({ aspect: aspectGPU, dimension: dimensionViewGPU, mipLevelCount });
            }
          }
          entriesGPU.push({ binding: bindingPoint, resource: resourceGPU });
        }
        bindingPoint++;
      }
      return device.createBindGroup({
        label: "bindGroup_" + bindGroup.name,
        layout: layoutGPU,
        entries: entriesGPU
      });
    }
  };
  var WebGPUPipelineUtils = class {
    /**
     * Constructs a new utility object.
     *
     * @param {WebGPUBackend} backend - The WebGPU backend.
     */
    constructor(backend) {
      this.backend = backend;
      this._activePipelines = /* @__PURE__ */ new WeakMap();
    }
    /**
     * Sets the given pipeline for the given pass. The method makes sure to only set the
     * pipeline when necessary.
     *
     * @param {(GPURenderPassEncoder|GPUComputePassEncoder)} pass - The pass encoder.
     * @param {(GPURenderPipeline|GPUComputePipeline)} pipeline - The pipeline.
     */
    setPipeline(pass, pipeline) {
      const currentPipeline = this._activePipelines.get(pass);
      if (currentPipeline !== pipeline) {
        pass.setPipeline(pipeline);
        this._activePipelines.set(pass, pipeline);
      }
    }
    /**
     * Returns the sample count derived from the given render context.
     *
     * @private
     * @param {RenderContext} renderContext - The render context.
     * @return {number} The sample count.
     */
    _getSampleCount(renderContext) {
      return this.backend.utils.getSampleCountRenderContext(renderContext);
    }
    /**
     * Creates a render pipeline for the given render object.
     *
     * @param {RenderObject} renderObject - The render object.
     * @param {Array<Promise>} promises - An array of compilation promises which are used in `compileAsync()`.
     */
    createRenderPipeline(renderObject, promises) {
      const { object, material: material2, geometry, pipeline } = renderObject;
      const { vertexProgram, fragmentProgram } = pipeline;
      const backend = this.backend;
      const device = backend.device;
      const utils = backend.utils;
      const pipelineData = backend.get(pipeline);
      const bindGroupLayouts = [];
      for (const bindGroup of renderObject.getBindings()) {
        const bindingsData = backend.get(bindGroup);
        bindGroupLayouts.push(bindingsData.layout);
      }
      const vertexBuffers = backend.attributeUtils.createShaderVertexBuffers(renderObject);
      let blending;
      if (material2.blending !== NoBlending && (material2.blending !== NormalBlending || material2.transparent !== false)) {
        blending = this._getBlending(material2);
      }
      let stencilFront = {};
      if (material2.stencilWrite === true) {
        stencilFront = {
          compare: this._getStencilCompare(material2),
          failOp: this._getStencilOperation(material2.stencilFail),
          depthFailOp: this._getStencilOperation(material2.stencilZFail),
          passOp: this._getStencilOperation(material2.stencilZPass)
        };
      }
      const colorWriteMask = this._getColorWriteMask(material2);
      const targets = [];
      if (renderObject.context.textures !== null) {
        const textures = renderObject.context.textures;
        for (let i = 0; i < textures.length; i++) {
          const colorFormat = utils.getTextureFormatGPU(textures[i]);
          targets.push({
            format: colorFormat,
            blend: blending,
            writeMask: colorWriteMask
          });
        }
      } else {
        const colorFormat = utils.getCurrentColorFormat(renderObject.context);
        targets.push({
          format: colorFormat,
          blend: blending,
          writeMask: colorWriteMask
        });
      }
      const vertexModule = backend.get(vertexProgram).module;
      const fragmentModule = backend.get(fragmentProgram).module;
      const primitiveState = this._getPrimitiveState(object, geometry, material2);
      const depthCompare = this._getDepthCompare(material2);
      const depthStencilFormat = utils.getCurrentDepthStencilFormat(renderObject.context);
      const sampleCount = this._getSampleCount(renderObject.context);
      const pipelineDescriptor = {
        label: `renderPipeline_${material2.name || material2.type}_${material2.id}`,
        vertex: Object.assign({}, vertexModule, { buffers: vertexBuffers }),
        fragment: Object.assign({}, fragmentModule, { targets }),
        primitive: primitiveState,
        multisample: {
          count: sampleCount,
          alphaToCoverageEnabled: material2.alphaToCoverage && sampleCount > 1
        },
        layout: device.createPipelineLayout({
          bindGroupLayouts
        })
      };
      const depthStencil = {};
      const renderDepth = renderObject.context.depth;
      const renderStencil = renderObject.context.stencil;
      if (renderDepth === true || renderStencil === true) {
        if (renderDepth === true) {
          depthStencil.format = depthStencilFormat;
          depthStencil.depthWriteEnabled = material2.depthWrite;
          depthStencil.depthCompare = depthCompare;
        }
        if (renderStencil === true) {
          depthStencil.stencilFront = stencilFront;
          depthStencil.stencilBack = {};
          depthStencil.stencilReadMask = material2.stencilFuncMask;
          depthStencil.stencilWriteMask = material2.stencilWriteMask;
        }
        if (material2.polygonOffset === true) {
          depthStencil.depthBias = material2.polygonOffsetUnits;
          depthStencil.depthBiasSlopeScale = material2.polygonOffsetFactor;
          depthStencil.depthBiasClamp = 0;
        }
        pipelineDescriptor.depthStencil = depthStencil;
      }
      if (promises === null) {
        pipelineData.pipeline = device.createRenderPipeline(pipelineDescriptor);
      } else {
        const p = new Promise((resolve) => {
          device.createRenderPipelineAsync(pipelineDescriptor).then((pipeline2) => {
            pipelineData.pipeline = pipeline2;
            resolve();
          });
        });
        promises.push(p);
      }
    }
    /**
     * Creates GPU render bundle encoder for the given render context.
     *
     * @param {RenderContext} renderContext - The render context.
     * @param {?string} [label='renderBundleEncoder'] - The label.
     * @return {GPURenderBundleEncoder} The GPU render bundle encoder.
     */
    createBundleEncoder(renderContext, label2 = "renderBundleEncoder") {
      const backend = this.backend;
      const { utils, device } = backend;
      const depthStencilFormat = utils.getCurrentDepthStencilFormat(renderContext);
      const colorFormat = utils.getCurrentColorFormat(renderContext);
      const sampleCount = this._getSampleCount(renderContext);
      const descriptor = {
        label: label2,
        colorFormats: [colorFormat],
        depthStencilFormat,
        sampleCount
      };
      return device.createRenderBundleEncoder(descriptor);
    }
    /**
     * Creates a compute pipeline for the given compute node.
     *
     * @param {ComputePipeline} pipeline - The compute pipeline.
     * @param {Array<BindGroup>} bindings - The bindings.
     */
    createComputePipeline(pipeline, bindings) {
      const backend = this.backend;
      const device = backend.device;
      const computeProgram = backend.get(pipeline.computeProgram).module;
      const pipelineGPU = backend.get(pipeline);
      const bindGroupLayouts = [];
      for (const bindingsGroup of bindings) {
        const bindingsData = backend.get(bindingsGroup);
        bindGroupLayouts.push(bindingsData.layout);
      }
      pipelineGPU.pipeline = device.createComputePipeline({
        compute: computeProgram,
        layout: device.createPipelineLayout({
          bindGroupLayouts
        })
      });
    }
    /**
     * Returns the blending state as a descriptor object required
     * for the pipeline creation.
     *
     * @private
     * @param {Material} material - The material.
     * @return {Object} The blending state.
     */
    _getBlending(material2) {
      let color2, alpha;
      const blending = material2.blending;
      const blendSrc = material2.blendSrc;
      const blendDst = material2.blendDst;
      const blendEquation = material2.blendEquation;
      if (blending === CustomBlending) {
        const blendSrcAlpha = material2.blendSrcAlpha !== null ? material2.blendSrcAlpha : blendSrc;
        const blendDstAlpha = material2.blendDstAlpha !== null ? material2.blendDstAlpha : blendDst;
        const blendEquationAlpha = material2.blendEquationAlpha !== null ? material2.blendEquationAlpha : blendEquation;
        color2 = {
          srcFactor: this._getBlendFactor(blendSrc),
          dstFactor: this._getBlendFactor(blendDst),
          operation: this._getBlendOperation(blendEquation)
        };
        alpha = {
          srcFactor: this._getBlendFactor(blendSrcAlpha),
          dstFactor: this._getBlendFactor(blendDstAlpha),
          operation: this._getBlendOperation(blendEquationAlpha)
        };
      } else {
        const premultipliedAlpha = material2.premultipliedAlpha;
        const setBlend = (srcRGB, dstRGB, srcAlpha, dstAlpha) => {
          color2 = {
            srcFactor: srcRGB,
            dstFactor: dstRGB,
            operation: GPUBlendOperation.Add
          };
          alpha = {
            srcFactor: srcAlpha,
            dstFactor: dstAlpha,
            operation: GPUBlendOperation.Add
          };
        };
        if (premultipliedAlpha) {
          switch (blending) {
            case NormalBlending:
              setBlend(GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha);
              break;
            case AdditiveBlending:
              setBlend(GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One);
              break;
            case SubtractiveBlending:
              setBlend(GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One);
              break;
            case MultiplyBlending:
              setBlend(GPUBlendFactor.Zero, GPUBlendFactor.Src, GPUBlendFactor.Zero, GPUBlendFactor.SrcAlpha);
              break;
          }
        } else {
          switch (blending) {
            case NormalBlending:
              setBlend(GPUBlendFactor.SrcAlpha, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha);
              break;
            case AdditiveBlending:
              setBlend(GPUBlendFactor.SrcAlpha, GPUBlendFactor.One, GPUBlendFactor.SrcAlpha, GPUBlendFactor.One);
              break;
            case SubtractiveBlending:
              setBlend(GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One);
              break;
            case MultiplyBlending:
              setBlend(GPUBlendFactor.Zero, GPUBlendFactor.Src, GPUBlendFactor.Zero, GPUBlendFactor.Src);
              break;
          }
        }
      }
      if (color2 !== void 0 && alpha !== void 0) {
        return { color: color2, alpha };
      } else {
        console.error("THREE.WebGPURenderer: Invalid blending: ", blending);
      }
    }
    /**
     * Returns the GPU blend factor which is required for the pipeline creation.
     *
     * @private
     * @param {number} blend - The blend factor as a three.js constant.
     * @return {string} The GPU blend factor.
     */
    _getBlendFactor(blend) {
      let blendFactor;
      switch (blend) {
        case ZeroFactor:
          blendFactor = GPUBlendFactor.Zero;
          break;
        case OneFactor:
          blendFactor = GPUBlendFactor.One;
          break;
        case SrcColorFactor:
          blendFactor = GPUBlendFactor.Src;
          break;
        case OneMinusSrcColorFactor:
          blendFactor = GPUBlendFactor.OneMinusSrc;
          break;
        case SrcAlphaFactor:
          blendFactor = GPUBlendFactor.SrcAlpha;
          break;
        case OneMinusSrcAlphaFactor:
          blendFactor = GPUBlendFactor.OneMinusSrcAlpha;
          break;
        case DstColorFactor:
          blendFactor = GPUBlendFactor.Dst;
          break;
        case OneMinusDstColorFactor:
          blendFactor = GPUBlendFactor.OneMinusDst;
          break;
        case DstAlphaFactor:
          blendFactor = GPUBlendFactor.DstAlpha;
          break;
        case OneMinusDstAlphaFactor:
          blendFactor = GPUBlendFactor.OneMinusDstAlpha;
          break;
        case SrcAlphaSaturateFactor:
          blendFactor = GPUBlendFactor.SrcAlphaSaturated;
          break;
        case BlendColorFactor:
          blendFactor = GPUBlendFactor.Constant;
          break;
        case OneMinusBlendColorFactor:
          blendFactor = GPUBlendFactor.OneMinusConstant;
          break;
        default:
          console.error("THREE.WebGPURenderer: Blend factor not supported.", blend);
      }
      return blendFactor;
    }
    /**
     * Returns the GPU stencil compare function which is required for the pipeline creation.
     *
     * @private
     * @param {Material} material - The material.
     * @return {string} The GPU stencil compare function.
     */
    _getStencilCompare(material2) {
      let stencilCompare;
      const stencilFunc = material2.stencilFunc;
      switch (stencilFunc) {
        case NeverStencilFunc:
          stencilCompare = GPUCompareFunction.Never;
          break;
        case AlwaysStencilFunc:
          stencilCompare = GPUCompareFunction.Always;
          break;
        case LessStencilFunc:
          stencilCompare = GPUCompareFunction.Less;
          break;
        case LessEqualStencilFunc:
          stencilCompare = GPUCompareFunction.LessEqual;
          break;
        case EqualStencilFunc:
          stencilCompare = GPUCompareFunction.Equal;
          break;
        case GreaterEqualStencilFunc:
          stencilCompare = GPUCompareFunction.GreaterEqual;
          break;
        case GreaterStencilFunc:
          stencilCompare = GPUCompareFunction.Greater;
          break;
        case NotEqualStencilFunc:
          stencilCompare = GPUCompareFunction.NotEqual;
          break;
        default:
          console.error("THREE.WebGPURenderer: Invalid stencil function.", stencilFunc);
      }
      return stencilCompare;
    }
    /**
     * Returns the GPU stencil operation which is required for the pipeline creation.
     *
     * @private
     * @param {number} op - A three.js constant defining the stencil operation.
     * @return {string} The GPU stencil operation.
     */
    _getStencilOperation(op) {
      let stencilOperation;
      switch (op) {
        case KeepStencilOp:
          stencilOperation = GPUStencilOperation.Keep;
          break;
        case ZeroStencilOp:
          stencilOperation = GPUStencilOperation.Zero;
          break;
        case ReplaceStencilOp:
          stencilOperation = GPUStencilOperation.Replace;
          break;
        case InvertStencilOp:
          stencilOperation = GPUStencilOperation.Invert;
          break;
        case IncrementStencilOp:
          stencilOperation = GPUStencilOperation.IncrementClamp;
          break;
        case DecrementStencilOp:
          stencilOperation = GPUStencilOperation.DecrementClamp;
          break;
        case IncrementWrapStencilOp:
          stencilOperation = GPUStencilOperation.IncrementWrap;
          break;
        case DecrementWrapStencilOp:
          stencilOperation = GPUStencilOperation.DecrementWrap;
          break;
        default:
          console.error("THREE.WebGPURenderer: Invalid stencil operation.", stencilOperation);
      }
      return stencilOperation;
    }
    /**
     * Returns the GPU blend operation which is required for the pipeline creation.
     *
     * @private
     * @param {number} blendEquation - A three.js constant defining the blend equation.
     * @return {string} The GPU blend operation.
     */
    _getBlendOperation(blendEquation) {
      let blendOperation;
      switch (blendEquation) {
        case AddEquation:
          blendOperation = GPUBlendOperation.Add;
          break;
        case SubtractEquation:
          blendOperation = GPUBlendOperation.Subtract;
          break;
        case ReverseSubtractEquation:
          blendOperation = GPUBlendOperation.ReverseSubtract;
          break;
        case MinEquation:
          blendOperation = GPUBlendOperation.Min;
          break;
        case MaxEquation:
          blendOperation = GPUBlendOperation.Max;
          break;
        default:
          console.error("THREE.WebGPUPipelineUtils: Blend equation not supported.", blendEquation);
      }
      return blendOperation;
    }
    /**
     * Returns the primitive state as a descriptor object required
     * for the pipeline creation.
     *
     * @private
     * @param {Object3D} object - The 3D object.
     * @param {BufferGeometry} geometry - The geometry.
     * @param {Material} material - The material.
     * @return {Object} The primitive state.
     */
    _getPrimitiveState(object, geometry, material2) {
      const descriptor = {};
      const utils = this.backend.utils;
      descriptor.topology = utils.getPrimitiveTopology(object, material2);
      if (geometry.index !== null && object.isLine === true && object.isLineSegments !== true) {
        descriptor.stripIndexFormat = geometry.index.array instanceof Uint16Array ? GPUIndexFormat.Uint16 : GPUIndexFormat.Uint32;
      }
      switch (material2.side) {
        case FrontSide:
          descriptor.frontFace = GPUFrontFace.CCW;
          descriptor.cullMode = GPUCullMode.Back;
          break;
        case BackSide:
          descriptor.frontFace = GPUFrontFace.CCW;
          descriptor.cullMode = GPUCullMode.Front;
          break;
        case DoubleSide:
          descriptor.frontFace = GPUFrontFace.CCW;
          descriptor.cullMode = GPUCullMode.None;
          break;
        default:
          console.error("THREE.WebGPUPipelineUtils: Unknown material.side value.", material2.side);
          break;
      }
      return descriptor;
    }
    /**
     * Returns the GPU color write mask which is required for the pipeline creation.
     *
     * @private
     * @param {Material} material - The material.
     * @return {string} The GPU color write mask.
     */
    _getColorWriteMask(material2) {
      return material2.colorWrite === true ? GPUColorWriteFlags.All : GPUColorWriteFlags.None;
    }
    /**
     * Returns the GPU depth compare function which is required for the pipeline creation.
     *
     * @private
     * @param {Material} material - The material.
     * @return {string} The GPU depth compare function.
     */
    _getDepthCompare(material2) {
      let depthCompare;
      if (material2.depthTest === false) {
        depthCompare = GPUCompareFunction.Always;
      } else {
        const depthFunc = material2.depthFunc;
        switch (depthFunc) {
          case NeverDepth:
            depthCompare = GPUCompareFunction.Never;
            break;
          case AlwaysDepth:
            depthCompare = GPUCompareFunction.Always;
            break;
          case LessDepth:
            depthCompare = GPUCompareFunction.Less;
            break;
          case LessEqualDepth:
            depthCompare = GPUCompareFunction.LessEqual;
            break;
          case EqualDepth:
            depthCompare = GPUCompareFunction.Equal;
            break;
          case GreaterEqualDepth:
            depthCompare = GPUCompareFunction.GreaterEqual;
            break;
          case GreaterDepth:
            depthCompare = GPUCompareFunction.Greater;
            break;
          case NotEqualDepth:
            depthCompare = GPUCompareFunction.NotEqual;
            break;
          default:
            console.error("THREE.WebGPUPipelineUtils: Invalid depth function.", depthFunc);
        }
      }
      return depthCompare;
    }
  };
  var WebGPUTimestampQueryPool = class extends TimestampQueryPool {
    /**
     * Creates a new WebGPU timestamp query pool.
     *
     * @param {GPUDevice} device - The WebGPU device to create queries on.
     * @param {string} type - The type identifier for this query pool.
     * @param {number} [maxQueries=2048] - Maximum number of queries this pool can hold.
     */
    constructor(device, type, maxQueries = 2048) {
      super(maxQueries);
      this.device = device;
      this.type = type;
      this.querySet = this.device.createQuerySet({
        type: "timestamp",
        count: this.maxQueries,
        label: `queryset_global_timestamp_${type}`
      });
      const bufferSize = this.maxQueries * 8;
      this.resolveBuffer = this.device.createBuffer({
        label: `buffer_timestamp_resolve_${type}`,
        size: bufferSize,
        usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC
      });
      this.resultBuffer = this.device.createBuffer({
        label: `buffer_timestamp_result_${type}`,
        size: bufferSize,
        usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ
      });
    }
    /**
     * Allocates a pair of queries for a given render context.
     *
     * @param {Object} renderContext - The render context to allocate queries for.
     * @returns {?number} The base offset for the allocated queries, or null if allocation failed.
     */
    allocateQueriesForContext(renderContext) {
      if (!this.trackTimestamp || this.isDisposed) return null;
      if (this.currentQueryIndex + 2 > this.maxQueries) {
        warnOnce(`WebGPUTimestampQueryPool [${this.type}]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${this.type.toUpperCase()} ).`);
        return null;
      }
      const baseOffset = this.currentQueryIndex;
      this.currentQueryIndex += 2;
      this.queryOffsets.set(renderContext.id, baseOffset);
      return baseOffset;
    }
    /**
     * Asynchronously resolves all pending queries and returns the total duration.
     * If there's already a pending resolve operation, returns that promise instead.
     *
     * @async
     * @returns {Promise<number>} The total duration in milliseconds, or the last valid value if resolution fails.
     */
    async resolveQueriesAsync() {
      if (!this.trackTimestamp || this.currentQueryIndex === 0 || this.isDisposed) {
        return this.lastValue;
      }
      if (this.pendingResolve) {
        return this.pendingResolve;
      }
      this.pendingResolve = this._resolveQueries();
      try {
        const result = await this.pendingResolve;
        return result;
      } finally {
        this.pendingResolve = null;
      }
    }
    /**
     * Internal method to resolve queries and calculate total duration.
     *
     * @async
     * @private
     * @returns {Promise<number>} The total duration in milliseconds.
     */
    async _resolveQueries() {
      if (this.isDisposed) {
        return this.lastValue;
      }
      try {
        if (this.resultBuffer.mapState !== "unmapped") {
          return this.lastValue;
        }
        const currentOffsets = new Map(this.queryOffsets);
        const queryCount = this.currentQueryIndex;
        const bytesUsed = queryCount * 8;
        this.currentQueryIndex = 0;
        this.queryOffsets.clear();
        const commandEncoder = this.device.createCommandEncoder();
        commandEncoder.resolveQuerySet(
          this.querySet,
          0,
          queryCount,
          this.resolveBuffer,
          0
        );
        commandEncoder.copyBufferToBuffer(
          this.resolveBuffer,
          0,
          this.resultBuffer,
          0,
          bytesUsed
        );
        const commandBuffer = commandEncoder.finish();
        this.device.queue.submit([commandBuffer]);
        if (this.resultBuffer.mapState !== "unmapped") {
          return this.lastValue;
        }
        await this.resultBuffer.mapAsync(GPUMapMode.READ, 0, bytesUsed);
        if (this.isDisposed) {
          if (this.resultBuffer.mapState === "mapped") {
            this.resultBuffer.unmap();
          }
          return this.lastValue;
        }
        const times = new BigUint64Array(this.resultBuffer.getMappedRange(0, bytesUsed));
        let totalDuration = 0;
        for (const [, baseOffset] of currentOffsets) {
          const startTime = times[baseOffset];
          const endTime = times[baseOffset + 1];
          const duration = Number(endTime - startTime) / 1e6;
          totalDuration += duration;
        }
        this.resultBuffer.unmap();
        this.lastValue = totalDuration;
        return totalDuration;
      } catch (error) {
        console.error("Error resolving queries:", error);
        if (this.resultBuffer.mapState === "mapped") {
          this.resultBuffer.unmap();
        }
        return this.lastValue;
      }
    }
    /**
     * Dispose of the query pool.
     *
     * @async
     * @returns {Promise} A Promise that resolves when the dispose has been executed.
     */
    async dispose() {
      if (this.isDisposed) {
        return;
      }
      this.isDisposed = true;
      if (this.pendingResolve) {
        try {
          await this.pendingResolve;
        } catch (error) {
          console.error("Error waiting for pending resolve:", error);
        }
      }
      if (this.resultBuffer && this.resultBuffer.mapState === "mapped") {
        try {
          this.resultBuffer.unmap();
        } catch (error) {
          console.error("Error unmapping buffer:", error);
        }
      }
      if (this.querySet) {
        this.querySet.destroy();
        this.querySet = null;
      }
      if (this.resolveBuffer) {
        this.resolveBuffer.destroy();
        this.resolveBuffer = null;
      }
      if (this.resultBuffer) {
        this.resultBuffer.destroy();
        this.resultBuffer = null;
      }
      this.queryOffsets.clear();
      this.pendingResolve = null;
    }
  };
  var WebGPUBackend = class extends Backend {
    /**
     * WebGPUBackend options.
     *
     * @typedef {Object} WebGPUBackend~Options
     * @property {boolean} [logarithmicDepthBuffer=false] - Whether logarithmic depth buffer is enabled or not.
     * @property {boolean} [alpha=true] - Whether the default framebuffer (which represents the final contents of the canvas) should be transparent or opaque.
     * @property {boolean} [compatibilityMode=false] - Whether the backend should be in compatibility mode or not.
     * @property {boolean} [depth=true] - Whether the default framebuffer should have a depth buffer or not.
     * @property {boolean} [stencil=false] - Whether the default framebuffer should have a stencil buffer or not.
     * @property {boolean} [antialias=false] - Whether MSAA as the default anti-aliasing should be enabled or not.
     * @property {number} [samples=0] - When `antialias` is `true`, `4` samples are used by default. Set this parameter to any other integer value than 0 to overwrite the default.
     * @property {boolean} [forceWebGL=false] - If set to `true`, the renderer uses a WebGL 2 backend no matter if WebGPU is supported or not.
     * @property {boolean} [trackTimestamp=false] - Whether to track timestamps with a Timestamp Query API or not.
     * @property {string} [powerPreference=undefined] - The power preference.
     * @property {Object} [requiredLimits=undefined] - Specifies the limits that are required by the device request. The request will fail if the adapter cannot provide these limits.
     * @property {GPUDevice} [device=undefined] - If there is an existing GPU device on app level, it can be passed to the renderer as a parameter.
     * @property {number} [outputType=undefined] - Texture type for output to canvas. By default, device's preferred format is used; other formats may incur overhead.
     */
    /**
     * Constructs a new WebGPU backend.
     *
     * @param {WebGPUBackend~Options} [parameters] - The configuration parameter.
     */
    constructor(parameters = {}) {
      super(parameters);
      this.isWebGPUBackend = true;
      this.parameters.alpha = parameters.alpha === void 0 ? true : parameters.alpha;
      this.parameters.compatibilityMode = parameters.compatibilityMode === void 0 ? false : parameters.compatibilityMode;
      this.parameters.requiredLimits = parameters.requiredLimits === void 0 ? {} : parameters.requiredLimits;
      this.compatibilityMode = this.parameters.compatibilityMode;
      this.device = null;
      this.context = null;
      this.colorBuffer = null;
      this.defaultRenderPassdescriptor = null;
      this.utils = new WebGPUUtils(this);
      this.attributeUtils = new WebGPUAttributeUtils(this);
      this.bindingUtils = new WebGPUBindingUtils(this);
      this.pipelineUtils = new WebGPUPipelineUtils(this);
      this.textureUtils = new WebGPUTextureUtils(this);
      this.occludedResolveCache = /* @__PURE__ */ new Map();
    }
    /**
     * Initializes the backend so it is ready for usage.
     *
     * @async
     * @param {Renderer} renderer - The renderer.
     * @return {Promise} A Promise that resolves when the backend has been initialized.
     */
    async init(renderer) {
      await super.init(renderer);
      const parameters = this.parameters;
      let device;
      if (parameters.device === void 0) {
        const adapterOptions = {
          powerPreference: parameters.powerPreference,
          featureLevel: parameters.compatibilityMode ? "compatibility" : void 0
        };
        const adapter = typeof navigator !== "undefined" ? await navigator.gpu.requestAdapter(adapterOptions) : null;
        if (adapter === null) {
          throw new Error("WebGPUBackend: Unable to create WebGPU adapter.");
        }
        const features = Object.values(GPUFeatureName);
        const supportedFeatures = [];
        for (const name2 of features) {
          if (adapter.features.has(name2)) {
            supportedFeatures.push(name2);
          }
        }
        const deviceDescriptor = {
          requiredFeatures: supportedFeatures,
          requiredLimits: parameters.requiredLimits
        };
        device = await adapter.requestDevice(deviceDescriptor);
      } else {
        device = parameters.device;
      }
      device.lost.then((info) => {
        const deviceLossInfo = {
          api: "WebGPU",
          message: info.message || "Unknown reason",
          reason: info.reason || null,
          originalEvent: info
        };
        renderer.onDeviceLost(deviceLossInfo);
      });
      const context2 = parameters.context !== void 0 ? parameters.context : renderer.domElement.getContext("webgpu");
      this.device = device;
      this.context = context2;
      const alphaMode = parameters.alpha ? "premultiplied" : "opaque";
      this.trackTimestamp = this.trackTimestamp && this.hasFeature(GPUFeatureName.TimestampQuery);
      this.context.configure({
        device: this.device,
        format: this.utils.getPreferredCanvasFormat(),
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,
        alphaMode
      });
      this.updateSize();
    }
    /**
     * The coordinate system of the backend.
     *
     * @type {number}
     * @readonly
     */
    get coordinateSystem() {
      return WebGPUCoordinateSystem;
    }
    /**
     * This method performs a readback operation by moving buffer data from
     * a storage buffer attribute from the GPU to the CPU.
     *
     * @async
     * @param {StorageBufferAttribute} attribute - The storage buffer attribute.
     * @return {Promise<ArrayBuffer>} A promise that resolves with the buffer data when the data are ready.
     */
    async getArrayBufferAsync(attribute2) {
      return await this.attributeUtils.getArrayBufferAsync(attribute2);
    }
    /**
     * Returns the backend's rendering context.
     *
     * @return {GPUCanvasContext} The rendering context.
     */
    getContext() {
      return this.context;
    }
    /**
     * Returns the default render pass descriptor.
     *
     * In WebGPU, the default framebuffer must be configured
     * like custom framebuffers so the backend needs a render
     * pass descriptor even when rendering directly to screen.
     *
     * @private
     * @return {Object} The render pass descriptor.
     */
    _getDefaultRenderPassDescriptor() {
      let descriptor = this.defaultRenderPassdescriptor;
      if (descriptor === null) {
        const renderer = this.renderer;
        descriptor = {
          colorAttachments: [{
            view: null
          }]
        };
        if (this.renderer.depth === true || this.renderer.stencil === true) {
          descriptor.depthStencilAttachment = {
            view: this.textureUtils.getDepthBuffer(renderer.depth, renderer.stencil).createView()
          };
        }
        const colorAttachment2 = descriptor.colorAttachments[0];
        if (this.renderer.samples > 0) {
          colorAttachment2.view = this.colorBuffer.createView();
        } else {
          colorAttachment2.resolveTarget = void 0;
        }
        this.defaultRenderPassdescriptor = descriptor;
      }
      const colorAttachment = descriptor.colorAttachments[0];
      if (this.renderer.samples > 0) {
        colorAttachment.resolveTarget = this.context.getCurrentTexture().createView();
      } else {
        colorAttachment.view = this.context.getCurrentTexture().createView();
      }
      return descriptor;
    }
    /**
     * Internal to determine if the current render target is a render target array with depth 2D array texture.
     *
     * @param {RenderContext} renderContext - The render context.
     * @return {boolean} Whether the render target is a render target array with depth 2D array texture.
     *
     * @private
     */
    _isRenderCameraDepthArray(renderContext) {
      return renderContext.depthTexture && renderContext.depthTexture.image.depth > 1 && renderContext.camera.isArrayCamera;
    }
    /**
     * Returns the render pass descriptor for the given render context.
     *
     * @private
     * @param {RenderContext} renderContext - The render context.
     * @param {Object} colorAttachmentsConfig - Configuration object for the color attachments.
     * @return {Object} The render pass descriptor.
     */
    _getRenderPassDescriptor(renderContext, colorAttachmentsConfig = {}) {
      const renderTarget = renderContext.renderTarget;
      const renderTargetData = this.get(renderTarget);
      let descriptors = renderTargetData.descriptors;
      if (descriptors === void 0 || renderTargetData.width !== renderTarget.width || renderTargetData.height !== renderTarget.height || renderTargetData.dimensions !== renderTarget.dimensions || renderTargetData.activeMipmapLevel !== renderContext.activeMipmapLevel || renderTargetData.activeCubeFace !== renderContext.activeCubeFace || renderTargetData.samples !== renderTarget.samples) {
        descriptors = {};
        renderTargetData.descriptors = descriptors;
        const onDispose = () => {
          renderTarget.removeEventListener("dispose", onDispose);
          this.delete(renderTarget);
        };
        if (renderTarget.hasEventListener("dispose", onDispose) === false) {
          renderTarget.addEventListener("dispose", onDispose);
        }
      }
      const cacheKey = renderContext.getCacheKey();
      let descriptorBase = descriptors[cacheKey];
      if (descriptorBase === void 0) {
        const textures = renderContext.textures;
        const textureViews = [];
        let sliceIndex;
        const isRenderCameraDepthArray = this._isRenderCameraDepthArray(renderContext);
        for (let i = 0; i < textures.length; i++) {
          const textureData = this.get(textures[i]);
          const viewDescriptor = {
            label: `colorAttachment_${i}`,
            baseMipLevel: renderContext.activeMipmapLevel,
            mipLevelCount: 1,
            baseArrayLayer: renderContext.activeCubeFace,
            arrayLayerCount: 1,
            dimension: GPUTextureViewDimension.TwoD
          };
          if (renderTarget.isRenderTarget3D) {
            sliceIndex = renderContext.activeCubeFace;
            viewDescriptor.baseArrayLayer = 0;
            viewDescriptor.dimension = GPUTextureViewDimension.ThreeD;
            viewDescriptor.depthOrArrayLayers = textures[i].image.depth;
          } else if (renderTarget.isRenderTarget && textures[i].image.depth > 1) {
            if (isRenderCameraDepthArray === true) {
              const cameras = renderContext.camera.cameras;
              for (let layer2 = 0; layer2 < cameras.length; layer2++) {
                const layerViewDescriptor = {
                  ...viewDescriptor,
                  baseArrayLayer: layer2,
                  arrayLayerCount: 1,
                  dimension: GPUTextureViewDimension.TwoD
                };
                const textureView = textureData.texture.createView(layerViewDescriptor);
                textureViews.push({
                  view: textureView,
                  resolveTarget: void 0,
                  depthSlice: void 0
                });
              }
            } else {
              viewDescriptor.dimension = GPUTextureViewDimension.TwoDArray;
              viewDescriptor.depthOrArrayLayers = textures[i].image.depth;
            }
          }
          if (isRenderCameraDepthArray !== true) {
            const textureView = textureData.texture.createView(viewDescriptor);
            let view, resolveTarget;
            if (textureData.msaaTexture !== void 0) {
              view = textureData.msaaTexture.createView();
              resolveTarget = textureView;
            } else {
              view = textureView;
              resolveTarget = void 0;
            }
            textureViews.push({
              view,
              resolveTarget,
              depthSlice: sliceIndex
            });
          }
        }
        descriptorBase = { textureViews };
        if (renderContext.depth) {
          const depthTextureData = this.get(renderContext.depthTexture);
          const options = {};
          if (renderContext.depthTexture.isArrayTexture) {
            options.dimension = GPUTextureViewDimension.TwoD;
            options.arrayLayerCount = 1;
            options.baseArrayLayer = renderContext.activeCubeFace;
          }
          descriptorBase.depthStencilView = depthTextureData.texture.createView(options);
        }
        descriptors[cacheKey] = descriptorBase;
        renderTargetData.width = renderTarget.width;
        renderTargetData.height = renderTarget.height;
        renderTargetData.samples = renderTarget.samples;
        renderTargetData.activeMipmapLevel = renderContext.activeMipmapLevel;
        renderTargetData.activeCubeFace = renderContext.activeCubeFace;
        renderTargetData.dimensions = renderTarget.dimensions;
      }
      const descriptor = {
        colorAttachments: []
      };
      for (let i = 0; i < descriptorBase.textureViews.length; i++) {
        const viewInfo = descriptorBase.textureViews[i];
        let clearValue = { r: 0, g: 0, b: 0, a: 1 };
        if (i === 0 && colorAttachmentsConfig.clearValue) {
          clearValue = colorAttachmentsConfig.clearValue;
        }
        descriptor.colorAttachments.push({
          view: viewInfo.view,
          depthSlice: viewInfo.depthSlice,
          resolveTarget: viewInfo.resolveTarget,
          loadOp: colorAttachmentsConfig.loadOp || GPULoadOp.Load,
          storeOp: colorAttachmentsConfig.storeOp || GPUStoreOp.Store,
          clearValue
        });
      }
      if (descriptorBase.depthStencilView) {
        descriptor.depthStencilAttachment = {
          view: descriptorBase.depthStencilView
        };
      }
      return descriptor;
    }
    /**
     * This method is executed at the beginning of a render call and prepares
     * the WebGPU state for upcoming render calls
     *
     * @param {RenderContext} renderContext - The render context.
     */
    beginRender(renderContext) {
      const renderContextData = this.get(renderContext);
      const device = this.device;
      const occlusionQueryCount = renderContext.occlusionQueryCount;
      let occlusionQuerySet;
      if (occlusionQueryCount > 0) {
        if (renderContextData.currentOcclusionQuerySet) renderContextData.currentOcclusionQuerySet.destroy();
        if (renderContextData.currentOcclusionQueryBuffer) renderContextData.currentOcclusionQueryBuffer.destroy();
        renderContextData.currentOcclusionQuerySet = renderContextData.occlusionQuerySet;
        renderContextData.currentOcclusionQueryBuffer = renderContextData.occlusionQueryBuffer;
        renderContextData.currentOcclusionQueryObjects = renderContextData.occlusionQueryObjects;
        occlusionQuerySet = device.createQuerySet({ type: "occlusion", count: occlusionQueryCount, label: `occlusionQuerySet_${renderContext.id}` });
        renderContextData.occlusionQuerySet = occlusionQuerySet;
        renderContextData.occlusionQueryIndex = 0;
        renderContextData.occlusionQueryObjects = new Array(occlusionQueryCount);
        renderContextData.lastOcclusionObject = null;
      }
      let descriptor;
      if (renderContext.textures === null) {
        descriptor = this._getDefaultRenderPassDescriptor();
      } else {
        descriptor = this._getRenderPassDescriptor(renderContext, { loadOp: GPULoadOp.Load });
      }
      this.initTimestampQuery(renderContext, descriptor);
      descriptor.occlusionQuerySet = occlusionQuerySet;
      const depthStencilAttachment = descriptor.depthStencilAttachment;
      if (renderContext.textures !== null) {
        const colorAttachments = descriptor.colorAttachments;
        for (let i = 0; i < colorAttachments.length; i++) {
          const colorAttachment = colorAttachments[i];
          if (renderContext.clearColor) {
            colorAttachment.clearValue = i === 0 ? renderContext.clearColorValue : { r: 0, g: 0, b: 0, a: 1 };
            colorAttachment.loadOp = GPULoadOp.Clear;
          } else {
            colorAttachment.loadOp = GPULoadOp.Load;
          }
          colorAttachment.storeOp = GPUStoreOp.Store;
        }
      } else {
        const colorAttachment = descriptor.colorAttachments[0];
        if (renderContext.clearColor) {
          colorAttachment.clearValue = renderContext.clearColorValue;
          colorAttachment.loadOp = GPULoadOp.Clear;
        } else {
          colorAttachment.loadOp = GPULoadOp.Load;
        }
        colorAttachment.storeOp = GPUStoreOp.Store;
      }
      if (renderContext.depth) {
        if (renderContext.clearDepth) {
          depthStencilAttachment.depthClearValue = renderContext.clearDepthValue;
          depthStencilAttachment.depthLoadOp = GPULoadOp.Clear;
        } else {
          depthStencilAttachment.depthLoadOp = GPULoadOp.Load;
        }
        depthStencilAttachment.depthStoreOp = GPUStoreOp.Store;
      }
      if (renderContext.stencil) {
        if (renderContext.clearStencil) {
          depthStencilAttachment.stencilClearValue = renderContext.clearStencilValue;
          depthStencilAttachment.stencilLoadOp = GPULoadOp.Clear;
        } else {
          depthStencilAttachment.stencilLoadOp = GPULoadOp.Load;
        }
        depthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;
      }
      const encoder = device.createCommandEncoder({ label: "renderContext_" + renderContext.id });
      if (this._isRenderCameraDepthArray(renderContext) === true) {
        const cameras = renderContext.camera.cameras;
        if (!renderContextData.layerDescriptors || renderContextData.layerDescriptors.length !== cameras.length) {
          this._createDepthLayerDescriptors(renderContext, renderContextData, descriptor, cameras);
        } else {
          this._updateDepthLayerDescriptors(renderContext, renderContextData, cameras);
        }
        renderContextData.bundleEncoders = [];
        renderContextData.bundleSets = [];
        for (let i = 0; i < cameras.length; i++) {
          const bundleEncoder = this.pipelineUtils.createBundleEncoder(
            renderContext,
            "renderBundleArrayCamera_" + i
          );
          const bundleSets = {
            attributes: {},
            bindingGroups: [],
            pipeline: null,
            index: null
          };
          renderContextData.bundleEncoders.push(bundleEncoder);
          renderContextData.bundleSets.push(bundleSets);
        }
        renderContextData.currentPass = null;
      } else {
        const currentPass = encoder.beginRenderPass(descriptor);
        renderContextData.currentPass = currentPass;
        if (renderContext.viewport) {
          this.updateViewport(renderContext);
        }
        if (renderContext.scissor) {
          const { x, y, width, height } = renderContext.scissorValue;
          currentPass.setScissorRect(x, y, width, height);
        }
      }
      renderContextData.descriptor = descriptor;
      renderContextData.encoder = encoder;
      renderContextData.currentSets = { attributes: {}, bindingGroups: [], pipeline: null, index: null };
      renderContextData.renderBundles = [];
    }
    /**
     * This method creates layer descriptors for each camera in an array camera
     * to prepare for rendering to a depth array texture.
     *
     * @param {RenderContext} renderContext - The render context.
     * @param {Object} renderContextData - The render context data.
     * @param {Object} descriptor  - The render pass descriptor.
     * @param {ArrayCamera} cameras - The array camera.
     *
     * @private
     */
    _createDepthLayerDescriptors(renderContext, renderContextData, descriptor, cameras) {
      const depthStencilAttachment = descriptor.depthStencilAttachment;
      renderContextData.layerDescriptors = [];
      const depthTextureData = this.get(renderContext.depthTexture);
      if (!depthTextureData.viewCache) {
        depthTextureData.viewCache = [];
      }
      for (let i = 0; i < cameras.length; i++) {
        const layerDescriptor = {
          ...descriptor,
          colorAttachments: [{
            ...descriptor.colorAttachments[0],
            view: descriptor.colorAttachments[i].view
          }]
        };
        if (descriptor.depthStencilAttachment) {
          const layerIndex = i;
          if (!depthTextureData.viewCache[layerIndex]) {
            depthTextureData.viewCache[layerIndex] = depthTextureData.texture.createView({
              dimension: GPUTextureViewDimension.TwoD,
              baseArrayLayer: i,
              arrayLayerCount: 1
            });
          }
          layerDescriptor.depthStencilAttachment = {
            view: depthTextureData.viewCache[layerIndex],
            depthLoadOp: depthStencilAttachment.depthLoadOp || GPULoadOp.Clear,
            depthStoreOp: depthStencilAttachment.depthStoreOp || GPUStoreOp.Store,
            depthClearValue: depthStencilAttachment.depthClearValue || 1
          };
          if (renderContext.stencil) {
            layerDescriptor.depthStencilAttachment.stencilLoadOp = depthStencilAttachment.stencilLoadOp;
            layerDescriptor.depthStencilAttachment.stencilStoreOp = depthStencilAttachment.stencilStoreOp;
            layerDescriptor.depthStencilAttachment.stencilClearValue = depthStencilAttachment.stencilClearValue;
          }
        } else {
          layerDescriptor.depthStencilAttachment = { ...depthStencilAttachment };
        }
        renderContextData.layerDescriptors.push(layerDescriptor);
      }
    }
    /**
     * This method updates the layer descriptors for each camera in an array camera
     * to prepare for rendering to a depth array texture.
     *
     * @param {RenderContext} renderContext - The render context.
     * @param {Object} renderContextData - The render context data.
     * @param {ArrayCamera} cameras - The array camera.
     *
     */
    _updateDepthLayerDescriptors(renderContext, renderContextData, cameras) {
      for (let i = 0; i < cameras.length; i++) {
        const layerDescriptor = renderContextData.layerDescriptors[i];
        if (layerDescriptor.depthStencilAttachment) {
          const depthAttachment = layerDescriptor.depthStencilAttachment;
          if (renderContext.depth) {
            if (renderContext.clearDepth) {
              depthAttachment.depthClearValue = renderContext.clearDepthValue;
              depthAttachment.depthLoadOp = GPULoadOp.Clear;
            } else {
              depthAttachment.depthLoadOp = GPULoadOp.Load;
            }
          }
          if (renderContext.stencil) {
            if (renderContext.clearStencil) {
              depthAttachment.stencilClearValue = renderContext.clearStencilValue;
              depthAttachment.stencilLoadOp = GPULoadOp.Clear;
            } else {
              depthAttachment.stencilLoadOp = GPULoadOp.Load;
            }
          }
        }
      }
    }
    /**
     * This method is executed at the end of a render call and finalizes work
     * after draw calls.
     *
     * @param {RenderContext} renderContext - The render context.
     */
    finishRender(renderContext) {
      const renderContextData = this.get(renderContext);
      const occlusionQueryCount = renderContext.occlusionQueryCount;
      if (renderContextData.renderBundles.length > 0) {
        renderContextData.currentPass.executeBundles(renderContextData.renderBundles);
      }
      if (occlusionQueryCount > renderContextData.occlusionQueryIndex) {
        renderContextData.currentPass.endOcclusionQuery();
      }
      const encoder = renderContextData.encoder;
      if (this._isRenderCameraDepthArray(renderContext) === true) {
        const bundles = [];
        for (let i = 0; i < renderContextData.bundleEncoders.length; i++) {
          const bundleEncoder = renderContextData.bundleEncoders[i];
          bundles.push(bundleEncoder.finish());
        }
        for (let i = 0; i < renderContextData.layerDescriptors.length; i++) {
          if (i < bundles.length) {
            const layerDescriptor = renderContextData.layerDescriptors[i];
            const renderPass = encoder.beginRenderPass(layerDescriptor);
            if (renderContext.viewport) {
              const { x, y, width, height, minDepth, maxDepth } = renderContext.viewportValue;
              renderPass.setViewport(x, y, width, height, minDepth, maxDepth);
            }
            if (renderContext.scissor) {
              const { x, y, width, height } = renderContext.scissorValue;
              renderPass.setScissorRect(x, y, width, height);
            }
            renderPass.executeBundles([bundles[i]]);
            renderPass.end();
          }
        }
      } else if (renderContextData.currentPass) {
        renderContextData.currentPass.end();
      }
      if (occlusionQueryCount > 0) {
        const bufferSize = occlusionQueryCount * 8;
        let queryResolveBuffer = this.occludedResolveCache.get(bufferSize);
        if (queryResolveBuffer === void 0) {
          queryResolveBuffer = this.device.createBuffer(
            {
              size: bufferSize,
              usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC
            }
          );
          this.occludedResolveCache.set(bufferSize, queryResolveBuffer);
        }
        const readBuffer = this.device.createBuffer(
          {
            size: bufferSize,
            usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ
          }
        );
        renderContextData.encoder.resolveQuerySet(renderContextData.occlusionQuerySet, 0, occlusionQueryCount, queryResolveBuffer, 0);
        renderContextData.encoder.copyBufferToBuffer(queryResolveBuffer, 0, readBuffer, 0, bufferSize);
        renderContextData.occlusionQueryBuffer = readBuffer;
        this.resolveOccludedAsync(renderContext);
      }
      this.device.queue.submit([renderContextData.encoder.finish()]);
      if (renderContext.textures !== null) {
        const textures = renderContext.textures;
        for (let i = 0; i < textures.length; i++) {
          const texture2 = textures[i];
          if (texture2.generateMipmaps === true) {
            this.textureUtils.generateMipmaps(texture2);
          }
        }
      }
    }
    /**
     * Returns `true` if the given 3D object is fully occluded by other
     * 3D objects in the scene.
     *
     * @param {RenderContext} renderContext - The render context.
     * @param {Object3D} object - The 3D object to test.
     * @return {boolean} Whether the 3D object is fully occluded or not.
     */
    isOccluded(renderContext, object) {
      const renderContextData = this.get(renderContext);
      return renderContextData.occluded && renderContextData.occluded.has(object);
    }
    /**
     * This method processes the result of occlusion queries and writes it
     * into render context data.
     *
     * @async
     * @param {RenderContext} renderContext - The render context.
     * @return {Promise} A Promise that resolves when the occlusion query results have been processed.
     */
    async resolveOccludedAsync(renderContext) {
      const renderContextData = this.get(renderContext);
      const { currentOcclusionQueryBuffer, currentOcclusionQueryObjects } = renderContextData;
      if (currentOcclusionQueryBuffer && currentOcclusionQueryObjects) {
        const occluded = /* @__PURE__ */ new WeakSet();
        renderContextData.currentOcclusionQueryObjects = null;
        renderContextData.currentOcclusionQueryBuffer = null;
        await currentOcclusionQueryBuffer.mapAsync(GPUMapMode.READ);
        const buffer2 = currentOcclusionQueryBuffer.getMappedRange();
        const results = new BigUint64Array(buffer2);
        for (let i = 0; i < currentOcclusionQueryObjects.length; i++) {
          if (results[i] === BigInt(0)) {
            occluded.add(currentOcclusionQueryObjects[i]);
          }
        }
        currentOcclusionQueryBuffer.destroy();
        renderContextData.occluded = occluded;
      }
    }
    /**
     * Updates the viewport with the values from the given render context.
     *
     * @param {RenderContext} renderContext - The render context.
     */
    updateViewport(renderContext) {
      const { currentPass } = this.get(renderContext);
      const { x, y, width, height, minDepth, maxDepth } = renderContext.viewportValue;
      currentPass.setViewport(x, y, width, height, minDepth, maxDepth);
    }
    /**
     * Returns the clear color and alpha into a single
     * color object.
     *
     * @return {Color4} The clear color.
     */
    getClearColor() {
      const clearColor = super.getClearColor();
      if (this.renderer.alpha === true) {
        clearColor.r *= clearColor.a;
        clearColor.g *= clearColor.a;
        clearColor.b *= clearColor.a;
      }
      return clearColor;
    }
    /**
     * Performs a clear operation.
     *
     * @param {boolean} color - Whether the color buffer should be cleared or not.
     * @param {boolean} depth - Whether the depth buffer should be cleared or not.
     * @param {boolean} stencil - Whether the stencil buffer should be cleared or not.
     * @param {?RenderContext} [renderTargetContext=null] - The render context of the current set render target.
     */
    clear(color2, depth2, stencil, renderTargetContext = null) {
      const device = this.device;
      const renderer = this.renderer;
      let colorAttachments = [];
      let depthStencilAttachment;
      let clearValue;
      let supportsDepth;
      let supportsStencil;
      if (color2) {
        const clearColor = this.getClearColor();
        clearValue = { r: clearColor.r, g: clearColor.g, b: clearColor.b, a: clearColor.a };
      }
      if (renderTargetContext === null) {
        supportsDepth = renderer.depth;
        supportsStencil = renderer.stencil;
        const descriptor = this._getDefaultRenderPassDescriptor();
        if (color2) {
          colorAttachments = descriptor.colorAttachments;
          const colorAttachment = colorAttachments[0];
          colorAttachment.clearValue = clearValue;
          colorAttachment.loadOp = GPULoadOp.Clear;
          colorAttachment.storeOp = GPUStoreOp.Store;
        }
        if (supportsDepth || supportsStencil) {
          depthStencilAttachment = descriptor.depthStencilAttachment;
        }
      } else {
        supportsDepth = renderTargetContext.depth;
        supportsStencil = renderTargetContext.stencil;
        const clearConfig = {
          loadOp: color2 ? GPULoadOp.Clear : GPULoadOp.Load,
          clearValue: color2 ? clearValue : void 0
        };
        if (supportsDepth) {
          clearConfig.depthLoadOp = depth2 ? GPULoadOp.Clear : GPULoadOp.Load;
          clearConfig.depthClearValue = depth2 ? renderer.getClearDepth() : void 0;
          clearConfig.depthStoreOp = GPUStoreOp.Store;
        }
        if (supportsStencil) {
          clearConfig.stencilLoadOp = stencil ? GPULoadOp.Clear : GPULoadOp.Load;
          clearConfig.stencilClearValue = stencil ? renderer.getClearStencil() : void 0;
          clearConfig.stencilStoreOp = GPUStoreOp.Store;
        }
        const descriptor = this._getRenderPassDescriptor(renderTargetContext, clearConfig);
        colorAttachments = descriptor.colorAttachments;
        depthStencilAttachment = descriptor.depthStencilAttachment;
      }
      if (supportsDepth && depthStencilAttachment && depthStencilAttachment.depthLoadOp === void 0) {
        if (depth2) {
          depthStencilAttachment.depthLoadOp = GPULoadOp.Clear;
          depthStencilAttachment.depthClearValue = renderer.getClearDepth();
          depthStencilAttachment.depthStoreOp = GPUStoreOp.Store;
        } else {
          depthStencilAttachment.depthLoadOp = GPULoadOp.Load;
          depthStencilAttachment.depthStoreOp = GPUStoreOp.Store;
        }
      }
      if (supportsStencil && depthStencilAttachment && depthStencilAttachment.stencilLoadOp === void 0) {
        if (stencil) {
          depthStencilAttachment.stencilLoadOp = GPULoadOp.Clear;
          depthStencilAttachment.stencilClearValue = renderer.getClearStencil();
          depthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;
        } else {
          depthStencilAttachment.stencilLoadOp = GPULoadOp.Load;
          depthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;
        }
      }
      const encoder = device.createCommandEncoder({ label: "clear" });
      const currentPass = encoder.beginRenderPass({
        colorAttachments,
        depthStencilAttachment
      });
      currentPass.end();
      device.queue.submit([encoder.finish()]);
    }
    // compute
    /**
     * This method is executed at the beginning of a compute call and
     * prepares the state for upcoming compute tasks.
     *
     * @param {Node|Array<Node>} computeGroup - The compute node(s).
     */
    beginCompute(computeGroup) {
      const groupGPU = this.get(computeGroup);
      const descriptor = {
        label: "computeGroup_" + computeGroup.id
      };
      this.initTimestampQuery(computeGroup, descriptor);
      groupGPU.cmdEncoderGPU = this.device.createCommandEncoder({ label: "computeGroup_" + computeGroup.id });
      groupGPU.passEncoderGPU = groupGPU.cmdEncoderGPU.beginComputePass(descriptor);
    }
    /**
     * Executes a compute command for the given compute node.
     *
     * @param {Node|Array<Node>} computeGroup - The group of compute nodes of a compute call. Can be a single compute node.
     * @param {Node} computeNode - The compute node.
     * @param {Array<BindGroup>} bindings - The bindings.
     * @param {ComputePipeline} pipeline - The compute pipeline.
     */
    compute(computeGroup, computeNode, bindings, pipeline) {
      const { passEncoderGPU } = this.get(computeGroup);
      const pipelineGPU = this.get(pipeline).pipeline;
      this.pipelineUtils.setPipeline(passEncoderGPU, pipelineGPU);
      for (let i = 0, l = bindings.length; i < l; i++) {
        const bindGroup = bindings[i];
        const bindingsData = this.get(bindGroup);
        passEncoderGPU.setBindGroup(i, bindingsData.group);
      }
      const maxComputeWorkgroupsPerDimension = this.device.limits.maxComputeWorkgroupsPerDimension;
      const computeNodeData = this.get(computeNode);
      if (computeNodeData.dispatchSize === void 0) computeNodeData.dispatchSize = { x: 0, y: 1, z: 1 };
      const { dispatchSize } = computeNodeData;
      if (computeNode.dispatchCount > maxComputeWorkgroupsPerDimension) {
        dispatchSize.x = Math.min(computeNode.dispatchCount, maxComputeWorkgroupsPerDimension);
        dispatchSize.y = Math.ceil(computeNode.dispatchCount / maxComputeWorkgroupsPerDimension);
      } else {
        dispatchSize.x = computeNode.dispatchCount;
      }
      passEncoderGPU.dispatchWorkgroups(
        dispatchSize.x,
        dispatchSize.y,
        dispatchSize.z
      );
    }
    /**
     * This method is executed at the end of a compute call and
     * finalizes work after compute tasks.
     *
     * @param {Node|Array<Node>} computeGroup - The compute node(s).
     */
    finishCompute(computeGroup) {
      const groupData = this.get(computeGroup);
      groupData.passEncoderGPU.end();
      this.device.queue.submit([groupData.cmdEncoderGPU.finish()]);
    }
    /**
     * Can be used to synchronize CPU operations with GPU tasks. So when this method is called,
     * the CPU waits for the GPU to complete its operation (e.g. a compute task).
     *
     * @async
     * @return {Promise} A Promise that resolves when synchronization has been finished.
     */
    async waitForGPU() {
      await this.device.queue.onSubmittedWorkDone();
    }
    // render object
    /**
     * Executes a draw command for the given render object.
     *
     * @param {RenderObject} renderObject - The render object to draw.
     * @param {Info} info - Holds a series of statistical information about the GPU memory and the rendering process.
     */
    draw(renderObject, info) {
      const { object, material: material2, context: context2, pipeline } = renderObject;
      const bindings = renderObject.getBindings();
      const renderContextData = this.get(context2);
      const pipelineGPU = this.get(pipeline).pipeline;
      const index = renderObject.getIndex();
      const hasIndex = index !== null;
      const drawParams = renderObject.getDrawParameters();
      if (drawParams === null) return;
      const setPipelineAndBindings = (passEncoderGPU, currentSets) => {
        this.pipelineUtils.setPipeline(passEncoderGPU, pipelineGPU);
        currentSets.pipeline = pipelineGPU;
        const currentBindingGroups = currentSets.bindingGroups;
        for (let i = 0, l = bindings.length; i < l; i++) {
          const bindGroup = bindings[i];
          const bindingsData = this.get(bindGroup);
          if (currentBindingGroups[bindGroup.index] !== bindGroup.id) {
            passEncoderGPU.setBindGroup(bindGroup.index, bindingsData.group);
            currentBindingGroups[bindGroup.index] = bindGroup.id;
          }
        }
        if (hasIndex === true) {
          if (currentSets.index !== index) {
            const buffer2 = this.get(index).buffer;
            const indexFormat = index.array instanceof Uint16Array ? GPUIndexFormat.Uint16 : GPUIndexFormat.Uint32;
            passEncoderGPU.setIndexBuffer(buffer2, indexFormat);
            currentSets.index = index;
          }
        }
        const vertexBuffers = renderObject.getVertexBuffers();
        for (let i = 0, l = vertexBuffers.length; i < l; i++) {
          const vertexBuffer = vertexBuffers[i];
          if (currentSets.attributes[i] !== vertexBuffer) {
            const buffer2 = this.get(vertexBuffer).buffer;
            passEncoderGPU.setVertexBuffer(i, buffer2);
            currentSets.attributes[i] = vertexBuffer;
          }
        }
        if (context2.stencil === true && material2.stencilWrite === true && renderContextData.currentStencilRef !== material2.stencilRef) {
          passEncoderGPU.setStencilReference(material2.stencilRef);
          renderContextData.currentStencilRef = material2.stencilRef;
        }
      };
      const draw = (passEncoderGPU, currentSets) => {
        setPipelineAndBindings(passEncoderGPU, currentSets);
        if (object.isBatchedMesh === true) {
          const starts = object._multiDrawStarts;
          const counts = object._multiDrawCounts;
          const drawCount = object._multiDrawCount;
          const drawInstances = object._multiDrawInstances;
          if (drawInstances !== null) {
            warnOnce("THREE.WebGPUBackend: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection.");
          }
          for (let i = 0; i < drawCount; i++) {
            const count = drawInstances ? drawInstances[i] : 1;
            const firstInstance = count > 1 ? 0 : i;
            if (hasIndex === true) {
              passEncoderGPU.drawIndexed(counts[i], count, starts[i] / index.array.BYTES_PER_ELEMENT, 0, firstInstance);
            } else {
              passEncoderGPU.draw(counts[i], count, starts[i], firstInstance);
            }
            info.update(object, counts[i], count);
          }
        } else if (hasIndex === true) {
          const { vertexCount: indexCount, instanceCount, firstVertex: firstIndex } = drawParams;
          const indirect = renderObject.getIndirect();
          if (indirect !== null) {
            const buffer2 = this.get(indirect).buffer;
            passEncoderGPU.drawIndexedIndirect(buffer2, 0);
          } else {
            passEncoderGPU.drawIndexed(indexCount, instanceCount, firstIndex, 0, 0);
          }
          info.update(object, indexCount, instanceCount);
        } else {
          const { vertexCount, instanceCount, firstVertex } = drawParams;
          const indirect = renderObject.getIndirect();
          if (indirect !== null) {
            const buffer2 = this.get(indirect).buffer;
            passEncoderGPU.drawIndirect(buffer2, 0);
          } else {
            passEncoderGPU.draw(vertexCount, instanceCount, firstVertex, 0);
          }
          info.update(object, vertexCount, instanceCount);
        }
      };
      if (renderObject.camera.isArrayCamera && renderObject.camera.cameras.length > 0) {
        const cameraData = this.get(renderObject.camera);
        const cameras = renderObject.camera.cameras;
        const cameraIndex2 = renderObject.getBindingGroup("cameraIndex");
        if (cameraData.indexesGPU === void 0 || cameraData.indexesGPU.length !== cameras.length) {
          const bindingsData = this.get(cameraIndex2);
          const indexesGPU = [];
          const data = new Uint32Array([0, 0, 0, 0]);
          for (let i = 0, len = cameras.length; i < len; i++) {
            data[0] = i;
            const bindGroupIndex = this.bindingUtils.createBindGroupIndex(data, bindingsData.layout);
            indexesGPU.push(bindGroupIndex);
          }
          cameraData.indexesGPU = indexesGPU;
        }
        const pixelRatio = this.renderer.getPixelRatio();
        for (let i = 0, len = cameras.length; i < len; i++) {
          const subCamera = cameras[i];
          if (object.layers.test(subCamera.layers)) {
            const vp = subCamera.viewport;
            let pass = renderContextData.currentPass;
            let sets = renderContextData.currentSets;
            if (renderContextData.bundleEncoders) {
              const bundleEncoder = renderContextData.bundleEncoders[i];
              const bundleSets = renderContextData.bundleSets[i];
              pass = bundleEncoder;
              sets = bundleSets;
            }
            if (vp) {
              pass.setViewport(
                Math.floor(vp.x * pixelRatio),
                Math.floor(vp.y * pixelRatio),
                Math.floor(vp.width * pixelRatio),
                Math.floor(vp.height * pixelRatio),
                context2.viewportValue.minDepth,
                context2.viewportValue.maxDepth
              );
            }
            if (cameraIndex2 && cameraData.indexesGPU) {
              pass.setBindGroup(cameraIndex2.index, cameraData.indexesGPU[i]);
              sets.bindingGroups[cameraIndex2.index] = cameraIndex2.id;
            }
            draw(pass, sets);
          }
        }
      } else {
        if (renderContextData.currentPass) {
          if (renderContextData.occlusionQuerySet !== void 0) {
            const lastObject = renderContextData.lastOcclusionObject;
            if (lastObject !== object) {
              if (lastObject !== null && lastObject.occlusionTest === true) {
                renderContextData.currentPass.endOcclusionQuery();
                renderContextData.occlusionQueryIndex++;
              }
              if (object.occlusionTest === true) {
                renderContextData.currentPass.beginOcclusionQuery(renderContextData.occlusionQueryIndex);
                renderContextData.occlusionQueryObjects[renderContextData.occlusionQueryIndex] = object;
              }
              renderContextData.lastOcclusionObject = object;
            }
          }
          draw(renderContextData.currentPass, renderContextData.currentSets);
        }
      }
    }
    // cache key
    /**
     * Returns `true` if the render pipeline requires an update.
     *
     * @param {RenderObject} renderObject - The render object.
     * @return {boolean} Whether the render pipeline requires an update or not.
     */
    needsRenderUpdate(renderObject) {
      const data = this.get(renderObject);
      const { object, material: material2 } = renderObject;
      const utils = this.utils;
      const sampleCount = utils.getSampleCountRenderContext(renderObject.context);
      const colorSpace = utils.getCurrentColorSpace(renderObject.context);
      const colorFormat = utils.getCurrentColorFormat(renderObject.context);
      const depthStencilFormat = utils.getCurrentDepthStencilFormat(renderObject.context);
      const primitiveTopology = utils.getPrimitiveTopology(object, material2);
      let needsUpdate = false;
      if (data.material !== material2 || data.materialVersion !== material2.version || data.transparent !== material2.transparent || data.blending !== material2.blending || data.premultipliedAlpha !== material2.premultipliedAlpha || data.blendSrc !== material2.blendSrc || data.blendDst !== material2.blendDst || data.blendEquation !== material2.blendEquation || data.blendSrcAlpha !== material2.blendSrcAlpha || data.blendDstAlpha !== material2.blendDstAlpha || data.blendEquationAlpha !== material2.blendEquationAlpha || data.colorWrite !== material2.colorWrite || data.depthWrite !== material2.depthWrite || data.depthTest !== material2.depthTest || data.depthFunc !== material2.depthFunc || data.stencilWrite !== material2.stencilWrite || data.stencilFunc !== material2.stencilFunc || data.stencilFail !== material2.stencilFail || data.stencilZFail !== material2.stencilZFail || data.stencilZPass !== material2.stencilZPass || data.stencilFuncMask !== material2.stencilFuncMask || data.stencilWriteMask !== material2.stencilWriteMask || data.side !== material2.side || data.alphaToCoverage !== material2.alphaToCoverage || data.sampleCount !== sampleCount || data.colorSpace !== colorSpace || data.colorFormat !== colorFormat || data.depthStencilFormat !== depthStencilFormat || data.primitiveTopology !== primitiveTopology || data.clippingContextCacheKey !== renderObject.clippingContextCacheKey) {
        data.material = material2;
        data.materialVersion = material2.version;
        data.transparent = material2.transparent;
        data.blending = material2.blending;
        data.premultipliedAlpha = material2.premultipliedAlpha;
        data.blendSrc = material2.blendSrc;
        data.blendDst = material2.blendDst;
        data.blendEquation = material2.blendEquation;
        data.blendSrcAlpha = material2.blendSrcAlpha;
        data.blendDstAlpha = material2.blendDstAlpha;
        data.blendEquationAlpha = material2.blendEquationAlpha;
        data.colorWrite = material2.colorWrite;
        data.depthWrite = material2.depthWrite;
        data.depthTest = material2.depthTest;
        data.depthFunc = material2.depthFunc;
        data.stencilWrite = material2.stencilWrite;
        data.stencilFunc = material2.stencilFunc;
        data.stencilFail = material2.stencilFail;
        data.stencilZFail = material2.stencilZFail;
        data.stencilZPass = material2.stencilZPass;
        data.stencilFuncMask = material2.stencilFuncMask;
        data.stencilWriteMask = material2.stencilWriteMask;
        data.side = material2.side;
        data.alphaToCoverage = material2.alphaToCoverage;
        data.sampleCount = sampleCount;
        data.colorSpace = colorSpace;
        data.colorFormat = colorFormat;
        data.depthStencilFormat = depthStencilFormat;
        data.primitiveTopology = primitiveTopology;
        data.clippingContextCacheKey = renderObject.clippingContextCacheKey;
        needsUpdate = true;
      }
      return needsUpdate;
    }
    /**
     * Returns a cache key that is used to identify render pipelines.
     *
     * @param {RenderObject} renderObject - The render object.
     * @return {string} The cache key.
     */
    getRenderCacheKey(renderObject) {
      const { object, material: material2 } = renderObject;
      const utils = this.utils;
      const renderContext = renderObject.context;
      return [
        material2.transparent,
        material2.blending,
        material2.premultipliedAlpha,
        material2.blendSrc,
        material2.blendDst,
        material2.blendEquation,
        material2.blendSrcAlpha,
        material2.blendDstAlpha,
        material2.blendEquationAlpha,
        material2.colorWrite,
        material2.depthWrite,
        material2.depthTest,
        material2.depthFunc,
        material2.stencilWrite,
        material2.stencilFunc,
        material2.stencilFail,
        material2.stencilZFail,
        material2.stencilZPass,
        material2.stencilFuncMask,
        material2.stencilWriteMask,
        material2.side,
        utils.getSampleCountRenderContext(renderContext),
        utils.getCurrentColorSpace(renderContext),
        utils.getCurrentColorFormat(renderContext),
        utils.getCurrentDepthStencilFormat(renderContext),
        utils.getPrimitiveTopology(object, material2),
        renderObject.getGeometryCacheKey(),
        renderObject.clippingContextCacheKey
      ].join();
    }
    // textures
    /**
     * Creates a GPU sampler for the given texture.
     *
     * @param {Texture} texture - The texture to create the sampler for.
     */
    createSampler(texture2) {
      this.textureUtils.createSampler(texture2);
    }
    /**
     * Destroys the GPU sampler for the given texture.
     *
     * @param {Texture} texture - The texture to destroy the sampler for.
     */
    destroySampler(texture2) {
      this.textureUtils.destroySampler(texture2);
    }
    /**
     * Creates a default texture for the given texture that can be used
     * as a placeholder until the actual texture is ready for usage.
     *
     * @param {Texture} texture - The texture to create a default texture for.
     */
    createDefaultTexture(texture2) {
      this.textureUtils.createDefaultTexture(texture2);
    }
    /**
     * Defines a texture on the GPU for the given texture object.
     *
     * @param {Texture} texture - The texture.
     * @param {Object} [options={}] - Optional configuration parameter.
     */
    createTexture(texture2, options) {
      this.textureUtils.createTexture(texture2, options);
    }
    /**
     * Uploads the updated texture data to the GPU.
     *
     * @param {Texture} texture - The texture.
     * @param {Object} [options={}] - Optional configuration parameter.
     */
    updateTexture(texture2, options) {
      this.textureUtils.updateTexture(texture2, options);
    }
    /**
     * Generates mipmaps for the given texture.
     *
     * @param {Texture} texture - The texture.
     */
    generateMipmaps(texture2) {
      this.textureUtils.generateMipmaps(texture2);
    }
    /**
     * Destroys the GPU data for the given texture object.
     *
     * @param {Texture} texture - The texture.
     */
    destroyTexture(texture2) {
      this.textureUtils.destroyTexture(texture2);
    }
    /**
     * Returns texture data as a typed array.
     *
     * @async
     * @param {Texture} texture - The texture to copy.
     * @param {number} x - The x coordinate of the copy origin.
     * @param {number} y - The y coordinate of the copy origin.
     * @param {number} width - The width of the copy.
     * @param {number} height - The height of the copy.
     * @param {number} faceIndex - The face index.
     * @return {Promise<TypedArray>} A Promise that resolves with a typed array when the copy operation has finished.
     */
    async copyTextureToBuffer(texture2, x, y, width, height, faceIndex) {
      return this.textureUtils.copyTextureToBuffer(texture2, x, y, width, height, faceIndex);
    }
    /**
     * Inits a time stamp query for the given render context.
     *
     * @param {RenderContext} renderContext - The render context.
     * @param {Object} descriptor - The query descriptor.
     */
    initTimestampQuery(renderContext, descriptor) {
      if (!this.trackTimestamp) return;
      const type = renderContext.isComputeNode ? "compute" : "render";
      if (!this.timestampQueryPool[type]) {
        this.timestampQueryPool[type] = new WebGPUTimestampQueryPool(this.device, type, 2048);
      }
      const timestampQueryPool = this.timestampQueryPool[type];
      const baseOffset = timestampQueryPool.allocateQueriesForContext(renderContext);
      descriptor.timestampWrites = {
        querySet: timestampQueryPool.querySet,
        beginningOfPassWriteIndex: baseOffset,
        endOfPassWriteIndex: baseOffset + 1
      };
    }
    // node builder
    /**
     * Returns a node builder for the given render object.
     *
     * @param {RenderObject} object - The render object.
     * @param {Renderer} renderer - The renderer.
     * @return {WGSLNodeBuilder} The node builder.
     */
    createNodeBuilder(object, renderer) {
      return new WGSLNodeBuilder(object, renderer);
    }
    // program
    /**
     * Creates a shader program from the given programmable stage.
     *
     * @param {ProgrammableStage} program - The programmable stage.
     */
    createProgram(program) {
      const programGPU = this.get(program);
      programGPU.module = {
        module: this.device.createShaderModule({ code: program.code, label: program.stage + (program.name !== "" ? `_${program.name}` : "") }),
        entryPoint: "main"
      };
    }
    /**
     * Destroys the shader program of the given programmable stage.
     *
     * @param {ProgrammableStage} program - The programmable stage.
     */
    destroyProgram(program) {
      this.delete(program);
    }
    // pipelines
    /**
     * Creates a render pipeline for the given render object.
     *
     * @param {RenderObject} renderObject - The render object.
     * @param {Array<Promise>} promises - An array of compilation promises which are used in `compileAsync()`.
     */
    createRenderPipeline(renderObject, promises) {
      this.pipelineUtils.createRenderPipeline(renderObject, promises);
    }
    /**
     * Creates a compute pipeline for the given compute node.
     *
     * @param {ComputePipeline} computePipeline - The compute pipeline.
     * @param {Array<BindGroup>} bindings - The bindings.
     */
    createComputePipeline(computePipeline, bindings) {
      this.pipelineUtils.createComputePipeline(computePipeline, bindings);
    }
    /**
     * Prepares the state for encoding render bundles.
     *
     * @param {RenderContext} renderContext - The render context.
     */
    beginBundle(renderContext) {
      const renderContextData = this.get(renderContext);
      renderContextData._currentPass = renderContextData.currentPass;
      renderContextData._currentSets = renderContextData.currentSets;
      renderContextData.currentSets = { attributes: {}, bindingGroups: [], pipeline: null, index: null };
      renderContextData.currentPass = this.pipelineUtils.createBundleEncoder(renderContext);
    }
    /**
     * After processing render bundles this method finalizes related work.
     *
     * @param {RenderContext} renderContext - The render context.
     * @param {RenderBundle} bundle - The render bundle.
     */
    finishBundle(renderContext, bundle) {
      const renderContextData = this.get(renderContext);
      const bundleEncoder = renderContextData.currentPass;
      const bundleGPU = bundleEncoder.finish();
      this.get(bundle).bundleGPU = bundleGPU;
      renderContextData.currentSets = renderContextData._currentSets;
      renderContextData.currentPass = renderContextData._currentPass;
    }
    /**
     * Adds a render bundle to the render context data.
     *
     * @param {RenderContext} renderContext - The render context.
     * @param {RenderBundle} bundle - The render bundle to add.
     */
    addBundle(renderContext, bundle) {
      const renderContextData = this.get(renderContext);
      renderContextData.renderBundles.push(this.get(bundle).bundleGPU);
    }
    // bindings
    /**
     * Creates bindings from the given bind group definition.
     *
     * @param {BindGroup} bindGroup - The bind group.
     * @param {Array<BindGroup>} bindings - Array of bind groups.
     * @param {number} cacheIndex - The cache index.
     * @param {number} version - The version.
     */
    createBindings(bindGroup, bindings, cacheIndex, version) {
      this.bindingUtils.createBindings(bindGroup, bindings, cacheIndex, version);
    }
    /**
     * Updates the given bind group definition.
     *
     * @param {BindGroup} bindGroup - The bind group.
     * @param {Array<BindGroup>} bindings - Array of bind groups.
     * @param {number} cacheIndex - The cache index.
     * @param {number} version - The version.
     */
    updateBindings(bindGroup, bindings, cacheIndex, version) {
      this.bindingUtils.createBindings(bindGroup, bindings, cacheIndex, version);
    }
    /**
     * Updates a buffer binding.
     *
     *  @param {Buffer} binding - The buffer binding to update.
     */
    updateBinding(binding) {
      this.bindingUtils.updateBinding(binding);
    }
    // attributes
    /**
     * Creates the buffer of an indexed shader attribute.
     *
     * @param {BufferAttribute} attribute - The indexed buffer attribute.
     */
    createIndexAttribute(attribute2) {
      this.attributeUtils.createAttribute(attribute2, GPUBufferUsage.INDEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST);
    }
    /**
     * Creates the GPU buffer of a shader attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute.
     */
    createAttribute(attribute2) {
      this.attributeUtils.createAttribute(attribute2, GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST);
    }
    /**
     * Creates the GPU buffer of a storage attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute.
     */
    createStorageAttribute(attribute2) {
      this.attributeUtils.createAttribute(attribute2, GPUBufferUsage.STORAGE | GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST);
    }
    /**
     * Creates the GPU buffer of an indirect storage attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute.
     */
    createIndirectStorageAttribute(attribute2) {
      this.attributeUtils.createAttribute(attribute2, GPUBufferUsage.STORAGE | GPUBufferUsage.INDIRECT | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST);
    }
    /**
     * Updates the GPU buffer of a shader attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute to update.
     */
    updateAttribute(attribute2) {
      this.attributeUtils.updateAttribute(attribute2);
    }
    /**
     * Destroys the GPU buffer of a shader attribute.
     *
     * @param {BufferAttribute} attribute - The buffer attribute to destroy.
     */
    destroyAttribute(attribute2) {
      this.attributeUtils.destroyAttribute(attribute2);
    }
    // canvas
    /**
     * Triggers an update of the default render pass descriptor.
     */
    updateSize() {
      this.colorBuffer = this.textureUtils.getColorBuffer();
      this.defaultRenderPassdescriptor = null;
    }
    // utils public
    /**
     * Returns the maximum anisotropy texture filtering value.
     *
     * @return {number} The maximum anisotropy texture filtering value.
     */
    getMaxAnisotropy() {
      return 16;
    }
    /**
     * Checks if the given feature is supported  by the backend.
     *
     * @param {string} name - The feature's name.
     * @return {boolean} Whether the feature is supported or not.
     */
    hasFeature(name2) {
      return this.device.features.has(name2);
    }
    /**
     * Copies data of the given source texture to the given destination texture.
     *
     * @param {Texture} srcTexture - The source texture.
     * @param {Texture} dstTexture - The destination texture.
     * @param {?(Box3|Box2)} [srcRegion=null] - The region of the source texture to copy.
     * @param {?(Vector2|Vector3)} [dstPosition=null] - The destination position of the copy.
     * @param {number} [srcLevel=0] - The mipmap level to copy.
     * @param {number} [dstLevel=0] - The destination mip level to copy to.
     */
    copyTextureToTexture(srcTexture, dstTexture, srcRegion = null, dstPosition = null, srcLevel = 0, dstLevel = 0) {
      let dstX = 0;
      let dstY = 0;
      let dstZ = 0;
      let srcX = 0;
      let srcY = 0;
      let srcZ = 0;
      let srcWidth = srcTexture.image.width;
      let srcHeight = srcTexture.image.height;
      let srcDepth = 1;
      if (srcRegion !== null) {
        if (srcRegion.isBox3 === true) {
          srcX = srcRegion.min.x;
          srcY = srcRegion.min.y;
          srcZ = srcRegion.min.z;
          srcWidth = srcRegion.max.x - srcRegion.min.x;
          srcHeight = srcRegion.max.y - srcRegion.min.y;
          srcDepth = srcRegion.max.z - srcRegion.min.z;
        } else {
          srcX = srcRegion.min.x;
          srcY = srcRegion.min.y;
          srcWidth = srcRegion.max.x - srcRegion.min.x;
          srcHeight = srcRegion.max.y - srcRegion.min.y;
          srcDepth = 1;
        }
      }
      if (dstPosition !== null) {
        dstX = dstPosition.x;
        dstY = dstPosition.y;
        dstZ = dstPosition.z || 0;
      }
      const encoder = this.device.createCommandEncoder({ label: "copyTextureToTexture_" + srcTexture.id + "_" + dstTexture.id });
      const sourceGPU = this.get(srcTexture).texture;
      const destinationGPU = this.get(dstTexture).texture;
      encoder.copyTextureToTexture(
        {
          texture: sourceGPU,
          mipLevel: srcLevel,
          origin: { x: srcX, y: srcY, z: srcZ }
        },
        {
          texture: destinationGPU,
          mipLevel: dstLevel,
          origin: { x: dstX, y: dstY, z: dstZ }
        },
        [
          srcWidth,
          srcHeight,
          srcDepth
        ]
      );
      this.device.queue.submit([encoder.finish()]);
      if (dstLevel === 0 && dstTexture.generateMipmaps) {
        this.textureUtils.generateMipmaps(dstTexture);
      }
    }
    /**
     * Copies the current bound framebuffer to the given texture.
     *
     * @param {Texture} texture - The destination texture.
     * @param {RenderContext} renderContext - The render context.
     * @param {Vector4} rectangle - A four dimensional vector defining the origin and dimension of the copy.
     */
    copyFramebufferToTexture(texture2, renderContext, rectangle) {
      const renderContextData = this.get(renderContext);
      let sourceGPU = null;
      if (renderContext.renderTarget) {
        if (texture2.isDepthTexture) {
          sourceGPU = this.get(renderContext.depthTexture).texture;
        } else {
          sourceGPU = this.get(renderContext.textures[0]).texture;
        }
      } else {
        if (texture2.isDepthTexture) {
          sourceGPU = this.textureUtils.getDepthBuffer(renderContext.depth, renderContext.stencil);
        } else {
          sourceGPU = this.context.getCurrentTexture();
        }
      }
      const destinationGPU = this.get(texture2).texture;
      if (sourceGPU.format !== destinationGPU.format) {
        console.error("WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.", sourceGPU.format, destinationGPU.format);
        return;
      }
      let encoder;
      if (renderContextData.currentPass) {
        renderContextData.currentPass.end();
        encoder = renderContextData.encoder;
      } else {
        encoder = this.device.createCommandEncoder({ label: "copyFramebufferToTexture_" + texture2.id });
      }
      encoder.copyTextureToTexture(
        {
          texture: sourceGPU,
          origin: [rectangle.x, rectangle.y, 0]
        },
        {
          texture: destinationGPU
        },
        [
          rectangle.z,
          rectangle.w
        ]
      );
      if (renderContextData.currentPass) {
        const { descriptor } = renderContextData;
        for (let i = 0; i < descriptor.colorAttachments.length; i++) {
          descriptor.colorAttachments[i].loadOp = GPULoadOp.Load;
        }
        if (renderContext.depth) descriptor.depthStencilAttachment.depthLoadOp = GPULoadOp.Load;
        if (renderContext.stencil) descriptor.depthStencilAttachment.stencilLoadOp = GPULoadOp.Load;
        renderContextData.currentPass = encoder.beginRenderPass(descriptor);
        renderContextData.currentSets = { attributes: {}, bindingGroups: [], pipeline: null, index: null };
        if (renderContext.viewport) {
          this.updateViewport(renderContext);
        }
        if (renderContext.scissor) {
          const { x, y, width, height } = renderContext.scissorValue;
          renderContextData.currentPass.setScissorRect(x, y, width, height);
        }
      } else {
        this.device.queue.submit([encoder.finish()]);
      }
      if (texture2.generateMipmaps) {
        this.textureUtils.generateMipmaps(texture2);
      }
    }
  };
  var IESSpotLight = class extends SpotLight {
    /**
     * Constructs a new IES spot light.
     *
     * @param {(number|Color|string)} [color=0xffffff] - The light's color.
     * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).
     * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.
     * @param {number} [angle=Math.PI/3] - Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.
     * @param {number} [penumbra=0] - Percent of the spotlight cone that is attenuated due to penumbra. Value range is `[0,1]`.
     * @param {number} [decay=2] - The amount the light dims along the distance of the light.
     */
    constructor(color2, intensity, distance2, angle, penumbra, decay) {
      super(color2, intensity, distance2, angle, penumbra, decay);
      this.iesMap = null;
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.iesMap = source.iesMap;
      return this;
    }
  };
  var ProjectorLight = class extends SpotLight {
    /**
     * Constructs a new projector light.
     *
     * @param {(number|Color|string)} [color=0xffffff] - The light's color.
     * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).
     * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.
     * @param {number} [angle=Math.PI/3] - Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.
     * @param {number} [penumbra=0] - Percent of the spotlight cone that is attenuated due to penumbra. Value range is `[0,1]`.
     * @param {number} [decay=2] - The amount the light dims along the distance of the light.
     */
    constructor(color2, intensity, distance2, angle, penumbra, decay) {
      super(color2, intensity, distance2, angle, penumbra, decay);
      this.aspect = null;
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.aspect = source.aspect;
      return this;
    }
  };
  var StandardNodeLibrary = class extends NodeLibrary {
    /**
     * Constructs a new standard node library.
     */
    constructor() {
      super();
      this.addMaterial(MeshPhongNodeMaterial, "MeshPhongMaterial");
      this.addMaterial(MeshStandardNodeMaterial, "MeshStandardMaterial");
      this.addMaterial(MeshPhysicalNodeMaterial, "MeshPhysicalMaterial");
      this.addMaterial(MeshToonNodeMaterial, "MeshToonMaterial");
      this.addMaterial(MeshBasicNodeMaterial, "MeshBasicMaterial");
      this.addMaterial(MeshLambertNodeMaterial, "MeshLambertMaterial");
      this.addMaterial(MeshNormalNodeMaterial, "MeshNormalMaterial");
      this.addMaterial(MeshMatcapNodeMaterial, "MeshMatcapMaterial");
      this.addMaterial(LineBasicNodeMaterial, "LineBasicMaterial");
      this.addMaterial(LineDashedNodeMaterial, "LineDashedMaterial");
      this.addMaterial(PointsNodeMaterial, "PointsMaterial");
      this.addMaterial(SpriteNodeMaterial, "SpriteMaterial");
      this.addMaterial(ShadowNodeMaterial, "ShadowMaterial");
      this.addLight(PointLightNode, PointLight);
      this.addLight(DirectionalLightNode, DirectionalLight);
      this.addLight(RectAreaLightNode, RectAreaLight);
      this.addLight(SpotLightNode, SpotLight);
      this.addLight(AmbientLightNode, AmbientLight);
      this.addLight(HemisphereLightNode, HemisphereLight);
      this.addLight(LightProbeNode, LightProbe);
      this.addLight(IESSpotLightNode, IESSpotLight);
      this.addLight(ProjectorLightNode, ProjectorLight);
      this.addToneMapping(linearToneMapping, LinearToneMapping);
      this.addToneMapping(reinhardToneMapping, ReinhardToneMapping);
      this.addToneMapping(cineonToneMapping, CineonToneMapping);
      this.addToneMapping(acesFilmicToneMapping, ACESFilmicToneMapping);
      this.addToneMapping(agxToneMapping, AgXToneMapping);
      this.addToneMapping(neutralToneMapping, NeutralToneMapping);
    }
  };
  var WebGPURenderer = class extends Renderer {
    /**
     * WebGPURenderer options.
     *
     * @typedef {Object} WebGPURenderer~Options
     * @property {boolean} [logarithmicDepthBuffer=false] - Whether logarithmic depth buffer is enabled or not.
     * @property {boolean} [alpha=true] - Whether the default framebuffer (which represents the final contents of the canvas) should be transparent or opaque.
     * @property {boolean} [depth=true] - Whether the default framebuffer should have a depth buffer or not.
     * @property {boolean} [stencil=false] - Whether the default framebuffer should have a stencil buffer or not.
     * @property {boolean} [antialias=false] - Whether MSAA as the default anti-aliasing should be enabled or not.
     * @property {number} [samples=0] - When `antialias` is `true`, `4` samples are used by default. Set this parameter to any other integer value than 0 to overwrite the default.
     * @property {boolean} [forceWebGL=false] - If set to `true`, the renderer uses a WebGL 2 backend no matter if WebGPU is supported or not.
     * @property {boolean} [multiview=false] - If set to `true`, the renderer will use multiview during WebXR rendering if supported.
     * @property {number} [outputType=undefined] - Texture type for output to canvas. By default, device's preferred format is used; other formats may incur overhead.
     * @property {number} [colorBufferType=HalfFloatType] - Defines the type of color buffers. The default `HalfFloatType` is recommend for best
     * quality. To save memory and bandwidth, `UnsignedByteType` might be used. This will reduce rendering quality though.
     */
    /**
     * Constructs a new WebGPU renderer.
     *
     * @param {WebGPURenderer~Options} [parameters] - The configuration parameter.
     */
    constructor(parameters = {}) {
      let BackendClass;
      if (parameters.forceWebGL) {
        BackendClass = WebGLBackend;
      } else {
        BackendClass = WebGPUBackend;
        parameters.getFallback = () => {
          console.warn("THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend.");
          return new WebGLBackend(parameters);
        };
      }
      const backend = new BackendClass(parameters);
      super(backend, parameters);
      this.library = new StandardNodeLibrary();
      this.isWebGPURenderer = true;
      if (typeof __THREE_DEVTOOLS__ !== "undefined") {
        __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
      }
    }
  };

  // node_modules/three/build/three.module.js
  var alphahash_fragment = "#ifdef USE_ALPHAHASH\n	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";
  var alphahash_pars_fragment = "#ifdef USE_ALPHAHASH\n	const float ALPHA_HASH_SCALE = 0.05;\n	float hash2D( vec2 value ) {\n		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n	}\n	float hash3D( vec3 value ) {\n		return hash2D( vec2( hash2D( value.xy ), value.z ) );\n	}\n	float getAlphaHashThreshold( vec3 position ) {\n		float maxDeriv = max(\n			length( dFdx( position.xyz ) ),\n			length( dFdy( position.xyz ) )\n		);\n		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n		vec2 pixScales = vec2(\n			exp2( floor( log2( pixScale ) ) ),\n			exp2( ceil( log2( pixScale ) ) )\n		);\n		vec2 alpha = vec2(\n			hash3D( floor( pixScales.x * position.xyz ) ),\n			hash3D( floor( pixScales.y * position.xyz ) )\n		);\n		float lerpFactor = fract( log2( pixScale ) );\n		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n		float a = min( lerpFactor, 1.0 - lerpFactor );\n		vec3 cases = vec3(\n			x * x / ( 2.0 * a * ( 1.0 - a ) ),\n			( x - 0.5 * a ) / ( 1.0 - a ),\n			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n		);\n		float threshold = ( x < ( 1.0 - a ) )\n			? ( ( x < a ) ? cases.x : cases.y )\n			: cases.z;\n		return clamp( threshold , 1.0e-6, 1.0 );\n	}\n#endif";
  var alphamap_fragment = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";
  var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
  var alphatest_fragment = "#ifdef USE_ALPHATEST\n	#ifdef ALPHA_TO_COVERAGE\n	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n	if ( diffuseColor.a == 0.0 ) discard;\n	#else\n	if ( diffuseColor.a < alphaTest ) discard;\n	#endif\n#endif";
  var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif";
  var aomap_fragment = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_CLEARCOAT ) \n		clearcoatSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_SHEEN ) \n		sheenSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif";
  var aomap_pars_fragment = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
  var batching_pars_vertex = "#ifdef USE_BATCHING\n	#if ! defined( GL_ANGLE_multi_draw )\n	#define gl_DrawID _gl_DrawID\n	uniform int _gl_DrawID;\n	#endif\n	uniform highp sampler2D batchingTexture;\n	uniform highp usampler2D batchingIdTexture;\n	mat4 getBatchingMatrix( const in float i ) {\n		int size = textureSize( batchingTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n	float getIndirectIndex( const in int i ) {\n		int size = textureSize( batchingIdTexture, 0 ).x;\n		int x = i % size;\n		int y = i / size;\n		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\n	}\n#endif\n#ifdef USE_BATCHING_COLOR\n	uniform sampler2D batchingColorTexture;\n	vec3 getBatchingColor( const in float i ) {\n		int size = textureSize( batchingColorTexture, 0 ).x;\n		int j = int( i );\n		int x = j % size;\n		int y = j / size;\n		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\n	}\n#endif";
  var batching_vertex = "#ifdef USE_BATCHING\n	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\n#endif";
  var begin_vertex = "vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n	vPosition = vec3( position );\n#endif";
  var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
  var bsdfs = "float G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n} // validated";
  var iridescence_fragment = "#ifdef USE_IRIDESCENCE\n	const mat3 XYZ_TO_REC709 = mat3(\n		 3.2404542, -0.9692660,  0.0556434,\n		-1.5371385,  1.8760108, -0.2040259,\n		-0.4985314,  0.0415560,  1.0572252\n	);\n	vec3 Fresnel0ToIor( vec3 fresnel0 ) {\n		vec3 sqrtF0 = sqrt( fresnel0 );\n		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n	}\n	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n	}\n	float IorToFresnel0( float transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n	}\n	vec3 evalSensitivity( float OPD, vec3 shift ) {\n		float phase = 2.0 * PI * OPD * 1.0e-9;\n		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n		xyz /= 1.0685e-7;\n		vec3 rgb = XYZ_TO_REC709 * xyz;\n		return rgb;\n	}\n	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n		vec3 I;\n		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n		float cosTheta2Sq = 1.0 - sinTheta2Sq;\n		if ( cosTheta2Sq < 0.0 ) {\n			return vec3( 1.0 );\n		}\n		float cosTheta2 = sqrt( cosTheta2Sq );\n		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n		float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n		float T121 = 1.0 - R12;\n		float phi12 = 0.0;\n		if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n		float phi21 = PI - phi12;\n		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n		vec3 phi23 = vec3( 0.0 );\n		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n		vec3 phi = vec3( phi21 ) + phi23;\n		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n		vec3 r123 = sqrt( R123 );\n		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n		vec3 C0 = R12 + Rs;\n		I = C0;\n		vec3 Cm = Rs - T121;\n		for ( int m = 1; m <= 2; ++ m ) {\n			Cm *= r123;\n			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n			I += Cm * Sm;\n		}\n		return max( I, vec3( 0.0 ) );\n	}\n#endif";
  var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vBumpMapUv );\n		vec2 dSTdy = dFdy( vBumpMapUv );\n		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
  var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#ifdef ALPHA_TO_COVERAGE\n		float distanceToPlane, distanceGradient;\n		float clipOpacity = 1.0;\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n			distanceGradient = fwidth( distanceToPlane ) / 2.0;\n			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			if ( clipOpacity == 0.0 ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			float unionClipOpacity = 1.0;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n				distanceGradient = fwidth( distanceToPlane ) / 2.0;\n				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			}\n			#pragma unroll_loop_end\n			clipOpacity *= 1.0 - unionClipOpacity;\n		#endif\n		diffuseColor.a *= clipOpacity;\n		if ( diffuseColor.a == 0.0 ) discard;\n	#else\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			bool clipped = true;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n			}\n			#pragma unroll_loop_end\n			if ( clipped ) discard;\n		#endif\n	#endif\n#endif";
  var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
  var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
  var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
  var color_fragment = "#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif";
  var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif";
  var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n	varying vec3 vColor;\n#endif";
  var color_vertex = "#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif\n#ifdef USE_BATCHING_COLOR\n	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\n	vColor.xyz *= batchingColor.xyz;\n#endif";
  var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n	varying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";
  var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define cubeUV_r0 1.0\n	#define cubeUV_m0 - 2.0\n	#define cubeUV_r1 0.8\n	#define cubeUV_m1 - 1.0\n	#define cubeUV_r4 0.4\n	#define cubeUV_m4 2.0\n	#define cubeUV_r5 0.305\n	#define cubeUV_m5 3.0\n	#define cubeUV_r6 0.21\n	#define cubeUV_m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= cubeUV_r1 ) {\n			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n		} else if ( roughness >= cubeUV_r4 ) {\n			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n		} else if ( roughness >= cubeUV_r5 ) {\n			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n		} else if ( roughness >= cubeUV_r6 ) {\n			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
  var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n	vec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n	mat3 bm = mat3( batchingMatrix );\n	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n	transformedNormal = bm * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = bm * transformedTangent;\n	#endif\n#endif\n#ifdef USE_INSTANCING\n	mat3 im = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n	transformedNormal = im * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = im * transformedTangent;\n	#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
  var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
  var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";
  var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE\n		emissiveColor = sRGBTransferEOTF( emissiveColor );\n	#endif\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
  var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
  var colorspace_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
  var colorspace_pars_fragment = "vec4 LinearTransferOETF( in vec4 value ) {\n	return value;\n}\nvec4 sRGBTransferEOTF( in vec4 value ) {\n	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";
  var envmap_fragment = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
  var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	uniform mat3 envMapRotation;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
  var envmap_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
  var envmap_pars_vertex = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
  var envmap_vertex = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
  var fog_vertex = "#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif";
  var fog_pars_vertex = "#ifdef USE_FOG\n	varying float vFogDepth;\n#endif";
  var fog_fragment = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
  var fog_pars_fragment = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
  var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		vec2 fw = fwidth( coord ) * 0.5;\n		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n	#endif\n}";
  var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
  var lights_lambert_fragment = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";
  var lights_lambert_pars_fragment = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n	vec3 diffuseColor;\n	float specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Lambert\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert";
  var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n	uniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n	if ( cutoffDistance > 0.0 ) {\n		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n	}\n	return distanceFalloff;\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif";
  var envmap_physical_pars_fragment = "#ifdef USE_ENVMAP\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 reflectVec = reflect( - viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	#ifdef USE_ANISOTROPY\n		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n			#ifdef ENVMAP_TYPE_CUBE_UV\n				vec3 bentNormal = cross( bitangent, viewDir );\n				bentNormal = normalize( cross( bentNormal, bitangent ) );\n				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n				return getIBLRadiance( viewDir, bentNormal, roughness );\n			#else\n				return vec3( 0.0 );\n			#endif\n		}\n	#endif\n#endif";
  var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
  var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon";
  var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
  var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong";
  var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	material.ior = ior;\n	#ifdef USE_SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULAR_COLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n		#endif\n		#ifdef USE_SPECULAR_INTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n	material.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n	material.iridescence = iridescence;\n	material.iridescenceIOR = iridescenceIOR;\n	#ifdef USE_IRIDESCENCEMAP\n		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n	#endif\n	#ifdef USE_IRIDESCENCE_THICKNESSMAP\n		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n	#else\n		material.iridescenceThickness = iridescenceThicknessMaximum;\n	#endif\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEEN_COLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	#ifdef USE_ANISOTROPYMAP\n		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n	#else\n		vec2 anisotropyV = anisotropyVector;\n	#endif\n	material.anisotropy = length( anisotropyV );\n	if( material.anisotropy == 0.0 ) {\n		anisotropyV = vec2( 1.0, 0.0 );\n	} else {\n		anisotropyV /= material.anisotropy;\n		material.anisotropy = saturate( material.anisotropy );\n	}\n	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif";
  var lights_physical_pars_fragment = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	float dispersion;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_IRIDESCENCE\n		float iridescence;\n		float iridescenceIOR;\n		float iridescenceThickness;\n		vec3 iridescenceFresnel;\n		vec3 iridescenceF0;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n	#ifdef IOR\n		float ior;\n	#endif\n	#ifdef USE_TRANSMISSION\n		float transmission;\n		float transmissionAlpha;\n		float thickness;\n		float attenuationDistance;\n		vec3 attenuationColor;\n	#endif\n	#ifdef USE_ANISOTROPY\n		float anisotropy;\n		float alphaT;\n		vec3 anisotropyT;\n		vec3 anisotropyB;\n	#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n		float v = 0.5 / ( gv + gl );\n		return saturate(v);\n	}\n	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n		float a2 = alphaT * alphaB;\n		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n		highp float v2 = dot( v, v );\n		float w2 = a2 / v2;\n		return RECIPROCAL_PI * a2 * pow2 ( w2 );\n	}\n#endif\n#ifdef USE_CLEARCOAT\n	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n		vec3 f0 = material.clearcoatF0;\n		float f90 = material.clearcoatF90;\n		float roughness = material.clearcoatRoughness;\n		float alpha = pow2( roughness );\n		vec3 halfDir = normalize( lightDir + viewDir );\n		float dotNL = saturate( dot( normal, lightDir ) );\n		float dotNV = saturate( dot( normal, viewDir ) );\n		float dotNH = saturate( dot( normal, halfDir ) );\n		float dotVH = saturate( dot( viewDir, halfDir ) );\n		vec3 F = F_Schlick( f0, f90, dotVH );\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n		return F * ( V * D );\n	}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n	vec3 f0 = material.specularColor;\n	float f90 = material.specularF90;\n	float roughness = material.roughness;\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	#ifdef USE_IRIDESCENCE\n		F = mix( F, material.iridescenceFresnel, material.iridescence );\n	#endif\n	#ifdef USE_ANISOTROPY\n		float dotTL = dot( material.anisotropyT, lightDir );\n		float dotTV = dot( material.anisotropyT, viewDir );\n		float dotTH = dot( material.anisotropyT, halfDir );\n		float dotBL = dot( material.anisotropyB, lightDir );\n		float dotBV = dot( material.anisotropyB, viewDir );\n		float dotBH = dot( material.anisotropyB, halfDir );\n		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n	#else\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n	#endif\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	#ifdef USE_IRIDESCENCE\n		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n	#else\n		vec3 Fr = specularColor;\n	#endif\n	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometryNormal;\n		vec3 viewDir = geometryViewDir;\n		vec3 position = geometryPosition;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	#ifdef USE_IRIDESCENCE\n		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n	#else\n		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	#endif\n	vec3 totalScattering = singleScattering + multiScattering;\n	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
  var lights_fragment_begin = "\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n	geometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n	float dotNVi = saturate( dot( normal, geometryViewDir ) );\n	if ( material.iridescenceThickness == 0.0 ) {\n		material.iridescence = 0.0;\n	} else {\n		material.iridescence = saturate( material.iridescence );\n	}\n	if ( material.iridescence > 0.0 ) {\n		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n	}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometryPosition, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	vec4 spotColor;\n	vec3 spotLightCoord;\n	bool inSpotLightMap;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometryPosition, directLight );\n		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n		#else\n		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#endif\n		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n		#endif\n		#undef SPOT_LIGHT_MAP_INDEX\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#if defined( USE_LIGHT_PROBES )\n		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n	#endif\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
  var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometryNormal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	#ifdef USE_ANISOTROPY\n		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n	#else\n		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n	#endif\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif";
  var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif";
  var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF )\n	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
  var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
  var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
  var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n	vFragDepth = 1.0 + gl_Position.w;\n	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif";
  var map_fragment = "#ifdef USE_MAP\n	vec4 sampledDiffuseColor = texture2D( map, vMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );\n	#endif\n	diffuseColor *= sampledDiffuseColor;\n#endif";
  var map_pars_fragment = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
  var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	#if defined( USE_POINTS_UV )\n		vec2 uv = vUv;\n	#else\n		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	#endif\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
  var map_particle_pars_fragment = "#if defined( USE_POINTS_UV )\n	varying vec2 vUv;\n#else\n	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n		uniform mat3 uvTransform;\n	#endif\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
  var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
  var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
  var morphinstance_vertex = "#ifdef USE_INSTANCING_MORPH\n	float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n	}\n#endif";
  var morphcolor_vertex = "#if defined( USE_MORPHCOLORS )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n		#endif\n	}\n#endif";
  var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n	}\n#endif";
  var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n	#ifndef USE_INSTANCING_MORPH\n		uniform float morphTargetBaseInfluence;\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n	#endif\n	uniform sampler2DArray morphTargetsTexture;\n	uniform ivec2 morphTargetsTextureSize;\n	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n		int y = texelIndex / morphTargetsTextureSize.x;\n		int x = texelIndex - y * morphTargetsTextureSize.x;\n		ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n		return texelFetch( morphTargetsTexture, morphUV, 0 );\n	}\n#endif";
  var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n	}\n#endif";
  var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal *= faceDirection;\n	#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n	#ifdef USE_TANGENT\n		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn = getTangentFrame( - vViewPosition, normal,\n		#if defined( USE_NORMALMAP )\n			vNormalMapUv\n		#elif defined( USE_CLEARCOAT_NORMALMAP )\n			vClearcoatNormalMapUv\n		#else\n			vUv\n		#endif\n		);\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn[0] *= faceDirection;\n		tbn[1] *= faceDirection;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	#ifdef USE_TANGENT\n		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn2[0] *= faceDirection;\n		tbn2[1] *= faceDirection;\n	#endif\n#endif\nvec3 nonPerturbedNormal = normal;";
  var normal_fragment_maps = "#ifdef USE_NORMALMAP_OBJECTSPACE\n	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	normal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
  var normal_pars_fragment = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
  var normal_pars_vertex = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
  var normal_vertex = "#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif";
  var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( uv.st );\n		vec2 st1 = dFdy( uv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n		return mat3( T * scale, B * scale, N );\n	}\n#endif";
  var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = nonPerturbedNormal;\n#endif";
  var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	clearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";
  var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif";
  var iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n	uniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform sampler2D iridescenceThicknessMap;\n#endif";
  var opaque_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
  var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;\nconst float Inv255 = 1. / 255.;\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );\nvec4 packDepthToRGBA( const in float v ) {\n	if( v <= 0.0 )\n		return vec4( 0., 0., 0., 0. );\n	if( v >= 1.0 )\n		return vec4( 1., 1., 1., 1. );\n	float vuf;\n	float af = modf( v * PackFactors.a, vuf );\n	float bf = modf( vuf * ShiftRight8, vuf );\n	float gf = modf( vuf * ShiftRight8, vuf );\n	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\n}\nvec3 packDepthToRGB( const in float v ) {\n	if( v <= 0.0 )\n		return vec3( 0., 0., 0. );\n	if( v >= 1.0 )\n		return vec3( 1., 1., 1. );\n	float vuf;\n	float bf = modf( v * PackFactors.b, vuf );\n	float gf = modf( vuf * ShiftRight8, vuf );\n	return vec3( vuf * Inv255, gf * PackUpscale, bf );\n}\nvec2 packDepthToRG( const in float v ) {\n	if( v <= 0.0 )\n		return vec2( 0., 0. );\n	if( v >= 1.0 )\n		return vec2( 1., 1. );\n	float vuf;\n	float gf = modf( v * 256., vuf );\n	return vec2( vuf * Inv255, gf );\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors4 );\n}\nfloat unpackRGBToDepth( const in vec3 v ) {\n	return dot( v, UnpackFactors3 );\n}\nfloat unpackRGToDepth( const in vec2 v ) {\n	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\n}\nvec4 pack2HalfToRGBA( const in vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( const in vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * depth - far );\n}";
  var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
  var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n	mvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
  var dithering_fragment = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
  var dithering_pars_fragment = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
  var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
  var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
  var shadowmap_pars_fragment = "#if NUM_SPOT_LIGHT_COORDS > 0\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return mix( 1.0, shadow, shadowIntensity );\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		float shadow = 1.0;\n		vec3 lightToPosition = shadowCoord.xyz;\n		\n		float lightToPositionLength = length( lightToPosition );\n		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;\n			vec3 bd3D = normalize( lightToPosition );\n			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n				shadow = (\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n				) * ( 1.0 / 9.0 );\n			#else\n				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n			#endif\n		}\n		return mix( 1.0, shadow, shadowIntensity );\n	}\n#endif";
  var shadowmap_pars_vertex = "#if NUM_SPOT_LIGHT_COORDS > 0\n	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		struct SpotLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
  var shadowmap_vertex = "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	vec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n		shadowWorldPosition = worldPosition;\n		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n		#endif\n		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n#endif";
  var shadowmask_pars_fragment = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
  var skinbase_vertex = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
  var skinning_pars_vertex = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	uniform highp sampler2D boneTexture;\n	mat4 getBoneMatrix( const in float i ) {\n		int size = textureSize( boneTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n#endif";
  var skinning_vertex = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
  var skinnormal_vertex = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
  var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
  var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
  var tonemapping_fragment = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
  var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 CineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n	vec3( 1.6605, - 0.1246, - 0.0182 ),\n	vec3( - 0.5876, 1.1329, - 0.1006 ),\n	vec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n	vec3( 0.6274, 0.0691, 0.0164 ),\n	vec3( 0.3293, 0.9195, 0.0880 ),\n	vec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n	vec3 x2 = x * x;\n	vec3 x4 = x2 * x2;\n	return + 15.5 * x4 * x2\n		- 40.14 * x4 * x\n		+ 31.96 * x4\n		- 6.868 * x2 * x\n		+ 0.4298 * x2\n		+ 0.1191 * x\n		- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n	const mat3 AgXInsetMatrix = mat3(\n		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n	);\n	const mat3 AgXOutsetMatrix = mat3(\n		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n	);\n	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;\n	color *= toneMappingExposure;\n	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n	color = AgXInsetMatrix * color;\n	color = max( color, 1e-10 );	color = log2( color );\n	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n	color = clamp( color, 0.0, 1.0 );\n	color = agxDefaultContrastApprox( color );\n	color = AgXOutsetMatrix * color;\n	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n	color = clamp( color, 0.0, 1.0 );\n	return color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n	const float StartCompression = 0.8 - 0.04;\n	const float Desaturation = 0.15;\n	color *= toneMappingExposure;\n	float x = min( color.r, min( color.g, color.b ) );\n	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n	color -= offset;\n	float peak = max( color.r, max( color.g, color.b ) );\n	if ( peak < StartCompression ) return color;\n	float d = 1. - StartCompression;\n	float newPeak = 1. - d * d / ( peak + d - StartCompression );\n	color *= newPeak / peak;\n	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n	return mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
  var transmission_fragment = "#ifdef USE_TRANSMISSION\n	material.transmission = transmission;\n	material.transmissionAlpha = 1.0;\n	material.thickness = thickness;\n	material.attenuationDistance = attenuationDistance;\n	material.attenuationColor = attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmitted = getIBLVolumeRefraction(\n		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n		material.attenuationColor, material.attenuationDistance );\n	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";
  var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	float w0( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n	}\n	float w1( float a ) {\n		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n	}\n	float w2( float a ){\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n	}\n	float w3( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * a * a );\n	}\n	float g0( float a ) {\n		return w0( a ) + w1( a );\n	}\n	float g1( float a ) {\n		return w2( a ) + w3( a );\n	}\n	float h0( float a ) {\n		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n	}\n	float h1( float a ) {\n		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n	}\n	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n		uv = uv * texelSize.zw + 0.5;\n		vec2 iuv = floor( uv );\n		vec2 fuv = fract( uv );\n		float g0x = g0( fuv.x );\n		float g1x = g1( fuv.x );\n		float h0x = h0( fuv.x );\n		float h1x = h1( fuv.x );\n		float h0y = h0( fuv.y );\n		float h1y = h1( fuv.y );\n		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n	}\n	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n		vec2 fLodSizeInv = 1.0 / fLodSize;\n		vec2 cLodSizeInv = 1.0 / cLodSize;\n		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n		return mix( fSample, cSample, fract( lod ) );\n	}\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n	}\n	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( isinf( attenuationDistance ) ) {\n			return vec3( 1.0 );\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec4 transmittedLight;\n		vec3 transmittance;\n		#ifdef USE_DISPERSION\n			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n			for ( int i = 0; i < 3; i ++ ) {\n				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n				vec3 refractedRayExit = position + transmissionRay;\n				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n				vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n				refractionCoords += 1.0;\n				refractionCoords /= 2.0;\n				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n				transmittedLight[ i ] = transmissionSample[ i ];\n				transmittedLight.a += transmissionSample.a;\n				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n			}\n			transmittedLight.a /= 3.0;\n		#else\n			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n			vec3 refractedRayExit = position + transmissionRay;\n			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n			vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n			refractionCoords += 1.0;\n			refractionCoords /= 2.0;\n			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n		#endif\n		vec3 attenuatedColor = transmittance * transmittedLight.rgb;\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n	}\n#endif";
  var uv_pars_fragment = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
  var uv_pars_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	uniform mat3 mapTransform;\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform mat3 alphaMapTransform;\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	uniform mat3 lightMapTransform;\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	uniform mat3 aoMapTransform;\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	uniform mat3 bumpMapTransform;\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	uniform mat3 normalMapTransform;\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	uniform mat3 displacementMapTransform;\n	varying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	uniform mat3 emissiveMapTransform;\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	uniform mat3 metalnessMapTransform;\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	uniform mat3 roughnessMapTransform;\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	uniform mat3 anisotropyMapTransform;\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	uniform mat3 clearcoatMapTransform;\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform mat3 clearcoatNormalMapTransform;\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform mat3 clearcoatRoughnessMapTransform;\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	uniform mat3 sheenColorMapTransform;\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	uniform mat3 sheenRoughnessMapTransform;\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	uniform mat3 iridescenceMapTransform;\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform mat3 iridescenceThicknessMapTransform;\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	uniform mat3 specularMapTransform;\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	uniform mat3 specularColorMapTransform;\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	uniform mat3 specularIntensityMapTransform;\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
  var uv_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	vUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";
  var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_BATCHING\n		worldPosition = batchingMatrix * worldPosition;\n	#endif\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
  var vertex$h = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
  var fragment$h = "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
  var vertex$g = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
  var fragment$g = "#ifdef ENVMAP_TYPE_CUBE\n	uniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n	uniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n	#else\n		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
  var vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
  var fragment$f = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n	gl_FragColor = texColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
  var vertex$e = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
  var fragment$e = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#elif DEPTH_PACKING == 3202\n		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\n	#elif DEPTH_PACKING == 3203\n		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\n	#endif\n}";
  var vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
  var fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
  var vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
  var fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
  var vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
  var fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
  var vertex$a = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$9 = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$9 = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_lambert_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
  var fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
  var fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}";
  var vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}";
  var fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULAR_COLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n	#ifdef USE_SPECULAR_INTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n	uniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n	uniform float iridescence;\n	uniform float iridescenceIOR;\n	uniform float iridescenceThicknessMinimum;\n	uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEEN_COLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	uniform vec2 anisotropyVector;\n	#ifdef USE_ANISOTROPYMAP\n		uniform sampler2D anisotropyMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n	#endif\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\nvoid main() {\n	#ifdef USE_POINTS_UV\n		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	#endif\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
  var fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
  var vertex$2 = "#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
  var vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix[ 3 ];\n	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
  var fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
  var ShaderChunk = {
    alphahash_fragment,
    alphahash_pars_fragment,
    alphamap_fragment,
    alphamap_pars_fragment,
    alphatest_fragment,
    alphatest_pars_fragment,
    aomap_fragment,
    aomap_pars_fragment,
    batching_pars_vertex,
    batching_vertex,
    begin_vertex,
    beginnormal_vertex,
    bsdfs,
    iridescence_fragment,
    bumpmap_pars_fragment,
    clipping_planes_fragment,
    clipping_planes_pars_fragment,
    clipping_planes_pars_vertex,
    clipping_planes_vertex,
    color_fragment,
    color_pars_fragment,
    color_pars_vertex,
    color_vertex,
    common,
    cube_uv_reflection_fragment,
    defaultnormal_vertex,
    displacementmap_pars_vertex,
    displacementmap_vertex,
    emissivemap_fragment,
    emissivemap_pars_fragment,
    colorspace_fragment,
    colorspace_pars_fragment,
    envmap_fragment,
    envmap_common_pars_fragment,
    envmap_pars_fragment,
    envmap_pars_vertex,
    envmap_physical_pars_fragment,
    envmap_vertex,
    fog_vertex,
    fog_pars_vertex,
    fog_fragment,
    fog_pars_fragment,
    gradientmap_pars_fragment,
    lightmap_pars_fragment,
    lights_lambert_fragment,
    lights_lambert_pars_fragment,
    lights_pars_begin,
    lights_toon_fragment,
    lights_toon_pars_fragment,
    lights_phong_fragment,
    lights_phong_pars_fragment,
    lights_physical_fragment,
    lights_physical_pars_fragment,
    lights_fragment_begin,
    lights_fragment_maps,
    lights_fragment_end,
    logdepthbuf_fragment,
    logdepthbuf_pars_fragment,
    logdepthbuf_pars_vertex,
    logdepthbuf_vertex,
    map_fragment,
    map_pars_fragment,
    map_particle_fragment,
    map_particle_pars_fragment,
    metalnessmap_fragment,
    metalnessmap_pars_fragment,
    morphinstance_vertex,
    morphcolor_vertex,
    morphnormal_vertex,
    morphtarget_pars_vertex,
    morphtarget_vertex,
    normal_fragment_begin,
    normal_fragment_maps,
    normal_pars_fragment,
    normal_pars_vertex,
    normal_vertex,
    normalmap_pars_fragment,
    clearcoat_normal_fragment_begin,
    clearcoat_normal_fragment_maps,
    clearcoat_pars_fragment,
    iridescence_pars_fragment,
    opaque_fragment,
    packing,
    premultiplied_alpha_fragment,
    project_vertex,
    dithering_fragment,
    dithering_pars_fragment,
    roughnessmap_fragment,
    roughnessmap_pars_fragment,
    shadowmap_pars_fragment,
    shadowmap_pars_vertex,
    shadowmap_vertex,
    shadowmask_pars_fragment,
    skinbase_vertex,
    skinning_pars_vertex,
    skinning_vertex,
    skinnormal_vertex,
    specularmap_fragment,
    specularmap_pars_fragment,
    tonemapping_fragment,
    tonemapping_pars_fragment,
    transmission_fragment,
    transmission_pars_fragment,
    uv_pars_fragment,
    uv_pars_vertex,
    uv_vertex,
    worldpos_vertex,
    background_vert: vertex$h,
    background_frag: fragment$h,
    backgroundCube_vert: vertex$g,
    backgroundCube_frag: fragment$g,
    cube_vert: vertex$f,
    cube_frag: fragment$f,
    depth_vert: vertex$e,
    depth_frag: fragment$e,
    distanceRGBA_vert: vertex$d,
    distanceRGBA_frag: fragment$d,
    equirect_vert: vertex$c,
    equirect_frag: fragment$c,
    linedashed_vert: vertex$b,
    linedashed_frag: fragment$b,
    meshbasic_vert: vertex$a,
    meshbasic_frag: fragment$a,
    meshlambert_vert: vertex$9,
    meshlambert_frag: fragment$9,
    meshmatcap_vert: vertex$8,
    meshmatcap_frag: fragment$8,
    meshnormal_vert: vertex$7,
    meshnormal_frag: fragment$7,
    meshphong_vert: vertex$6,
    meshphong_frag: fragment$6,
    meshphysical_vert: vertex$5,
    meshphysical_frag: fragment$5,
    meshtoon_vert: vertex$4,
    meshtoon_frag: fragment$4,
    points_vert: vertex$3,
    points_frag: fragment$3,
    shadow_vert: vertex$2,
    shadow_frag: fragment$2,
    sprite_vert: vertex$1,
    sprite_frag: fragment$1
  };
  var UniformsLib = {
    common: {
      diffuse: { value: /* @__PURE__ */ new Color(16777215) },
      opacity: { value: 1 },
      map: { value: null },
      mapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaMap: { value: null },
      alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaTest: { value: 0 }
    },
    specularmap: {
      specularMap: { value: null },
      specularMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    envmap: {
      envMap: { value: null },
      envMapRotation: { value: /* @__PURE__ */ new Matrix3() },
      flipEnvMap: { value: -1 },
      reflectivity: { value: 1 },
      // basic, lambert, phong
      ior: { value: 1.5 },
      // physical
      refractionRatio: { value: 0.98 }
      // basic, lambert, phong
    },
    aomap: {
      aoMap: { value: null },
      aoMapIntensity: { value: 1 },
      aoMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    lightmap: {
      lightMap: { value: null },
      lightMapIntensity: { value: 1 },
      lightMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    bumpmap: {
      bumpMap: { value: null },
      bumpMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      bumpScale: { value: 1 }
    },
    normalmap: {
      normalMap: { value: null },
      normalMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      normalScale: { value: /* @__PURE__ */ new Vector2(1, 1) }
    },
    displacementmap: {
      displacementMap: { value: null },
      displacementMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      displacementScale: { value: 1 },
      displacementBias: { value: 0 }
    },
    emissivemap: {
      emissiveMap: { value: null },
      emissiveMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    metalnessmap: {
      metalnessMap: { value: null },
      metalnessMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    roughnessmap: {
      roughnessMap: { value: null },
      roughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    gradientmap: {
      gradientMap: { value: null }
    },
    fog: {
      fogDensity: { value: 25e-5 },
      fogNear: { value: 1 },
      fogFar: { value: 2e3 },
      fogColor: { value: /* @__PURE__ */ new Color(16777215) }
    },
    lights: {
      ambientLightColor: { value: [] },
      lightProbe: { value: [] },
      directionalLights: { value: [], properties: {
        direction: {},
        color: {}
      } },
      directionalLightShadows: { value: [], properties: {
        shadowIntensity: 1,
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {}
      } },
      directionalShadowMap: { value: [] },
      directionalShadowMatrix: { value: [] },
      spotLights: { value: [], properties: {
        color: {},
        position: {},
        direction: {},
        distance: {},
        coneCos: {},
        penumbraCos: {},
        decay: {}
      } },
      spotLightShadows: { value: [], properties: {
        shadowIntensity: 1,
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {}
      } },
      spotLightMap: { value: [] },
      spotShadowMap: { value: [] },
      spotLightMatrix: { value: [] },
      pointLights: { value: [], properties: {
        color: {},
        position: {},
        decay: {},
        distance: {}
      } },
      pointLightShadows: { value: [], properties: {
        shadowIntensity: 1,
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {},
        shadowCameraNear: {},
        shadowCameraFar: {}
      } },
      pointShadowMap: { value: [] },
      pointShadowMatrix: { value: [] },
      hemisphereLights: { value: [], properties: {
        direction: {},
        skyColor: {},
        groundColor: {}
      } },
      // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
      rectAreaLights: { value: [], properties: {
        color: {},
        position: {},
        width: {},
        height: {}
      } },
      ltc_1: { value: null },
      ltc_2: { value: null }
    },
    points: {
      diffuse: { value: /* @__PURE__ */ new Color(16777215) },
      opacity: { value: 1 },
      size: { value: 1 },
      scale: { value: 1 },
      map: { value: null },
      alphaMap: { value: null },
      alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaTest: { value: 0 },
      uvTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    sprite: {
      diffuse: { value: /* @__PURE__ */ new Color(16777215) },
      opacity: { value: 1 },
      center: { value: /* @__PURE__ */ new Vector2(0.5, 0.5) },
      rotation: { value: 0 },
      map: { value: null },
      mapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaMap: { value: null },
      alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaTest: { value: 0 }
    }
  };
  var ShaderLib = {
    basic: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.meshbasic_vert,
      fragmentShader: ShaderChunk.meshbasic_frag
    },
    lambert: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: /* @__PURE__ */ new Color(0) }
        }
      ]),
      vertexShader: ShaderChunk.meshlambert_vert,
      fragmentShader: ShaderChunk.meshlambert_frag
    },
    phong: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: /* @__PURE__ */ new Color(0) },
          specular: { value: /* @__PURE__ */ new Color(1118481) },
          shininess: { value: 30 }
        }
      ]),
      vertexShader: ShaderChunk.meshphong_vert,
      fragmentShader: ShaderChunk.meshphong_frag
    },
    standard: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.roughnessmap,
        UniformsLib.metalnessmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: /* @__PURE__ */ new Color(0) },
          roughness: { value: 1 },
          metalness: { value: 0 },
          envMapIntensity: { value: 1 }
        }
      ]),
      vertexShader: ShaderChunk.meshphysical_vert,
      fragmentShader: ShaderChunk.meshphysical_frag
    },
    toon: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.gradientmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: /* @__PURE__ */ new Color(0) }
        }
      ]),
      vertexShader: ShaderChunk.meshtoon_vert,
      fragmentShader: ShaderChunk.meshtoon_frag
    },
    matcap: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.fog,
        {
          matcap: { value: null }
        }
      ]),
      vertexShader: ShaderChunk.meshmatcap_vert,
      fragmentShader: ShaderChunk.meshmatcap_frag
    },
    points: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.points,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.points_vert,
      fragmentShader: ShaderChunk.points_frag
    },
    dashed: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.fog,
        {
          scale: { value: 1 },
          dashSize: { value: 1 },
          totalSize: { value: 2 }
        }
      ]),
      vertexShader: ShaderChunk.linedashed_vert,
      fragmentShader: ShaderChunk.linedashed_frag
    },
    depth: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.displacementmap
      ]),
      vertexShader: ShaderChunk.depth_vert,
      fragmentShader: ShaderChunk.depth_frag
    },
    normal: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        {
          opacity: { value: 1 }
        }
      ]),
      vertexShader: ShaderChunk.meshnormal_vert,
      fragmentShader: ShaderChunk.meshnormal_frag
    },
    sprite: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.sprite,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.sprite_vert,
      fragmentShader: ShaderChunk.sprite_frag
    },
    background: {
      uniforms: {
        uvTransform: { value: /* @__PURE__ */ new Matrix3() },
        t2D: { value: null },
        backgroundIntensity: { value: 1 }
      },
      vertexShader: ShaderChunk.background_vert,
      fragmentShader: ShaderChunk.background_frag
    },
    backgroundCube: {
      uniforms: {
        envMap: { value: null },
        flipEnvMap: { value: -1 },
        backgroundBlurriness: { value: 0 },
        backgroundIntensity: { value: 1 },
        backgroundRotation: { value: /* @__PURE__ */ new Matrix3() }
      },
      vertexShader: ShaderChunk.backgroundCube_vert,
      fragmentShader: ShaderChunk.backgroundCube_frag
    },
    cube: {
      uniforms: {
        tCube: { value: null },
        tFlip: { value: -1 },
        opacity: { value: 1 }
      },
      vertexShader: ShaderChunk.cube_vert,
      fragmentShader: ShaderChunk.cube_frag
    },
    equirect: {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: ShaderChunk.equirect_vert,
      fragmentShader: ShaderChunk.equirect_frag
    },
    distanceRGBA: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.displacementmap,
        {
          referencePosition: { value: /* @__PURE__ */ new Vector3() },
          nearDistance: { value: 1 },
          farDistance: { value: 1e3 }
        }
      ]),
      vertexShader: ShaderChunk.distanceRGBA_vert,
      fragmentShader: ShaderChunk.distanceRGBA_frag
    },
    shadow: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.lights,
        UniformsLib.fog,
        {
          color: { value: /* @__PURE__ */ new Color(0) },
          opacity: { value: 1 }
        }
      ]),
      vertexShader: ShaderChunk.shadow_vert,
      fragmentShader: ShaderChunk.shadow_frag
    }
  };
  ShaderLib.physical = {
    uniforms: /* @__PURE__ */ mergeUniforms([
      ShaderLib.standard.uniforms,
      {
        clearcoat: { value: 0 },
        clearcoatMap: { value: null },
        clearcoatMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        clearcoatNormalMap: { value: null },
        clearcoatNormalMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        clearcoatNormalScale: { value: /* @__PURE__ */ new Vector2(1, 1) },
        clearcoatRoughness: { value: 0 },
        clearcoatRoughnessMap: { value: null },
        clearcoatRoughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        dispersion: { value: 0 },
        iridescence: { value: 0 },
        iridescenceMap: { value: null },
        iridescenceMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        iridescenceIOR: { value: 1.3 },
        iridescenceThicknessMinimum: { value: 100 },
        iridescenceThicknessMaximum: { value: 400 },
        iridescenceThicknessMap: { value: null },
        iridescenceThicknessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        sheen: { value: 0 },
        sheenColor: { value: /* @__PURE__ */ new Color(0) },
        sheenColorMap: { value: null },
        sheenColorMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        sheenRoughness: { value: 1 },
        sheenRoughnessMap: { value: null },
        sheenRoughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        transmission: { value: 0 },
        transmissionMap: { value: null },
        transmissionMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        transmissionSamplerSize: { value: /* @__PURE__ */ new Vector2() },
        transmissionSamplerMap: { value: null },
        thickness: { value: 0 },
        thicknessMap: { value: null },
        thicknessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        attenuationDistance: { value: 0 },
        attenuationColor: { value: /* @__PURE__ */ new Color(0) },
        specularColor: { value: /* @__PURE__ */ new Color(1, 1, 1) },
        specularColorMap: { value: null },
        specularColorMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        specularIntensity: { value: 1 },
        specularIntensityMap: { value: null },
        specularIntensityMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        anisotropyVector: { value: /* @__PURE__ */ new Vector2() },
        anisotropyMap: { value: null },
        anisotropyMapTransform: { value: /* @__PURE__ */ new Matrix3() }
      }
    ]),
    vertexShader: ShaderChunk.meshphysical_vert,
    fragmentShader: ShaderChunk.meshphysical_frag
  };
  var PHI2 = (1 + Math.sqrt(5)) / 2;
  var INV_PHI2 = 1 / PHI2;
  var _axisDirections2 = [
    /* @__PURE__ */ new Vector3(-PHI2, INV_PHI2, 0),
    /* @__PURE__ */ new Vector3(PHI2, INV_PHI2, 0),
    /* @__PURE__ */ new Vector3(-INV_PHI2, 0, PHI2),
    /* @__PURE__ */ new Vector3(INV_PHI2, 0, PHI2),
    /* @__PURE__ */ new Vector3(0, PHI2, -INV_PHI2),
    /* @__PURE__ */ new Vector3(0, PHI2, INV_PHI2),
    /* @__PURE__ */ new Vector3(-1, 1, -1),
    /* @__PURE__ */ new Vector3(1, 1, -1),
    /* @__PURE__ */ new Vector3(-1, 1, 1),
    /* @__PURE__ */ new Vector3(1, 1, 1)
  ];
  var mat4array = new Float32Array(16);
  var mat3array = new Float32Array(9);
  var mat2array = new Float32Array(4);
  var reversedFuncs = {
    [NeverDepth]: AlwaysDepth,
    [LessDepth]: GreaterDepth,
    [EqualDepth]: NotEqualDepth,
    [LessEqualDepth]: GreaterEqualDepth,
    [AlwaysDepth]: NeverDepth,
    [GreaterDepth]: LessDepth,
    [NotEqualDepth]: EqualDepth,
    [GreaterEqualDepth]: LessEqualDepth
  };

  // src/graph.ts
  function isFunctionNode(node) {
    return typeof node.data === "function" && node.data.length >= 0;
  }
  var Graph = class {
    get currentNode() {
      return this._currentNode;
    }
    set currentNode(node) {
      this._currentNode = node;
    }
    constructor() {
      this.nodes = /* @__PURE__ */ new Map();
      this.currentNode = void 0;
    }
    /**
     * Create a new node with unique ID
     * @param data - Optional data to associate with the node
     * @returns The created node
     */
    createNode(data) {
      if (typeof data === "function" && !data.curried) {
        data.curried = true;
        const id3 = this.generateUniqueId();
        const node2 = { id: id3, data, inputs: /* @__PURE__ */ new Map(), outputs: /* @__PURE__ */ new Map() };
        this.nodes.set(id3, node2);
        return node2;
      }
      const id2 = this.generateUniqueId();
      const node = { id: id2, data, inputs: /* @__PURE__ */ new Map(), outputs: /* @__PURE__ */ new Map() };
      this.nodes.set(id2, node);
      return node;
    }
    /**
     * Connect two nodes via named inputs
     * @param source - The source node to connect from
     * @param target - The target node to connect to
     * @param inputName - The name of the input on the target node
     */
    connect(source, target, inputName) {
      if (!target.inputs.has(inputName)) {
        target.inputs.set(inputName, source);
      } else {
        console.warn(`Input "${inputName}" already has a connection`);
      }
      source.outputs.set(inputName, target);
    }
    /**
     * Generate a UUID for nodes (RFC4122 version 4 compliant)
     * @returns A unique string ID in UUID format
     */
    generateUniqueId() {
      let d = (/* @__PURE__ */ new Date()).getTime();
      if (typeof performance !== "undefined" && typeof performance.now === "function") {
        d += performance.now();
      }
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
        const r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c == "x" ? r : r & 3 | 8).toString(16);
      });
    }
    /**
     * Get a node by its ID
     * @param id - The ID of the node to retrieve
     * @returns The node with the specified ID, or undefined if not found
     */
    getNode(id2) {
      return this.nodes.get(id2);
    }
    /**
     * Get all nodes in the graph (for demonstration purposes)
     * @returns An array of all nodes
     */
    getAllNodes() {
      return Array.from(this.nodes.values());
    }
    /**
     * Helper function to recursively run input nodes and collect their results
     * @param node - The node whose inputs should be executed
     * @returns An array of results from executing the input nodes' data functions
     */
    executeInputs(node) {
      const results = [];
      for (const [inputName, inputNode] of node.inputs) {
        if (isFunctionNode(inputNode)) {
          const inputResults = this.executeInputs(inputNode);
          const result = inputNode.data ? inputNode.data(...inputResults) : void 0;
          results.push(result);
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
    /**
     * Run the graph starting from a root node
     * @param root - The root node to start execution from
     * @returns The result of executing the root node's data function
     */
    run(root) {
      const args = this.executeInputs(root);
      if (isFunctionNode(root) && typeof root.data === "function") {
        const result = root.data(...args);
        return result;
      }
      return void 0;
    }
  };

  // src/three/Object3D.ts
  function rotateX(object, angle) {
    return object.rotateX(angle);
  }
  function rotateY(object, angle) {
    return object.rotateY(angle);
  }
  function rotateZ(object, angle) {
    return object.rotateZ(angle);
  }
  function translateX(object, distance2) {
    return object.translateX(distance2);
  }
  function translateY(object, distance2) {
    return object.translateY(distance2);
  }
  function translateZ(object, distance2) {
    return object.translateZ(distance2);
  }

  // src/dsl.ts
  var dslGraph = new Graph();
  var currentScene = null;
  function setScene(scene) {
    currentScene = scene;
  }
  function sphere(radius = 1, widthSegments = 32, heightSegments = 16) {
    return new SphereGeometry(radius, widthSegments, heightSegments);
  }
  function box(width = 1, height = 1, depth2 = 1) {
    return new BoxGeometry(width, height, depth2);
  }
  function cylinder(radiusTop = 1, radiusBottom = 1, height = 1) {
    return new CylinderGeometry(radiusTop, radiusBottom, height);
  }
  function material(options = {}) {
    const defaultOptions = {
      color: 65280,
      wireframe: false
    };
    return new MeshBasicMaterial({ ...defaultOptions, ...options });
  }
  function createChainableObject(obj) {
    return {
      object: obj,
      translateX: function(distance2) {
        translateX(this.object, distance2);
        return this;
      },
      translateY: function(distance2) {
        translateY(this.object, distance2);
        return this;
      },
      translateZ: function(distance2) {
        translateZ(this.object, distance2);
        return this;
      },
      rotateX: function(angle) {
        rotateX(this.object, angle * Math.PI / 180);
        return this;
      },
      rotateY: function(angle) {
        rotateY(this.object, angle * Math.PI / 180);
        return this;
      },
      rotateZ: function(angle) {
        rotateZ(this.object, angle * Math.PI / 180);
        return this;
      },
      render: function() {
        if (currentScene) {
          currentScene.add(this.object);
        }
        return this.object;
      }
    };
  }
  function meshChainable(geometry, materialObj) {
    const meshObj = new Mesh(geometry, materialObj);
    return createChainableObject(meshObj);
  }
  var dslContext = {
    sphere,
    box,
    cylinder,
    material,
    mesh: meshChainable,
    Math,
    console
  };
  function parseDSL(code) {
    try {
      const func = new Function(...Object.keys(dslContext), `return ${code}`);
      return func(...Object.values(dslContext));
    } catch (error) {
      console.error("DSL parsing error:", error);
      return null;
    }
  }
  function executeDSL(code) {
    try {
      const result = parseDSL(code);
      return result instanceof Object3D ? result : null;
    } catch (error) {
      console.error("DSL execution error:", error);
      return null;
    }
  }

  // src/codemirror.ts
  var handleCtrlEnter = (view) => {
    const blockInfo = getBlockAtCursor(view);
    console.log("Ctrl-Enter pressed", blockInfo);
    if (blockInfo && blockInfo.block) {
      const code = blockInfo.block.trim();
      console.log("Executing DSL code:", code);
      try {
        const result = executeDSL(code);
        if (result) {
          console.log("DSL execution successful, object added to scene:", result);
        } else {
          console.log("DSL execution returned no result");
        }
      } catch (error) {
        console.error("Error executing DSL code:", error);
      }
    }
    return true;
  };
  var getBlockAtCursor = (view) => {
    const text = view.state.doc.toString();
    const cursorPos = view.state.selection.ranges[0].from;
    const blockText = getTextBlockAtPosition(text, cursorPos);
    return {
      block: blockText
    };
  };
  var globalScene = null;
  function initBackgroundScene() {
    const scene = new Scene();
    globalScene = scene;
    setScene(scene);
    const camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1e3);
    const renderer = new WebGPURenderer({ antialias: true, alpha: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0, 0.1);
    const canvas = renderer.domElement;
    canvas.style.position = "fixed";
    canvas.style.top = "0";
    canvas.style.left = "0";
    canvas.style.zIndex = "-1";
    canvas.style.pointerEvents = "none";
    document.body.insertBefore(canvas, document.body.firstChild);
    const geometry = new BoxGeometry(2, 2, 2);
    const material2 = new MeshBasicMaterial({
      color: 4473924,
      wireframe: true,
      transparent: true,
      opacity: 0.3
    });
    const cube = new Mesh(geometry, material2);
    scene.add(cube);
    camera.position.z = 5;
    function animate() {
      requestAnimationFrame(animate);
      cube.rotation.x += 5e-3;
      cube.rotation.y += 0.01;
      renderer.renderAsync(scene, camera);
    }
    window.addEventListener("resize", () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });
    animate();
  }
  function startEditor() {
    const defaultContent = `mesh(sphere(), material()).translateX(1).rotateY(45).render()

// Try pressing Ctrl+Enter on the line above!
// This will create a sphere mesh, translate it, rotate it, and add it to the scene

mesh(box(2, 1, 1), material({color: 0xff0000})).translateX(-3).render()

mesh(cylinder(), material({color: 0x0000ff, wireframe: true})).translateX(3).render()

// More examples:
// mesh(sphere(0.5), material({color: 0xffffff})).translateY(2).render()
`;
    const state = EditorState.create({
      doc: defaultContent,
      extensions: [
        basicSetup,
        javascript(),
        Prec.highest(keymap.of([{ key: "Ctrl-Enter", run: handleCtrlEnter }]))
      ]
    });
    const view = new EditorView({
      state,
      parent: document.body
    });
    document.body.style.margin = "0";
    document.body.style.backgroundColor = "transparent";
    view.dom.style.height = "100vh";
    view.dom.style.width = "100%";
    view.dom.style.display = "block";
    view.dom.style.backgroundColor = "rgba(0, 0, 0, 0.7)";
  }
  document.addEventListener("DOMContentLoaded", () => {
    initBackgroundScene();
    startEditor();
  });
})();
/*! Bundled license information:

three/build/three.core.js:
three/build/three.webgpu.js:
three/build/three.module.js:
  (**
   * @license
   * Copyright 2010-2025 Three.js Authors
   * SPDX-License-Identifier: MIT
   *)
*/
