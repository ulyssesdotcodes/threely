export interface MaterialParameters {
    alphaHash?: boolean;
    alphaTest?: number;
    alphaToCoverage?: boolean;
    blendAlpha?: number;
    blendColor?: any;
    blendDst?: any;
    blendDstAlpha?: number;
    blendEquation?: any;
    blendEquationAlpha?: number;
    blending?: any;
    blendSrc?: any;
    blendSrcAlpha?: number;
    clipIntersection?: boolean;
    clippingPlanes?: any[];
    clipShadows?: boolean;
    colorWrite?: boolean;
    defines?: any;
    depthFunc?: any;
    depthTest?: boolean;
    depthWrite?: boolean;
    name?: string;
    opacity?: number;
    polygonOffset?: boolean;
    polygonOffsetFactor?: number;
    polygonOffsetUnits?: number;
    precision?: "highp" | "mediump" | "lowp" | null;
    premultipliedAlpha?: boolean;
    forceSinglePass?: boolean;
    allowOverride?: boolean;
    dithering?: boolean;
    side?: any;
    shadowSide?: any;
    toneMapped?: boolean;
    transparent?: boolean;
    vertexColors?: boolean;
    visible?: boolean;
    format?: any;
    stencilWrite?: boolean;
    stencilFunc?: any;
    stencilRef?: number;
    stencilWriteMask?: number;
    stencilFuncMask?: number;
    stencilFail?: any;
    stencilZFail?: any;
    stencilZPass?: any;
    userData?: Record<string, any>;
}
export interface MaterialJSON {
    metadata: {
        version: number;
        type: string;
        generator: string;
    };
    uuid: string;
    type: string;
    name?: string;
    color?: number;
    roughness?: number;
    metalness?: number;
    sheen?: number;
    sheenColor?: number;
    sheenRoughness?: number;
    emissive?: number;
    emissiveIntensity?: number;
    specular?: number;
    specularIntensity?: number;
    specularColor?: number;
    shininess?: number;
    clearcoat?: number;
    clearcoatRoughness?: number;
    clearcoatMap?: string;
    clearcoatRoughnessMap?: string;
    clearcoatNormalMap?: string;
    clearcoatNormalScale?: any;
    dispersion?: number;
    iridescence?: number;
    iridescenceIOR?: number;
    iridescenceThicknessRange?: number;
    iridescenceMap?: string;
    iridescenceThicknessMap?: string;
    anisotropy?: number;
    anisotropyRotation?: number;
    anisotropyMap?: string;
    map?: string;
    matcap?: string;
    alphaMap?: string;
    lightMap?: string;
    lightMapIntensity?: number;
    aoMap?: string;
    aoMapIntensity?: number;
    bumpMap?: string;
    bumpScale?: number;
    normalMap?: string;
    normalMapType?: any;
    normalScale?: any;
    displacementMap?: string;
    displacementScale?: number;
    displacementBias?: number;
    roughnessMap?: string;
    metalnessMap?: string;
    emissiveMap?: string;
    specularMap?: string;
    specularIntensityMap?: string;
    specularColorMap?: string;
    envMap?: string;
    combine?: any;
    envMapRotation?: any;
    envMapIntensity?: number;
    reflectivity?: number;
    refractionRatio?: number;
    gradientMap?: string;
    transmission?: number;
    transmissionMap?: string;
    thickness?: number;
    thicknessMap?: string;
    attenuationDistance?: number;
    attenuationColor?: number;
    size?: number;
    shadowSide?: number;
    sizeAttenuation?: boolean;
    blending?: any;
    side?: any;
    vertexColors?: boolean;
    opacity?: number;
    transparent?: boolean;
    blendSrc?: any;
    blendDst?: any;
    blendEquation?: any;
    blendSrcAlpha?: number | null;
    blendDstAlpha?: number | null;
    blendEquationAlpha?: number | null;
    blendColor?: number;
    blendAlpha?: number;
    depthFunc?: any;
    depthTest?: boolean;
    depthWrite?: boolean;
    colorWrite?: boolean;
    stencilWriteMask?: number;
    stencilFunc?: any;
    stencilRef?: number;
    stencilFuncMask?: number;
    stencilFail?: any;
    stencilZFail?: any;
    stencilZPass?: any;
    stencilWrite?: boolean;
    rotation?: number;
    polygonOffset?: boolean;
    polygonOffsetFactor?: number;
    polygonOffsetUnits?: number;
    linewidth?: number;
    dashSize?: number;
    gapSize?: number;
    scale?: number;
    dithering?: boolean;
    alphaTest?: number;
    alphaHash?: boolean;
    alphaToCoverage?: boolean;
    premultipliedAlpha?: boolean;
    forceSinglePass?: boolean;
    wireframe?: boolean;
    wireframeLinewidth?: number;
    wireframeLinecap?: string;
    wireframeLinejoin?: string;
    flatShading?: boolean;
    visible?: boolean;
    toneMapped?: boolean;
    fog?: boolean;
    userData?: Record<string, unknown>;
    textures?: Array<any>;
    images?: any[];
}
/**
 * Functions corresponding to Material class methods
 */
export declare function onBeforeRender(renderer: any, // WebGLRenderer
scene: any, // Scene
camera: any, // Camera
geometry: any, // BufferGeometry
object: any, // Object3D
group: any): void;
export declare function onBeforeCompile(parameters: any, // WebGLProgramParametersWithUniforms
renderer: any): void;
export declare function customProgramCacheKey(): string;
export declare function setValues(values: MaterialParameters): void;
export declare function toJSON(meta?: any): MaterialJSON;
export declare function clone(): any;
export declare function copy(source: any): any;
export declare function dispose(): void;
export declare function setNeedsUpdate(value: boolean): void;
export declare function alphaHash(material: any, value: boolean): void;
export declare function alphaTest(material: any, value: number): void;
export declare function alphaToCoverage(material: any, value: boolean): void;
export declare function blendAlpha(material: any, value: number): void;
export declare function blendColor(material: any, value: any): void;
export declare function blendDst(material: any, value: any): void;
export declare function blendDstAlpha(material: any, value: number): void;
export declare function blendEquation(material: any, value: any): void;
export declare function blendEquationAlpha(material: any, value: number): void;
export declare function blending(material: any, value: any): void;
export declare function blendSrc(material: any, value: any): void;
export declare function blendSrcAlpha(material: any, value: number): void;
export declare function clipIntersection(material: any, value: boolean): void;
export declare function clippingPlanes(material: any, value: any[]): void;
export declare function clipShadows(material: any, value: boolean): void;
export declare function colorWrite(material: any, value: boolean): void;
export declare function defines(material: any, value: any): void;
export declare function depthFunc(material: any, value: any): void;
export declare function depthTest(material: any, value: boolean): void;
export declare function depthWrite(material: any, value: boolean): void;
export declare function name(material: any, value: string): void;
export declare function opacity(material: any, value: number): void;
export declare function polygonOffset(material: any, value: boolean): void;
export declare function polygonOffsetFactor(material: any, value: number): void;
export declare function polygonOffsetUnits(material: any, value: number): void;
export declare function precision(material: any, value: "highp" | "mediump" | "lowp" | null): void;
export declare function premultipliedAlpha(material: any, value: boolean): void;
export declare function forceSinglePass(material: any, value: boolean): void;
export declare function allowOverride(material: any, value: boolean): void;
export declare function dithering(material: any, value: boolean): void;
export declare function side(material: any, value: any): void;
export declare function shadowSide(material: any, value: any): void;
export declare function toneMapped(material: any, value: boolean): void;
export declare function transparent(material: any, value: boolean): void;
export declare function vertexColors(material: any, value: boolean): void;
export declare function visible(material: any, value: boolean): void;
export declare function format(material: any, value: any): void;
export declare function stencilWrite(material: any, value: boolean): void;
export declare function stencilFunc(material: any, value: any): void;
export declare function stencilRef(material: any, value: number): void;
export declare function stencilWriteMask(material: any, value: number): void;
export declare function stencilFuncMask(material: any, value: number): void;
export declare function stencilFail(material: any, value: any): void;
export declare function stencilZFail(material: any, value: any): void;
export declare function stencilZPass(material: any, value: any): void;
export declare function userData(material: any, value: Record<string, any>): void;
export declare function color(material: any, value: number): void;
export declare function roughness(material: any, value: number): void;
export declare function metalness(material: any, value: number): void;
export declare function sheen(material: any, value: number): void;
export declare function sheenColor(material: any, value: number): void;
export declare function sheenRoughness(material: any, value: number): void;
export declare function emissive(material: any, value: number): void;
export declare function emissiveIntensity(material: any, value: number): void;
export declare function specular(material: any, value: number): void;
export declare function specularIntensity(material: any, value: number): void;
export declare function specularColor(material: any, value: number): void;
export declare function shininess(material: any, value: number): void;
export declare function clearcoat(material: any, value: number): void;
export declare function clearcoatRoughness(material: any, value: number): void;
export declare function clearcoatMap(material: any, value: string): void;
export declare function clearcoatRoughnessMap(material: any, value: string): void;
export declare function clearcoatNormalMap(material: any, value: string): void;
export declare function clearcoatNormalScale(material: any, value: any): void;
export declare function dispersion(material: any, value: number): void;
export declare function iridescence(material: any, value: number): void;
export declare function iridescenceIOR(material: any, value: number): void;
export declare function iridescenceThicknessRange(material: any, value: number): void;
export declare function iridescenceMap(material: any, value: string): void;
export declare function iridescenceThicknessMap(material: any, value: string): void;
export declare function anisotropy(material: any, value: number): void;
export declare function anisotropyRotation(material: any, value: number): void;
export declare function anisotropyMap(material: any, value: string): void;
export declare function map(material: any, value: string): void;
export declare function matcap(material: any, value: string): void;
export declare function alphaMap(material: any, value: string): void;
export declare function lightMap(material: any, value: string): void;
export declare function lightMapIntensity(material: any, value: number): void;
export declare function aoMap(material: any, value: string): void;
export declare function aoMapIntensity(material: any, value: number): void;
export declare function bumpMap(material: any, value: string): void;
export declare function bumpScale(material: any, value: number): void;
export declare function normalMap(material: any, value: string): void;
export declare function normalMapType(material: any, value: any): void;
export declare function normalScale(material: any, value: any): void;
export declare function displacementMap(material: any, value: string): void;
export declare function displacementScale(material: any, value: number): void;
export declare function displacementBias(material: any, value: number): void;
export declare function roughnessMap(material: any, value: string): void;
export declare function metalnessMap(material: any, value: string): void;
export declare function emissiveMap(material: any, value: string): void;
export declare function specularMap(material: any, value: string): void;
export declare function specularIntensityMap(material: any, value: string): void;
export declare function specularColorMap(material: any, value: string): void;
export declare function envMap(material: any, value: string): void;
export declare function combine(material: any, value: any): void;
export declare function envMapRotation(material: any, value: any): void;
export declare function envMapIntensity(material: any, value: number): void;
export declare function reflectivity(material: any, value: number): void;
export declare function refractionRatio(material: any, value: number): void;
export declare function gradientMap(material: any, value: string): void;
export declare function transmission(material: any, value: number): void;
export declare function transmissionMap(material: any, value: string): void;
export declare function thickness(material: any, value: number): void;
export declare function thicknessMap(material: any, value: string): void;
export declare function attenuationDistance(material: any, value: number): void;
export declare function attenuationColor(material: any, value: number): void;
export declare function size(material: any, value: number): void;
export declare function shadowSideNumber(material: any, value: number): void;
export declare function sizeAttenuation(material: any, value: boolean): void;
export declare function rotation(material: any, value: number): void;
export declare function linewidth(material: any, value: number): void;
export declare function dashSize(material: any, value: number): void;
export declare function gapSize(material: any, value: number): void;
export declare function scale(material: any, value: number): void;
export declare function wireframe(material: any, value: boolean): void;
export declare function wireframeLinewidth(material: any, value: number): void;
export declare function wireframeLinecap(material: any, value: string): void;
export declare function wireframeLinejoin(material: any, value: string): void;
export declare function flatShading(material: any, value: boolean): void;
export declare function fog(material: any, value: boolean): void;
