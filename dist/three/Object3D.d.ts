import { Matrix4 } from "three";
import { Quaternion } from "three";
import { Vector3 } from "three";
import { Euler } from "three";
import { Object3D, Raycaster, Intersection } from "three";
export declare function applyMatrix4(object: Object3D, matrix: Matrix4): Object3D;
export declare function applyQuaternion(object: Object3D, quaternion: Quaternion): Object3D;
export declare function setRotationFromAxisAngle(object: Object3D, axis: Vector3, angle: number): Object3D;
export declare function setRotationFromEuler(object: Object3D, euler: Euler): Object3D;
export declare function setRotationFromMatrix(object: Object3D, m: Matrix4): Object3D;
export declare function setRotationFromQuaternion(object: Object3D, q: Quaternion): Object3D;
export declare function rotateOnAxis(object: Object3D, axis: Vector3, angle: number): Object3D;
export declare function rotateOnWorldAxis(object: Object3D, axis: Vector3, angle: number): Object3D;
export declare function rotateX(object: Object3D, angle: number): Object3D;
export declare function rotateY(object: Object3D, angle: number): Object3D;
export declare function rotateZ(object: Object3D, angle: number): Object3D;
export declare function translateOnAxis(object: Object3D, axis: Vector3, distance: number): Object3D;
export declare function translateX(object: Object3D, distance: number): Object3D;
export declare function translateY(object: Object3D, distance: number): Object3D;
export declare function translateZ(object: Object3D, distance: number): Object3D;
export declare function localToWorld(object: Object3D, vector: Vector3): Vector3;
export declare function worldToLocal(object: Object3D, vector: Vector3): Vector3;
export declare function lookAt(object: Object3D, vector: Vector3): void;
export declare function lookAt(object: Object3D, x: number, y: number, z: number): void;
export declare function add(object: Object3D, ...objects: Object3D[]): Object3D;
export declare function remove(object: Object3D, ...objects: Object3D[]): Object3D;
export declare function removeFromParent(object: Object3D): Object3D;
export declare function clear(object: Object3D): Object3D;
export declare function attach(object: Object3D, child: Object3D): Object3D;
export declare function getObjectById(object: Object3D, id: number): Object3D | undefined;
export declare function getObjectByName(object: Object3D, name: string): Object3D | undefined;
export declare function getObjectByProperty(object: Object3D, name: string, value: any): Object3D | undefined;
export declare function getObjectsByProperty(object: Object3D, name: string, value: any, optionalTarget?: Object3D[]): Object3D[];
export declare function getWorldPosition(object: Object3D, target: Vector3): Vector3;
export declare function getWorldQuaternion(object: Object3D, target: Quaternion): Quaternion;
export declare function getWorldScale(object: Object3D, target: Vector3): Vector3;
export declare function getWorldDirection(object: Object3D, target: Vector3): Vector3;
export declare function raycast(object: Object3D, raycaster: Raycaster, intersects: Intersection[]): Object3D;
export declare function traverse(object: Object3D, callback: (object: Object3D) => any): void;
export declare function traverseVisible(object: Object3D, callback: (object: Object3D) => any): void;
export declare function traverseAncestors(object: Object3D, callback: (object: Object3D) => any): void;
export declare function updateMatrix(object: Object3D): Object3D;
export declare function updateMatrixWorld(object: Object3D, force?: boolean): Object3D;
export declare function updateWorldMatrix(object: Object3D, updateParents: boolean, updateChildren: boolean): Object3D;
export declare function toJSON(object: Object3D): Object3D;
export declare function clone(object: Object3D, recursive?: boolean): Object3D;
export declare function copy(object: Object3D, source: Object3D, recursive?: boolean): Object3D;
